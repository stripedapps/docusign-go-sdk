/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeDocumentsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeDocumentsResult{}

// EnvelopeDocumentsResult 
type EnvelopeDocumentsResult struct {
	// An array containing information about the documents that are included in the envelope.
	EnvelopeDocuments []EnvelopeDocument `json:"envelopeDocuments,omitempty"`
	// The envelope ID.
	EnvelopeId *string `json:"envelopeId,omitempty"`
}

// NewEnvelopeDocumentsResult instantiates a new EnvelopeDocumentsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeDocumentsResult() *EnvelopeDocumentsResult {
	this := EnvelopeDocumentsResult{}
	return &this
}

// NewEnvelopeDocumentsResultWithDefaults instantiates a new EnvelopeDocumentsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeDocumentsResultWithDefaults() *EnvelopeDocumentsResult {
	this := EnvelopeDocumentsResult{}
	return &this
}

// GetEnvelopeDocuments returns the EnvelopeDocuments field value if set, zero value otherwise.
func (o *EnvelopeDocumentsResult) GetEnvelopeDocuments() []EnvelopeDocument {
	if o == nil || IsNil(o.EnvelopeDocuments) {
		var ret []EnvelopeDocument
		return ret
	}
	return o.EnvelopeDocuments
}

// GetEnvelopeDocumentsOk returns a tuple with the EnvelopeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocumentsResult) GetEnvelopeDocumentsOk() ([]EnvelopeDocument, bool) {
	if o == nil || IsNil(o.EnvelopeDocuments) {
		return nil, false
	}
	return o.EnvelopeDocuments, true
}

// HasEnvelopeDocuments returns a boolean if a field has been set.
func (o *EnvelopeDocumentsResult) HasEnvelopeDocuments() bool {
	if o != nil && !IsNil(o.EnvelopeDocuments) {
		return true
	}

	return false
}

// SetEnvelopeDocuments gets a reference to the given []EnvelopeDocument and assigns it to the EnvelopeDocuments field.
func (o *EnvelopeDocumentsResult) SetEnvelopeDocuments(v []EnvelopeDocument) {
	o.EnvelopeDocuments = v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *EnvelopeDocumentsResult) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocumentsResult) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *EnvelopeDocumentsResult) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *EnvelopeDocumentsResult) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

func (o EnvelopeDocumentsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeDocumentsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeDocuments) {
		toSerialize["envelopeDocuments"] = o.EnvelopeDocuments
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	return toSerialize, nil
}

type NullableEnvelopeDocumentsResult struct {
	value *EnvelopeDocumentsResult
	isSet bool
}

func (v NullableEnvelopeDocumentsResult) Get() *EnvelopeDocumentsResult {
	return v.value
}

func (v *NullableEnvelopeDocumentsResult) Set(val *EnvelopeDocumentsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeDocumentsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeDocumentsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeDocumentsResult(val *EnvelopeDocumentsResult) *NullableEnvelopeDocumentsResult {
	return &NullableEnvelopeDocumentsResult{value: val, isSet: true}
}

func (v NullableEnvelopeDocumentsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeDocumentsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


