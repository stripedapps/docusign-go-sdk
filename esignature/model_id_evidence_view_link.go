/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IdEvidenceViewLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdEvidenceViewLink{}

// IdEvidenceViewLink 
type IdEvidenceViewLink struct {
	// 
	ViewLink *string `json:"viewLink,omitempty"`
}

// NewIdEvidenceViewLink instantiates a new IdEvidenceViewLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdEvidenceViewLink() *IdEvidenceViewLink {
	this := IdEvidenceViewLink{}
	return &this
}

// NewIdEvidenceViewLinkWithDefaults instantiates a new IdEvidenceViewLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdEvidenceViewLinkWithDefaults() *IdEvidenceViewLink {
	this := IdEvidenceViewLink{}
	return &this
}

// GetViewLink returns the ViewLink field value if set, zero value otherwise.
func (o *IdEvidenceViewLink) GetViewLink() string {
	if o == nil || IsNil(o.ViewLink) {
		var ret string
		return ret
	}
	return *o.ViewLink
}

// GetViewLinkOk returns a tuple with the ViewLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdEvidenceViewLink) GetViewLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ViewLink) {
		return nil, false
	}
	return o.ViewLink, true
}

// HasViewLink returns a boolean if a field has been set.
func (o *IdEvidenceViewLink) HasViewLink() bool {
	if o != nil && !IsNil(o.ViewLink) {
		return true
	}

	return false
}

// SetViewLink gets a reference to the given string and assigns it to the ViewLink field.
func (o *IdEvidenceViewLink) SetViewLink(v string) {
	o.ViewLink = &v
}

func (o IdEvidenceViewLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdEvidenceViewLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ViewLink) {
		toSerialize["viewLink"] = o.ViewLink
	}
	return toSerialize, nil
}

type NullableIdEvidenceViewLink struct {
	value *IdEvidenceViewLink
	isSet bool
}

func (v NullableIdEvidenceViewLink) Get() *IdEvidenceViewLink {
	return v.value
}

func (v *NullableIdEvidenceViewLink) Set(val *IdEvidenceViewLink) {
	v.value = val
	v.isSet = true
}

func (v NullableIdEvidenceViewLink) IsSet() bool {
	return v.isSet
}

func (v *NullableIdEvidenceViewLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdEvidenceViewLink(val *IdEvidenceViewLink) *NullableIdEvidenceViewLink {
	return &NullableIdEvidenceViewLink{value: val, isSet: true}
}

func (v NullableIdEvidenceViewLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdEvidenceViewLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


