/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomTabs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomTabs{}

// CustomTabs Custom tabs
type CustomTabs struct {
	// An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
	Anchor *string `json:"anchor,omitempty"`
	// This property controls how [anchor tabs][AnchorTabs] are placed. When **true,** the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false.**  For example, when set to **true,** if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When **false,** `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.  This functionality uses the following rules:  - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:    $~><|^+=    For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`  - Strings embedded in other strings are ignored during the matching process.  - In words that have dashes, the parts separated by dashes are treated as distinct words.    Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**  - Letters with accent marks are treated as distinct characters from their unaccented counterparts.  - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.    Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.  - Unlike punctuation, numbers are not ignored when finding anchor words.    Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).  **Note:** You can only specify the value of this property in POST requests.  [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/
	AnchorCaseSensitive *string `json:"anchorCaseSensitive,omitempty"`
	// This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :  - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value. - `right`: Aligns the tab’s left side with the last character of the matching anchor word.  **Note:** You can only specify the value of this property in POST requests.  [AnchorTabs]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/ 
	AnchorHorizontalAlignment *string `json:"anchorHorizontalAlignment,omitempty"`
	// When **true,** this tab is ignored if the `anchorString` is not found in the document.
	AnchorIgnoreIfNotPresent *string `json:"anchorIgnoreIfNotPresent,omitempty"`
	// When **true,** the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false.**  For example, when set to **true,** if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When **false,** if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.  This functionality uses the following rules:  - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:    $~><|^+=    For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`  - Strings embedded in other strings are ignored during the matching process.  - In words that have dashes, the parts separated by dashes are treated as distinct words.    Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true.**  - Letters with accent marks are treated as distinct characters from their unaccented counterparts.  - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.    Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.  - Unlike punctuation, numbers are not ignored when finding anchor words.    Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).   **Note:** You can only specify the value of this property in POST requests.  [AnchorTab]: /docs/esign-rest-api/esign101/concepts/tabs/auto-place/ 
	AnchorMatchWholeWord *string `json:"anchorMatchWholeWord,omitempty"`
	// Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:  - `pixels` (default) - `inches` - `mms` - `cms` 
	AnchorUnits *string `json:"anchorUnits,omitempty"`
	// Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`. 
	AnchorXOffset *string `json:"anchorXOffset,omitempty"`
	// Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`. 
	AnchorYOffset *string `json:"anchorYOffset,omitempty"`
	// When **true,** the information in the tab is bold.
	Bold *string `json:"bold,omitempty"`
	// 
	Collaborative *string `json:"collaborative,omitempty"`
	// When **true,** the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
	ConcealValueOnDocument *string `json:"concealValueOnDocument,omitempty"`
	// The user name of the DocuSign user who created this object.
	CreatedByDisplayName *string `json:"createdByDisplayName,omitempty"`
	// The userId of the DocuSign user who created this object.
	CreatedByUserId *string `json:"createdByUserId,omitempty"`
	// The DocuSign-generated custom tab ID for the custom tab to be applied. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all of the custom tab properties.
	CustomTabId *string `json:"customTabId,omitempty"`
	// When **true,** disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
	DisableAutoSize *string `json:"disableAutoSize,omitempty"`
	// When **true,** the custom tab is editable. Otherwise the custom tab cannot be modified.
	Editable *string `json:"editable,omitempty"`
	// The font to be used for the tab value. Supported fonts include:  - Default - Arial - ArialNarrow - Calibri - CourierNew - Garamond - Georgia - Helvetica - LucidaConsole - MSGothic - MSMincho - OCR-A - Tahoma - TimesNewRoman - Trebuchet - Verdana 
	Font *string `json:"font,omitempty"`
	// The font color to use for the information in the tab. Possible values are:   - Black - BrightBlue - BrightRed - DarkGreen - DarkRed - Gold - Green - NavyBlue - Purple - White 
	FontColor *string `json:"fontColor,omitempty"`
	// The font size used for the information in the tab. Possible values are:  - Size7 - Size8 - Size9 - Size10 - Size11 - Size12 - Size14 - Size16 - Size18 - Size20 - Size22 - Size24 - Size26 - Size28 - Size36 - Size48 - Size72
	FontSize *string `json:"fontSize,omitempty"`
	// The height of the tab in pixels. Must be an integer.
	Height *string `json:"height,omitempty"`
	// When **true,** the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
	IncludedInEmail *string `json:"includedInEmail,omitempty"`
	// The original value of the tab.
	InitialValue *string `json:"initialValue,omitempty"`
	// When **true,** the information in the tab is italic.
	Italic *string `json:"italic,omitempty"`
	// If the tab is a list, this represents the values that are possible for the tab.
	Items []string `json:"items,omitempty"`
	// The UTC DateTime this object was last modified. This is in ISO 8601 format.
	LastModified *string `json:"lastModified,omitempty"`
	// The User Name of the DocuSign user who last modified this object.
	LastModifiedByDisplayName *string `json:"lastModifiedByDisplayName,omitempty"`
	// The userId of the DocuSign user who last modified this object.
	LastModifiedByUserId *string `json:"lastModifiedByUserId,omitempty"`
	LocalePolicy *LocalePolicyTab `json:"localePolicy,omitempty"`
	// When **true,** the signer cannot change the data of the custom tab.
	Locked *string `json:"locked,omitempty"`
	// The maximum number of entry characters supported by the custom tab.
	MaximumLength *string `json:"maximumLength,omitempty"`
	// 
	MaxNumericalValue *string `json:"maxNumericalValue,omitempty"`
	MergeField *MergeField `json:"mergeField,omitempty"`
	// 
	MinNumericalValue *string `json:"minNumericalValue,omitempty"`
	// The name of the custom tab.
	Name *string `json:"name,omitempty"`
	// 
	NumericalValue *string `json:"numericalValue,omitempty"`
	// If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.  Example: `SHAK1`  Maximum Length: 100 characters.
	PaymentItemCode *string `json:"paymentItemCode,omitempty"`
	// If the custom tab is for a payment request, this is the description of the item associated with the charge.  Example: `The Danish play by Shakespeare`  Maximum Length: 100 characters.
	PaymentItemDescription *string `json:"paymentItemDescription,omitempty"`
	// If the custom tab is for a payment request, this is the name of the item associated with the charge.  Maximum Length: 100 characters.  Example: `Hamlet`
	PaymentItemName *string `json:"paymentItemName,omitempty"`
	// When **true** and shared is true, information must be entered in this field to complete the envelope. 
	RequireAll *string `json:"requireAll,omitempty"`
	// When **true,** the signer is required to fill out this tab.
	Required *string `json:"required,omitempty"`
	// Optional element for field markup. When **true,** the signer is required to initial when they modify a shared field.
	RequireInitialOnSharedChange *string `json:"requireInitialOnSharedChange,omitempty"`
	// Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
	ScaleValue *string `json:"scaleValue,omitempty"`
	// When **true,** the radio button is selected.
	Selected *string `json:"selected,omitempty"`
	// When **true,** this custom tab is shared.
	Shared *string `json:"shared,omitempty"`
	// Reserved for DocuSign.
	SignatureProviderId *string `json:"signatureProviderId,omitempty"`
	// The type of stamp. Valid values are:  - `signature`: A signature image. This is the default value. - `stamp`: A stamp image. - null
	StampType *string `json:"stampType,omitempty"`
	StampTypeMetadata *PropertyMetadata `json:"stampTypeMetadata,omitempty"`
	// The label associated with the tab. This value may be an empty string. If no value is provided, the tab type is used as the value.  Maximum Length: 500 characters. 
	TabLabel *string `json:"tabLabel,omitempty"`
	// The type of this tab. Values are:  - Approve - CheckBox - Company - Date - DateSigned, Decline - Email, EmailAddress - EnvelopeId - FirstName - Formula - FullName, InitialHere - InitialHereOptional - LastName - List - Note - Number - Radio - SignerAttachment - SignHere - SignHereOptional - Ssn - Text - Title - Zip5 - Zip5Dash4 
	Type *string `json:"type,omitempty"`
	// When **true,** the information in the tab is underlined.
	Underline *string `json:"underline,omitempty"`
	// The message displayed if the custom tab fails input validation (either custom of embedded).
	ValidationMessage *string `json:"validationMessage,omitempty"`
	// A regular expression used to validate input for the tab.
	ValidationPattern *string `json:"validationPattern,omitempty"`
	// Specifies how numerical data is validated. Valid values:  - `number` - `currency` 
	ValidationType *string `json:"validationType,omitempty"`
	// The width of the tab in pixels. Must be an integer.
	Width *string `json:"width,omitempty"`
}

// NewCustomTabs instantiates a new CustomTabs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomTabs() *CustomTabs {
	this := CustomTabs{}
	return &this
}

// NewCustomTabsWithDefaults instantiates a new CustomTabs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomTabsWithDefaults() *CustomTabs {
	this := CustomTabs{}
	return &this
}

// GetAnchor returns the Anchor field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchor() string {
	if o == nil || IsNil(o.Anchor) {
		var ret string
		return ret
	}
	return *o.Anchor
}

// GetAnchorOk returns a tuple with the Anchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorOk() (*string, bool) {
	if o == nil || IsNil(o.Anchor) {
		return nil, false
	}
	return o.Anchor, true
}

// HasAnchor returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchor() bool {
	if o != nil && !IsNil(o.Anchor) {
		return true
	}

	return false
}

// SetAnchor gets a reference to the given string and assigns it to the Anchor field.
func (o *CustomTabs) SetAnchor(v string) {
	o.Anchor = &v
}

// GetAnchorCaseSensitive returns the AnchorCaseSensitive field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorCaseSensitive() string {
	if o == nil || IsNil(o.AnchorCaseSensitive) {
		var ret string
		return ret
	}
	return *o.AnchorCaseSensitive
}

// GetAnchorCaseSensitiveOk returns a tuple with the AnchorCaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorCaseSensitiveOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorCaseSensitive) {
		return nil, false
	}
	return o.AnchorCaseSensitive, true
}

// HasAnchorCaseSensitive returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorCaseSensitive() bool {
	if o != nil && !IsNil(o.AnchorCaseSensitive) {
		return true
	}

	return false
}

// SetAnchorCaseSensitive gets a reference to the given string and assigns it to the AnchorCaseSensitive field.
func (o *CustomTabs) SetAnchorCaseSensitive(v string) {
	o.AnchorCaseSensitive = &v
}

// GetAnchorHorizontalAlignment returns the AnchorHorizontalAlignment field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorHorizontalAlignment() string {
	if o == nil || IsNil(o.AnchorHorizontalAlignment) {
		var ret string
		return ret
	}
	return *o.AnchorHorizontalAlignment
}

// GetAnchorHorizontalAlignmentOk returns a tuple with the AnchorHorizontalAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorHorizontalAlignmentOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorHorizontalAlignment) {
		return nil, false
	}
	return o.AnchorHorizontalAlignment, true
}

// HasAnchorHorizontalAlignment returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorHorizontalAlignment() bool {
	if o != nil && !IsNil(o.AnchorHorizontalAlignment) {
		return true
	}

	return false
}

// SetAnchorHorizontalAlignment gets a reference to the given string and assigns it to the AnchorHorizontalAlignment field.
func (o *CustomTabs) SetAnchorHorizontalAlignment(v string) {
	o.AnchorHorizontalAlignment = &v
}

// GetAnchorIgnoreIfNotPresent returns the AnchorIgnoreIfNotPresent field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorIgnoreIfNotPresent() string {
	if o == nil || IsNil(o.AnchorIgnoreIfNotPresent) {
		var ret string
		return ret
	}
	return *o.AnchorIgnoreIfNotPresent
}

// GetAnchorIgnoreIfNotPresentOk returns a tuple with the AnchorIgnoreIfNotPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorIgnoreIfNotPresentOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorIgnoreIfNotPresent) {
		return nil, false
	}
	return o.AnchorIgnoreIfNotPresent, true
}

// HasAnchorIgnoreIfNotPresent returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorIgnoreIfNotPresent() bool {
	if o != nil && !IsNil(o.AnchorIgnoreIfNotPresent) {
		return true
	}

	return false
}

// SetAnchorIgnoreIfNotPresent gets a reference to the given string and assigns it to the AnchorIgnoreIfNotPresent field.
func (o *CustomTabs) SetAnchorIgnoreIfNotPresent(v string) {
	o.AnchorIgnoreIfNotPresent = &v
}

// GetAnchorMatchWholeWord returns the AnchorMatchWholeWord field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorMatchWholeWord() string {
	if o == nil || IsNil(o.AnchorMatchWholeWord) {
		var ret string
		return ret
	}
	return *o.AnchorMatchWholeWord
}

// GetAnchorMatchWholeWordOk returns a tuple with the AnchorMatchWholeWord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorMatchWholeWordOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorMatchWholeWord) {
		return nil, false
	}
	return o.AnchorMatchWholeWord, true
}

// HasAnchorMatchWholeWord returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorMatchWholeWord() bool {
	if o != nil && !IsNil(o.AnchorMatchWholeWord) {
		return true
	}

	return false
}

// SetAnchorMatchWholeWord gets a reference to the given string and assigns it to the AnchorMatchWholeWord field.
func (o *CustomTabs) SetAnchorMatchWholeWord(v string) {
	o.AnchorMatchWholeWord = &v
}

// GetAnchorUnits returns the AnchorUnits field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorUnits() string {
	if o == nil || IsNil(o.AnchorUnits) {
		var ret string
		return ret
	}
	return *o.AnchorUnits
}

// GetAnchorUnitsOk returns a tuple with the AnchorUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorUnits) {
		return nil, false
	}
	return o.AnchorUnits, true
}

// HasAnchorUnits returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorUnits() bool {
	if o != nil && !IsNil(o.AnchorUnits) {
		return true
	}

	return false
}

// SetAnchorUnits gets a reference to the given string and assigns it to the AnchorUnits field.
func (o *CustomTabs) SetAnchorUnits(v string) {
	o.AnchorUnits = &v
}

// GetAnchorXOffset returns the AnchorXOffset field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorXOffset() string {
	if o == nil || IsNil(o.AnchorXOffset) {
		var ret string
		return ret
	}
	return *o.AnchorXOffset
}

// GetAnchorXOffsetOk returns a tuple with the AnchorXOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorXOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorXOffset) {
		return nil, false
	}
	return o.AnchorXOffset, true
}

// HasAnchorXOffset returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorXOffset() bool {
	if o != nil && !IsNil(o.AnchorXOffset) {
		return true
	}

	return false
}

// SetAnchorXOffset gets a reference to the given string and assigns it to the AnchorXOffset field.
func (o *CustomTabs) SetAnchorXOffset(v string) {
	o.AnchorXOffset = &v
}

// GetAnchorYOffset returns the AnchorYOffset field value if set, zero value otherwise.
func (o *CustomTabs) GetAnchorYOffset() string {
	if o == nil || IsNil(o.AnchorYOffset) {
		var ret string
		return ret
	}
	return *o.AnchorYOffset
}

// GetAnchorYOffsetOk returns a tuple with the AnchorYOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetAnchorYOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorYOffset) {
		return nil, false
	}
	return o.AnchorYOffset, true
}

// HasAnchorYOffset returns a boolean if a field has been set.
func (o *CustomTabs) HasAnchorYOffset() bool {
	if o != nil && !IsNil(o.AnchorYOffset) {
		return true
	}

	return false
}

// SetAnchorYOffset gets a reference to the given string and assigns it to the AnchorYOffset field.
func (o *CustomTabs) SetAnchorYOffset(v string) {
	o.AnchorYOffset = &v
}

// GetBold returns the Bold field value if set, zero value otherwise.
func (o *CustomTabs) GetBold() string {
	if o == nil || IsNil(o.Bold) {
		var ret string
		return ret
	}
	return *o.Bold
}

// GetBoldOk returns a tuple with the Bold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetBoldOk() (*string, bool) {
	if o == nil || IsNil(o.Bold) {
		return nil, false
	}
	return o.Bold, true
}

// HasBold returns a boolean if a field has been set.
func (o *CustomTabs) HasBold() bool {
	if o != nil && !IsNil(o.Bold) {
		return true
	}

	return false
}

// SetBold gets a reference to the given string and assigns it to the Bold field.
func (o *CustomTabs) SetBold(v string) {
	o.Bold = &v
}

// GetCollaborative returns the Collaborative field value if set, zero value otherwise.
func (o *CustomTabs) GetCollaborative() string {
	if o == nil || IsNil(o.Collaborative) {
		var ret string
		return ret
	}
	return *o.Collaborative
}

// GetCollaborativeOk returns a tuple with the Collaborative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetCollaborativeOk() (*string, bool) {
	if o == nil || IsNil(o.Collaborative) {
		return nil, false
	}
	return o.Collaborative, true
}

// HasCollaborative returns a boolean if a field has been set.
func (o *CustomTabs) HasCollaborative() bool {
	if o != nil && !IsNil(o.Collaborative) {
		return true
	}

	return false
}

// SetCollaborative gets a reference to the given string and assigns it to the Collaborative field.
func (o *CustomTabs) SetCollaborative(v string) {
	o.Collaborative = &v
}

// GetConcealValueOnDocument returns the ConcealValueOnDocument field value if set, zero value otherwise.
func (o *CustomTabs) GetConcealValueOnDocument() string {
	if o == nil || IsNil(o.ConcealValueOnDocument) {
		var ret string
		return ret
	}
	return *o.ConcealValueOnDocument
}

// GetConcealValueOnDocumentOk returns a tuple with the ConcealValueOnDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetConcealValueOnDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.ConcealValueOnDocument) {
		return nil, false
	}
	return o.ConcealValueOnDocument, true
}

// HasConcealValueOnDocument returns a boolean if a field has been set.
func (o *CustomTabs) HasConcealValueOnDocument() bool {
	if o != nil && !IsNil(o.ConcealValueOnDocument) {
		return true
	}

	return false
}

// SetConcealValueOnDocument gets a reference to the given string and assigns it to the ConcealValueOnDocument field.
func (o *CustomTabs) SetConcealValueOnDocument(v string) {
	o.ConcealValueOnDocument = &v
}

// GetCreatedByDisplayName returns the CreatedByDisplayName field value if set, zero value otherwise.
func (o *CustomTabs) GetCreatedByDisplayName() string {
	if o == nil || IsNil(o.CreatedByDisplayName) {
		var ret string
		return ret
	}
	return *o.CreatedByDisplayName
}

// GetCreatedByDisplayNameOk returns a tuple with the CreatedByDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetCreatedByDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByDisplayName) {
		return nil, false
	}
	return o.CreatedByDisplayName, true
}

// HasCreatedByDisplayName returns a boolean if a field has been set.
func (o *CustomTabs) HasCreatedByDisplayName() bool {
	if o != nil && !IsNil(o.CreatedByDisplayName) {
		return true
	}

	return false
}

// SetCreatedByDisplayName gets a reference to the given string and assigns it to the CreatedByDisplayName field.
func (o *CustomTabs) SetCreatedByDisplayName(v string) {
	o.CreatedByDisplayName = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *CustomTabs) GetCreatedByUserId() string {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret string
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetCreatedByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *CustomTabs) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given string and assigns it to the CreatedByUserId field.
func (o *CustomTabs) SetCreatedByUserId(v string) {
	o.CreatedByUserId = &v
}

// GetCustomTabId returns the CustomTabId field value if set, zero value otherwise.
func (o *CustomTabs) GetCustomTabId() string {
	if o == nil || IsNil(o.CustomTabId) {
		var ret string
		return ret
	}
	return *o.CustomTabId
}

// GetCustomTabIdOk returns a tuple with the CustomTabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetCustomTabIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomTabId) {
		return nil, false
	}
	return o.CustomTabId, true
}

// HasCustomTabId returns a boolean if a field has been set.
func (o *CustomTabs) HasCustomTabId() bool {
	if o != nil && !IsNil(o.CustomTabId) {
		return true
	}

	return false
}

// SetCustomTabId gets a reference to the given string and assigns it to the CustomTabId field.
func (o *CustomTabs) SetCustomTabId(v string) {
	o.CustomTabId = &v
}

// GetDisableAutoSize returns the DisableAutoSize field value if set, zero value otherwise.
func (o *CustomTabs) GetDisableAutoSize() string {
	if o == nil || IsNil(o.DisableAutoSize) {
		var ret string
		return ret
	}
	return *o.DisableAutoSize
}

// GetDisableAutoSizeOk returns a tuple with the DisableAutoSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetDisableAutoSizeOk() (*string, bool) {
	if o == nil || IsNil(o.DisableAutoSize) {
		return nil, false
	}
	return o.DisableAutoSize, true
}

// HasDisableAutoSize returns a boolean if a field has been set.
func (o *CustomTabs) HasDisableAutoSize() bool {
	if o != nil && !IsNil(o.DisableAutoSize) {
		return true
	}

	return false
}

// SetDisableAutoSize gets a reference to the given string and assigns it to the DisableAutoSize field.
func (o *CustomTabs) SetDisableAutoSize(v string) {
	o.DisableAutoSize = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *CustomTabs) GetEditable() string {
	if o == nil || IsNil(o.Editable) {
		var ret string
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetEditableOk() (*string, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *CustomTabs) HasEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given string and assigns it to the Editable field.
func (o *CustomTabs) SetEditable(v string) {
	o.Editable = &v
}

// GetFont returns the Font field value if set, zero value otherwise.
func (o *CustomTabs) GetFont() string {
	if o == nil || IsNil(o.Font) {
		var ret string
		return ret
	}
	return *o.Font
}

// GetFontOk returns a tuple with the Font field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetFontOk() (*string, bool) {
	if o == nil || IsNil(o.Font) {
		return nil, false
	}
	return o.Font, true
}

// HasFont returns a boolean if a field has been set.
func (o *CustomTabs) HasFont() bool {
	if o != nil && !IsNil(o.Font) {
		return true
	}

	return false
}

// SetFont gets a reference to the given string and assigns it to the Font field.
func (o *CustomTabs) SetFont(v string) {
	o.Font = &v
}

// GetFontColor returns the FontColor field value if set, zero value otherwise.
func (o *CustomTabs) GetFontColor() string {
	if o == nil || IsNil(o.FontColor) {
		var ret string
		return ret
	}
	return *o.FontColor
}

// GetFontColorOk returns a tuple with the FontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetFontColorOk() (*string, bool) {
	if o == nil || IsNil(o.FontColor) {
		return nil, false
	}
	return o.FontColor, true
}

// HasFontColor returns a boolean if a field has been set.
func (o *CustomTabs) HasFontColor() bool {
	if o != nil && !IsNil(o.FontColor) {
		return true
	}

	return false
}

// SetFontColor gets a reference to the given string and assigns it to the FontColor field.
func (o *CustomTabs) SetFontColor(v string) {
	o.FontColor = &v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *CustomTabs) GetFontSize() string {
	if o == nil || IsNil(o.FontSize) {
		var ret string
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetFontSizeOk() (*string, bool) {
	if o == nil || IsNil(o.FontSize) {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *CustomTabs) HasFontSize() bool {
	if o != nil && !IsNil(o.FontSize) {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given string and assigns it to the FontSize field.
func (o *CustomTabs) SetFontSize(v string) {
	o.FontSize = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *CustomTabs) GetHeight() string {
	if o == nil || IsNil(o.Height) {
		var ret string
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetHeightOk() (*string, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *CustomTabs) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given string and assigns it to the Height field.
func (o *CustomTabs) SetHeight(v string) {
	o.Height = &v
}

// GetIncludedInEmail returns the IncludedInEmail field value if set, zero value otherwise.
func (o *CustomTabs) GetIncludedInEmail() string {
	if o == nil || IsNil(o.IncludedInEmail) {
		var ret string
		return ret
	}
	return *o.IncludedInEmail
}

// GetIncludedInEmailOk returns a tuple with the IncludedInEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetIncludedInEmailOk() (*string, bool) {
	if o == nil || IsNil(o.IncludedInEmail) {
		return nil, false
	}
	return o.IncludedInEmail, true
}

// HasIncludedInEmail returns a boolean if a field has been set.
func (o *CustomTabs) HasIncludedInEmail() bool {
	if o != nil && !IsNil(o.IncludedInEmail) {
		return true
	}

	return false
}

// SetIncludedInEmail gets a reference to the given string and assigns it to the IncludedInEmail field.
func (o *CustomTabs) SetIncludedInEmail(v string) {
	o.IncludedInEmail = &v
}

// GetInitialValue returns the InitialValue field value if set, zero value otherwise.
func (o *CustomTabs) GetInitialValue() string {
	if o == nil || IsNil(o.InitialValue) {
		var ret string
		return ret
	}
	return *o.InitialValue
}

// GetInitialValueOk returns a tuple with the InitialValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetInitialValueOk() (*string, bool) {
	if o == nil || IsNil(o.InitialValue) {
		return nil, false
	}
	return o.InitialValue, true
}

// HasInitialValue returns a boolean if a field has been set.
func (o *CustomTabs) HasInitialValue() bool {
	if o != nil && !IsNil(o.InitialValue) {
		return true
	}

	return false
}

// SetInitialValue gets a reference to the given string and assigns it to the InitialValue field.
func (o *CustomTabs) SetInitialValue(v string) {
	o.InitialValue = &v
}

// GetItalic returns the Italic field value if set, zero value otherwise.
func (o *CustomTabs) GetItalic() string {
	if o == nil || IsNil(o.Italic) {
		var ret string
		return ret
	}
	return *o.Italic
}

// GetItalicOk returns a tuple with the Italic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetItalicOk() (*string, bool) {
	if o == nil || IsNil(o.Italic) {
		return nil, false
	}
	return o.Italic, true
}

// HasItalic returns a boolean if a field has been set.
func (o *CustomTabs) HasItalic() bool {
	if o != nil && !IsNil(o.Italic) {
		return true
	}

	return false
}

// SetItalic gets a reference to the given string and assigns it to the Italic field.
func (o *CustomTabs) SetItalic(v string) {
	o.Italic = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CustomTabs) GetItems() []string {
	if o == nil || IsNil(o.Items) {
		var ret []string
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CustomTabs) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []string and assigns it to the Items field.
func (o *CustomTabs) SetItems(v []string) {
	o.Items = v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *CustomTabs) GetLastModified() string {
	if o == nil || IsNil(o.LastModified) {
		var ret string
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetLastModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *CustomTabs) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given string and assigns it to the LastModified field.
func (o *CustomTabs) SetLastModified(v string) {
	o.LastModified = &v
}

// GetLastModifiedByDisplayName returns the LastModifiedByDisplayName field value if set, zero value otherwise.
func (o *CustomTabs) GetLastModifiedByDisplayName() string {
	if o == nil || IsNil(o.LastModifiedByDisplayName) {
		var ret string
		return ret
	}
	return *o.LastModifiedByDisplayName
}

// GetLastModifiedByDisplayNameOk returns a tuple with the LastModifiedByDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetLastModifiedByDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedByDisplayName) {
		return nil, false
	}
	return o.LastModifiedByDisplayName, true
}

// HasLastModifiedByDisplayName returns a boolean if a field has been set.
func (o *CustomTabs) HasLastModifiedByDisplayName() bool {
	if o != nil && !IsNil(o.LastModifiedByDisplayName) {
		return true
	}

	return false
}

// SetLastModifiedByDisplayName gets a reference to the given string and assigns it to the LastModifiedByDisplayName field.
func (o *CustomTabs) SetLastModifiedByDisplayName(v string) {
	o.LastModifiedByDisplayName = &v
}

// GetLastModifiedByUserId returns the LastModifiedByUserId field value if set, zero value otherwise.
func (o *CustomTabs) GetLastModifiedByUserId() string {
	if o == nil || IsNil(o.LastModifiedByUserId) {
		var ret string
		return ret
	}
	return *o.LastModifiedByUserId
}

// GetLastModifiedByUserIdOk returns a tuple with the LastModifiedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetLastModifiedByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedByUserId) {
		return nil, false
	}
	return o.LastModifiedByUserId, true
}

// HasLastModifiedByUserId returns a boolean if a field has been set.
func (o *CustomTabs) HasLastModifiedByUserId() bool {
	if o != nil && !IsNil(o.LastModifiedByUserId) {
		return true
	}

	return false
}

// SetLastModifiedByUserId gets a reference to the given string and assigns it to the LastModifiedByUserId field.
func (o *CustomTabs) SetLastModifiedByUserId(v string) {
	o.LastModifiedByUserId = &v
}

// GetLocalePolicy returns the LocalePolicy field value if set, zero value otherwise.
func (o *CustomTabs) GetLocalePolicy() LocalePolicyTab {
	if o == nil || IsNil(o.LocalePolicy) {
		var ret LocalePolicyTab
		return ret
	}
	return *o.LocalePolicy
}

// GetLocalePolicyOk returns a tuple with the LocalePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetLocalePolicyOk() (*LocalePolicyTab, bool) {
	if o == nil || IsNil(o.LocalePolicy) {
		return nil, false
	}
	return o.LocalePolicy, true
}

// HasLocalePolicy returns a boolean if a field has been set.
func (o *CustomTabs) HasLocalePolicy() bool {
	if o != nil && !IsNil(o.LocalePolicy) {
		return true
	}

	return false
}

// SetLocalePolicy gets a reference to the given LocalePolicyTab and assigns it to the LocalePolicy field.
func (o *CustomTabs) SetLocalePolicy(v LocalePolicyTab) {
	o.LocalePolicy = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *CustomTabs) GetLocked() string {
	if o == nil || IsNil(o.Locked) {
		var ret string
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetLockedOk() (*string, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *CustomTabs) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given string and assigns it to the Locked field.
func (o *CustomTabs) SetLocked(v string) {
	o.Locked = &v
}

// GetMaximumLength returns the MaximumLength field value if set, zero value otherwise.
func (o *CustomTabs) GetMaximumLength() string {
	if o == nil || IsNil(o.MaximumLength) {
		var ret string
		return ret
	}
	return *o.MaximumLength
}

// GetMaximumLengthOk returns a tuple with the MaximumLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetMaximumLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumLength) {
		return nil, false
	}
	return o.MaximumLength, true
}

// HasMaximumLength returns a boolean if a field has been set.
func (o *CustomTabs) HasMaximumLength() bool {
	if o != nil && !IsNil(o.MaximumLength) {
		return true
	}

	return false
}

// SetMaximumLength gets a reference to the given string and assigns it to the MaximumLength field.
func (o *CustomTabs) SetMaximumLength(v string) {
	o.MaximumLength = &v
}

// GetMaxNumericalValue returns the MaxNumericalValue field value if set, zero value otherwise.
func (o *CustomTabs) GetMaxNumericalValue() string {
	if o == nil || IsNil(o.MaxNumericalValue) {
		var ret string
		return ret
	}
	return *o.MaxNumericalValue
}

// GetMaxNumericalValueOk returns a tuple with the MaxNumericalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetMaxNumericalValueOk() (*string, bool) {
	if o == nil || IsNil(o.MaxNumericalValue) {
		return nil, false
	}
	return o.MaxNumericalValue, true
}

// HasMaxNumericalValue returns a boolean if a field has been set.
func (o *CustomTabs) HasMaxNumericalValue() bool {
	if o != nil && !IsNil(o.MaxNumericalValue) {
		return true
	}

	return false
}

// SetMaxNumericalValue gets a reference to the given string and assigns it to the MaxNumericalValue field.
func (o *CustomTabs) SetMaxNumericalValue(v string) {
	o.MaxNumericalValue = &v
}

// GetMergeField returns the MergeField field value if set, zero value otherwise.
func (o *CustomTabs) GetMergeField() MergeField {
	if o == nil || IsNil(o.MergeField) {
		var ret MergeField
		return ret
	}
	return *o.MergeField
}

// GetMergeFieldOk returns a tuple with the MergeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetMergeFieldOk() (*MergeField, bool) {
	if o == nil || IsNil(o.MergeField) {
		return nil, false
	}
	return o.MergeField, true
}

// HasMergeField returns a boolean if a field has been set.
func (o *CustomTabs) HasMergeField() bool {
	if o != nil && !IsNil(o.MergeField) {
		return true
	}

	return false
}

// SetMergeField gets a reference to the given MergeField and assigns it to the MergeField field.
func (o *CustomTabs) SetMergeField(v MergeField) {
	o.MergeField = &v
}

// GetMinNumericalValue returns the MinNumericalValue field value if set, zero value otherwise.
func (o *CustomTabs) GetMinNumericalValue() string {
	if o == nil || IsNil(o.MinNumericalValue) {
		var ret string
		return ret
	}
	return *o.MinNumericalValue
}

// GetMinNumericalValueOk returns a tuple with the MinNumericalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetMinNumericalValueOk() (*string, bool) {
	if o == nil || IsNil(o.MinNumericalValue) {
		return nil, false
	}
	return o.MinNumericalValue, true
}

// HasMinNumericalValue returns a boolean if a field has been set.
func (o *CustomTabs) HasMinNumericalValue() bool {
	if o != nil && !IsNil(o.MinNumericalValue) {
		return true
	}

	return false
}

// SetMinNumericalValue gets a reference to the given string and assigns it to the MinNumericalValue field.
func (o *CustomTabs) SetMinNumericalValue(v string) {
	o.MinNumericalValue = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomTabs) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomTabs) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomTabs) SetName(v string) {
	o.Name = &v
}

// GetNumericalValue returns the NumericalValue field value if set, zero value otherwise.
func (o *CustomTabs) GetNumericalValue() string {
	if o == nil || IsNil(o.NumericalValue) {
		var ret string
		return ret
	}
	return *o.NumericalValue
}

// GetNumericalValueOk returns a tuple with the NumericalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetNumericalValueOk() (*string, bool) {
	if o == nil || IsNil(o.NumericalValue) {
		return nil, false
	}
	return o.NumericalValue, true
}

// HasNumericalValue returns a boolean if a field has been set.
func (o *CustomTabs) HasNumericalValue() bool {
	if o != nil && !IsNil(o.NumericalValue) {
		return true
	}

	return false
}

// SetNumericalValue gets a reference to the given string and assigns it to the NumericalValue field.
func (o *CustomTabs) SetNumericalValue(v string) {
	o.NumericalValue = &v
}

// GetPaymentItemCode returns the PaymentItemCode field value if set, zero value otherwise.
func (o *CustomTabs) GetPaymentItemCode() string {
	if o == nil || IsNil(o.PaymentItemCode) {
		var ret string
		return ret
	}
	return *o.PaymentItemCode
}

// GetPaymentItemCodeOk returns a tuple with the PaymentItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetPaymentItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentItemCode) {
		return nil, false
	}
	return o.PaymentItemCode, true
}

// HasPaymentItemCode returns a boolean if a field has been set.
func (o *CustomTabs) HasPaymentItemCode() bool {
	if o != nil && !IsNil(o.PaymentItemCode) {
		return true
	}

	return false
}

// SetPaymentItemCode gets a reference to the given string and assigns it to the PaymentItemCode field.
func (o *CustomTabs) SetPaymentItemCode(v string) {
	o.PaymentItemCode = &v
}

// GetPaymentItemDescription returns the PaymentItemDescription field value if set, zero value otherwise.
func (o *CustomTabs) GetPaymentItemDescription() string {
	if o == nil || IsNil(o.PaymentItemDescription) {
		var ret string
		return ret
	}
	return *o.PaymentItemDescription
}

// GetPaymentItemDescriptionOk returns a tuple with the PaymentItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetPaymentItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentItemDescription) {
		return nil, false
	}
	return o.PaymentItemDescription, true
}

// HasPaymentItemDescription returns a boolean if a field has been set.
func (o *CustomTabs) HasPaymentItemDescription() bool {
	if o != nil && !IsNil(o.PaymentItemDescription) {
		return true
	}

	return false
}

// SetPaymentItemDescription gets a reference to the given string and assigns it to the PaymentItemDescription field.
func (o *CustomTabs) SetPaymentItemDescription(v string) {
	o.PaymentItemDescription = &v
}

// GetPaymentItemName returns the PaymentItemName field value if set, zero value otherwise.
func (o *CustomTabs) GetPaymentItemName() string {
	if o == nil || IsNil(o.PaymentItemName) {
		var ret string
		return ret
	}
	return *o.PaymentItemName
}

// GetPaymentItemNameOk returns a tuple with the PaymentItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetPaymentItemNameOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentItemName) {
		return nil, false
	}
	return o.PaymentItemName, true
}

// HasPaymentItemName returns a boolean if a field has been set.
func (o *CustomTabs) HasPaymentItemName() bool {
	if o != nil && !IsNil(o.PaymentItemName) {
		return true
	}

	return false
}

// SetPaymentItemName gets a reference to the given string and assigns it to the PaymentItemName field.
func (o *CustomTabs) SetPaymentItemName(v string) {
	o.PaymentItemName = &v
}

// GetRequireAll returns the RequireAll field value if set, zero value otherwise.
func (o *CustomTabs) GetRequireAll() string {
	if o == nil || IsNil(o.RequireAll) {
		var ret string
		return ret
	}
	return *o.RequireAll
}

// GetRequireAllOk returns a tuple with the RequireAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetRequireAllOk() (*string, bool) {
	if o == nil || IsNil(o.RequireAll) {
		return nil, false
	}
	return o.RequireAll, true
}

// HasRequireAll returns a boolean if a field has been set.
func (o *CustomTabs) HasRequireAll() bool {
	if o != nil && !IsNil(o.RequireAll) {
		return true
	}

	return false
}

// SetRequireAll gets a reference to the given string and assigns it to the RequireAll field.
func (o *CustomTabs) SetRequireAll(v string) {
	o.RequireAll = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *CustomTabs) GetRequired() string {
	if o == nil || IsNil(o.Required) {
		var ret string
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *CustomTabs) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given string and assigns it to the Required field.
func (o *CustomTabs) SetRequired(v string) {
	o.Required = &v
}

// GetRequireInitialOnSharedChange returns the RequireInitialOnSharedChange field value if set, zero value otherwise.
func (o *CustomTabs) GetRequireInitialOnSharedChange() string {
	if o == nil || IsNil(o.RequireInitialOnSharedChange) {
		var ret string
		return ret
	}
	return *o.RequireInitialOnSharedChange
}

// GetRequireInitialOnSharedChangeOk returns a tuple with the RequireInitialOnSharedChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetRequireInitialOnSharedChangeOk() (*string, bool) {
	if o == nil || IsNil(o.RequireInitialOnSharedChange) {
		return nil, false
	}
	return o.RequireInitialOnSharedChange, true
}

// HasRequireInitialOnSharedChange returns a boolean if a field has been set.
func (o *CustomTabs) HasRequireInitialOnSharedChange() bool {
	if o != nil && !IsNil(o.RequireInitialOnSharedChange) {
		return true
	}

	return false
}

// SetRequireInitialOnSharedChange gets a reference to the given string and assigns it to the RequireInitialOnSharedChange field.
func (o *CustomTabs) SetRequireInitialOnSharedChange(v string) {
	o.RequireInitialOnSharedChange = &v
}

// GetScaleValue returns the ScaleValue field value if set, zero value otherwise.
func (o *CustomTabs) GetScaleValue() string {
	if o == nil || IsNil(o.ScaleValue) {
		var ret string
		return ret
	}
	return *o.ScaleValue
}

// GetScaleValueOk returns a tuple with the ScaleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetScaleValueOk() (*string, bool) {
	if o == nil || IsNil(o.ScaleValue) {
		return nil, false
	}
	return o.ScaleValue, true
}

// HasScaleValue returns a boolean if a field has been set.
func (o *CustomTabs) HasScaleValue() bool {
	if o != nil && !IsNil(o.ScaleValue) {
		return true
	}

	return false
}

// SetScaleValue gets a reference to the given string and assigns it to the ScaleValue field.
func (o *CustomTabs) SetScaleValue(v string) {
	o.ScaleValue = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *CustomTabs) GetSelected() string {
	if o == nil || IsNil(o.Selected) {
		var ret string
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetSelectedOk() (*string, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *CustomTabs) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given string and assigns it to the Selected field.
func (o *CustomTabs) SetSelected(v string) {
	o.Selected = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *CustomTabs) GetShared() string {
	if o == nil || IsNil(o.Shared) {
		var ret string
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetSharedOk() (*string, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *CustomTabs) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given string and assigns it to the Shared field.
func (o *CustomTabs) SetShared(v string) {
	o.Shared = &v
}

// GetSignatureProviderId returns the SignatureProviderId field value if set, zero value otherwise.
func (o *CustomTabs) GetSignatureProviderId() string {
	if o == nil || IsNil(o.SignatureProviderId) {
		var ret string
		return ret
	}
	return *o.SignatureProviderId
}

// GetSignatureProviderIdOk returns a tuple with the SignatureProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetSignatureProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureProviderId) {
		return nil, false
	}
	return o.SignatureProviderId, true
}

// HasSignatureProviderId returns a boolean if a field has been set.
func (o *CustomTabs) HasSignatureProviderId() bool {
	if o != nil && !IsNil(o.SignatureProviderId) {
		return true
	}

	return false
}

// SetSignatureProviderId gets a reference to the given string and assigns it to the SignatureProviderId field.
func (o *CustomTabs) SetSignatureProviderId(v string) {
	o.SignatureProviderId = &v
}

// GetStampType returns the StampType field value if set, zero value otherwise.
func (o *CustomTabs) GetStampType() string {
	if o == nil || IsNil(o.StampType) {
		var ret string
		return ret
	}
	return *o.StampType
}

// GetStampTypeOk returns a tuple with the StampType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetStampTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StampType) {
		return nil, false
	}
	return o.StampType, true
}

// HasStampType returns a boolean if a field has been set.
func (o *CustomTabs) HasStampType() bool {
	if o != nil && !IsNil(o.StampType) {
		return true
	}

	return false
}

// SetStampType gets a reference to the given string and assigns it to the StampType field.
func (o *CustomTabs) SetStampType(v string) {
	o.StampType = &v
}

// GetStampTypeMetadata returns the StampTypeMetadata field value if set, zero value otherwise.
func (o *CustomTabs) GetStampTypeMetadata() PropertyMetadata {
	if o == nil || IsNil(o.StampTypeMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.StampTypeMetadata
}

// GetStampTypeMetadataOk returns a tuple with the StampTypeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetStampTypeMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.StampTypeMetadata) {
		return nil, false
	}
	return o.StampTypeMetadata, true
}

// HasStampTypeMetadata returns a boolean if a field has been set.
func (o *CustomTabs) HasStampTypeMetadata() bool {
	if o != nil && !IsNil(o.StampTypeMetadata) {
		return true
	}

	return false
}

// SetStampTypeMetadata gets a reference to the given PropertyMetadata and assigns it to the StampTypeMetadata field.
func (o *CustomTabs) SetStampTypeMetadata(v PropertyMetadata) {
	o.StampTypeMetadata = &v
}

// GetTabLabel returns the TabLabel field value if set, zero value otherwise.
func (o *CustomTabs) GetTabLabel() string {
	if o == nil || IsNil(o.TabLabel) {
		var ret string
		return ret
	}
	return *o.TabLabel
}

// GetTabLabelOk returns a tuple with the TabLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetTabLabelOk() (*string, bool) {
	if o == nil || IsNil(o.TabLabel) {
		return nil, false
	}
	return o.TabLabel, true
}

// HasTabLabel returns a boolean if a field has been set.
func (o *CustomTabs) HasTabLabel() bool {
	if o != nil && !IsNil(o.TabLabel) {
		return true
	}

	return false
}

// SetTabLabel gets a reference to the given string and assigns it to the TabLabel field.
func (o *CustomTabs) SetTabLabel(v string) {
	o.TabLabel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CustomTabs) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CustomTabs) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CustomTabs) SetType(v string) {
	o.Type = &v
}

// GetUnderline returns the Underline field value if set, zero value otherwise.
func (o *CustomTabs) GetUnderline() string {
	if o == nil || IsNil(o.Underline) {
		var ret string
		return ret
	}
	return *o.Underline
}

// GetUnderlineOk returns a tuple with the Underline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetUnderlineOk() (*string, bool) {
	if o == nil || IsNil(o.Underline) {
		return nil, false
	}
	return o.Underline, true
}

// HasUnderline returns a boolean if a field has been set.
func (o *CustomTabs) HasUnderline() bool {
	if o != nil && !IsNil(o.Underline) {
		return true
	}

	return false
}

// SetUnderline gets a reference to the given string and assigns it to the Underline field.
func (o *CustomTabs) SetUnderline(v string) {
	o.Underline = &v
}

// GetValidationMessage returns the ValidationMessage field value if set, zero value otherwise.
func (o *CustomTabs) GetValidationMessage() string {
	if o == nil || IsNil(o.ValidationMessage) {
		var ret string
		return ret
	}
	return *o.ValidationMessage
}

// GetValidationMessageOk returns a tuple with the ValidationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetValidationMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationMessage) {
		return nil, false
	}
	return o.ValidationMessage, true
}

// HasValidationMessage returns a boolean if a field has been set.
func (o *CustomTabs) HasValidationMessage() bool {
	if o != nil && !IsNil(o.ValidationMessage) {
		return true
	}

	return false
}

// SetValidationMessage gets a reference to the given string and assigns it to the ValidationMessage field.
func (o *CustomTabs) SetValidationMessage(v string) {
	o.ValidationMessage = &v
}

// GetValidationPattern returns the ValidationPattern field value if set, zero value otherwise.
func (o *CustomTabs) GetValidationPattern() string {
	if o == nil || IsNil(o.ValidationPattern) {
		var ret string
		return ret
	}
	return *o.ValidationPattern
}

// GetValidationPatternOk returns a tuple with the ValidationPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetValidationPatternOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationPattern) {
		return nil, false
	}
	return o.ValidationPattern, true
}

// HasValidationPattern returns a boolean if a field has been set.
func (o *CustomTabs) HasValidationPattern() bool {
	if o != nil && !IsNil(o.ValidationPattern) {
		return true
	}

	return false
}

// SetValidationPattern gets a reference to the given string and assigns it to the ValidationPattern field.
func (o *CustomTabs) SetValidationPattern(v string) {
	o.ValidationPattern = &v
}

// GetValidationType returns the ValidationType field value if set, zero value otherwise.
func (o *CustomTabs) GetValidationType() string {
	if o == nil || IsNil(o.ValidationType) {
		var ret string
		return ret
	}
	return *o.ValidationType
}

// GetValidationTypeOk returns a tuple with the ValidationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetValidationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationType) {
		return nil, false
	}
	return o.ValidationType, true
}

// HasValidationType returns a boolean if a field has been set.
func (o *CustomTabs) HasValidationType() bool {
	if o != nil && !IsNil(o.ValidationType) {
		return true
	}

	return false
}

// SetValidationType gets a reference to the given string and assigns it to the ValidationType field.
func (o *CustomTabs) SetValidationType(v string) {
	o.ValidationType = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *CustomTabs) GetWidth() string {
	if o == nil || IsNil(o.Width) {
		var ret string
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomTabs) GetWidthOk() (*string, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *CustomTabs) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given string and assigns it to the Width field.
func (o *CustomTabs) SetWidth(v string) {
	o.Width = &v
}

func (o CustomTabs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomTabs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anchor) {
		toSerialize["anchor"] = o.Anchor
	}
	if !IsNil(o.AnchorCaseSensitive) {
		toSerialize["anchorCaseSensitive"] = o.AnchorCaseSensitive
	}
	if !IsNil(o.AnchorHorizontalAlignment) {
		toSerialize["anchorHorizontalAlignment"] = o.AnchorHorizontalAlignment
	}
	if !IsNil(o.AnchorIgnoreIfNotPresent) {
		toSerialize["anchorIgnoreIfNotPresent"] = o.AnchorIgnoreIfNotPresent
	}
	if !IsNil(o.AnchorMatchWholeWord) {
		toSerialize["anchorMatchWholeWord"] = o.AnchorMatchWholeWord
	}
	if !IsNil(o.AnchorUnits) {
		toSerialize["anchorUnits"] = o.AnchorUnits
	}
	if !IsNil(o.AnchorXOffset) {
		toSerialize["anchorXOffset"] = o.AnchorXOffset
	}
	if !IsNil(o.AnchorYOffset) {
		toSerialize["anchorYOffset"] = o.AnchorYOffset
	}
	if !IsNil(o.Bold) {
		toSerialize["bold"] = o.Bold
	}
	if !IsNil(o.Collaborative) {
		toSerialize["collaborative"] = o.Collaborative
	}
	if !IsNil(o.ConcealValueOnDocument) {
		toSerialize["concealValueOnDocument"] = o.ConcealValueOnDocument
	}
	if !IsNil(o.CreatedByDisplayName) {
		toSerialize["createdByDisplayName"] = o.CreatedByDisplayName
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	if !IsNil(o.CustomTabId) {
		toSerialize["customTabId"] = o.CustomTabId
	}
	if !IsNil(o.DisableAutoSize) {
		toSerialize["disableAutoSize"] = o.DisableAutoSize
	}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !IsNil(o.Font) {
		toSerialize["font"] = o.Font
	}
	if !IsNil(o.FontColor) {
		toSerialize["fontColor"] = o.FontColor
	}
	if !IsNil(o.FontSize) {
		toSerialize["fontSize"] = o.FontSize
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.IncludedInEmail) {
		toSerialize["includedInEmail"] = o.IncludedInEmail
	}
	if !IsNil(o.InitialValue) {
		toSerialize["initialValue"] = o.InitialValue
	}
	if !IsNil(o.Italic) {
		toSerialize["italic"] = o.Italic
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	if !IsNil(o.LastModifiedByDisplayName) {
		toSerialize["lastModifiedByDisplayName"] = o.LastModifiedByDisplayName
	}
	if !IsNil(o.LastModifiedByUserId) {
		toSerialize["lastModifiedByUserId"] = o.LastModifiedByUserId
	}
	if !IsNil(o.LocalePolicy) {
		toSerialize["localePolicy"] = o.LocalePolicy
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.MaximumLength) {
		toSerialize["maximumLength"] = o.MaximumLength
	}
	if !IsNil(o.MaxNumericalValue) {
		toSerialize["maxNumericalValue"] = o.MaxNumericalValue
	}
	if !IsNil(o.MergeField) {
		toSerialize["mergeField"] = o.MergeField
	}
	if !IsNil(o.MinNumericalValue) {
		toSerialize["minNumericalValue"] = o.MinNumericalValue
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumericalValue) {
		toSerialize["numericalValue"] = o.NumericalValue
	}
	if !IsNil(o.PaymentItemCode) {
		toSerialize["paymentItemCode"] = o.PaymentItemCode
	}
	if !IsNil(o.PaymentItemDescription) {
		toSerialize["paymentItemDescription"] = o.PaymentItemDescription
	}
	if !IsNil(o.PaymentItemName) {
		toSerialize["paymentItemName"] = o.PaymentItemName
	}
	if !IsNil(o.RequireAll) {
		toSerialize["requireAll"] = o.RequireAll
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.RequireInitialOnSharedChange) {
		toSerialize["requireInitialOnSharedChange"] = o.RequireInitialOnSharedChange
	}
	if !IsNil(o.ScaleValue) {
		toSerialize["scaleValue"] = o.ScaleValue
	}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.SignatureProviderId) {
		toSerialize["signatureProviderId"] = o.SignatureProviderId
	}
	if !IsNil(o.StampType) {
		toSerialize["stampType"] = o.StampType
	}
	if !IsNil(o.StampTypeMetadata) {
		toSerialize["stampTypeMetadata"] = o.StampTypeMetadata
	}
	if !IsNil(o.TabLabel) {
		toSerialize["tabLabel"] = o.TabLabel
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Underline) {
		toSerialize["underline"] = o.Underline
	}
	if !IsNil(o.ValidationMessage) {
		toSerialize["validationMessage"] = o.ValidationMessage
	}
	if !IsNil(o.ValidationPattern) {
		toSerialize["validationPattern"] = o.ValidationPattern
	}
	if !IsNil(o.ValidationType) {
		toSerialize["validationType"] = o.ValidationType
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullableCustomTabs struct {
	value *CustomTabs
	isSet bool
}

func (v NullableCustomTabs) Get() *CustomTabs {
	return v.value
}

func (v *NullableCustomTabs) Set(val *CustomTabs) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomTabs) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomTabs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomTabs(val *CustomTabs) *NullableCustomTabs {
	return &NullableCustomTabs{value: val, isSet: true}
}

func (v NullableCustomTabs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomTabs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


