/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Contacts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contacts{}

// Contacts The `Contacts` resource enables you to manage the contact in an account's address book.
type Contacts struct {
	// The cloud service that provided the contact. Valid values are:  - `rooms` - `docusignCore` (default)  <!-- Future:  - `Box` - `GoogleDrive` - `Dropbox` - `SalesForce` - `SkyDrive`  -->
	CloudProvider *string `json:"cloudProvider,omitempty"`
	// The ID of the container at the cloud provider. For example, this might be the room ID for a DocuSign Transaction Room.
	CloudProviderContainerId *string `json:"cloudProviderContainerId,omitempty"`
	// The ID of a contact person in the account's address book.
	ContactId *string `json:"contactId,omitempty"`
	// A list of the contact's phone numbers.  **Note:** The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:  - Sending an envelope by using SMS - Using phone authentication  You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
	ContactPhoneNumbers []ContactPhoneNumber `json:"contactPhoneNumbers,omitempty"`
	// The URI for retrieving information about the contact.
	ContactUri *string `json:"contactUri,omitempty"`
	// The email address or addresses associated with the contact.
	Emails []string `json:"emails,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// When **true,** the current user is the owner of the contact.
	IsOwner *bool `json:"isOwner,omitempty"`
	// The name of the contact.
	Name *string `json:"name,omitempty"`
	NotaryContactDetails *NotaryContactDetails `json:"notaryContactDetails,omitempty"`
	// The name of the contact's organization.
	Organization *string `json:"organization,omitempty"`
	// 
	RoomContactType *string `json:"roomContactType,omitempty"`
	// When **true,** the contact is shared. For more information, see [Shared Contacts](https://support.docusign.com/s/document-item?bundleId=jux1643235969954&topicId=twh1578456324503.html).  **Note:** The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:  - Sending an envelope by using SMS - Using phone authentication  You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
	Shared *string `json:"shared,omitempty"`
	// If the contact belongs to a signing group, this property contains the `signingGroupId`.
	SigningGroup *string `json:"signingGroup,omitempty"`
	// The name of the signing group that the contact belongs to.
	SigningGroupName *string `json:"signingGroupName,omitempty"`
}

// NewContacts instantiates a new Contacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContacts() *Contacts {
	this := Contacts{}
	return &this
}

// NewContactsWithDefaults instantiates a new Contacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactsWithDefaults() *Contacts {
	this := Contacts{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *Contacts) GetCloudProvider() string {
	if o == nil || IsNil(o.CloudProvider) {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetCloudProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProvider) {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *Contacts) HasCloudProvider() bool {
	if o != nil && !IsNil(o.CloudProvider) {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *Contacts) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetCloudProviderContainerId returns the CloudProviderContainerId field value if set, zero value otherwise.
func (o *Contacts) GetCloudProviderContainerId() string {
	if o == nil || IsNil(o.CloudProviderContainerId) {
		var ret string
		return ret
	}
	return *o.CloudProviderContainerId
}

// GetCloudProviderContainerIdOk returns a tuple with the CloudProviderContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetCloudProviderContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProviderContainerId) {
		return nil, false
	}
	return o.CloudProviderContainerId, true
}

// HasCloudProviderContainerId returns a boolean if a field has been set.
func (o *Contacts) HasCloudProviderContainerId() bool {
	if o != nil && !IsNil(o.CloudProviderContainerId) {
		return true
	}

	return false
}

// SetCloudProviderContainerId gets a reference to the given string and assigns it to the CloudProviderContainerId field.
func (o *Contacts) SetCloudProviderContainerId(v string) {
	o.CloudProviderContainerId = &v
}

// GetContactId returns the ContactId field value if set, zero value otherwise.
func (o *Contacts) GetContactId() string {
	if o == nil || IsNil(o.ContactId) {
		var ret string
		return ret
	}
	return *o.ContactId
}

// GetContactIdOk returns a tuple with the ContactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetContactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContactId) {
		return nil, false
	}
	return o.ContactId, true
}

// HasContactId returns a boolean if a field has been set.
func (o *Contacts) HasContactId() bool {
	if o != nil && !IsNil(o.ContactId) {
		return true
	}

	return false
}

// SetContactId gets a reference to the given string and assigns it to the ContactId field.
func (o *Contacts) SetContactId(v string) {
	o.ContactId = &v
}

// GetContactPhoneNumbers returns the ContactPhoneNumbers field value if set, zero value otherwise.
func (o *Contacts) GetContactPhoneNumbers() []ContactPhoneNumber {
	if o == nil || IsNil(o.ContactPhoneNumbers) {
		var ret []ContactPhoneNumber
		return ret
	}
	return o.ContactPhoneNumbers
}

// GetContactPhoneNumbersOk returns a tuple with the ContactPhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetContactPhoneNumbersOk() ([]ContactPhoneNumber, bool) {
	if o == nil || IsNil(o.ContactPhoneNumbers) {
		return nil, false
	}
	return o.ContactPhoneNumbers, true
}

// HasContactPhoneNumbers returns a boolean if a field has been set.
func (o *Contacts) HasContactPhoneNumbers() bool {
	if o != nil && !IsNil(o.ContactPhoneNumbers) {
		return true
	}

	return false
}

// SetContactPhoneNumbers gets a reference to the given []ContactPhoneNumber and assigns it to the ContactPhoneNumbers field.
func (o *Contacts) SetContactPhoneNumbers(v []ContactPhoneNumber) {
	o.ContactPhoneNumbers = v
}

// GetContactUri returns the ContactUri field value if set, zero value otherwise.
func (o *Contacts) GetContactUri() string {
	if o == nil || IsNil(o.ContactUri) {
		var ret string
		return ret
	}
	return *o.ContactUri
}

// GetContactUriOk returns a tuple with the ContactUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetContactUriOk() (*string, bool) {
	if o == nil || IsNil(o.ContactUri) {
		return nil, false
	}
	return o.ContactUri, true
}

// HasContactUri returns a boolean if a field has been set.
func (o *Contacts) HasContactUri() bool {
	if o != nil && !IsNil(o.ContactUri) {
		return true
	}

	return false
}

// SetContactUri gets a reference to the given string and assigns it to the ContactUri field.
func (o *Contacts) SetContactUri(v string) {
	o.ContactUri = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *Contacts) GetEmails() []string {
	if o == nil || IsNil(o.Emails) {
		var ret []string
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *Contacts) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *Contacts) SetEmails(v []string) {
	o.Emails = v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *Contacts) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *Contacts) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *Contacts) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise.
func (o *Contacts) GetIsOwner() bool {
	if o == nil || IsNil(o.IsOwner) {
		var ret bool
		return ret
	}
	return *o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetIsOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOwner) {
		return nil, false
	}
	return o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *Contacts) HasIsOwner() bool {
	if o != nil && !IsNil(o.IsOwner) {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given bool and assigns it to the IsOwner field.
func (o *Contacts) SetIsOwner(v bool) {
	o.IsOwner = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Contacts) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Contacts) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Contacts) SetName(v string) {
	o.Name = &v
}

// GetNotaryContactDetails returns the NotaryContactDetails field value if set, zero value otherwise.
func (o *Contacts) GetNotaryContactDetails() NotaryContactDetails {
	if o == nil || IsNil(o.NotaryContactDetails) {
		var ret NotaryContactDetails
		return ret
	}
	return *o.NotaryContactDetails
}

// GetNotaryContactDetailsOk returns a tuple with the NotaryContactDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetNotaryContactDetailsOk() (*NotaryContactDetails, bool) {
	if o == nil || IsNil(o.NotaryContactDetails) {
		return nil, false
	}
	return o.NotaryContactDetails, true
}

// HasNotaryContactDetails returns a boolean if a field has been set.
func (o *Contacts) HasNotaryContactDetails() bool {
	if o != nil && !IsNil(o.NotaryContactDetails) {
		return true
	}

	return false
}

// SetNotaryContactDetails gets a reference to the given NotaryContactDetails and assigns it to the NotaryContactDetails field.
func (o *Contacts) SetNotaryContactDetails(v NotaryContactDetails) {
	o.NotaryContactDetails = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Contacts) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Contacts) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *Contacts) SetOrganization(v string) {
	o.Organization = &v
}

// GetRoomContactType returns the RoomContactType field value if set, zero value otherwise.
func (o *Contacts) GetRoomContactType() string {
	if o == nil || IsNil(o.RoomContactType) {
		var ret string
		return ret
	}
	return *o.RoomContactType
}

// GetRoomContactTypeOk returns a tuple with the RoomContactType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetRoomContactTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomContactType) {
		return nil, false
	}
	return o.RoomContactType, true
}

// HasRoomContactType returns a boolean if a field has been set.
func (o *Contacts) HasRoomContactType() bool {
	if o != nil && !IsNil(o.RoomContactType) {
		return true
	}

	return false
}

// SetRoomContactType gets a reference to the given string and assigns it to the RoomContactType field.
func (o *Contacts) SetRoomContactType(v string) {
	o.RoomContactType = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *Contacts) GetShared() string {
	if o == nil || IsNil(o.Shared) {
		var ret string
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetSharedOk() (*string, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *Contacts) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given string and assigns it to the Shared field.
func (o *Contacts) SetShared(v string) {
	o.Shared = &v
}

// GetSigningGroup returns the SigningGroup field value if set, zero value otherwise.
func (o *Contacts) GetSigningGroup() string {
	if o == nil || IsNil(o.SigningGroup) {
		var ret string
		return ret
	}
	return *o.SigningGroup
}

// GetSigningGroupOk returns a tuple with the SigningGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetSigningGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroup) {
		return nil, false
	}
	return o.SigningGroup, true
}

// HasSigningGroup returns a boolean if a field has been set.
func (o *Contacts) HasSigningGroup() bool {
	if o != nil && !IsNil(o.SigningGroup) {
		return true
	}

	return false
}

// SetSigningGroup gets a reference to the given string and assigns it to the SigningGroup field.
func (o *Contacts) SetSigningGroup(v string) {
	o.SigningGroup = &v
}

// GetSigningGroupName returns the SigningGroupName field value if set, zero value otherwise.
func (o *Contacts) GetSigningGroupName() string {
	if o == nil || IsNil(o.SigningGroupName) {
		var ret string
		return ret
	}
	return *o.SigningGroupName
}

// GetSigningGroupNameOk returns a tuple with the SigningGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetSigningGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupName) {
		return nil, false
	}
	return o.SigningGroupName, true
}

// HasSigningGroupName returns a boolean if a field has been set.
func (o *Contacts) HasSigningGroupName() bool {
	if o != nil && !IsNil(o.SigningGroupName) {
		return true
	}

	return false
}

// SetSigningGroupName gets a reference to the given string and assigns it to the SigningGroupName field.
func (o *Contacts) SetSigningGroupName(v string) {
	o.SigningGroupName = &v
}

func (o Contacts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contacts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudProvider) {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if !IsNil(o.CloudProviderContainerId) {
		toSerialize["cloudProviderContainerId"] = o.CloudProviderContainerId
	}
	if !IsNil(o.ContactId) {
		toSerialize["contactId"] = o.ContactId
	}
	if !IsNil(o.ContactPhoneNumbers) {
		toSerialize["contactPhoneNumbers"] = o.ContactPhoneNumbers
	}
	if !IsNil(o.ContactUri) {
		toSerialize["contactUri"] = o.ContactUri
	}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.IsOwner) {
		toSerialize["isOwner"] = o.IsOwner
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotaryContactDetails) {
		toSerialize["notaryContactDetails"] = o.NotaryContactDetails
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.RoomContactType) {
		toSerialize["roomContactType"] = o.RoomContactType
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.SigningGroup) {
		toSerialize["signingGroup"] = o.SigningGroup
	}
	if !IsNil(o.SigningGroupName) {
		toSerialize["signingGroupName"] = o.SigningGroupName
	}
	return toSerialize, nil
}

type NullableContacts struct {
	value *Contacts
	isSet bool
}

func (v NullableContacts) Get() *Contacts {
	return v.value
}

func (v *NullableContacts) Set(val *Contacts) {
	v.value = val
	v.isSet = true
}

func (v NullableContacts) IsSet() bool {
	return v.isSet
}

func (v *NullableContacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContacts(val *Contacts) *NullableContacts {
	return &NullableContacts{value: val, isSet: true}
}

func (v NullableContacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


