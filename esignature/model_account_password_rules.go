/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountPasswordRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPasswordRules{}

// AccountPasswordRules Contains details about the password rules for an account.
type AccountPasswordRules struct {
	// When **true,** passwords expire. The default value is `false`.
	ExpirePassword *string `json:"expirePassword,omitempty"`
	// The number of days before passwords expire. To use this property, the `expirePassword` property must be set to **true.**
	ExpirePasswordDays *string `json:"expirePasswordDays,omitempty"`
	ExpirePasswordDaysMetadata *AccountPasswordExpirePasswordDays `json:"expirePasswordDaysMetadata,omitempty"`
	// The number of minutes a user is locked out of the system after three failed login attempts. The default value is `2`.
	LockoutDurationMinutes *string `json:"lockoutDurationMinutes,omitempty"`
	LockoutDurationMinutesMetadata *AccountPasswordLockoutDurationMinutes `json:"lockoutDurationMinutesMetadata,omitempty"`
	// The interval associated with the user lockout after a failed login attempt.  Possible values are:  - `minutes` (default) - `hours` - `days`
	LockoutDurationType *string `json:"lockoutDurationType,omitempty"`
	LockoutDurationTypeMetadata *AccountPasswordLockoutDurationType `json:"lockoutDurationTypeMetadata,omitempty"`
	// The minimum number of days after a password is set before it can be changed. This value can be `0` or more days. The default value is `0`.
	MinimumPasswordAgeDays *string `json:"minimumPasswordAgeDays,omitempty"`
	MinimumPasswordAgeDaysMetadata *AccountPasswordMinimumPasswordAgeDays `json:"minimumPasswordAgeDaysMetadata,omitempty"`
	// The minimum number of characters in the password. This value must be a number between `6` and `15`. The default value is `6`.
	MinimumPasswordLength *string `json:"minimumPasswordLength,omitempty"`
	MinimumPasswordLengthMetadata *AccountMinimumPasswordLength `json:"minimumPasswordLengthMetadata,omitempty"`
	// When **true,** passwords must include a digit. The default value is `false`.
	PasswordIncludeDigit *string `json:"passwordIncludeDigit,omitempty"`
	// When **true,** passwords must include either a digit or a special character. The default value is `false`.  **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces.
	PasswordIncludeDigitOrSpecialCharacter *string `json:"passwordIncludeDigitOrSpecialCharacter,omitempty"`
	// When **true,** passwords must include a lowercase letter. The default value is `false`.
	PasswordIncludeLowerCase *string `json:"passwordIncludeLowerCase,omitempty"`
	// When **true,** passwords must include a special character. The default value is `false`.  **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces.
	PasswordIncludeSpecialCharacter *string `json:"passwordIncludeSpecialCharacter,omitempty"`
	// When **true,** passwords must include an uppercase letter. The default value is `false`.
	PasswordIncludeUpperCase *string `json:"passwordIncludeUpperCase,omitempty"`
	// The type of password strength. Possible values are:  - `basic`: The minimum password length is 6 characters with no other password requirements. - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character. - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character. - `custom`: This option enables you to customize password requirements, including the following properties:     - `minimumPasswordLength`    - `minimumPasswordAgeDays`    - `passwordIncludeDigit`    - `passwordIncludeDigitOrSpecialCharacter`    - `passwordIncludeLowerCase`    - `passwordIncludeSpecialCharacter`    - `passwordIncludeUpperCase`    - `questionsRequired`
	PasswordStrengthType *string `json:"passwordStrengthType,omitempty"`
	PasswordStrengthTypeMetadata *AccountPasswordStrengthType `json:"passwordStrengthTypeMetadata,omitempty"`
	// The number of security questions required to confirm the userâ€™s identity before the user can reset their password. The default value is `0`.
	QuestionsRequired *string `json:"questionsRequired,omitempty"`
	QuestionsRequiredMetadata *AccountPasswordQuestionsRequired `json:"questionsRequiredMetadata,omitempty"`
}

// NewAccountPasswordRules instantiates a new AccountPasswordRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPasswordRules() *AccountPasswordRules {
	this := AccountPasswordRules{}
	return &this
}

// NewAccountPasswordRulesWithDefaults instantiates a new AccountPasswordRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPasswordRulesWithDefaults() *AccountPasswordRules {
	this := AccountPasswordRules{}
	return &this
}

// GetExpirePassword returns the ExpirePassword field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetExpirePassword() string {
	if o == nil || IsNil(o.ExpirePassword) {
		var ret string
		return ret
	}
	return *o.ExpirePassword
}

// GetExpirePasswordOk returns a tuple with the ExpirePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetExpirePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirePassword) {
		return nil, false
	}
	return o.ExpirePassword, true
}

// HasExpirePassword returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasExpirePassword() bool {
	if o != nil && !IsNil(o.ExpirePassword) {
		return true
	}

	return false
}

// SetExpirePassword gets a reference to the given string and assigns it to the ExpirePassword field.
func (o *AccountPasswordRules) SetExpirePassword(v string) {
	o.ExpirePassword = &v
}

// GetExpirePasswordDays returns the ExpirePasswordDays field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetExpirePasswordDays() string {
	if o == nil || IsNil(o.ExpirePasswordDays) {
		var ret string
		return ret
	}
	return *o.ExpirePasswordDays
}

// GetExpirePasswordDaysOk returns a tuple with the ExpirePasswordDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetExpirePasswordDaysOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirePasswordDays) {
		return nil, false
	}
	return o.ExpirePasswordDays, true
}

// HasExpirePasswordDays returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasExpirePasswordDays() bool {
	if o != nil && !IsNil(o.ExpirePasswordDays) {
		return true
	}

	return false
}

// SetExpirePasswordDays gets a reference to the given string and assigns it to the ExpirePasswordDays field.
func (o *AccountPasswordRules) SetExpirePasswordDays(v string) {
	o.ExpirePasswordDays = &v
}

// GetExpirePasswordDaysMetadata returns the ExpirePasswordDaysMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetExpirePasswordDaysMetadata() AccountPasswordExpirePasswordDays {
	if o == nil || IsNil(o.ExpirePasswordDaysMetadata) {
		var ret AccountPasswordExpirePasswordDays
		return ret
	}
	return *o.ExpirePasswordDaysMetadata
}

// GetExpirePasswordDaysMetadataOk returns a tuple with the ExpirePasswordDaysMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetExpirePasswordDaysMetadataOk() (*AccountPasswordExpirePasswordDays, bool) {
	if o == nil || IsNil(o.ExpirePasswordDaysMetadata) {
		return nil, false
	}
	return o.ExpirePasswordDaysMetadata, true
}

// HasExpirePasswordDaysMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasExpirePasswordDaysMetadata() bool {
	if o != nil && !IsNil(o.ExpirePasswordDaysMetadata) {
		return true
	}

	return false
}

// SetExpirePasswordDaysMetadata gets a reference to the given AccountPasswordExpirePasswordDays and assigns it to the ExpirePasswordDaysMetadata field.
func (o *AccountPasswordRules) SetExpirePasswordDaysMetadata(v AccountPasswordExpirePasswordDays) {
	o.ExpirePasswordDaysMetadata = &v
}

// GetLockoutDurationMinutes returns the LockoutDurationMinutes field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetLockoutDurationMinutes() string {
	if o == nil || IsNil(o.LockoutDurationMinutes) {
		var ret string
		return ret
	}
	return *o.LockoutDurationMinutes
}

// GetLockoutDurationMinutesOk returns a tuple with the LockoutDurationMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetLockoutDurationMinutesOk() (*string, bool) {
	if o == nil || IsNil(o.LockoutDurationMinutes) {
		return nil, false
	}
	return o.LockoutDurationMinutes, true
}

// HasLockoutDurationMinutes returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasLockoutDurationMinutes() bool {
	if o != nil && !IsNil(o.LockoutDurationMinutes) {
		return true
	}

	return false
}

// SetLockoutDurationMinutes gets a reference to the given string and assigns it to the LockoutDurationMinutes field.
func (o *AccountPasswordRules) SetLockoutDurationMinutes(v string) {
	o.LockoutDurationMinutes = &v
}

// GetLockoutDurationMinutesMetadata returns the LockoutDurationMinutesMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetLockoutDurationMinutesMetadata() AccountPasswordLockoutDurationMinutes {
	if o == nil || IsNil(o.LockoutDurationMinutesMetadata) {
		var ret AccountPasswordLockoutDurationMinutes
		return ret
	}
	return *o.LockoutDurationMinutesMetadata
}

// GetLockoutDurationMinutesMetadataOk returns a tuple with the LockoutDurationMinutesMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetLockoutDurationMinutesMetadataOk() (*AccountPasswordLockoutDurationMinutes, bool) {
	if o == nil || IsNil(o.LockoutDurationMinutesMetadata) {
		return nil, false
	}
	return o.LockoutDurationMinutesMetadata, true
}

// HasLockoutDurationMinutesMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasLockoutDurationMinutesMetadata() bool {
	if o != nil && !IsNil(o.LockoutDurationMinutesMetadata) {
		return true
	}

	return false
}

// SetLockoutDurationMinutesMetadata gets a reference to the given AccountPasswordLockoutDurationMinutes and assigns it to the LockoutDurationMinutesMetadata field.
func (o *AccountPasswordRules) SetLockoutDurationMinutesMetadata(v AccountPasswordLockoutDurationMinutes) {
	o.LockoutDurationMinutesMetadata = &v
}

// GetLockoutDurationType returns the LockoutDurationType field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetLockoutDurationType() string {
	if o == nil || IsNil(o.LockoutDurationType) {
		var ret string
		return ret
	}
	return *o.LockoutDurationType
}

// GetLockoutDurationTypeOk returns a tuple with the LockoutDurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetLockoutDurationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LockoutDurationType) {
		return nil, false
	}
	return o.LockoutDurationType, true
}

// HasLockoutDurationType returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasLockoutDurationType() bool {
	if o != nil && !IsNil(o.LockoutDurationType) {
		return true
	}

	return false
}

// SetLockoutDurationType gets a reference to the given string and assigns it to the LockoutDurationType field.
func (o *AccountPasswordRules) SetLockoutDurationType(v string) {
	o.LockoutDurationType = &v
}

// GetLockoutDurationTypeMetadata returns the LockoutDurationTypeMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetLockoutDurationTypeMetadata() AccountPasswordLockoutDurationType {
	if o == nil || IsNil(o.LockoutDurationTypeMetadata) {
		var ret AccountPasswordLockoutDurationType
		return ret
	}
	return *o.LockoutDurationTypeMetadata
}

// GetLockoutDurationTypeMetadataOk returns a tuple with the LockoutDurationTypeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetLockoutDurationTypeMetadataOk() (*AccountPasswordLockoutDurationType, bool) {
	if o == nil || IsNil(o.LockoutDurationTypeMetadata) {
		return nil, false
	}
	return o.LockoutDurationTypeMetadata, true
}

// HasLockoutDurationTypeMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasLockoutDurationTypeMetadata() bool {
	if o != nil && !IsNil(o.LockoutDurationTypeMetadata) {
		return true
	}

	return false
}

// SetLockoutDurationTypeMetadata gets a reference to the given AccountPasswordLockoutDurationType and assigns it to the LockoutDurationTypeMetadata field.
func (o *AccountPasswordRules) SetLockoutDurationTypeMetadata(v AccountPasswordLockoutDurationType) {
	o.LockoutDurationTypeMetadata = &v
}

// GetMinimumPasswordAgeDays returns the MinimumPasswordAgeDays field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetMinimumPasswordAgeDays() string {
	if o == nil || IsNil(o.MinimumPasswordAgeDays) {
		var ret string
		return ret
	}
	return *o.MinimumPasswordAgeDays
}

// GetMinimumPasswordAgeDaysOk returns a tuple with the MinimumPasswordAgeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetMinimumPasswordAgeDaysOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumPasswordAgeDays) {
		return nil, false
	}
	return o.MinimumPasswordAgeDays, true
}

// HasMinimumPasswordAgeDays returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasMinimumPasswordAgeDays() bool {
	if o != nil && !IsNil(o.MinimumPasswordAgeDays) {
		return true
	}

	return false
}

// SetMinimumPasswordAgeDays gets a reference to the given string and assigns it to the MinimumPasswordAgeDays field.
func (o *AccountPasswordRules) SetMinimumPasswordAgeDays(v string) {
	o.MinimumPasswordAgeDays = &v
}

// GetMinimumPasswordAgeDaysMetadata returns the MinimumPasswordAgeDaysMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetMinimumPasswordAgeDaysMetadata() AccountPasswordMinimumPasswordAgeDays {
	if o == nil || IsNil(o.MinimumPasswordAgeDaysMetadata) {
		var ret AccountPasswordMinimumPasswordAgeDays
		return ret
	}
	return *o.MinimumPasswordAgeDaysMetadata
}

// GetMinimumPasswordAgeDaysMetadataOk returns a tuple with the MinimumPasswordAgeDaysMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetMinimumPasswordAgeDaysMetadataOk() (*AccountPasswordMinimumPasswordAgeDays, bool) {
	if o == nil || IsNil(o.MinimumPasswordAgeDaysMetadata) {
		return nil, false
	}
	return o.MinimumPasswordAgeDaysMetadata, true
}

// HasMinimumPasswordAgeDaysMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasMinimumPasswordAgeDaysMetadata() bool {
	if o != nil && !IsNil(o.MinimumPasswordAgeDaysMetadata) {
		return true
	}

	return false
}

// SetMinimumPasswordAgeDaysMetadata gets a reference to the given AccountPasswordMinimumPasswordAgeDays and assigns it to the MinimumPasswordAgeDaysMetadata field.
func (o *AccountPasswordRules) SetMinimumPasswordAgeDaysMetadata(v AccountPasswordMinimumPasswordAgeDays) {
	o.MinimumPasswordAgeDaysMetadata = &v
}

// GetMinimumPasswordLength returns the MinimumPasswordLength field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetMinimumPasswordLength() string {
	if o == nil || IsNil(o.MinimumPasswordLength) {
		var ret string
		return ret
	}
	return *o.MinimumPasswordLength
}

// GetMinimumPasswordLengthOk returns a tuple with the MinimumPasswordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetMinimumPasswordLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumPasswordLength) {
		return nil, false
	}
	return o.MinimumPasswordLength, true
}

// HasMinimumPasswordLength returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasMinimumPasswordLength() bool {
	if o != nil && !IsNil(o.MinimumPasswordLength) {
		return true
	}

	return false
}

// SetMinimumPasswordLength gets a reference to the given string and assigns it to the MinimumPasswordLength field.
func (o *AccountPasswordRules) SetMinimumPasswordLength(v string) {
	o.MinimumPasswordLength = &v
}

// GetMinimumPasswordLengthMetadata returns the MinimumPasswordLengthMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetMinimumPasswordLengthMetadata() AccountMinimumPasswordLength {
	if o == nil || IsNil(o.MinimumPasswordLengthMetadata) {
		var ret AccountMinimumPasswordLength
		return ret
	}
	return *o.MinimumPasswordLengthMetadata
}

// GetMinimumPasswordLengthMetadataOk returns a tuple with the MinimumPasswordLengthMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetMinimumPasswordLengthMetadataOk() (*AccountMinimumPasswordLength, bool) {
	if o == nil || IsNil(o.MinimumPasswordLengthMetadata) {
		return nil, false
	}
	return o.MinimumPasswordLengthMetadata, true
}

// HasMinimumPasswordLengthMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasMinimumPasswordLengthMetadata() bool {
	if o != nil && !IsNil(o.MinimumPasswordLengthMetadata) {
		return true
	}

	return false
}

// SetMinimumPasswordLengthMetadata gets a reference to the given AccountMinimumPasswordLength and assigns it to the MinimumPasswordLengthMetadata field.
func (o *AccountPasswordRules) SetMinimumPasswordLengthMetadata(v AccountMinimumPasswordLength) {
	o.MinimumPasswordLengthMetadata = &v
}

// GetPasswordIncludeDigit returns the PasswordIncludeDigit field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordIncludeDigit() string {
	if o == nil || IsNil(o.PasswordIncludeDigit) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeDigit
}

// GetPasswordIncludeDigitOk returns a tuple with the PasswordIncludeDigit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordIncludeDigitOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeDigit) {
		return nil, false
	}
	return o.PasswordIncludeDigit, true
}

// HasPasswordIncludeDigit returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordIncludeDigit() bool {
	if o != nil && !IsNil(o.PasswordIncludeDigit) {
		return true
	}

	return false
}

// SetPasswordIncludeDigit gets a reference to the given string and assigns it to the PasswordIncludeDigit field.
func (o *AccountPasswordRules) SetPasswordIncludeDigit(v string) {
	o.PasswordIncludeDigit = &v
}

// GetPasswordIncludeDigitOrSpecialCharacter returns the PasswordIncludeDigitOrSpecialCharacter field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordIncludeDigitOrSpecialCharacter() string {
	if o == nil || IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeDigitOrSpecialCharacter
}

// GetPasswordIncludeDigitOrSpecialCharacterOk returns a tuple with the PasswordIncludeDigitOrSpecialCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordIncludeDigitOrSpecialCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		return nil, false
	}
	return o.PasswordIncludeDigitOrSpecialCharacter, true
}

// HasPasswordIncludeDigitOrSpecialCharacter returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordIncludeDigitOrSpecialCharacter() bool {
	if o != nil && !IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		return true
	}

	return false
}

// SetPasswordIncludeDigitOrSpecialCharacter gets a reference to the given string and assigns it to the PasswordIncludeDigitOrSpecialCharacter field.
func (o *AccountPasswordRules) SetPasswordIncludeDigitOrSpecialCharacter(v string) {
	o.PasswordIncludeDigitOrSpecialCharacter = &v
}

// GetPasswordIncludeLowerCase returns the PasswordIncludeLowerCase field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordIncludeLowerCase() string {
	if o == nil || IsNil(o.PasswordIncludeLowerCase) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeLowerCase
}

// GetPasswordIncludeLowerCaseOk returns a tuple with the PasswordIncludeLowerCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordIncludeLowerCaseOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeLowerCase) {
		return nil, false
	}
	return o.PasswordIncludeLowerCase, true
}

// HasPasswordIncludeLowerCase returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordIncludeLowerCase() bool {
	if o != nil && !IsNil(o.PasswordIncludeLowerCase) {
		return true
	}

	return false
}

// SetPasswordIncludeLowerCase gets a reference to the given string and assigns it to the PasswordIncludeLowerCase field.
func (o *AccountPasswordRules) SetPasswordIncludeLowerCase(v string) {
	o.PasswordIncludeLowerCase = &v
}

// GetPasswordIncludeSpecialCharacter returns the PasswordIncludeSpecialCharacter field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordIncludeSpecialCharacter() string {
	if o == nil || IsNil(o.PasswordIncludeSpecialCharacter) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeSpecialCharacter
}

// GetPasswordIncludeSpecialCharacterOk returns a tuple with the PasswordIncludeSpecialCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordIncludeSpecialCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeSpecialCharacter) {
		return nil, false
	}
	return o.PasswordIncludeSpecialCharacter, true
}

// HasPasswordIncludeSpecialCharacter returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordIncludeSpecialCharacter() bool {
	if o != nil && !IsNil(o.PasswordIncludeSpecialCharacter) {
		return true
	}

	return false
}

// SetPasswordIncludeSpecialCharacter gets a reference to the given string and assigns it to the PasswordIncludeSpecialCharacter field.
func (o *AccountPasswordRules) SetPasswordIncludeSpecialCharacter(v string) {
	o.PasswordIncludeSpecialCharacter = &v
}

// GetPasswordIncludeUpperCase returns the PasswordIncludeUpperCase field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordIncludeUpperCase() string {
	if o == nil || IsNil(o.PasswordIncludeUpperCase) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeUpperCase
}

// GetPasswordIncludeUpperCaseOk returns a tuple with the PasswordIncludeUpperCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordIncludeUpperCaseOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeUpperCase) {
		return nil, false
	}
	return o.PasswordIncludeUpperCase, true
}

// HasPasswordIncludeUpperCase returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordIncludeUpperCase() bool {
	if o != nil && !IsNil(o.PasswordIncludeUpperCase) {
		return true
	}

	return false
}

// SetPasswordIncludeUpperCase gets a reference to the given string and assigns it to the PasswordIncludeUpperCase field.
func (o *AccountPasswordRules) SetPasswordIncludeUpperCase(v string) {
	o.PasswordIncludeUpperCase = &v
}

// GetPasswordStrengthType returns the PasswordStrengthType field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordStrengthType() string {
	if o == nil || IsNil(o.PasswordStrengthType) {
		var ret string
		return ret
	}
	return *o.PasswordStrengthType
}

// GetPasswordStrengthTypeOk returns a tuple with the PasswordStrengthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordStrengthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordStrengthType) {
		return nil, false
	}
	return o.PasswordStrengthType, true
}

// HasPasswordStrengthType returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordStrengthType() bool {
	if o != nil && !IsNil(o.PasswordStrengthType) {
		return true
	}

	return false
}

// SetPasswordStrengthType gets a reference to the given string and assigns it to the PasswordStrengthType field.
func (o *AccountPasswordRules) SetPasswordStrengthType(v string) {
	o.PasswordStrengthType = &v
}

// GetPasswordStrengthTypeMetadata returns the PasswordStrengthTypeMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetPasswordStrengthTypeMetadata() AccountPasswordStrengthType {
	if o == nil || IsNil(o.PasswordStrengthTypeMetadata) {
		var ret AccountPasswordStrengthType
		return ret
	}
	return *o.PasswordStrengthTypeMetadata
}

// GetPasswordStrengthTypeMetadataOk returns a tuple with the PasswordStrengthTypeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetPasswordStrengthTypeMetadataOk() (*AccountPasswordStrengthType, bool) {
	if o == nil || IsNil(o.PasswordStrengthTypeMetadata) {
		return nil, false
	}
	return o.PasswordStrengthTypeMetadata, true
}

// HasPasswordStrengthTypeMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasPasswordStrengthTypeMetadata() bool {
	if o != nil && !IsNil(o.PasswordStrengthTypeMetadata) {
		return true
	}

	return false
}

// SetPasswordStrengthTypeMetadata gets a reference to the given AccountPasswordStrengthType and assigns it to the PasswordStrengthTypeMetadata field.
func (o *AccountPasswordRules) SetPasswordStrengthTypeMetadata(v AccountPasswordStrengthType) {
	o.PasswordStrengthTypeMetadata = &v
}

// GetQuestionsRequired returns the QuestionsRequired field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetQuestionsRequired() string {
	if o == nil || IsNil(o.QuestionsRequired) {
		var ret string
		return ret
	}
	return *o.QuestionsRequired
}

// GetQuestionsRequiredOk returns a tuple with the QuestionsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetQuestionsRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionsRequired) {
		return nil, false
	}
	return o.QuestionsRequired, true
}

// HasQuestionsRequired returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasQuestionsRequired() bool {
	if o != nil && !IsNil(o.QuestionsRequired) {
		return true
	}

	return false
}

// SetQuestionsRequired gets a reference to the given string and assigns it to the QuestionsRequired field.
func (o *AccountPasswordRules) SetQuestionsRequired(v string) {
	o.QuestionsRequired = &v
}

// GetQuestionsRequiredMetadata returns the QuestionsRequiredMetadata field value if set, zero value otherwise.
func (o *AccountPasswordRules) GetQuestionsRequiredMetadata() AccountPasswordQuestionsRequired {
	if o == nil || IsNil(o.QuestionsRequiredMetadata) {
		var ret AccountPasswordQuestionsRequired
		return ret
	}
	return *o.QuestionsRequiredMetadata
}

// GetQuestionsRequiredMetadataOk returns a tuple with the QuestionsRequiredMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordRules) GetQuestionsRequiredMetadataOk() (*AccountPasswordQuestionsRequired, bool) {
	if o == nil || IsNil(o.QuestionsRequiredMetadata) {
		return nil, false
	}
	return o.QuestionsRequiredMetadata, true
}

// HasQuestionsRequiredMetadata returns a boolean if a field has been set.
func (o *AccountPasswordRules) HasQuestionsRequiredMetadata() bool {
	if o != nil && !IsNil(o.QuestionsRequiredMetadata) {
		return true
	}

	return false
}

// SetQuestionsRequiredMetadata gets a reference to the given AccountPasswordQuestionsRequired and assigns it to the QuestionsRequiredMetadata field.
func (o *AccountPasswordRules) SetQuestionsRequiredMetadata(v AccountPasswordQuestionsRequired) {
	o.QuestionsRequiredMetadata = &v
}

func (o AccountPasswordRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPasswordRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirePassword) {
		toSerialize["expirePassword"] = o.ExpirePassword
	}
	if !IsNil(o.ExpirePasswordDays) {
		toSerialize["expirePasswordDays"] = o.ExpirePasswordDays
	}
	if !IsNil(o.ExpirePasswordDaysMetadata) {
		toSerialize["expirePasswordDaysMetadata"] = o.ExpirePasswordDaysMetadata
	}
	if !IsNil(o.LockoutDurationMinutes) {
		toSerialize["lockoutDurationMinutes"] = o.LockoutDurationMinutes
	}
	if !IsNil(o.LockoutDurationMinutesMetadata) {
		toSerialize["lockoutDurationMinutesMetadata"] = o.LockoutDurationMinutesMetadata
	}
	if !IsNil(o.LockoutDurationType) {
		toSerialize["lockoutDurationType"] = o.LockoutDurationType
	}
	if !IsNil(o.LockoutDurationTypeMetadata) {
		toSerialize["lockoutDurationTypeMetadata"] = o.LockoutDurationTypeMetadata
	}
	if !IsNil(o.MinimumPasswordAgeDays) {
		toSerialize["minimumPasswordAgeDays"] = o.MinimumPasswordAgeDays
	}
	if !IsNil(o.MinimumPasswordAgeDaysMetadata) {
		toSerialize["minimumPasswordAgeDaysMetadata"] = o.MinimumPasswordAgeDaysMetadata
	}
	if !IsNil(o.MinimumPasswordLength) {
		toSerialize["minimumPasswordLength"] = o.MinimumPasswordLength
	}
	if !IsNil(o.MinimumPasswordLengthMetadata) {
		toSerialize["minimumPasswordLengthMetadata"] = o.MinimumPasswordLengthMetadata
	}
	if !IsNil(o.PasswordIncludeDigit) {
		toSerialize["passwordIncludeDigit"] = o.PasswordIncludeDigit
	}
	if !IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		toSerialize["passwordIncludeDigitOrSpecialCharacter"] = o.PasswordIncludeDigitOrSpecialCharacter
	}
	if !IsNil(o.PasswordIncludeLowerCase) {
		toSerialize["passwordIncludeLowerCase"] = o.PasswordIncludeLowerCase
	}
	if !IsNil(o.PasswordIncludeSpecialCharacter) {
		toSerialize["passwordIncludeSpecialCharacter"] = o.PasswordIncludeSpecialCharacter
	}
	if !IsNil(o.PasswordIncludeUpperCase) {
		toSerialize["passwordIncludeUpperCase"] = o.PasswordIncludeUpperCase
	}
	if !IsNil(o.PasswordStrengthType) {
		toSerialize["passwordStrengthType"] = o.PasswordStrengthType
	}
	if !IsNil(o.PasswordStrengthTypeMetadata) {
		toSerialize["passwordStrengthTypeMetadata"] = o.PasswordStrengthTypeMetadata
	}
	if !IsNil(o.QuestionsRequired) {
		toSerialize["questionsRequired"] = o.QuestionsRequired
	}
	if !IsNil(o.QuestionsRequiredMetadata) {
		toSerialize["questionsRequiredMetadata"] = o.QuestionsRequiredMetadata
	}
	return toSerialize, nil
}

type NullableAccountPasswordRules struct {
	value *AccountPasswordRules
	isSet bool
}

func (v NullableAccountPasswordRules) Get() *AccountPasswordRules {
	return v.value
}

func (v *NullableAccountPasswordRules) Set(val *AccountPasswordRules) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPasswordRules) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPasswordRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPasswordRules(val *AccountPasswordRules) *NullableAccountPasswordRules {
	return &NullableAccountPasswordRules{value: val, isSet: true}
}

func (v NullableAccountPasswordRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPasswordRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


