/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SmartSectionCollapsibleDisplaySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartSectionCollapsibleDisplaySettings{}

// SmartSectionCollapsibleDisplaySettings 
type SmartSectionCollapsibleDisplaySettings struct {
	// Indicates the direction of the disclosure arrow when the collapsible section is in the closed state.  One of the following:  - `up`: In the closed state, the disclosure arrow points up. - `down`: In the closed state, the disclosure arrow points down. - `left`: In the closed state, the disclosure arrow points left. - `right`: In the closed state, the disclosure arrow points right. 
	ArrowClosed *string `json:"arrowClosed,omitempty"`
	// A CSS color value (such as `#DCF851`) that indicates the color of the arrow. 
	ArrowColor *string `json:"arrowColor,omitempty"`
	// The location of the arrow relative to the collapsible section's label. Possible values are:  - `right` (default) - `left` 
	ArrowLocation *string `json:"arrowLocation,omitempty"`
	// Indicates the direction of the disclosure arrow when the collapsible section is in the open state.  One of the following:  - `up`: In the open state, the disclosure arrow points up. - `down`: In the open state, the disclosure arrow points down. - `left`: In the open state, the disclosure arrow points left. - `right`: In the open state, the disclosure arrow points right. 
	ArrowOpen *string `json:"arrowOpen,omitempty"`
	// Indicates the size of the collapsible arrows. Possible values are:  - `small` - `large` (default) 
	ArrowSize *string `json:"arrowSize,omitempty"`
	// The name of the CSS style to be used on collapsible arrow section. 
	ArrowStyle *string `json:"arrowStyle,omitempty"`
	// The name of the CSS style to be used for the collapsible container. 
	ContainerStyle *string `json:"containerStyle,omitempty"`
	// The name of the CSS style to be used for the collapsible container's label.
	LabelStyle *string `json:"labelStyle,omitempty"`
	// When **true,** only the arrow is clickable to expand or collapse the section. When **false** (the default), both the label and the arrow are clickable.  If no arrow is used, this setting is ignored. 
	OnlyArrowIsClickable *bool `json:"onlyArrowIsClickable,omitempty"`
	// The name of the CSS style to be used for the collapsible container's outer label and arrow style.
	OuterLabelAndArrowStyle *string `json:"outerLabelAndArrowStyle,omitempty"`
}

// NewSmartSectionCollapsibleDisplaySettings instantiates a new SmartSectionCollapsibleDisplaySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartSectionCollapsibleDisplaySettings() *SmartSectionCollapsibleDisplaySettings {
	this := SmartSectionCollapsibleDisplaySettings{}
	return &this
}

// NewSmartSectionCollapsibleDisplaySettingsWithDefaults instantiates a new SmartSectionCollapsibleDisplaySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartSectionCollapsibleDisplaySettingsWithDefaults() *SmartSectionCollapsibleDisplaySettings {
	this := SmartSectionCollapsibleDisplaySettings{}
	return &this
}

// GetArrowClosed returns the ArrowClosed field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowClosed() string {
	if o == nil || IsNil(o.ArrowClosed) {
		var ret string
		return ret
	}
	return *o.ArrowClosed
}

// GetArrowClosedOk returns a tuple with the ArrowClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowClosedOk() (*string, bool) {
	if o == nil || IsNil(o.ArrowClosed) {
		return nil, false
	}
	return o.ArrowClosed, true
}

// HasArrowClosed returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasArrowClosed() bool {
	if o != nil && !IsNil(o.ArrowClosed) {
		return true
	}

	return false
}

// SetArrowClosed gets a reference to the given string and assigns it to the ArrowClosed field.
func (o *SmartSectionCollapsibleDisplaySettings) SetArrowClosed(v string) {
	o.ArrowClosed = &v
}

// GetArrowColor returns the ArrowColor field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowColor() string {
	if o == nil || IsNil(o.ArrowColor) {
		var ret string
		return ret
	}
	return *o.ArrowColor
}

// GetArrowColorOk returns a tuple with the ArrowColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowColorOk() (*string, bool) {
	if o == nil || IsNil(o.ArrowColor) {
		return nil, false
	}
	return o.ArrowColor, true
}

// HasArrowColor returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasArrowColor() bool {
	if o != nil && !IsNil(o.ArrowColor) {
		return true
	}

	return false
}

// SetArrowColor gets a reference to the given string and assigns it to the ArrowColor field.
func (o *SmartSectionCollapsibleDisplaySettings) SetArrowColor(v string) {
	o.ArrowColor = &v
}

// GetArrowLocation returns the ArrowLocation field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowLocation() string {
	if o == nil || IsNil(o.ArrowLocation) {
		var ret string
		return ret
	}
	return *o.ArrowLocation
}

// GetArrowLocationOk returns a tuple with the ArrowLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ArrowLocation) {
		return nil, false
	}
	return o.ArrowLocation, true
}

// HasArrowLocation returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasArrowLocation() bool {
	if o != nil && !IsNil(o.ArrowLocation) {
		return true
	}

	return false
}

// SetArrowLocation gets a reference to the given string and assigns it to the ArrowLocation field.
func (o *SmartSectionCollapsibleDisplaySettings) SetArrowLocation(v string) {
	o.ArrowLocation = &v
}

// GetArrowOpen returns the ArrowOpen field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowOpen() string {
	if o == nil || IsNil(o.ArrowOpen) {
		var ret string
		return ret
	}
	return *o.ArrowOpen
}

// GetArrowOpenOk returns a tuple with the ArrowOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowOpenOk() (*string, bool) {
	if o == nil || IsNil(o.ArrowOpen) {
		return nil, false
	}
	return o.ArrowOpen, true
}

// HasArrowOpen returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasArrowOpen() bool {
	if o != nil && !IsNil(o.ArrowOpen) {
		return true
	}

	return false
}

// SetArrowOpen gets a reference to the given string and assigns it to the ArrowOpen field.
func (o *SmartSectionCollapsibleDisplaySettings) SetArrowOpen(v string) {
	o.ArrowOpen = &v
}

// GetArrowSize returns the ArrowSize field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowSize() string {
	if o == nil || IsNil(o.ArrowSize) {
		var ret string
		return ret
	}
	return *o.ArrowSize
}

// GetArrowSizeOk returns a tuple with the ArrowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowSizeOk() (*string, bool) {
	if o == nil || IsNil(o.ArrowSize) {
		return nil, false
	}
	return o.ArrowSize, true
}

// HasArrowSize returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasArrowSize() bool {
	if o != nil && !IsNil(o.ArrowSize) {
		return true
	}

	return false
}

// SetArrowSize gets a reference to the given string and assigns it to the ArrowSize field.
func (o *SmartSectionCollapsibleDisplaySettings) SetArrowSize(v string) {
	o.ArrowSize = &v
}

// GetArrowStyle returns the ArrowStyle field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowStyle() string {
	if o == nil || IsNil(o.ArrowStyle) {
		var ret string
		return ret
	}
	return *o.ArrowStyle
}

// GetArrowStyleOk returns a tuple with the ArrowStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetArrowStyleOk() (*string, bool) {
	if o == nil || IsNil(o.ArrowStyle) {
		return nil, false
	}
	return o.ArrowStyle, true
}

// HasArrowStyle returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasArrowStyle() bool {
	if o != nil && !IsNil(o.ArrowStyle) {
		return true
	}

	return false
}

// SetArrowStyle gets a reference to the given string and assigns it to the ArrowStyle field.
func (o *SmartSectionCollapsibleDisplaySettings) SetArrowStyle(v string) {
	o.ArrowStyle = &v
}

// GetContainerStyle returns the ContainerStyle field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetContainerStyle() string {
	if o == nil || IsNil(o.ContainerStyle) {
		var ret string
		return ret
	}
	return *o.ContainerStyle
}

// GetContainerStyleOk returns a tuple with the ContainerStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetContainerStyleOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerStyle) {
		return nil, false
	}
	return o.ContainerStyle, true
}

// HasContainerStyle returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasContainerStyle() bool {
	if o != nil && !IsNil(o.ContainerStyle) {
		return true
	}

	return false
}

// SetContainerStyle gets a reference to the given string and assigns it to the ContainerStyle field.
func (o *SmartSectionCollapsibleDisplaySettings) SetContainerStyle(v string) {
	o.ContainerStyle = &v
}

// GetLabelStyle returns the LabelStyle field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetLabelStyle() string {
	if o == nil || IsNil(o.LabelStyle) {
		var ret string
		return ret
	}
	return *o.LabelStyle
}

// GetLabelStyleOk returns a tuple with the LabelStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetLabelStyleOk() (*string, bool) {
	if o == nil || IsNil(o.LabelStyle) {
		return nil, false
	}
	return o.LabelStyle, true
}

// HasLabelStyle returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasLabelStyle() bool {
	if o != nil && !IsNil(o.LabelStyle) {
		return true
	}

	return false
}

// SetLabelStyle gets a reference to the given string and assigns it to the LabelStyle field.
func (o *SmartSectionCollapsibleDisplaySettings) SetLabelStyle(v string) {
	o.LabelStyle = &v
}

// GetOnlyArrowIsClickable returns the OnlyArrowIsClickable field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetOnlyArrowIsClickable() bool {
	if o == nil || IsNil(o.OnlyArrowIsClickable) {
		var ret bool
		return ret
	}
	return *o.OnlyArrowIsClickable
}

// GetOnlyArrowIsClickableOk returns a tuple with the OnlyArrowIsClickable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetOnlyArrowIsClickableOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyArrowIsClickable) {
		return nil, false
	}
	return o.OnlyArrowIsClickable, true
}

// HasOnlyArrowIsClickable returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasOnlyArrowIsClickable() bool {
	if o != nil && !IsNil(o.OnlyArrowIsClickable) {
		return true
	}

	return false
}

// SetOnlyArrowIsClickable gets a reference to the given bool and assigns it to the OnlyArrowIsClickable field.
func (o *SmartSectionCollapsibleDisplaySettings) SetOnlyArrowIsClickable(v bool) {
	o.OnlyArrowIsClickable = &v
}

// GetOuterLabelAndArrowStyle returns the OuterLabelAndArrowStyle field value if set, zero value otherwise.
func (o *SmartSectionCollapsibleDisplaySettings) GetOuterLabelAndArrowStyle() string {
	if o == nil || IsNil(o.OuterLabelAndArrowStyle) {
		var ret string
		return ret
	}
	return *o.OuterLabelAndArrowStyle
}

// GetOuterLabelAndArrowStyleOk returns a tuple with the OuterLabelAndArrowStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSectionCollapsibleDisplaySettings) GetOuterLabelAndArrowStyleOk() (*string, bool) {
	if o == nil || IsNil(o.OuterLabelAndArrowStyle) {
		return nil, false
	}
	return o.OuterLabelAndArrowStyle, true
}

// HasOuterLabelAndArrowStyle returns a boolean if a field has been set.
func (o *SmartSectionCollapsibleDisplaySettings) HasOuterLabelAndArrowStyle() bool {
	if o != nil && !IsNil(o.OuterLabelAndArrowStyle) {
		return true
	}

	return false
}

// SetOuterLabelAndArrowStyle gets a reference to the given string and assigns it to the OuterLabelAndArrowStyle field.
func (o *SmartSectionCollapsibleDisplaySettings) SetOuterLabelAndArrowStyle(v string) {
	o.OuterLabelAndArrowStyle = &v
}

func (o SmartSectionCollapsibleDisplaySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartSectionCollapsibleDisplaySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArrowClosed) {
		toSerialize["arrowClosed"] = o.ArrowClosed
	}
	if !IsNil(o.ArrowColor) {
		toSerialize["arrowColor"] = o.ArrowColor
	}
	if !IsNil(o.ArrowLocation) {
		toSerialize["arrowLocation"] = o.ArrowLocation
	}
	if !IsNil(o.ArrowOpen) {
		toSerialize["arrowOpen"] = o.ArrowOpen
	}
	if !IsNil(o.ArrowSize) {
		toSerialize["arrowSize"] = o.ArrowSize
	}
	if !IsNil(o.ArrowStyle) {
		toSerialize["arrowStyle"] = o.ArrowStyle
	}
	if !IsNil(o.ContainerStyle) {
		toSerialize["containerStyle"] = o.ContainerStyle
	}
	if !IsNil(o.LabelStyle) {
		toSerialize["labelStyle"] = o.LabelStyle
	}
	if !IsNil(o.OnlyArrowIsClickable) {
		toSerialize["onlyArrowIsClickable"] = o.OnlyArrowIsClickable
	}
	if !IsNil(o.OuterLabelAndArrowStyle) {
		toSerialize["outerLabelAndArrowStyle"] = o.OuterLabelAndArrowStyle
	}
	return toSerialize, nil
}

type NullableSmartSectionCollapsibleDisplaySettings struct {
	value *SmartSectionCollapsibleDisplaySettings
	isSet bool
}

func (v NullableSmartSectionCollapsibleDisplaySettings) Get() *SmartSectionCollapsibleDisplaySettings {
	return v.value
}

func (v *NullableSmartSectionCollapsibleDisplaySettings) Set(val *SmartSectionCollapsibleDisplaySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartSectionCollapsibleDisplaySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartSectionCollapsibleDisplaySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartSectionCollapsibleDisplaySettings(val *SmartSectionCollapsibleDisplaySettings) *NullableSmartSectionCollapsibleDisplaySettings {
	return &NullableSmartSectionCollapsibleDisplaySettings{value: val, isSet: true}
}

func (v NullableSmartSectionCollapsibleDisplaySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartSectionCollapsibleDisplaySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


