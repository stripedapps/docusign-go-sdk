/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Province type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Province{}

// Province 
type Province struct {
	// 
	IsoCode *string `json:"isoCode,omitempty"`
	// 
	Name *string `json:"name,omitempty"`
}

// NewProvince instantiates a new Province object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvince() *Province {
	this := Province{}
	return &this
}

// NewProvinceWithDefaults instantiates a new Province object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvinceWithDefaults() *Province {
	this := Province{}
	return &this
}

// GetIsoCode returns the IsoCode field value if set, zero value otherwise.
func (o *Province) GetIsoCode() string {
	if o == nil || IsNil(o.IsoCode) {
		var ret string
		return ret
	}
	return *o.IsoCode
}

// GetIsoCodeOk returns a tuple with the IsoCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Province) GetIsoCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IsoCode) {
		return nil, false
	}
	return o.IsoCode, true
}

// HasIsoCode returns a boolean if a field has been set.
func (o *Province) HasIsoCode() bool {
	if o != nil && !IsNil(o.IsoCode) {
		return true
	}

	return false
}

// SetIsoCode gets a reference to the given string and assigns it to the IsoCode field.
func (o *Province) SetIsoCode(v string) {
	o.IsoCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Province) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Province) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Province) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Province) SetName(v string) {
	o.Name = &v
}

func (o Province) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Province) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsoCode) {
		toSerialize["isoCode"] = o.IsoCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableProvince struct {
	value *Province
	isSet bool
}

func (v NullableProvince) Get() *Province {
	return v.value
}

func (v *NullableProvince) Set(val *Province) {
	v.value = val
	v.isSet = true
}

func (v NullableProvince) IsSet() bool {
	return v.isSet
}

func (v *NullableProvince) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvince(val *Province) *NullableProvince {
	return &NullableProvince{value: val, isSet: true}
}

func (v NullableProvince) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvince) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


