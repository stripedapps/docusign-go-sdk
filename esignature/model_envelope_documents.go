/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeDocuments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeDocuments{}

// EnvelopeDocuments Envelope documents
type EnvelopeDocuments struct {
	// An array of document objects.
	EnvelopeDocuments []EnvelopeDocument `json:"envelopeDocuments,omitempty"`
	// The envelope ID of the envelope status that failed to post.
	EnvelopeId *string `json:"envelopeId,omitempty"`
}

// NewEnvelopeDocuments instantiates a new EnvelopeDocuments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeDocuments() *EnvelopeDocuments {
	this := EnvelopeDocuments{}
	return &this
}

// NewEnvelopeDocumentsWithDefaults instantiates a new EnvelopeDocuments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeDocumentsWithDefaults() *EnvelopeDocuments {
	this := EnvelopeDocuments{}
	return &this
}

// GetEnvelopeDocuments returns the EnvelopeDocuments field value if set, zero value otherwise.
func (o *EnvelopeDocuments) GetEnvelopeDocuments() []EnvelopeDocument {
	if o == nil || IsNil(o.EnvelopeDocuments) {
		var ret []EnvelopeDocument
		return ret
	}
	return o.EnvelopeDocuments
}

// GetEnvelopeDocumentsOk returns a tuple with the EnvelopeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocuments) GetEnvelopeDocumentsOk() ([]EnvelopeDocument, bool) {
	if o == nil || IsNil(o.EnvelopeDocuments) {
		return nil, false
	}
	return o.EnvelopeDocuments, true
}

// HasEnvelopeDocuments returns a boolean if a field has been set.
func (o *EnvelopeDocuments) HasEnvelopeDocuments() bool {
	if o != nil && !IsNil(o.EnvelopeDocuments) {
		return true
	}

	return false
}

// SetEnvelopeDocuments gets a reference to the given []EnvelopeDocument and assigns it to the EnvelopeDocuments field.
func (o *EnvelopeDocuments) SetEnvelopeDocuments(v []EnvelopeDocument) {
	o.EnvelopeDocuments = v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *EnvelopeDocuments) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocuments) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *EnvelopeDocuments) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *EnvelopeDocuments) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

func (o EnvelopeDocuments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeDocuments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeDocuments) {
		toSerialize["envelopeDocuments"] = o.EnvelopeDocuments
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	return toSerialize, nil
}

type NullableEnvelopeDocuments struct {
	value *EnvelopeDocuments
	isSet bool
}

func (v NullableEnvelopeDocuments) Get() *EnvelopeDocuments {
	return v.value
}

func (v *NullableEnvelopeDocuments) Set(val *EnvelopeDocuments) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeDocuments) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeDocuments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeDocuments(val *EnvelopeDocuments) *NullableEnvelopeDocuments {
	return &NullableEnvelopeDocuments{value: val, isSet: true}
}

func (v NullableEnvelopeDocuments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeDocuments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


