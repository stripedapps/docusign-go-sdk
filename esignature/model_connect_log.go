/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectLog{}

// ConnectLog Contains information about a Connect log entry.
type ConnectLog struct {
	// The account ID associated with the envelope.
	AccountId *string `json:"accountId,omitempty"`
	// The web address of the listener or retrieving service endpoint for Connect.
	ConfigUrl *string `json:"configUrl,omitempty"`
	// A complex element containing information about the Connect configuration, error details, date/time, description and payload. This information is included in the response only when the `additional_info` query is set to **true.** This additional information is only available when retrieving general logs with [ConnectEvents:get](/docs/esign-rest-api/reference/connect/connectevents/get/), but not when retrieving failure logs with [ConnectEvents:listFailures](/docs/esign-rest-api/reference/connect/connectevents/listfailures/).
	ConnectDebugLog []ConnectDebugLog `json:"connectDebugLog,omitempty"`
	// The ID of the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post.
	ConnectId *string `json:"connectId,omitempty"`
	// The UTC DateTime when the Connect post was created.
	Created *string `json:"created,omitempty"`
	// The email address of the envelope sender.
	Email *string `json:"email,omitempty"`
	// The ID of the envelope that failed to post.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// The error that caused the Connect post to fail.
	Error *string `json:"error,omitempty"`
	// The failure log ID for the failure.
	FailureId *string `json:"failureId,omitempty"`
	// The URI for the Connect post failure.
	FailureUri *string `json:"failureUri,omitempty"`
	// The UTC DateTime of the last attempt to post.
	LastTry *string `json:"lastTry,omitempty"`
	// The Connect log ID for the entry.
	LogId *string `json:"logId,omitempty"`
	// The URI for the Connect log entry.
	LogUri *string `json:"logUri,omitempty"`
	// The number of times the Connect post has been retried.
	RetryCount *string `json:"retryCount,omitempty"`
	// A URI that you can use to retry to publish the Connect post.
	RetryUri *string `json:"retryUri,omitempty"`
	// The envelope status for the Connect post. Possible values are: - `Any` - `Voided` - `Created` - `Deleted` - `Sent` - `Delivered` - `Signed` - `Completed` - `Declined` - `TimedOut` - `Template` - `Processing`  For details about these statuses, see [Envelope Status Code Descriptions](/docs/esign-rest-api/esign101/rules-and-limits/responses/).
	Status *string `json:"status,omitempty"`
	// The subject of the envelope.
	Subject *string `json:"subject,omitempty"`
	// The name of the sender of the envelope.
	UserName *string `json:"userName,omitempty"`
}

// NewConnectLog instantiates a new ConnectLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectLog() *ConnectLog {
	this := ConnectLog{}
	return &this
}

// NewConnectLogWithDefaults instantiates a new ConnectLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectLogWithDefaults() *ConnectLog {
	this := ConnectLog{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ConnectLog) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ConnectLog) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *ConnectLog) SetAccountId(v string) {
	o.AccountId = &v
}

// GetConfigUrl returns the ConfigUrl field value if set, zero value otherwise.
func (o *ConnectLog) GetConfigUrl() string {
	if o == nil || IsNil(o.ConfigUrl) {
		var ret string
		return ret
	}
	return *o.ConfigUrl
}

// GetConfigUrlOk returns a tuple with the ConfigUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetConfigUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigUrl) {
		return nil, false
	}
	return o.ConfigUrl, true
}

// HasConfigUrl returns a boolean if a field has been set.
func (o *ConnectLog) HasConfigUrl() bool {
	if o != nil && !IsNil(o.ConfigUrl) {
		return true
	}

	return false
}

// SetConfigUrl gets a reference to the given string and assigns it to the ConfigUrl field.
func (o *ConnectLog) SetConfigUrl(v string) {
	o.ConfigUrl = &v
}

// GetConnectDebugLog returns the ConnectDebugLog field value if set, zero value otherwise.
func (o *ConnectLog) GetConnectDebugLog() []ConnectDebugLog {
	if o == nil || IsNil(o.ConnectDebugLog) {
		var ret []ConnectDebugLog
		return ret
	}
	return o.ConnectDebugLog
}

// GetConnectDebugLogOk returns a tuple with the ConnectDebugLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetConnectDebugLogOk() ([]ConnectDebugLog, bool) {
	if o == nil || IsNil(o.ConnectDebugLog) {
		return nil, false
	}
	return o.ConnectDebugLog, true
}

// HasConnectDebugLog returns a boolean if a field has been set.
func (o *ConnectLog) HasConnectDebugLog() bool {
	if o != nil && !IsNil(o.ConnectDebugLog) {
		return true
	}

	return false
}

// SetConnectDebugLog gets a reference to the given []ConnectDebugLog and assigns it to the ConnectDebugLog field.
func (o *ConnectLog) SetConnectDebugLog(v []ConnectDebugLog) {
	o.ConnectDebugLog = v
}

// GetConnectId returns the ConnectId field value if set, zero value otherwise.
func (o *ConnectLog) GetConnectId() string {
	if o == nil || IsNil(o.ConnectId) {
		var ret string
		return ret
	}
	return *o.ConnectId
}

// GetConnectIdOk returns a tuple with the ConnectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetConnectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectId) {
		return nil, false
	}
	return o.ConnectId, true
}

// HasConnectId returns a boolean if a field has been set.
func (o *ConnectLog) HasConnectId() bool {
	if o != nil && !IsNil(o.ConnectId) {
		return true
	}

	return false
}

// SetConnectId gets a reference to the given string and assigns it to the ConnectId field.
func (o *ConnectLog) SetConnectId(v string) {
	o.ConnectId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ConnectLog) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ConnectLog) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ConnectLog) SetCreated(v string) {
	o.Created = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ConnectLog) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ConnectLog) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ConnectLog) SetEmail(v string) {
	o.Email = &v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *ConnectLog) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *ConnectLog) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *ConnectLog) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ConnectLog) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ConnectLog) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ConnectLog) SetError(v string) {
	o.Error = &v
}

// GetFailureId returns the FailureId field value if set, zero value otherwise.
func (o *ConnectLog) GetFailureId() string {
	if o == nil || IsNil(o.FailureId) {
		var ret string
		return ret
	}
	return *o.FailureId
}

// GetFailureIdOk returns a tuple with the FailureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetFailureIdOk() (*string, bool) {
	if o == nil || IsNil(o.FailureId) {
		return nil, false
	}
	return o.FailureId, true
}

// HasFailureId returns a boolean if a field has been set.
func (o *ConnectLog) HasFailureId() bool {
	if o != nil && !IsNil(o.FailureId) {
		return true
	}

	return false
}

// SetFailureId gets a reference to the given string and assigns it to the FailureId field.
func (o *ConnectLog) SetFailureId(v string) {
	o.FailureId = &v
}

// GetFailureUri returns the FailureUri field value if set, zero value otherwise.
func (o *ConnectLog) GetFailureUri() string {
	if o == nil || IsNil(o.FailureUri) {
		var ret string
		return ret
	}
	return *o.FailureUri
}

// GetFailureUriOk returns a tuple with the FailureUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetFailureUriOk() (*string, bool) {
	if o == nil || IsNil(o.FailureUri) {
		return nil, false
	}
	return o.FailureUri, true
}

// HasFailureUri returns a boolean if a field has been set.
func (o *ConnectLog) HasFailureUri() bool {
	if o != nil && !IsNil(o.FailureUri) {
		return true
	}

	return false
}

// SetFailureUri gets a reference to the given string and assigns it to the FailureUri field.
func (o *ConnectLog) SetFailureUri(v string) {
	o.FailureUri = &v
}

// GetLastTry returns the LastTry field value if set, zero value otherwise.
func (o *ConnectLog) GetLastTry() string {
	if o == nil || IsNil(o.LastTry) {
		var ret string
		return ret
	}
	return *o.LastTry
}

// GetLastTryOk returns a tuple with the LastTry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetLastTryOk() (*string, bool) {
	if o == nil || IsNil(o.LastTry) {
		return nil, false
	}
	return o.LastTry, true
}

// HasLastTry returns a boolean if a field has been set.
func (o *ConnectLog) HasLastTry() bool {
	if o != nil && !IsNil(o.LastTry) {
		return true
	}

	return false
}

// SetLastTry gets a reference to the given string and assigns it to the LastTry field.
func (o *ConnectLog) SetLastTry(v string) {
	o.LastTry = &v
}

// GetLogId returns the LogId field value if set, zero value otherwise.
func (o *ConnectLog) GetLogId() string {
	if o == nil || IsNil(o.LogId) {
		var ret string
		return ret
	}
	return *o.LogId
}

// GetLogIdOk returns a tuple with the LogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetLogIdOk() (*string, bool) {
	if o == nil || IsNil(o.LogId) {
		return nil, false
	}
	return o.LogId, true
}

// HasLogId returns a boolean if a field has been set.
func (o *ConnectLog) HasLogId() bool {
	if o != nil && !IsNil(o.LogId) {
		return true
	}

	return false
}

// SetLogId gets a reference to the given string and assigns it to the LogId field.
func (o *ConnectLog) SetLogId(v string) {
	o.LogId = &v
}

// GetLogUri returns the LogUri field value if set, zero value otherwise.
func (o *ConnectLog) GetLogUri() string {
	if o == nil || IsNil(o.LogUri) {
		var ret string
		return ret
	}
	return *o.LogUri
}

// GetLogUriOk returns a tuple with the LogUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetLogUriOk() (*string, bool) {
	if o == nil || IsNil(o.LogUri) {
		return nil, false
	}
	return o.LogUri, true
}

// HasLogUri returns a boolean if a field has been set.
func (o *ConnectLog) HasLogUri() bool {
	if o != nil && !IsNil(o.LogUri) {
		return true
	}

	return false
}

// SetLogUri gets a reference to the given string and assigns it to the LogUri field.
func (o *ConnectLog) SetLogUri(v string) {
	o.LogUri = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *ConnectLog) GetRetryCount() string {
	if o == nil || IsNil(o.RetryCount) {
		var ret string
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetRetryCountOk() (*string, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *ConnectLog) HasRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given string and assigns it to the RetryCount field.
func (o *ConnectLog) SetRetryCount(v string) {
	o.RetryCount = &v
}

// GetRetryUri returns the RetryUri field value if set, zero value otherwise.
func (o *ConnectLog) GetRetryUri() string {
	if o == nil || IsNil(o.RetryUri) {
		var ret string
		return ret
	}
	return *o.RetryUri
}

// GetRetryUriOk returns a tuple with the RetryUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetRetryUriOk() (*string, bool) {
	if o == nil || IsNil(o.RetryUri) {
		return nil, false
	}
	return o.RetryUri, true
}

// HasRetryUri returns a boolean if a field has been set.
func (o *ConnectLog) HasRetryUri() bool {
	if o != nil && !IsNil(o.RetryUri) {
		return true
	}

	return false
}

// SetRetryUri gets a reference to the given string and assigns it to the RetryUri field.
func (o *ConnectLog) SetRetryUri(v string) {
	o.RetryUri = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectLog) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectLog) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectLog) SetStatus(v string) {
	o.Status = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ConnectLog) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ConnectLog) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ConnectLog) SetSubject(v string) {
	o.Subject = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ConnectLog) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectLog) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ConnectLog) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ConnectLog) SetUserName(v string) {
	o.UserName = &v
}

func (o ConnectLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.ConfigUrl) {
		toSerialize["configUrl"] = o.ConfigUrl
	}
	if !IsNil(o.ConnectDebugLog) {
		toSerialize["connectDebugLog"] = o.ConnectDebugLog
	}
	if !IsNil(o.ConnectId) {
		toSerialize["connectId"] = o.ConnectId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.FailureId) {
		toSerialize["failureId"] = o.FailureId
	}
	if !IsNil(o.FailureUri) {
		toSerialize["failureUri"] = o.FailureUri
	}
	if !IsNil(o.LastTry) {
		toSerialize["lastTry"] = o.LastTry
	}
	if !IsNil(o.LogId) {
		toSerialize["logId"] = o.LogId
	}
	if !IsNil(o.LogUri) {
		toSerialize["logUri"] = o.LogUri
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	if !IsNil(o.RetryUri) {
		toSerialize["retryUri"] = o.RetryUri
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableConnectLog struct {
	value *ConnectLog
	isSet bool
}

func (v NullableConnectLog) Get() *ConnectLog {
	return v.value
}

func (v *NullableConnectLog) Set(val *ConnectLog) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectLog) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectLog(val *ConnectLog) *NullableConnectLog {
	return &NullableConnectLog{value: val, isSet: true}
}

func (v NullableConnectLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


