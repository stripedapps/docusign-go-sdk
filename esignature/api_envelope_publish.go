/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EnvelopePublishAPIService EnvelopePublishAPI service
type EnvelopePublishAPIService service

type ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest struct {
	ctx context.Context
	ApiService *EnvelopePublishAPIService
	accountId string
	connectHistoricalEnvelopeRepublish *ConnectHistoricalEnvelopeRepublish
}

func (r ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest) ConnectHistoricalEnvelopeRepublish(connectHistoricalEnvelopeRepublish ConnectHistoricalEnvelopeRepublish) ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest {
	r.connectHistoricalEnvelopeRepublish = &connectHistoricalEnvelopeRepublish
	return r
}

func (r ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest) Execute() (*EnvelopePublishTransaction, *http.Response, error) {
	return r.ApiService.HistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionExecute(r)
}

/*
HistoricalEnvelopePublishPostHistoricalEnvelopePublishTransaction Submits a batch of historical envelopes for republish to a webhook.

This endpoint submits a batch of existing envelopes to a webhook of your choice. Set the webhook address with the `urlToPublishTo` request body parameter.

This endpoint does not call an existing Connect configuration or create a new Connect listener to monitor new activity. It simply uses an ad hoc configuration to submit existing envelopes. You must include all the configuration data in the request body.

The envelope data will always be transmitted in JSON format. XML, Salesforce, and eOriginal configuration types are not supported.

Your request should match the following format:

```
{
    "envelopes": ["4280f274-xxxx-xxxx-xxxx-b218b7eeda08", "8373a938-xxxx-xxxx-xxxx-e992a2abae01"],
    "config": {
        "configurationType":"custom",
        "name": "Test",
        "urlToPublishTo":"YOUR-WEBHOOK-URL",
        "allowEnvelopePublish": "true",
        "enableLog": "true",
        "requiresAcknowledgement": "true",
        "IncludeHMAC": "true",
        "SignMessageWithX509Cert": "true",
        "deliveryMode": "SIM",
        "eventData": {
            "version": "restv2.1",
            "format": "json",
            "includedata": ["tabs","payment_tabs","custom_fields","powerform","recipients","folde rs","extensions","attachments", "prefill_tabs", "documents"]
        }
    }
}
```

If the request succeeds, it returns a 201 (Created) HTTP response code and the response body property `processingStatus` will be set to `processing`. You can then view the status of each historical republish request in the [Bulk Actions Log](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=nvf1648497452396.html).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest
*/
func (a *EnvelopePublishAPIService) HistoricalEnvelopePublishPostHistoricalEnvelopePublishTransaction(ctx context.Context, accountId string) ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest {
	return ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return EnvelopePublishTransaction
func (a *EnvelopePublishAPIService) HistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionExecute(r ApiHistoricalEnvelopePublishPostHistoricalEnvelopePublishTransactionRequest) (*EnvelopePublishTransaction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopePublishTransaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopePublishAPIService.HistoricalEnvelopePublishPostHistoricalEnvelopePublishTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/connect/envelopes/publish/historical"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectHistoricalEnvelopeRepublish
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
