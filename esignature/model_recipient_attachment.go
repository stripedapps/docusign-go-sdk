/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecipientAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientAttachment{}

// RecipientAttachment 
type RecipientAttachment struct {
	// The unique identifier for the attachment.
	AttachmentId *string `json:"attachmentId,omitempty"`
	// Specifies the type of the attachment for the recipient. Possible values are:  - `.htm` - `.xml`
	AttachmentType *string `json:"attachmentType,omitempty"`
	// A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
	Data *string `json:"data,omitempty"`
	// An optional label for the attachment.
	Label *string `json:"label,omitempty"`
	// The name of the attachment.
	Name *string `json:"name,omitempty"`
	// The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.
	RemoteUrl *string `json:"remoteUrl,omitempty"`
}

// NewRecipientAttachment instantiates a new RecipientAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientAttachment() *RecipientAttachment {
	this := RecipientAttachment{}
	return &this
}

// NewRecipientAttachmentWithDefaults instantiates a new RecipientAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientAttachmentWithDefaults() *RecipientAttachment {
	this := RecipientAttachment{}
	return &this
}

// GetAttachmentId returns the AttachmentId field value if set, zero value otherwise.
func (o *RecipientAttachment) GetAttachmentId() string {
	if o == nil || IsNil(o.AttachmentId) {
		var ret string
		return ret
	}
	return *o.AttachmentId
}

// GetAttachmentIdOk returns a tuple with the AttachmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAttachment) GetAttachmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentId) {
		return nil, false
	}
	return o.AttachmentId, true
}

// HasAttachmentId returns a boolean if a field has been set.
func (o *RecipientAttachment) HasAttachmentId() bool {
	if o != nil && !IsNil(o.AttachmentId) {
		return true
	}

	return false
}

// SetAttachmentId gets a reference to the given string and assigns it to the AttachmentId field.
func (o *RecipientAttachment) SetAttachmentId(v string) {
	o.AttachmentId = &v
}

// GetAttachmentType returns the AttachmentType field value if set, zero value otherwise.
func (o *RecipientAttachment) GetAttachmentType() string {
	if o == nil || IsNil(o.AttachmentType) {
		var ret string
		return ret
	}
	return *o.AttachmentType
}

// GetAttachmentTypeOk returns a tuple with the AttachmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAttachment) GetAttachmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentType) {
		return nil, false
	}
	return o.AttachmentType, true
}

// HasAttachmentType returns a boolean if a field has been set.
func (o *RecipientAttachment) HasAttachmentType() bool {
	if o != nil && !IsNil(o.AttachmentType) {
		return true
	}

	return false
}

// SetAttachmentType gets a reference to the given string and assigns it to the AttachmentType field.
func (o *RecipientAttachment) SetAttachmentType(v string) {
	o.AttachmentType = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RecipientAttachment) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAttachment) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RecipientAttachment) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *RecipientAttachment) SetData(v string) {
	o.Data = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *RecipientAttachment) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAttachment) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *RecipientAttachment) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *RecipientAttachment) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecipientAttachment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAttachment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecipientAttachment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecipientAttachment) SetName(v string) {
	o.Name = &v
}

// GetRemoteUrl returns the RemoteUrl field value if set, zero value otherwise.
func (o *RecipientAttachment) GetRemoteUrl() string {
	if o == nil || IsNil(o.RemoteUrl) {
		var ret string
		return ret
	}
	return *o.RemoteUrl
}

// GetRemoteUrlOk returns a tuple with the RemoteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAttachment) GetRemoteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteUrl) {
		return nil, false
	}
	return o.RemoteUrl, true
}

// HasRemoteUrl returns a boolean if a field has been set.
func (o *RecipientAttachment) HasRemoteUrl() bool {
	if o != nil && !IsNil(o.RemoteUrl) {
		return true
	}

	return false
}

// SetRemoteUrl gets a reference to the given string and assigns it to the RemoteUrl field.
func (o *RecipientAttachment) SetRemoteUrl(v string) {
	o.RemoteUrl = &v
}

func (o RecipientAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachmentId) {
		toSerialize["attachmentId"] = o.AttachmentId
	}
	if !IsNil(o.AttachmentType) {
		toSerialize["attachmentType"] = o.AttachmentType
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemoteUrl) {
		toSerialize["remoteUrl"] = o.RemoteUrl
	}
	return toSerialize, nil
}

type NullableRecipientAttachment struct {
	value *RecipientAttachment
	isSet bool
}

func (v NullableRecipientAttachment) Get() *RecipientAttachment {
	return v.value
}

func (v *NullableRecipientAttachment) Set(val *RecipientAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientAttachment(val *RecipientAttachment) *NullableRecipientAttachment {
	return &NullableRecipientAttachment{value: val, isSet: true}
}

func (v NullableRecipientAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


