/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddOn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOn{}

// AddOn Contains information about add ons.
type AddOn struct {
	// Reserved for DocuSign.
	Active *string `json:"active,omitempty"`
	// Reserved for DocuSign.
	AddOnId *string `json:"addOnId,omitempty"`
	// A unique ID for the Salesforce object.
	Id *string `json:"id,omitempty"`
	// Reserved for DocuSign.
	Name *string `json:"name,omitempty"`
}

// NewAddOn instantiates a new AddOn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOn() *AddOn {
	this := AddOn{}
	return &this
}

// NewAddOnWithDefaults instantiates a new AddOn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOnWithDefaults() *AddOn {
	this := AddOn{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AddOn) GetActive() string {
	if o == nil || IsNil(o.Active) {
		var ret string
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetActiveOk() (*string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AddOn) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given string and assigns it to the Active field.
func (o *AddOn) SetActive(v string) {
	o.Active = &v
}

// GetAddOnId returns the AddOnId field value if set, zero value otherwise.
func (o *AddOn) GetAddOnId() string {
	if o == nil || IsNil(o.AddOnId) {
		var ret string
		return ret
	}
	return *o.AddOnId
}

// GetAddOnIdOk returns a tuple with the AddOnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetAddOnIdOk() (*string, bool) {
	if o == nil || IsNil(o.AddOnId) {
		return nil, false
	}
	return o.AddOnId, true
}

// HasAddOnId returns a boolean if a field has been set.
func (o *AddOn) HasAddOnId() bool {
	if o != nil && !IsNil(o.AddOnId) {
		return true
	}

	return false
}

// SetAddOnId gets a reference to the given string and assigns it to the AddOnId field.
func (o *AddOn) SetAddOnId(v string) {
	o.AddOnId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddOn) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddOn) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddOn) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddOn) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddOn) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddOn) SetName(v string) {
	o.Name = &v
}

func (o AddOn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AddOnId) {
		toSerialize["addOnId"] = o.AddOnId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableAddOn struct {
	value *AddOn
	isSet bool
}

func (v NullableAddOn) Get() *AddOn {
	return v.value
}

func (v *NullableAddOn) Set(val *AddOn) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOn) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOn(val *AddOn) *NullableAddOn {
	return &NullableAddOn{value: val, isSet: true}
}

func (v NullableAddOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


