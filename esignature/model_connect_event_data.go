/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectEventData{}

// ConnectEventData This object lets you choose the data format of your Connect response.
type ConnectEventData struct {
	// Reserved for DocuSign.
	Format *string `json:"format,omitempty"`
	// A string array of the data to be included. The default is the empty array `[]`.  - `attachments`: Include attachments associated with the envelope. - `custom_fields`: Include the custom fields associated with the envelope. - `documents`: Include the documents associated with the envelope. - `extensions`: Include information about the email settings associated with the envelope. - `folders`: Include the folder where the envelope exists. - `payment_tabs`: Include the payment tabs associated with the envelope. - `powerform`: Include the PowerForms associated with the envelope. - `prefill_tabs`: Include the [pre-filled tabs](/docs/esign-rest-api/esign101/concepts/tabs/prefilled-tabs/) associated with the envelope. - `recipients`: Include the recipients associated with the envelope. - `tabs`: Include the tabs associated with the envelope. 
	IncludeData []string `json:"includeData,omitempty"`
	// Set this property to `restv2.1` to return event data in JSON. If the property is not set, the event data will be returned in XML by default.
	Version *string `json:"version,omitempty"`
}

// NewConnectEventData instantiates a new ConnectEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectEventData() *ConnectEventData {
	this := ConnectEventData{}
	return &this
}

// NewConnectEventDataWithDefaults instantiates a new ConnectEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectEventDataWithDefaults() *ConnectEventData {
	this := ConnectEventData{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ConnectEventData) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectEventData) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ConnectEventData) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ConnectEventData) SetFormat(v string) {
	o.Format = &v
}

// GetIncludeData returns the IncludeData field value if set, zero value otherwise.
func (o *ConnectEventData) GetIncludeData() []string {
	if o == nil || IsNil(o.IncludeData) {
		var ret []string
		return ret
	}
	return o.IncludeData
}

// GetIncludeDataOk returns a tuple with the IncludeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectEventData) GetIncludeDataOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeData) {
		return nil, false
	}
	return o.IncludeData, true
}

// HasIncludeData returns a boolean if a field has been set.
func (o *ConnectEventData) HasIncludeData() bool {
	if o != nil && !IsNil(o.IncludeData) {
		return true
	}

	return false
}

// SetIncludeData gets a reference to the given []string and assigns it to the IncludeData field.
func (o *ConnectEventData) SetIncludeData(v []string) {
	o.IncludeData = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConnectEventData) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectEventData) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConnectEventData) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConnectEventData) SetVersion(v string) {
	o.Version = &v
}

func (o ConnectEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.IncludeData) {
		toSerialize["includeData"] = o.IncludeData
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableConnectEventData struct {
	value *ConnectEventData
	isSet bool
}

func (v NullableConnectEventData) Get() *ConnectEventData {
	return v.value
}

func (v *NullableConnectEventData) Set(val *ConnectEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectEventData(val *ConnectEventData) *NullableConnectEventData {
	return &NullableConnectEventData{value: val, isSet: true}
}

func (v NullableConnectEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


