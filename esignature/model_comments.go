/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Comments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comments{}

// Comments Details about envelope comments.
type Comments struct {
	// The envelope ID of the envelope status that failed to post.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// Reserved for DocuSign.
	Hmac *string `json:"hmac,omitempty"`
	// A unique ID for the Salesforce object.
	Id *string `json:"id,omitempty"`
	// An array of userIds that are mentioned directly in the body of a comment.
	Mentions []string `json:"mentions,omitempty"`
	// Indicates if the comment has been read by the target recipient of the comment.
	Read *bool `json:"read,omitempty"`
	// 
	SentByEmail *string `json:"sentByEmail,omitempty"`
	// 
	SentByFullName *string `json:"sentByFullName,omitempty"`
	// Reserved for DocuSign.
	SentByImageId *string `json:"sentByImageId,omitempty"`
	// 
	SentByInitials *string `json:"sentByInitials,omitempty"`
	// 
	SentByRecipientId *string `json:"sentByRecipientId,omitempty"`
	// 
	SentByUserId *string `json:"sentByUserId,omitempty"`
	// The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html). 
	SigningGroupId *string `json:"signingGroupId,omitempty"`
	// Optional. The name of the signing group.   Maximum Length: 100 characters. 
	SigningGroupName *string `json:"signingGroupName,omitempty"`
	// 
	Subject *string `json:"subject,omitempty"`
	// The unique identifier for the tab.
	TabId *string `json:"tabId,omitempty"`
	// Specifies the text that is shown in the dropdown list. 
	Text *string `json:"text,omitempty"`
	// The unique identifier for the comment thread.
	ThreadId *string `json:"threadId,omitempty"`
	// The userId of the user who created the thread.
	ThreadOriginatorId *string `json:"threadOriginatorId,omitempty"`
	// 
	Timestamp *string `json:"timestamp,omitempty"`
	// 
	TimeStampFormatted *string `json:"timeStampFormatted,omitempty"`
	// 
	VisibleTo []string `json:"visibleTo,omitempty"`
}

// NewComments instantiates a new Comments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComments() *Comments {
	this := Comments{}
	return &this
}

// NewCommentsWithDefaults instantiates a new Comments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsWithDefaults() *Comments {
	this := Comments{}
	return &this
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *Comments) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *Comments) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *Comments) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetHmac returns the Hmac field value if set, zero value otherwise.
func (o *Comments) GetHmac() string {
	if o == nil || IsNil(o.Hmac) {
		var ret string
		return ret
	}
	return *o.Hmac
}

// GetHmacOk returns a tuple with the Hmac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetHmacOk() (*string, bool) {
	if o == nil || IsNil(o.Hmac) {
		return nil, false
	}
	return o.Hmac, true
}

// HasHmac returns a boolean if a field has been set.
func (o *Comments) HasHmac() bool {
	if o != nil && !IsNil(o.Hmac) {
		return true
	}

	return false
}

// SetHmac gets a reference to the given string and assigns it to the Hmac field.
func (o *Comments) SetHmac(v string) {
	o.Hmac = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Comments) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Comments) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Comments) SetId(v string) {
	o.Id = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *Comments) GetMentions() []string {
	if o == nil || IsNil(o.Mentions) {
		var ret []string
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetMentionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *Comments) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []string and assigns it to the Mentions field.
func (o *Comments) SetMentions(v []string) {
	o.Mentions = v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *Comments) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *Comments) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *Comments) SetRead(v bool) {
	o.Read = &v
}

// GetSentByEmail returns the SentByEmail field value if set, zero value otherwise.
func (o *Comments) GetSentByEmail() string {
	if o == nil || IsNil(o.SentByEmail) {
		var ret string
		return ret
	}
	return *o.SentByEmail
}

// GetSentByEmailOk returns a tuple with the SentByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSentByEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SentByEmail) {
		return nil, false
	}
	return o.SentByEmail, true
}

// HasSentByEmail returns a boolean if a field has been set.
func (o *Comments) HasSentByEmail() bool {
	if o != nil && !IsNil(o.SentByEmail) {
		return true
	}

	return false
}

// SetSentByEmail gets a reference to the given string and assigns it to the SentByEmail field.
func (o *Comments) SetSentByEmail(v string) {
	o.SentByEmail = &v
}

// GetSentByFullName returns the SentByFullName field value if set, zero value otherwise.
func (o *Comments) GetSentByFullName() string {
	if o == nil || IsNil(o.SentByFullName) {
		var ret string
		return ret
	}
	return *o.SentByFullName
}

// GetSentByFullNameOk returns a tuple with the SentByFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSentByFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.SentByFullName) {
		return nil, false
	}
	return o.SentByFullName, true
}

// HasSentByFullName returns a boolean if a field has been set.
func (o *Comments) HasSentByFullName() bool {
	if o != nil && !IsNil(o.SentByFullName) {
		return true
	}

	return false
}

// SetSentByFullName gets a reference to the given string and assigns it to the SentByFullName field.
func (o *Comments) SetSentByFullName(v string) {
	o.SentByFullName = &v
}

// GetSentByImageId returns the SentByImageId field value if set, zero value otherwise.
func (o *Comments) GetSentByImageId() string {
	if o == nil || IsNil(o.SentByImageId) {
		var ret string
		return ret
	}
	return *o.SentByImageId
}

// GetSentByImageIdOk returns a tuple with the SentByImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSentByImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.SentByImageId) {
		return nil, false
	}
	return o.SentByImageId, true
}

// HasSentByImageId returns a boolean if a field has been set.
func (o *Comments) HasSentByImageId() bool {
	if o != nil && !IsNil(o.SentByImageId) {
		return true
	}

	return false
}

// SetSentByImageId gets a reference to the given string and assigns it to the SentByImageId field.
func (o *Comments) SetSentByImageId(v string) {
	o.SentByImageId = &v
}

// GetSentByInitials returns the SentByInitials field value if set, zero value otherwise.
func (o *Comments) GetSentByInitials() string {
	if o == nil || IsNil(o.SentByInitials) {
		var ret string
		return ret
	}
	return *o.SentByInitials
}

// GetSentByInitialsOk returns a tuple with the SentByInitials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSentByInitialsOk() (*string, bool) {
	if o == nil || IsNil(o.SentByInitials) {
		return nil, false
	}
	return o.SentByInitials, true
}

// HasSentByInitials returns a boolean if a field has been set.
func (o *Comments) HasSentByInitials() bool {
	if o != nil && !IsNil(o.SentByInitials) {
		return true
	}

	return false
}

// SetSentByInitials gets a reference to the given string and assigns it to the SentByInitials field.
func (o *Comments) SetSentByInitials(v string) {
	o.SentByInitials = &v
}

// GetSentByRecipientId returns the SentByRecipientId field value if set, zero value otherwise.
func (o *Comments) GetSentByRecipientId() string {
	if o == nil || IsNil(o.SentByRecipientId) {
		var ret string
		return ret
	}
	return *o.SentByRecipientId
}

// GetSentByRecipientIdOk returns a tuple with the SentByRecipientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSentByRecipientIdOk() (*string, bool) {
	if o == nil || IsNil(o.SentByRecipientId) {
		return nil, false
	}
	return o.SentByRecipientId, true
}

// HasSentByRecipientId returns a boolean if a field has been set.
func (o *Comments) HasSentByRecipientId() bool {
	if o != nil && !IsNil(o.SentByRecipientId) {
		return true
	}

	return false
}

// SetSentByRecipientId gets a reference to the given string and assigns it to the SentByRecipientId field.
func (o *Comments) SetSentByRecipientId(v string) {
	o.SentByRecipientId = &v
}

// GetSentByUserId returns the SentByUserId field value if set, zero value otherwise.
func (o *Comments) GetSentByUserId() string {
	if o == nil || IsNil(o.SentByUserId) {
		var ret string
		return ret
	}
	return *o.SentByUserId
}

// GetSentByUserIdOk returns a tuple with the SentByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSentByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.SentByUserId) {
		return nil, false
	}
	return o.SentByUserId, true
}

// HasSentByUserId returns a boolean if a field has been set.
func (o *Comments) HasSentByUserId() bool {
	if o != nil && !IsNil(o.SentByUserId) {
		return true
	}

	return false
}

// SetSentByUserId gets a reference to the given string and assigns it to the SentByUserId field.
func (o *Comments) SetSentByUserId(v string) {
	o.SentByUserId = &v
}

// GetSigningGroupId returns the SigningGroupId field value if set, zero value otherwise.
func (o *Comments) GetSigningGroupId() string {
	if o == nil || IsNil(o.SigningGroupId) {
		var ret string
		return ret
	}
	return *o.SigningGroupId
}

// GetSigningGroupIdOk returns a tuple with the SigningGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSigningGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupId) {
		return nil, false
	}
	return o.SigningGroupId, true
}

// HasSigningGroupId returns a boolean if a field has been set.
func (o *Comments) HasSigningGroupId() bool {
	if o != nil && !IsNil(o.SigningGroupId) {
		return true
	}

	return false
}

// SetSigningGroupId gets a reference to the given string and assigns it to the SigningGroupId field.
func (o *Comments) SetSigningGroupId(v string) {
	o.SigningGroupId = &v
}

// GetSigningGroupName returns the SigningGroupName field value if set, zero value otherwise.
func (o *Comments) GetSigningGroupName() string {
	if o == nil || IsNil(o.SigningGroupName) {
		var ret string
		return ret
	}
	return *o.SigningGroupName
}

// GetSigningGroupNameOk returns a tuple with the SigningGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSigningGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupName) {
		return nil, false
	}
	return o.SigningGroupName, true
}

// HasSigningGroupName returns a boolean if a field has been set.
func (o *Comments) HasSigningGroupName() bool {
	if o != nil && !IsNil(o.SigningGroupName) {
		return true
	}

	return false
}

// SetSigningGroupName gets a reference to the given string and assigns it to the SigningGroupName field.
func (o *Comments) SetSigningGroupName(v string) {
	o.SigningGroupName = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Comments) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Comments) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *Comments) SetSubject(v string) {
	o.Subject = &v
}

// GetTabId returns the TabId field value if set, zero value otherwise.
func (o *Comments) GetTabId() string {
	if o == nil || IsNil(o.TabId) {
		var ret string
		return ret
	}
	return *o.TabId
}

// GetTabIdOk returns a tuple with the TabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetTabIdOk() (*string, bool) {
	if o == nil || IsNil(o.TabId) {
		return nil, false
	}
	return o.TabId, true
}

// HasTabId returns a boolean if a field has been set.
func (o *Comments) HasTabId() bool {
	if o != nil && !IsNil(o.TabId) {
		return true
	}

	return false
}

// SetTabId gets a reference to the given string and assigns it to the TabId field.
func (o *Comments) SetTabId(v string) {
	o.TabId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Comments) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Comments) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Comments) SetText(v string) {
	o.Text = &v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *Comments) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *Comments) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *Comments) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetThreadOriginatorId returns the ThreadOriginatorId field value if set, zero value otherwise.
func (o *Comments) GetThreadOriginatorId() string {
	if o == nil || IsNil(o.ThreadOriginatorId) {
		var ret string
		return ret
	}
	return *o.ThreadOriginatorId
}

// GetThreadOriginatorIdOk returns a tuple with the ThreadOriginatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetThreadOriginatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadOriginatorId) {
		return nil, false
	}
	return o.ThreadOriginatorId, true
}

// HasThreadOriginatorId returns a boolean if a field has been set.
func (o *Comments) HasThreadOriginatorId() bool {
	if o != nil && !IsNil(o.ThreadOriginatorId) {
		return true
	}

	return false
}

// SetThreadOriginatorId gets a reference to the given string and assigns it to the ThreadOriginatorId field.
func (o *Comments) SetThreadOriginatorId(v string) {
	o.ThreadOriginatorId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Comments) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Comments) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *Comments) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetTimeStampFormatted returns the TimeStampFormatted field value if set, zero value otherwise.
func (o *Comments) GetTimeStampFormatted() string {
	if o == nil || IsNil(o.TimeStampFormatted) {
		var ret string
		return ret
	}
	return *o.TimeStampFormatted
}

// GetTimeStampFormattedOk returns a tuple with the TimeStampFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetTimeStampFormattedOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStampFormatted) {
		return nil, false
	}
	return o.TimeStampFormatted, true
}

// HasTimeStampFormatted returns a boolean if a field has been set.
func (o *Comments) HasTimeStampFormatted() bool {
	if o != nil && !IsNil(o.TimeStampFormatted) {
		return true
	}

	return false
}

// SetTimeStampFormatted gets a reference to the given string and assigns it to the TimeStampFormatted field.
func (o *Comments) SetTimeStampFormatted(v string) {
	o.TimeStampFormatted = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *Comments) GetVisibleTo() []string {
	if o == nil || IsNil(o.VisibleTo) {
		var ret []string
		return ret
	}
	return o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comments) GetVisibleToOk() ([]string, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *Comments) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given []string and assigns it to the VisibleTo field.
func (o *Comments) SetVisibleTo(v []string) {
	o.VisibleTo = v
}

func (o Comments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.Hmac) {
		toSerialize["hmac"] = o.Hmac
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.SentByEmail) {
		toSerialize["sentByEmail"] = o.SentByEmail
	}
	if !IsNil(o.SentByFullName) {
		toSerialize["sentByFullName"] = o.SentByFullName
	}
	if !IsNil(o.SentByImageId) {
		toSerialize["sentByImageId"] = o.SentByImageId
	}
	if !IsNil(o.SentByInitials) {
		toSerialize["sentByInitials"] = o.SentByInitials
	}
	if !IsNil(o.SentByRecipientId) {
		toSerialize["sentByRecipientId"] = o.SentByRecipientId
	}
	if !IsNil(o.SentByUserId) {
		toSerialize["sentByUserId"] = o.SentByUserId
	}
	if !IsNil(o.SigningGroupId) {
		toSerialize["signingGroupId"] = o.SigningGroupId
	}
	if !IsNil(o.SigningGroupName) {
		toSerialize["signingGroupName"] = o.SigningGroupName
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.TabId) {
		toSerialize["tabId"] = o.TabId
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.ThreadId) {
		toSerialize["threadId"] = o.ThreadId
	}
	if !IsNil(o.ThreadOriginatorId) {
		toSerialize["threadOriginatorId"] = o.ThreadOriginatorId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TimeStampFormatted) {
		toSerialize["timeStampFormatted"] = o.TimeStampFormatted
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visibleTo"] = o.VisibleTo
	}
	return toSerialize, nil
}

type NullableComments struct {
	value *Comments
	isSet bool
}

func (v NullableComments) Get() *Comments {
	return v.value
}

func (v *NullableComments) Set(val *Comments) {
	v.value = val
	v.isSet = true
}

func (v NullableComments) IsSet() bool {
	return v.isSet
}

func (v *NullableComments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComments(val *Comments) *NullableComments {
	return &NullableComments{value: val, isSet: true}
}

func (v NullableComments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


