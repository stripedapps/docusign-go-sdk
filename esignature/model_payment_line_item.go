/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaymentLineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentLineItem{}

// PaymentLineItem A line item describes details about an individual line item in a payment request.  
type PaymentLineItem struct {
	// This is a the `tabLabel` that specifies the amount paid for the line items.  
	AmountReference *string `json:"amountReference,omitempty"`
	// A sender-defined description of the line item. 
	Description *string `json:"description,omitempty"`
	// This is the sender-defined SKU, inventory number, or other item code for the line item. 
	ItemCode *string `json:"itemCode,omitempty"`
	// This is a sender-defined product name, service name, or other designation for the line item. 
	Name *string `json:"name,omitempty"`
}

// NewPaymentLineItem instantiates a new PaymentLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentLineItem() *PaymentLineItem {
	this := PaymentLineItem{}
	return &this
}

// NewPaymentLineItemWithDefaults instantiates a new PaymentLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentLineItemWithDefaults() *PaymentLineItem {
	this := PaymentLineItem{}
	return &this
}

// GetAmountReference returns the AmountReference field value if set, zero value otherwise.
func (o *PaymentLineItem) GetAmountReference() string {
	if o == nil || IsNil(o.AmountReference) {
		var ret string
		return ret
	}
	return *o.AmountReference
}

// GetAmountReferenceOk returns a tuple with the AmountReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentLineItem) GetAmountReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.AmountReference) {
		return nil, false
	}
	return o.AmountReference, true
}

// HasAmountReference returns a boolean if a field has been set.
func (o *PaymentLineItem) HasAmountReference() bool {
	if o != nil && !IsNil(o.AmountReference) {
		return true
	}

	return false
}

// SetAmountReference gets a reference to the given string and assigns it to the AmountReference field.
func (o *PaymentLineItem) SetAmountReference(v string) {
	o.AmountReference = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PaymentLineItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentLineItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentLineItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PaymentLineItem) SetDescription(v string) {
	o.Description = &v
}

// GetItemCode returns the ItemCode field value if set, zero value otherwise.
func (o *PaymentLineItem) GetItemCode() string {
	if o == nil || IsNil(o.ItemCode) {
		var ret string
		return ret
	}
	return *o.ItemCode
}

// GetItemCodeOk returns a tuple with the ItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentLineItem) GetItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCode) {
		return nil, false
	}
	return o.ItemCode, true
}

// HasItemCode returns a boolean if a field has been set.
func (o *PaymentLineItem) HasItemCode() bool {
	if o != nil && !IsNil(o.ItemCode) {
		return true
	}

	return false
}

// SetItemCode gets a reference to the given string and assigns it to the ItemCode field.
func (o *PaymentLineItem) SetItemCode(v string) {
	o.ItemCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PaymentLineItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentLineItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PaymentLineItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PaymentLineItem) SetName(v string) {
	o.Name = &v
}

func (o PaymentLineItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentLineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountReference) {
		toSerialize["amountReference"] = o.AmountReference
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ItemCode) {
		toSerialize["itemCode"] = o.ItemCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullablePaymentLineItem struct {
	value *PaymentLineItem
	isSet bool
}

func (v NullablePaymentLineItem) Get() *PaymentLineItem {
	return v.value
}

func (v *NullablePaymentLineItem) Set(val *PaymentLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentLineItem(val *PaymentLineItem) *NullablePaymentLineItem {
	return &NullablePaymentLineItem{value: val, isSet: true}
}

func (v NullablePaymentLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


