/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotificationDefaultSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationDefaultSettings{}

// NotificationDefaultSettings Contains details about the default notification settings for the envelope notifications that senders and signers receive.
type NotificationDefaultSettings struct {
	SenderEmailNotifications *SenderEmailNotifications `json:"senderEmailNotifications,omitempty"`
	SignerEmailNotifications *SignerEmailNotifications `json:"signerEmailNotifications,omitempty"`
}

// NewNotificationDefaultSettings instantiates a new NotificationDefaultSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationDefaultSettings() *NotificationDefaultSettings {
	this := NotificationDefaultSettings{}
	return &this
}

// NewNotificationDefaultSettingsWithDefaults instantiates a new NotificationDefaultSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDefaultSettingsWithDefaults() *NotificationDefaultSettings {
	this := NotificationDefaultSettings{}
	return &this
}

// GetSenderEmailNotifications returns the SenderEmailNotifications field value if set, zero value otherwise.
func (o *NotificationDefaultSettings) GetSenderEmailNotifications() SenderEmailNotifications {
	if o == nil || IsNil(o.SenderEmailNotifications) {
		var ret SenderEmailNotifications
		return ret
	}
	return *o.SenderEmailNotifications
}

// GetSenderEmailNotificationsOk returns a tuple with the SenderEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDefaultSettings) GetSenderEmailNotificationsOk() (*SenderEmailNotifications, bool) {
	if o == nil || IsNil(o.SenderEmailNotifications) {
		return nil, false
	}
	return o.SenderEmailNotifications, true
}

// HasSenderEmailNotifications returns a boolean if a field has been set.
func (o *NotificationDefaultSettings) HasSenderEmailNotifications() bool {
	if o != nil && !IsNil(o.SenderEmailNotifications) {
		return true
	}

	return false
}

// SetSenderEmailNotifications gets a reference to the given SenderEmailNotifications and assigns it to the SenderEmailNotifications field.
func (o *NotificationDefaultSettings) SetSenderEmailNotifications(v SenderEmailNotifications) {
	o.SenderEmailNotifications = &v
}

// GetSignerEmailNotifications returns the SignerEmailNotifications field value if set, zero value otherwise.
func (o *NotificationDefaultSettings) GetSignerEmailNotifications() SignerEmailNotifications {
	if o == nil || IsNil(o.SignerEmailNotifications) {
		var ret SignerEmailNotifications
		return ret
	}
	return *o.SignerEmailNotifications
}

// GetSignerEmailNotificationsOk returns a tuple with the SignerEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDefaultSettings) GetSignerEmailNotificationsOk() (*SignerEmailNotifications, bool) {
	if o == nil || IsNil(o.SignerEmailNotifications) {
		return nil, false
	}
	return o.SignerEmailNotifications, true
}

// HasSignerEmailNotifications returns a boolean if a field has been set.
func (o *NotificationDefaultSettings) HasSignerEmailNotifications() bool {
	if o != nil && !IsNil(o.SignerEmailNotifications) {
		return true
	}

	return false
}

// SetSignerEmailNotifications gets a reference to the given SignerEmailNotifications and assigns it to the SignerEmailNotifications field.
func (o *NotificationDefaultSettings) SetSignerEmailNotifications(v SignerEmailNotifications) {
	o.SignerEmailNotifications = &v
}

func (o NotificationDefaultSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationDefaultSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SenderEmailNotifications) {
		toSerialize["senderEmailNotifications"] = o.SenderEmailNotifications
	}
	if !IsNil(o.SignerEmailNotifications) {
		toSerialize["signerEmailNotifications"] = o.SignerEmailNotifications
	}
	return toSerialize, nil
}

type NullableNotificationDefaultSettings struct {
	value *NotificationDefaultSettings
	isSet bool
}

func (v NullableNotificationDefaultSettings) Get() *NotificationDefaultSettings {
	return v.value
}

func (v *NullableNotificationDefaultSettings) Set(val *NotificationDefaultSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationDefaultSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationDefaultSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationDefaultSettings(val *NotificationDefaultSettings) *NullableNotificationDefaultSettings {
	return &NullableNotificationDefaultSettings{value: val, isSet: true}
}

func (v NullableNotificationDefaultSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationDefaultSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


