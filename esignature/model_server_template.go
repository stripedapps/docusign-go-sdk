/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServerTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTemplate{}

// ServerTemplate 
type ServerTemplate struct {
	// Specifies the order in which templates are overlaid.
	Sequence *string `json:"sequence,omitempty"`
	// The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
	TemplateId *string `json:"templateId,omitempty"`
}

// NewServerTemplate instantiates a new ServerTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTemplate() *ServerTemplate {
	this := ServerTemplate{}
	return &this
}

// NewServerTemplateWithDefaults instantiates a new ServerTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTemplateWithDefaults() *ServerTemplate {
	this := ServerTemplate{}
	return &this
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ServerTemplate) GetSequence() string {
	if o == nil || IsNil(o.Sequence) {
		var ret string
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerTemplate) GetSequenceOk() (*string, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ServerTemplate) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given string and assigns it to the Sequence field.
func (o *ServerTemplate) SetSequence(v string) {
	o.Sequence = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *ServerTemplate) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId) {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerTemplate) GetTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *ServerTemplate) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *ServerTemplate) SetTemplateId(v string) {
	o.TemplateId = &v
}

func (o ServerTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.TemplateId) {
		toSerialize["templateId"] = o.TemplateId
	}
	return toSerialize, nil
}

type NullableServerTemplate struct {
	value *ServerTemplate
	isSet bool
}

func (v NullableServerTemplate) Get() *ServerTemplate {
	return v.value
}

func (v *NullableServerTemplate) Set(val *ServerTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTemplate(val *ServerTemplate) *NullableServerTemplate {
	return &NullableServerTemplate{value: val, isSet: true}
}

func (v NullableServerTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


