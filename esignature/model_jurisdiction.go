/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Jurisdiction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jurisdiction{}

// Jurisdiction Describes the jurisdiction of a notary. This is read-only object.
type Jurisdiction struct {
	// When **true,** the seal can be generated by the platform.
	AllowSystemCreatedSeal *string `json:"allowSystemCreatedSeal,omitempty"`
	// When **true,** the seal can be uploaded by the user.
	AllowUserUploadedSeal *string `json:"allowUserUploadedSeal,omitempty"`
	// When **true,** the notary's `comissionId` appears in the seal.
	CommissionIdInSeal *string `json:"commissionIdInSeal,omitempty"`
	// The county of the jurisdiction.
	County *string `json:"county,omitempty"`
	// When **true,** the county name appears in the seal.
	CountyInSeal *string `json:"countyInSeal,omitempty"`
	// When **true,** this jurisdiction is enabled.
	Enabled *string `json:"enabled,omitempty"`
	// The ID of the jurisdiction. The following jurisdictions are supported:  -  `5 - California` -  `6 - Colorado` -  `9 - Florida` -  `10 - Georgia` -  `12 - Idaho` -  `13 - Illinois` -  `14 - Indiana` -  `15 - Iowa` -  `17 - Kentucky` -  `23 - Minnesota` -  `25 - Missouri` -  `30 - New Jersey` -  `32 - New York` -  `33 - North Carolina` -  `35 - Ohio` -  `37 - Oregon` -  `38 - Pennsylvania` -  `40 - South Carolina` -  `43 - Texas` -  `44 - Utah` -  `47 - Washington` -  `48 - West Virginia` -  `49 - Wisconsin` -  `62 - Florida Commissioner of Deeds` 
	JurisdictionId *string `json:"jurisdictionId,omitempty"`
	// The name of the jurisdiction. Typically the state name.
	Name *string `json:"name,omitempty"`
	// When **true,** the name of the notary appears in the seal.
	NotaryPublicInSeal *string `json:"notaryPublicInSeal,omitempty"`
	// When **true,** the name of the state appears in the seal.
	StateNameInSeal *string `json:"stateNameInSeal,omitempty"`
}

// NewJurisdiction instantiates a new Jurisdiction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJurisdiction() *Jurisdiction {
	this := Jurisdiction{}
	return &this
}

// NewJurisdictionWithDefaults instantiates a new Jurisdiction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJurisdictionWithDefaults() *Jurisdiction {
	this := Jurisdiction{}
	return &this
}

// GetAllowSystemCreatedSeal returns the AllowSystemCreatedSeal field value if set, zero value otherwise.
func (o *Jurisdiction) GetAllowSystemCreatedSeal() string {
	if o == nil || IsNil(o.AllowSystemCreatedSeal) {
		var ret string
		return ret
	}
	return *o.AllowSystemCreatedSeal
}

// GetAllowSystemCreatedSealOk returns a tuple with the AllowSystemCreatedSeal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetAllowSystemCreatedSealOk() (*string, bool) {
	if o == nil || IsNil(o.AllowSystemCreatedSeal) {
		return nil, false
	}
	return o.AllowSystemCreatedSeal, true
}

// HasAllowSystemCreatedSeal returns a boolean if a field has been set.
func (o *Jurisdiction) HasAllowSystemCreatedSeal() bool {
	if o != nil && !IsNil(o.AllowSystemCreatedSeal) {
		return true
	}

	return false
}

// SetAllowSystemCreatedSeal gets a reference to the given string and assigns it to the AllowSystemCreatedSeal field.
func (o *Jurisdiction) SetAllowSystemCreatedSeal(v string) {
	o.AllowSystemCreatedSeal = &v
}

// GetAllowUserUploadedSeal returns the AllowUserUploadedSeal field value if set, zero value otherwise.
func (o *Jurisdiction) GetAllowUserUploadedSeal() string {
	if o == nil || IsNil(o.AllowUserUploadedSeal) {
		var ret string
		return ret
	}
	return *o.AllowUserUploadedSeal
}

// GetAllowUserUploadedSealOk returns a tuple with the AllowUserUploadedSeal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetAllowUserUploadedSealOk() (*string, bool) {
	if o == nil || IsNil(o.AllowUserUploadedSeal) {
		return nil, false
	}
	return o.AllowUserUploadedSeal, true
}

// HasAllowUserUploadedSeal returns a boolean if a field has been set.
func (o *Jurisdiction) HasAllowUserUploadedSeal() bool {
	if o != nil && !IsNil(o.AllowUserUploadedSeal) {
		return true
	}

	return false
}

// SetAllowUserUploadedSeal gets a reference to the given string and assigns it to the AllowUserUploadedSeal field.
func (o *Jurisdiction) SetAllowUserUploadedSeal(v string) {
	o.AllowUserUploadedSeal = &v
}

// GetCommissionIdInSeal returns the CommissionIdInSeal field value if set, zero value otherwise.
func (o *Jurisdiction) GetCommissionIdInSeal() string {
	if o == nil || IsNil(o.CommissionIdInSeal) {
		var ret string
		return ret
	}
	return *o.CommissionIdInSeal
}

// GetCommissionIdInSealOk returns a tuple with the CommissionIdInSeal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetCommissionIdInSealOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionIdInSeal) {
		return nil, false
	}
	return o.CommissionIdInSeal, true
}

// HasCommissionIdInSeal returns a boolean if a field has been set.
func (o *Jurisdiction) HasCommissionIdInSeal() bool {
	if o != nil && !IsNil(o.CommissionIdInSeal) {
		return true
	}

	return false
}

// SetCommissionIdInSeal gets a reference to the given string and assigns it to the CommissionIdInSeal field.
func (o *Jurisdiction) SetCommissionIdInSeal(v string) {
	o.CommissionIdInSeal = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *Jurisdiction) GetCounty() string {
	if o == nil || IsNil(o.County) {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetCountyOk() (*string, bool) {
	if o == nil || IsNil(o.County) {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *Jurisdiction) HasCounty() bool {
	if o != nil && !IsNil(o.County) {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *Jurisdiction) SetCounty(v string) {
	o.County = &v
}

// GetCountyInSeal returns the CountyInSeal field value if set, zero value otherwise.
func (o *Jurisdiction) GetCountyInSeal() string {
	if o == nil || IsNil(o.CountyInSeal) {
		var ret string
		return ret
	}
	return *o.CountyInSeal
}

// GetCountyInSealOk returns a tuple with the CountyInSeal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetCountyInSealOk() (*string, bool) {
	if o == nil || IsNil(o.CountyInSeal) {
		return nil, false
	}
	return o.CountyInSeal, true
}

// HasCountyInSeal returns a boolean if a field has been set.
func (o *Jurisdiction) HasCountyInSeal() bool {
	if o != nil && !IsNil(o.CountyInSeal) {
		return true
	}

	return false
}

// SetCountyInSeal gets a reference to the given string and assigns it to the CountyInSeal field.
func (o *Jurisdiction) SetCountyInSeal(v string) {
	o.CountyInSeal = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Jurisdiction) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Jurisdiction) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *Jurisdiction) SetEnabled(v string) {
	o.Enabled = &v
}

// GetJurisdictionId returns the JurisdictionId field value if set, zero value otherwise.
func (o *Jurisdiction) GetJurisdictionId() string {
	if o == nil || IsNil(o.JurisdictionId) {
		var ret string
		return ret
	}
	return *o.JurisdictionId
}

// GetJurisdictionIdOk returns a tuple with the JurisdictionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetJurisdictionIdOk() (*string, bool) {
	if o == nil || IsNil(o.JurisdictionId) {
		return nil, false
	}
	return o.JurisdictionId, true
}

// HasJurisdictionId returns a boolean if a field has been set.
func (o *Jurisdiction) HasJurisdictionId() bool {
	if o != nil && !IsNil(o.JurisdictionId) {
		return true
	}

	return false
}

// SetJurisdictionId gets a reference to the given string and assigns it to the JurisdictionId field.
func (o *Jurisdiction) SetJurisdictionId(v string) {
	o.JurisdictionId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Jurisdiction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Jurisdiction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Jurisdiction) SetName(v string) {
	o.Name = &v
}

// GetNotaryPublicInSeal returns the NotaryPublicInSeal field value if set, zero value otherwise.
func (o *Jurisdiction) GetNotaryPublicInSeal() string {
	if o == nil || IsNil(o.NotaryPublicInSeal) {
		var ret string
		return ret
	}
	return *o.NotaryPublicInSeal
}

// GetNotaryPublicInSealOk returns a tuple with the NotaryPublicInSeal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetNotaryPublicInSealOk() (*string, bool) {
	if o == nil || IsNil(o.NotaryPublicInSeal) {
		return nil, false
	}
	return o.NotaryPublicInSeal, true
}

// HasNotaryPublicInSeal returns a boolean if a field has been set.
func (o *Jurisdiction) HasNotaryPublicInSeal() bool {
	if o != nil && !IsNil(o.NotaryPublicInSeal) {
		return true
	}

	return false
}

// SetNotaryPublicInSeal gets a reference to the given string and assigns it to the NotaryPublicInSeal field.
func (o *Jurisdiction) SetNotaryPublicInSeal(v string) {
	o.NotaryPublicInSeal = &v
}

// GetStateNameInSeal returns the StateNameInSeal field value if set, zero value otherwise.
func (o *Jurisdiction) GetStateNameInSeal() string {
	if o == nil || IsNil(o.StateNameInSeal) {
		var ret string
		return ret
	}
	return *o.StateNameInSeal
}

// GetStateNameInSealOk returns a tuple with the StateNameInSeal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jurisdiction) GetStateNameInSealOk() (*string, bool) {
	if o == nil || IsNil(o.StateNameInSeal) {
		return nil, false
	}
	return o.StateNameInSeal, true
}

// HasStateNameInSeal returns a boolean if a field has been set.
func (o *Jurisdiction) HasStateNameInSeal() bool {
	if o != nil && !IsNil(o.StateNameInSeal) {
		return true
	}

	return false
}

// SetStateNameInSeal gets a reference to the given string and assigns it to the StateNameInSeal field.
func (o *Jurisdiction) SetStateNameInSeal(v string) {
	o.StateNameInSeal = &v
}

func (o Jurisdiction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jurisdiction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowSystemCreatedSeal) {
		toSerialize["allowSystemCreatedSeal"] = o.AllowSystemCreatedSeal
	}
	if !IsNil(o.AllowUserUploadedSeal) {
		toSerialize["allowUserUploadedSeal"] = o.AllowUserUploadedSeal
	}
	if !IsNil(o.CommissionIdInSeal) {
		toSerialize["commissionIdInSeal"] = o.CommissionIdInSeal
	}
	if !IsNil(o.County) {
		toSerialize["county"] = o.County
	}
	if !IsNil(o.CountyInSeal) {
		toSerialize["countyInSeal"] = o.CountyInSeal
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.JurisdictionId) {
		toSerialize["jurisdictionId"] = o.JurisdictionId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotaryPublicInSeal) {
		toSerialize["notaryPublicInSeal"] = o.NotaryPublicInSeal
	}
	if !IsNil(o.StateNameInSeal) {
		toSerialize["stateNameInSeal"] = o.StateNameInSeal
	}
	return toSerialize, nil
}

type NullableJurisdiction struct {
	value *Jurisdiction
	isSet bool
}

func (v NullableJurisdiction) Get() *Jurisdiction {
	return v.value
}

func (v *NullableJurisdiction) Set(val *Jurisdiction) {
	v.value = val
	v.isSet = true
}

func (v NullableJurisdiction) IsSet() bool {
	return v.isSet
}

func (v *NullableJurisdiction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJurisdiction(val *Jurisdiction) *NullableJurisdiction {
	return &NullableJurisdiction{value: val, isSet: true}
}

func (v NullableJurisdiction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJurisdiction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


