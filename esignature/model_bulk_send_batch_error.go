/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BulkSendBatchError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkSendBatchError{}

// BulkSendBatchError 
type BulkSendBatchError struct {
	// The server error associated with the Connect post failure.
	Error *string `json:"error,omitempty"`
	// 
	ErrorDetail *string `json:"errorDetail,omitempty"`
}

// NewBulkSendBatchError instantiates a new BulkSendBatchError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkSendBatchError() *BulkSendBatchError {
	this := BulkSendBatchError{}
	return &this
}

// NewBulkSendBatchErrorWithDefaults instantiates a new BulkSendBatchError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkSendBatchErrorWithDefaults() *BulkSendBatchError {
	this := BulkSendBatchError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BulkSendBatchError) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkSendBatchError) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BulkSendBatchError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *BulkSendBatchError) SetError(v string) {
	o.Error = &v
}

// GetErrorDetail returns the ErrorDetail field value if set, zero value otherwise.
func (o *BulkSendBatchError) GetErrorDetail() string {
	if o == nil || IsNil(o.ErrorDetail) {
		var ret string
		return ret
	}
	return *o.ErrorDetail
}

// GetErrorDetailOk returns a tuple with the ErrorDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkSendBatchError) GetErrorDetailOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDetail) {
		return nil, false
	}
	return o.ErrorDetail, true
}

// HasErrorDetail returns a boolean if a field has been set.
func (o *BulkSendBatchError) HasErrorDetail() bool {
	if o != nil && !IsNil(o.ErrorDetail) {
		return true
	}

	return false
}

// SetErrorDetail gets a reference to the given string and assigns it to the ErrorDetail field.
func (o *BulkSendBatchError) SetErrorDetail(v string) {
	o.ErrorDetail = &v
}

func (o BulkSendBatchError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkSendBatchError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ErrorDetail) {
		toSerialize["errorDetail"] = o.ErrorDetail
	}
	return toSerialize, nil
}

type NullableBulkSendBatchError struct {
	value *BulkSendBatchError
	isSet bool
}

func (v NullableBulkSendBatchError) Get() *BulkSendBatchError {
	return v.value
}

func (v *NullableBulkSendBatchError) Set(val *BulkSendBatchError) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkSendBatchError) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkSendBatchError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkSendBatchError(val *BulkSendBatchError) *NullableBulkSendBatchError {
	return &NullableBulkSendBatchError{value: val, isSet: true}
}

func (v NullableBulkSendBatchError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkSendBatchError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


