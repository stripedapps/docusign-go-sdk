/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SignatureProviderRequiredOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureProviderRequiredOption{}

// SignatureProviderRequiredOption Contains additional information that a specific signature provider requires.
type SignatureProviderRequiredOption struct {
	// Reserved for DocuSign.
	RequiredSignatureProviderOptionIds []string `json:"requiredSignatureProviderOptionIds,omitempty"`
	// Reserved for DocuSign.
	SignerType *string `json:"signerType,omitempty"`
}

// NewSignatureProviderRequiredOption instantiates a new SignatureProviderRequiredOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureProviderRequiredOption() *SignatureProviderRequiredOption {
	this := SignatureProviderRequiredOption{}
	return &this
}

// NewSignatureProviderRequiredOptionWithDefaults instantiates a new SignatureProviderRequiredOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureProviderRequiredOptionWithDefaults() *SignatureProviderRequiredOption {
	this := SignatureProviderRequiredOption{}
	return &this
}

// GetRequiredSignatureProviderOptionIds returns the RequiredSignatureProviderOptionIds field value if set, zero value otherwise.
func (o *SignatureProviderRequiredOption) GetRequiredSignatureProviderOptionIds() []string {
	if o == nil || IsNil(o.RequiredSignatureProviderOptionIds) {
		var ret []string
		return ret
	}
	return o.RequiredSignatureProviderOptionIds
}

// GetRequiredSignatureProviderOptionIdsOk returns a tuple with the RequiredSignatureProviderOptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureProviderRequiredOption) GetRequiredSignatureProviderOptionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredSignatureProviderOptionIds) {
		return nil, false
	}
	return o.RequiredSignatureProviderOptionIds, true
}

// HasRequiredSignatureProviderOptionIds returns a boolean if a field has been set.
func (o *SignatureProviderRequiredOption) HasRequiredSignatureProviderOptionIds() bool {
	if o != nil && !IsNil(o.RequiredSignatureProviderOptionIds) {
		return true
	}

	return false
}

// SetRequiredSignatureProviderOptionIds gets a reference to the given []string and assigns it to the RequiredSignatureProviderOptionIds field.
func (o *SignatureProviderRequiredOption) SetRequiredSignatureProviderOptionIds(v []string) {
	o.RequiredSignatureProviderOptionIds = v
}

// GetSignerType returns the SignerType field value if set, zero value otherwise.
func (o *SignatureProviderRequiredOption) GetSignerType() string {
	if o == nil || IsNil(o.SignerType) {
		var ret string
		return ret
	}
	return *o.SignerType
}

// GetSignerTypeOk returns a tuple with the SignerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureProviderRequiredOption) GetSignerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SignerType) {
		return nil, false
	}
	return o.SignerType, true
}

// HasSignerType returns a boolean if a field has been set.
func (o *SignatureProviderRequiredOption) HasSignerType() bool {
	if o != nil && !IsNil(o.SignerType) {
		return true
	}

	return false
}

// SetSignerType gets a reference to the given string and assigns it to the SignerType field.
func (o *SignatureProviderRequiredOption) SetSignerType(v string) {
	o.SignerType = &v
}

func (o SignatureProviderRequiredOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureProviderRequiredOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequiredSignatureProviderOptionIds) {
		toSerialize["requiredSignatureProviderOptionIds"] = o.RequiredSignatureProviderOptionIds
	}
	if !IsNil(o.SignerType) {
		toSerialize["signerType"] = o.SignerType
	}
	return toSerialize, nil
}

type NullableSignatureProviderRequiredOption struct {
	value *SignatureProviderRequiredOption
	isSet bool
}

func (v NullableSignatureProviderRequiredOption) Get() *SignatureProviderRequiredOption {
	return v.value
}

func (v *NullableSignatureProviderRequiredOption) Set(val *SignatureProviderRequiredOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureProviderRequiredOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureProviderRequiredOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureProviderRequiredOption(val *SignatureProviderRequiredOption) *NullableSignatureProviderRequiredOption {
	return &NullableSignatureProviderRequiredOption{value: val, isSet: true}
}

func (v NullableSignatureProviderRequiredOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureProviderRequiredOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


