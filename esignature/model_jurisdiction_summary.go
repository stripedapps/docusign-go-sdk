/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JurisdictionSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JurisdictionSummary{}

// JurisdictionSummary 
type JurisdictionSummary struct {
	// 
	AuthorizedForIPen *string `json:"authorizedForIPen,omitempty"`
	// 
	AuthorizedForRon *string `json:"authorizedForRon,omitempty"`
	// The ID of the jurisdiction. The following jurisdictions are supported:  -  `5 - California` -  `6 - Colorado` -  `9 - Florida` -  `10 - Georgia` -  `12 - Idaho` -  `13 - Illinois` -  `14 - Indiana` -  `15 - Iowa` -  `17 - Kentucky` -  `23 - Minnesota` -  `25 - Missouri` -  `30 - New Jersey` -  `32 - New York` -  `33 - North Carolina` -  `35 - Ohio` -  `37 - Oregon` -  `38 - Pennsylvania` -  `40 - South Carolina` -  `43 - Texas` -  `44 - Utah` -  `47 - Washington` -  `48 - West Virginia` -  `49 - Wisconsin` -  `62 - Florida Commissioner of Deeds` 
	JurisdictionId *string `json:"jurisdictionId,omitempty"`
	// 
	JurisdictionName *string `json:"jurisdictionName,omitempty"`
}

// NewJurisdictionSummary instantiates a new JurisdictionSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJurisdictionSummary() *JurisdictionSummary {
	this := JurisdictionSummary{}
	return &this
}

// NewJurisdictionSummaryWithDefaults instantiates a new JurisdictionSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJurisdictionSummaryWithDefaults() *JurisdictionSummary {
	this := JurisdictionSummary{}
	return &this
}

// GetAuthorizedForIPen returns the AuthorizedForIPen field value if set, zero value otherwise.
func (o *JurisdictionSummary) GetAuthorizedForIPen() string {
	if o == nil || IsNil(o.AuthorizedForIPen) {
		var ret string
		return ret
	}
	return *o.AuthorizedForIPen
}

// GetAuthorizedForIPenOk returns a tuple with the AuthorizedForIPen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JurisdictionSummary) GetAuthorizedForIPenOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizedForIPen) {
		return nil, false
	}
	return o.AuthorizedForIPen, true
}

// HasAuthorizedForIPen returns a boolean if a field has been set.
func (o *JurisdictionSummary) HasAuthorizedForIPen() bool {
	if o != nil && !IsNil(o.AuthorizedForIPen) {
		return true
	}

	return false
}

// SetAuthorizedForIPen gets a reference to the given string and assigns it to the AuthorizedForIPen field.
func (o *JurisdictionSummary) SetAuthorizedForIPen(v string) {
	o.AuthorizedForIPen = &v
}

// GetAuthorizedForRon returns the AuthorizedForRon field value if set, zero value otherwise.
func (o *JurisdictionSummary) GetAuthorizedForRon() string {
	if o == nil || IsNil(o.AuthorizedForRon) {
		var ret string
		return ret
	}
	return *o.AuthorizedForRon
}

// GetAuthorizedForRonOk returns a tuple with the AuthorizedForRon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JurisdictionSummary) GetAuthorizedForRonOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizedForRon) {
		return nil, false
	}
	return o.AuthorizedForRon, true
}

// HasAuthorizedForRon returns a boolean if a field has been set.
func (o *JurisdictionSummary) HasAuthorizedForRon() bool {
	if o != nil && !IsNil(o.AuthorizedForRon) {
		return true
	}

	return false
}

// SetAuthorizedForRon gets a reference to the given string and assigns it to the AuthorizedForRon field.
func (o *JurisdictionSummary) SetAuthorizedForRon(v string) {
	o.AuthorizedForRon = &v
}

// GetJurisdictionId returns the JurisdictionId field value if set, zero value otherwise.
func (o *JurisdictionSummary) GetJurisdictionId() string {
	if o == nil || IsNil(o.JurisdictionId) {
		var ret string
		return ret
	}
	return *o.JurisdictionId
}

// GetJurisdictionIdOk returns a tuple with the JurisdictionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JurisdictionSummary) GetJurisdictionIdOk() (*string, bool) {
	if o == nil || IsNil(o.JurisdictionId) {
		return nil, false
	}
	return o.JurisdictionId, true
}

// HasJurisdictionId returns a boolean if a field has been set.
func (o *JurisdictionSummary) HasJurisdictionId() bool {
	if o != nil && !IsNil(o.JurisdictionId) {
		return true
	}

	return false
}

// SetJurisdictionId gets a reference to the given string and assigns it to the JurisdictionId field.
func (o *JurisdictionSummary) SetJurisdictionId(v string) {
	o.JurisdictionId = &v
}

// GetJurisdictionName returns the JurisdictionName field value if set, zero value otherwise.
func (o *JurisdictionSummary) GetJurisdictionName() string {
	if o == nil || IsNil(o.JurisdictionName) {
		var ret string
		return ret
	}
	return *o.JurisdictionName
}

// GetJurisdictionNameOk returns a tuple with the JurisdictionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JurisdictionSummary) GetJurisdictionNameOk() (*string, bool) {
	if o == nil || IsNil(o.JurisdictionName) {
		return nil, false
	}
	return o.JurisdictionName, true
}

// HasJurisdictionName returns a boolean if a field has been set.
func (o *JurisdictionSummary) HasJurisdictionName() bool {
	if o != nil && !IsNil(o.JurisdictionName) {
		return true
	}

	return false
}

// SetJurisdictionName gets a reference to the given string and assigns it to the JurisdictionName field.
func (o *JurisdictionSummary) SetJurisdictionName(v string) {
	o.JurisdictionName = &v
}

func (o JurisdictionSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JurisdictionSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizedForIPen) {
		toSerialize["authorizedForIPen"] = o.AuthorizedForIPen
	}
	if !IsNil(o.AuthorizedForRon) {
		toSerialize["authorizedForRon"] = o.AuthorizedForRon
	}
	if !IsNil(o.JurisdictionId) {
		toSerialize["jurisdictionId"] = o.JurisdictionId
	}
	if !IsNil(o.JurisdictionName) {
		toSerialize["jurisdictionName"] = o.JurisdictionName
	}
	return toSerialize, nil
}

type NullableJurisdictionSummary struct {
	value *JurisdictionSummary
	isSet bool
}

func (v NullableJurisdictionSummary) Get() *JurisdictionSummary {
	return v.value
}

func (v *NullableJurisdictionSummary) Set(val *JurisdictionSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableJurisdictionSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableJurisdictionSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJurisdictionSummary(val *JurisdictionSummary) *NullableJurisdictionSummary {
	return &NullableJurisdictionSummary{value: val, isSet: true}
}

func (v NullableJurisdictionSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJurisdictionSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


