/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// AccountSignaturesAPIService AccountSignaturesAPI service
type AccountSignaturesAPIService service

type ApiAccountSignaturesDeleteAccountSignatureRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	signatureId string
}

func (r ApiAccountSignaturesDeleteAccountSignatureRequest) Execute() (*http.Response, error) {
	return r.ApiService.AccountSignaturesDeleteAccountSignatureExecute(r)
}

/*
AccountSignaturesDeleteAccountSignature Deletes an account stamp.

Deletes a stamp specified by `signatureId`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param signatureId The ID of the account stamp.
 @return ApiAccountSignaturesDeleteAccountSignatureRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesDeleteAccountSignature(ctx context.Context, accountId string, signatureId string) ApiAccountSignaturesDeleteAccountSignatureRequest {
	return ApiAccountSignaturesDeleteAccountSignatureRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		signatureId: signatureId,
	}
}

// Execute executes the request
func (a *AccountSignaturesAPIService) AccountSignaturesDeleteAccountSignatureExecute(r ApiAccountSignaturesDeleteAccountSignatureRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesDeleteAccountSignature")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures/{signatureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signatureId"+"}", url.PathEscape(parameterValueToString(r.signatureId, "signatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAccountSignaturesDeleteAccountSignatureImageRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	imageType string
	signatureId string
}

func (r ApiAccountSignaturesDeleteAccountSignatureImageRequest) Execute() (*AccountSignature, *http.Response, error) {
	return r.ApiService.AccountSignaturesDeleteAccountSignatureImageExecute(r)
}

/*
AccountSignaturesDeleteAccountSignatureImage Deletes the image for a stamp.

Deletes the image for a stamp specified by `signatureId`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param imageType Specificies the type of image. Valid values:  - `stamp_image` - `signature_image` - `initials_image`
 @param signatureId The ID of the account stamp.
 @return ApiAccountSignaturesDeleteAccountSignatureImageRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesDeleteAccountSignatureImage(ctx context.Context, accountId string, imageType string, signatureId string) ApiAccountSignaturesDeleteAccountSignatureImageRequest {
	return ApiAccountSignaturesDeleteAccountSignatureImageRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		imageType: imageType,
		signatureId: signatureId,
	}
}

// Execute executes the request
//  @return AccountSignature
func (a *AccountSignaturesAPIService) AccountSignaturesDeleteAccountSignatureImageExecute(r ApiAccountSignaturesDeleteAccountSignatureImageRequest) (*AccountSignature, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignature
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesDeleteAccountSignatureImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures/{signatureId}/{imageType}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageType"+"}", url.PathEscape(parameterValueToString(r.imageType, "imageType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signatureId"+"}", url.PathEscape(parameterValueToString(r.signatureId, "signatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesGetAccountSignatureRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	signatureId string
}

func (r ApiAccountSignaturesGetAccountSignatureRequest) Execute() (*AccountSignature, *http.Response, error) {
	return r.ApiService.AccountSignaturesGetAccountSignatureExecute(r)
}

/*
AccountSignaturesGetAccountSignature Returns information about the specified stamp.

Returns information about the specified stamp.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param signatureId The ID of the account stamp.
 @return ApiAccountSignaturesGetAccountSignatureRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesGetAccountSignature(ctx context.Context, accountId string, signatureId string) ApiAccountSignaturesGetAccountSignatureRequest {
	return ApiAccountSignaturesGetAccountSignatureRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		signatureId: signatureId,
	}
}

// Execute executes the request
//  @return AccountSignature
func (a *AccountSignaturesAPIService) AccountSignaturesGetAccountSignatureExecute(r ApiAccountSignaturesGetAccountSignatureRequest) (*AccountSignature, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignature
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesGetAccountSignature")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures/{signatureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signatureId"+"}", url.PathEscape(parameterValueToString(r.signatureId, "signatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesGetAccountSignatureImageRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	imageType string
	signatureId string
	includeChrome *string
}

// When **true,** the chrome (or frame containing the added line and identifier) is included with the signature image.
func (r ApiAccountSignaturesGetAccountSignatureImageRequest) IncludeChrome(includeChrome string) ApiAccountSignaturesGetAccountSignatureImageRequest {
	r.includeChrome = &includeChrome
	return r
}

func (r ApiAccountSignaturesGetAccountSignatureImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.AccountSignaturesGetAccountSignatureImageExecute(r)
}

/*
AccountSignaturesGetAccountSignatureImage Returns the image for an account stamp.

Returns the image for an account stamp.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param imageType Specificies the type of image. Valid values:  - `stamp_image` - `signature_image` - `initials_image`
 @param signatureId The ID of the account stamp.
 @return ApiAccountSignaturesGetAccountSignatureImageRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesGetAccountSignatureImage(ctx context.Context, accountId string, imageType string, signatureId string) ApiAccountSignaturesGetAccountSignatureImageRequest {
	return ApiAccountSignaturesGetAccountSignatureImageRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		imageType: imageType,
		signatureId: signatureId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *AccountSignaturesAPIService) AccountSignaturesGetAccountSignatureImageExecute(r ApiAccountSignaturesGetAccountSignatureImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesGetAccountSignatureImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures/{signatureId}/{imageType}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageType"+"}", url.PathEscape(parameterValueToString(r.imageType, "imageType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signatureId"+"}", url.PathEscape(parameterValueToString(r.signatureId, "signatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeChrome != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_chrome", r.includeChrome, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/gif"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesGetAccountSignaturesRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	stampFormat *string
	stampName *string
	stampType *string
}

// The format of the stamp to return. Valid values: - &#x60;NameDateHanko&#x60; - &#x60;NameHanko&#x60; - &#x60;PlaceholderHanko&#x60;
func (r ApiAccountSignaturesGetAccountSignaturesRequest) StampFormat(stampFormat string) ApiAccountSignaturesGetAccountSignaturesRequest {
	r.stampFormat = &stampFormat
	return r
}

// The name associated with the stamps to return. This value can be a Japanese surname (up to 5 characters) or a purchase order ID.
func (r ApiAccountSignaturesGetAccountSignaturesRequest) StampName(stampName string) ApiAccountSignaturesGetAccountSignaturesRequest {
	r.stampName = &stampName
	return r
}

// The type of the stamps to return. Valid values: - &#x60;name_stamp&#x60; - &#x60;stamp&#x60; - &#x60;signature&#x60;
func (r ApiAccountSignaturesGetAccountSignaturesRequest) StampType(stampType string) ApiAccountSignaturesGetAccountSignaturesRequest {
	r.stampType = &stampType
	return r
}

func (r ApiAccountSignaturesGetAccountSignaturesRequest) Execute() (*AccountSignaturesInformation, *http.Response, error) {
	return r.ApiService.AccountSignaturesGetAccountSignaturesExecute(r)
}

/*
AccountSignaturesGetAccountSignatures Returns a list of stamps available in the account.

Returns a list of stamps available in the account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiAccountSignaturesGetAccountSignaturesRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesGetAccountSignatures(ctx context.Context, accountId string) ApiAccountSignaturesGetAccountSignaturesRequest {
	return ApiAccountSignaturesGetAccountSignaturesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountSignaturesInformation
func (a *AccountSignaturesAPIService) AccountSignaturesGetAccountSignaturesExecute(r ApiAccountSignaturesGetAccountSignaturesRequest) (*AccountSignaturesInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignaturesInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesGetAccountSignatures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.stampFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stamp_format", r.stampFormat, "")
	}
	if r.stampName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stamp_name", r.stampName, "")
	}
	if r.stampType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stamp_type", r.stampType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesPostAccountSignaturesRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	decodeOnly *string
	accountSignaturesInformation *AccountSignaturesInformation
}

func (r ApiAccountSignaturesPostAccountSignaturesRequest) DecodeOnly(decodeOnly string) ApiAccountSignaturesPostAccountSignaturesRequest {
	r.decodeOnly = &decodeOnly
	return r
}

func (r ApiAccountSignaturesPostAccountSignaturesRequest) AccountSignaturesInformation(accountSignaturesInformation AccountSignaturesInformation) ApiAccountSignaturesPostAccountSignaturesRequest {
	r.accountSignaturesInformation = &accountSignaturesInformation
	return r
}

func (r ApiAccountSignaturesPostAccountSignaturesRequest) Execute() (*AccountSignaturesInformation, *http.Response, error) {
	return r.ApiService.AccountSignaturesPostAccountSignaturesExecute(r)
}

/*
AccountSignaturesPostAccountSignatures Adds or updates one or more account stamps.

Adds or updates one or more account stamps.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiAccountSignaturesPostAccountSignaturesRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesPostAccountSignatures(ctx context.Context, accountId string) ApiAccountSignaturesPostAccountSignaturesRequest {
	return ApiAccountSignaturesPostAccountSignaturesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountSignaturesInformation
func (a *AccountSignaturesAPIService) AccountSignaturesPostAccountSignaturesExecute(r ApiAccountSignaturesPostAccountSignaturesRequest) (*AccountSignaturesInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignaturesInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesPostAccountSignatures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.decodeOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decode_only", r.decodeOnly, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountSignaturesInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesPutAccountSignatureRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	accountSignaturesInformation *AccountSignaturesInformation
}

func (r ApiAccountSignaturesPutAccountSignatureRequest) AccountSignaturesInformation(accountSignaturesInformation AccountSignaturesInformation) ApiAccountSignaturesPutAccountSignatureRequest {
	r.accountSignaturesInformation = &accountSignaturesInformation
	return r
}

func (r ApiAccountSignaturesPutAccountSignatureRequest) Execute() (*AccountSignaturesInformation, *http.Response, error) {
	return r.ApiService.AccountSignaturesPutAccountSignatureExecute(r)
}

/*
AccountSignaturesPutAccountSignature Updates an account stamp.

Adds or updates one or more account stamps. This request may include images in multi-part format.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiAccountSignaturesPutAccountSignatureRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesPutAccountSignature(ctx context.Context, accountId string) ApiAccountSignaturesPutAccountSignatureRequest {
	return ApiAccountSignaturesPutAccountSignatureRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountSignaturesInformation
func (a *AccountSignaturesAPIService) AccountSignaturesPutAccountSignatureExecute(r ApiAccountSignaturesPutAccountSignatureRequest) (*AccountSignaturesInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignaturesInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesPutAccountSignature")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountSignaturesInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesPutAccountSignatureByIdRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	signatureId string
	closeExistingSignature *string
	accountSignatureDefinition *AccountSignatureDefinition
}

// When **true,** closes the current signature.
func (r ApiAccountSignaturesPutAccountSignatureByIdRequest) CloseExistingSignature(closeExistingSignature string) ApiAccountSignaturesPutAccountSignatureByIdRequest {
	r.closeExistingSignature = &closeExistingSignature
	return r
}

func (r ApiAccountSignaturesPutAccountSignatureByIdRequest) AccountSignatureDefinition(accountSignatureDefinition AccountSignatureDefinition) ApiAccountSignaturesPutAccountSignatureByIdRequest {
	r.accountSignatureDefinition = &accountSignatureDefinition
	return r
}

func (r ApiAccountSignaturesPutAccountSignatureByIdRequest) Execute() (*AccountSignature, *http.Response, error) {
	return r.ApiService.AccountSignaturesPutAccountSignatureByIdExecute(r)
}

/*
AccountSignaturesPutAccountSignatureById Updates an account stamp by ID.

Updates an account stamp specified by the `signatureId` query parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param signatureId The ID of the account stamp.
 @return ApiAccountSignaturesPutAccountSignatureByIdRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesPutAccountSignatureById(ctx context.Context, accountId string, signatureId string) ApiAccountSignaturesPutAccountSignatureByIdRequest {
	return ApiAccountSignaturesPutAccountSignatureByIdRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		signatureId: signatureId,
	}
}

// Execute executes the request
//  @return AccountSignature
func (a *AccountSignaturesAPIService) AccountSignaturesPutAccountSignatureByIdExecute(r ApiAccountSignaturesPutAccountSignatureByIdRequest) (*AccountSignature, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignature
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesPutAccountSignatureById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures/{signatureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signatureId"+"}", url.PathEscape(parameterValueToString(r.signatureId, "signatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.closeExistingSignature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "close_existing_signature", r.closeExistingSignature, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountSignatureDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSignaturesPutAccountSignatureImageRequest struct {
	ctx context.Context
	ApiService *AccountSignaturesAPIService
	accountId string
	imageType string
	signatureId string
	transparentPng *string
}

func (r ApiAccountSignaturesPutAccountSignatureImageRequest) TransparentPng(transparentPng string) ApiAccountSignaturesPutAccountSignatureImageRequest {
	r.transparentPng = &transparentPng
	return r
}

func (r ApiAccountSignaturesPutAccountSignatureImageRequest) Execute() (*AccountSignature, *http.Response, error) {
	return r.ApiService.AccountSignaturesPutAccountSignatureImageExecute(r)
}

/*
AccountSignaturesPutAccountSignatureImage Sets a signature image, initials, or stamp.

Sets a signature image, initials, or stamp.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param imageType Specificies the type of image. Valid values:  - `stamp_image` - `signature_image` - `initials_image`
 @param signatureId The ID of the account stamp.
 @return ApiAccountSignaturesPutAccountSignatureImageRequest
*/
func (a *AccountSignaturesAPIService) AccountSignaturesPutAccountSignatureImage(ctx context.Context, accountId string, imageType string, signatureId string) ApiAccountSignaturesPutAccountSignatureImageRequest {
	return ApiAccountSignaturesPutAccountSignatureImageRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		imageType: imageType,
		signatureId: signatureId,
	}
}

// Execute executes the request
//  @return AccountSignature
func (a *AccountSignaturesAPIService) AccountSignaturesPutAccountSignatureImageExecute(r ApiAccountSignaturesPutAccountSignatureImageRequest) (*AccountSignature, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSignature
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSignaturesAPIService.AccountSignaturesPutAccountSignatureImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signatures/{signatureId}/{imageType}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageType"+"}", url.PathEscape(parameterValueToString(r.imageType, "imageType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signatureId"+"}", url.PathEscape(parameterValueToString(r.signatureId, "signatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.transparentPng != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transparent_png", r.transparentPng, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
