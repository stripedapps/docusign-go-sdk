/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingPlansAPIService BillingPlansAPI service
type BillingPlansAPIService service

type ApiBillingPlanGetBillingPlanRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	accountId string
	includeCreditCardInformation *string
	includeDowngradeInformation *string
	includeMetadata *string
	includeSuccessorPlans *string
	includeTaxExemptId *string
}

// When **true,** payment information including credit card information will show in the return.
func (r ApiBillingPlanGetBillingPlanRequest) IncludeCreditCardInformation(includeCreditCardInformation string) ApiBillingPlanGetBillingPlanRequest {
	r.includeCreditCardInformation = &includeCreditCardInformation
	return r
}

func (r ApiBillingPlanGetBillingPlanRequest) IncludeDowngradeInformation(includeDowngradeInformation string) ApiBillingPlanGetBillingPlanRequest {
	r.includeDowngradeInformation = &includeDowngradeInformation
	return r
}

// When **true,** the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properties are included the response and an array of &#x60;supportedCountries&#x60; is added to the &#x60;billingAddress&#x60; information. 
func (r ApiBillingPlanGetBillingPlanRequest) IncludeMetadata(includeMetadata string) ApiBillingPlanGetBillingPlanRequest {
	r.includeMetadata = &includeMetadata
	return r
}

// When **true,** excludes successor information from the response.
func (r ApiBillingPlanGetBillingPlanRequest) IncludeSuccessorPlans(includeSuccessorPlans string) ApiBillingPlanGetBillingPlanRequest {
	r.includeSuccessorPlans = &includeSuccessorPlans
	return r
}

func (r ApiBillingPlanGetBillingPlanRequest) IncludeTaxExemptId(includeTaxExemptId string) ApiBillingPlanGetBillingPlanRequest {
	r.includeTaxExemptId = &includeTaxExemptId
	return r
}

func (r ApiBillingPlanGetBillingPlanRequest) Execute() (*AccountBillingPlanResponse, *http.Response, error) {
	return r.ApiService.BillingPlanGetBillingPlanExecute(r)
}

/*
BillingPlanGetBillingPlan Get Account Billing Plan

Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.

By default the successor plan and credit card information is included in the response. You can exclude this information from the response by adding the appropriate optional query string and setting it to **false.**

Response

The response returns the billing plan information, including the currency code, for the plan. The `billingPlan` and `succesorPlans` property values are the same as those shown in the [Billing: getBillingPlan](/docs/esign-rest-api/reference/billing/billingplans/get/) reference. the `billingAddress` and `creditCardInformation` property values are the same as those shown in the [Billing: updatePlan](/docs/esign-rest-api/reference/billing/billingplans/update/) reference.

**Note:** When credit card number information displays, a mask is applied to the response so that only the last 4 digits of the card number are visible.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiBillingPlanGetBillingPlanRequest
*/
func (a *BillingPlansAPIService) BillingPlanGetBillingPlan(ctx context.Context, accountId string) ApiBillingPlanGetBillingPlanRequest {
	return ApiBillingPlanGetBillingPlanRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountBillingPlanResponse
func (a *BillingPlansAPIService) BillingPlanGetBillingPlanExecute(r ApiBillingPlanGetBillingPlanRequest) (*AccountBillingPlanResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountBillingPlanResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlanGetBillingPlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/billing_plan"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeCreditCardInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_credit_card_information", r.includeCreditCardInformation, "")
	}
	if r.includeDowngradeInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_downgrade_information", r.includeDowngradeInformation, "")
	}
	if r.includeMetadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_metadata", r.includeMetadata, "")
	}
	if r.includeSuccessorPlans != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_successor_plans", r.includeSuccessorPlans, "")
	}
	if r.includeTaxExemptId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_tax_exempt_id", r.includeTaxExemptId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingPlanGetCreditCardInfoRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	accountId string
}

func (r ApiBillingPlanGetCreditCardInfoRequest) Execute() (*CreditCardInformation, *http.Response, error) {
	return r.ApiService.BillingPlanGetCreditCardInfoExecute(r)
}

/*
BillingPlanGetCreditCardInfo Get credit card information

This method returns information about a credit card associated with an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiBillingPlanGetCreditCardInfoRequest
*/
func (a *BillingPlansAPIService) BillingPlanGetCreditCardInfo(ctx context.Context, accountId string) ApiBillingPlanGetCreditCardInfoRequest {
	return ApiBillingPlanGetCreditCardInfoRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return CreditCardInformation
func (a *BillingPlansAPIService) BillingPlanGetCreditCardInfoExecute(r ApiBillingPlanGetCreditCardInfoRequest) (*CreditCardInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditCardInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlanGetCreditCardInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/billing_plan/credit_card"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingPlanGetDowngradeRequestBillingInfoRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	accountId string
}

func (r ApiBillingPlanGetDowngradeRequestBillingInfoRequest) Execute() (*DowngradRequestBillingInfoResponse, *http.Response, error) {
	return r.ApiService.BillingPlanGetDowngradeRequestBillingInfoExecute(r)
}

/*
BillingPlanGetDowngradeRequestBillingInfo Returns downgrade plan information for the specified account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiBillingPlanGetDowngradeRequestBillingInfoRequest
*/
func (a *BillingPlansAPIService) BillingPlanGetDowngradeRequestBillingInfo(ctx context.Context, accountId string) ApiBillingPlanGetDowngradeRequestBillingInfoRequest {
	return ApiBillingPlanGetDowngradeRequestBillingInfoRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return DowngradRequestBillingInfoResponse
func (a *BillingPlansAPIService) BillingPlanGetDowngradeRequestBillingInfoExecute(r ApiBillingPlanGetDowngradeRequestBillingInfoRequest) (*DowngradRequestBillingInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DowngradRequestBillingInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlanGetDowngradeRequestBillingInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/billing_plan/downgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingPlanPutBillingPlanRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	accountId string
	previewBillingPlan *string
	billingPlanInformation *BillingPlanInformation
}

// When **true,** updates the account using a preview billing plan.
func (r ApiBillingPlanPutBillingPlanRequest) PreviewBillingPlan(previewBillingPlan string) ApiBillingPlanPutBillingPlanRequest {
	r.previewBillingPlan = &previewBillingPlan
	return r
}

func (r ApiBillingPlanPutBillingPlanRequest) BillingPlanInformation(billingPlanInformation BillingPlanInformation) ApiBillingPlanPutBillingPlanRequest {
	r.billingPlanInformation = &billingPlanInformation
	return r
}

func (r ApiBillingPlanPutBillingPlanRequest) Execute() (*BillingPlanUpdateResponse, *http.Response, error) {
	return r.ApiService.BillingPlanPutBillingPlanExecute(r)
}

/*
BillingPlanPutBillingPlan Updates an account billing plan.

Updates the billing plan information, billing address, and credit card information for the specified account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiBillingPlanPutBillingPlanRequest
*/
func (a *BillingPlansAPIService) BillingPlanPutBillingPlan(ctx context.Context, accountId string) ApiBillingPlanPutBillingPlanRequest {
	return ApiBillingPlanPutBillingPlanRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return BillingPlanUpdateResponse
func (a *BillingPlansAPIService) BillingPlanPutBillingPlanExecute(r ApiBillingPlanPutBillingPlanRequest) (*BillingPlanUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingPlanUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlanPutBillingPlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/billing_plan"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.previewBillingPlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preview_billing_plan", r.previewBillingPlan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.billingPlanInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingPlanPutDowngradeAccountBillingPlanRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	accountId string
	downgradeBillingPlanInformation *DowngradeBillingPlanInformation
}

func (r ApiBillingPlanPutDowngradeAccountBillingPlanRequest) DowngradeBillingPlanInformation(downgradeBillingPlanInformation DowngradeBillingPlanInformation) ApiBillingPlanPutDowngradeAccountBillingPlanRequest {
	r.downgradeBillingPlanInformation = &downgradeBillingPlanInformation
	return r
}

func (r ApiBillingPlanPutDowngradeAccountBillingPlanRequest) Execute() (*DowngradePlanUpdateResponse, *http.Response, error) {
	return r.ApiService.BillingPlanPutDowngradeAccountBillingPlanExecute(r)
}

/*
BillingPlanPutDowngradeAccountBillingPlan Queues downgrade billing plan request for an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiBillingPlanPutDowngradeAccountBillingPlanRequest
*/
func (a *BillingPlansAPIService) BillingPlanPutDowngradeAccountBillingPlan(ctx context.Context, accountId string) ApiBillingPlanPutDowngradeAccountBillingPlanRequest {
	return ApiBillingPlanPutDowngradeAccountBillingPlanRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return DowngradePlanUpdateResponse
func (a *BillingPlansAPIService) BillingPlanPutDowngradeAccountBillingPlanExecute(r ApiBillingPlanPutDowngradeAccountBillingPlanRequest) (*DowngradePlanUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DowngradePlanUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlanPutDowngradeAccountBillingPlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/billing_plan/downgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.downgradeBillingPlanInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingPlansGetBillingPlanRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	billingPlanId string
}

func (r ApiBillingPlansGetBillingPlanRequest) Execute() (*BillingPlanResponse, *http.Response, error) {
	return r.ApiService.BillingPlansGetBillingPlanExecute(r)
}

/*
BillingPlansGetBillingPlan Gets billing plan details.

Retrieves the billing plan details for the specified billing plan ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingPlanId The ID of the billing plan being accessed.
 @return ApiBillingPlansGetBillingPlanRequest
*/
func (a *BillingPlansAPIService) BillingPlansGetBillingPlan(ctx context.Context, billingPlanId string) ApiBillingPlansGetBillingPlanRequest {
	return ApiBillingPlansGetBillingPlanRequest{
		ApiService: a,
		ctx: ctx,
		billingPlanId: billingPlanId,
	}
}

// Execute executes the request
//  @return BillingPlanResponse
func (a *BillingPlansAPIService) BillingPlansGetBillingPlanExecute(r ApiBillingPlansGetBillingPlanRequest) (*BillingPlanResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingPlanResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlansGetBillingPlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/billing_plans/{billingPlanId}"
	localVarPath = strings.Replace(localVarPath, "{"+"billingPlanId"+"}", url.PathEscape(parameterValueToString(r.billingPlanId, "billingPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBillingPlansGetBillingPlansRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
}

func (r ApiBillingPlansGetBillingPlansRequest) Execute() (*BillingPlansResponse, *http.Response, error) {
	return r.ApiService.BillingPlansGetBillingPlansExecute(r)
}

/*
BillingPlansGetBillingPlans Gets a list of available billing plans.

Retrieves a list of the billing plans associated with a distributor.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBillingPlansGetBillingPlansRequest
*/
func (a *BillingPlansAPIService) BillingPlansGetBillingPlans(ctx context.Context) ApiBillingPlansGetBillingPlansRequest {
	return ApiBillingPlansGetBillingPlansRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BillingPlansResponse
func (a *BillingPlansAPIService) BillingPlansGetBillingPlansExecute(r ApiBillingPlansGetBillingPlansRequest) (*BillingPlansResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingPlansResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.BillingPlansGetBillingPlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/billing_plans"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest struct {
	ctx context.Context
	ApiService *BillingPlansAPIService
	accountId string
	purchasedEnvelopesInformation *PurchasedEnvelopesInformation
}

func (r ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest) PurchasedEnvelopesInformation(purchasedEnvelopesInformation PurchasedEnvelopesInformation) ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest {
	r.purchasedEnvelopesInformation = &purchasedEnvelopesInformation
	return r
}

func (r ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PurchasedEnvelopesPutPurchasedEnvelopesExecute(r)
}

/*
PurchasedEnvelopesPutPurchasedEnvelopes Reserved: Purchase additional envelopes.

Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest
*/
func (a *BillingPlansAPIService) PurchasedEnvelopesPutPurchasedEnvelopes(ctx context.Context, accountId string) ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest {
	return ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *BillingPlansAPIService) PurchasedEnvelopesPutPurchasedEnvelopesExecute(r ApiPurchasedEnvelopesPutPurchasedEnvelopesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingPlansAPIService.PurchasedEnvelopesPutPurchasedEnvelopes")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/billing_plan/purchased_envelopes"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.purchasedEnvelopesInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
