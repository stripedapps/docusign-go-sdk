/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopePurgeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopePurgeConfiguration{}

// EnvelopePurgeConfiguration Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`). 
type EnvelopePurgeConfiguration struct {
	// When **true,** purging is enabled.
	PurgeEnvelopes *string `json:"purgeEnvelopes,omitempty"`
	// When **true,** the system also redacts personally identifiable information (PII).  **Note:** To redact PII, you must also set the property `removeTabsAndEnvelopeAttachments` to **true.**
	RedactPII *string `json:"redactPII,omitempty"`
	// When **true,** the system also purges the tabs and attachments associated with the envelopes. 
	RemoveTabsAndEnvelopeAttachments *string `json:"removeTabsAndEnvelopeAttachments,omitempty"`
	// The number of days to retain envelope documents before purging them. This value must be a number between `0` and `999`.
	RetentionDays *string `json:"retentionDays,omitempty"`
}

// NewEnvelopePurgeConfiguration instantiates a new EnvelopePurgeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopePurgeConfiguration() *EnvelopePurgeConfiguration {
	this := EnvelopePurgeConfiguration{}
	return &this
}

// NewEnvelopePurgeConfigurationWithDefaults instantiates a new EnvelopePurgeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopePurgeConfigurationWithDefaults() *EnvelopePurgeConfiguration {
	this := EnvelopePurgeConfiguration{}
	return &this
}

// GetPurgeEnvelopes returns the PurgeEnvelopes field value if set, zero value otherwise.
func (o *EnvelopePurgeConfiguration) GetPurgeEnvelopes() string {
	if o == nil || IsNil(o.PurgeEnvelopes) {
		var ret string
		return ret
	}
	return *o.PurgeEnvelopes
}

// GetPurgeEnvelopesOk returns a tuple with the PurgeEnvelopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopePurgeConfiguration) GetPurgeEnvelopesOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeEnvelopes) {
		return nil, false
	}
	return o.PurgeEnvelopes, true
}

// HasPurgeEnvelopes returns a boolean if a field has been set.
func (o *EnvelopePurgeConfiguration) HasPurgeEnvelopes() bool {
	if o != nil && !IsNil(o.PurgeEnvelopes) {
		return true
	}

	return false
}

// SetPurgeEnvelopes gets a reference to the given string and assigns it to the PurgeEnvelopes field.
func (o *EnvelopePurgeConfiguration) SetPurgeEnvelopes(v string) {
	o.PurgeEnvelopes = &v
}

// GetRedactPII returns the RedactPII field value if set, zero value otherwise.
func (o *EnvelopePurgeConfiguration) GetRedactPII() string {
	if o == nil || IsNil(o.RedactPII) {
		var ret string
		return ret
	}
	return *o.RedactPII
}

// GetRedactPIIOk returns a tuple with the RedactPII field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopePurgeConfiguration) GetRedactPIIOk() (*string, bool) {
	if o == nil || IsNil(o.RedactPII) {
		return nil, false
	}
	return o.RedactPII, true
}

// HasRedactPII returns a boolean if a field has been set.
func (o *EnvelopePurgeConfiguration) HasRedactPII() bool {
	if o != nil && !IsNil(o.RedactPII) {
		return true
	}

	return false
}

// SetRedactPII gets a reference to the given string and assigns it to the RedactPII field.
func (o *EnvelopePurgeConfiguration) SetRedactPII(v string) {
	o.RedactPII = &v
}

// GetRemoveTabsAndEnvelopeAttachments returns the RemoveTabsAndEnvelopeAttachments field value if set, zero value otherwise.
func (o *EnvelopePurgeConfiguration) GetRemoveTabsAndEnvelopeAttachments() string {
	if o == nil || IsNil(o.RemoveTabsAndEnvelopeAttachments) {
		var ret string
		return ret
	}
	return *o.RemoveTabsAndEnvelopeAttachments
}

// GetRemoveTabsAndEnvelopeAttachmentsOk returns a tuple with the RemoveTabsAndEnvelopeAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopePurgeConfiguration) GetRemoveTabsAndEnvelopeAttachmentsOk() (*string, bool) {
	if o == nil || IsNil(o.RemoveTabsAndEnvelopeAttachments) {
		return nil, false
	}
	return o.RemoveTabsAndEnvelopeAttachments, true
}

// HasRemoveTabsAndEnvelopeAttachments returns a boolean if a field has been set.
func (o *EnvelopePurgeConfiguration) HasRemoveTabsAndEnvelopeAttachments() bool {
	if o != nil && !IsNil(o.RemoveTabsAndEnvelopeAttachments) {
		return true
	}

	return false
}

// SetRemoveTabsAndEnvelopeAttachments gets a reference to the given string and assigns it to the RemoveTabsAndEnvelopeAttachments field.
func (o *EnvelopePurgeConfiguration) SetRemoveTabsAndEnvelopeAttachments(v string) {
	o.RemoveTabsAndEnvelopeAttachments = &v
}

// GetRetentionDays returns the RetentionDays field value if set, zero value otherwise.
func (o *EnvelopePurgeConfiguration) GetRetentionDays() string {
	if o == nil || IsNil(o.RetentionDays) {
		var ret string
		return ret
	}
	return *o.RetentionDays
}

// GetRetentionDaysOk returns a tuple with the RetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopePurgeConfiguration) GetRetentionDaysOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionDays) {
		return nil, false
	}
	return o.RetentionDays, true
}

// HasRetentionDays returns a boolean if a field has been set.
func (o *EnvelopePurgeConfiguration) HasRetentionDays() bool {
	if o != nil && !IsNil(o.RetentionDays) {
		return true
	}

	return false
}

// SetRetentionDays gets a reference to the given string and assigns it to the RetentionDays field.
func (o *EnvelopePurgeConfiguration) SetRetentionDays(v string) {
	o.RetentionDays = &v
}

func (o EnvelopePurgeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopePurgeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PurgeEnvelopes) {
		toSerialize["purgeEnvelopes"] = o.PurgeEnvelopes
	}
	if !IsNil(o.RedactPII) {
		toSerialize["redactPII"] = o.RedactPII
	}
	if !IsNil(o.RemoveTabsAndEnvelopeAttachments) {
		toSerialize["removeTabsAndEnvelopeAttachments"] = o.RemoveTabsAndEnvelopeAttachments
	}
	if !IsNil(o.RetentionDays) {
		toSerialize["retentionDays"] = o.RetentionDays
	}
	return toSerialize, nil
}

type NullableEnvelopePurgeConfiguration struct {
	value *EnvelopePurgeConfiguration
	isSet bool
}

func (v NullableEnvelopePurgeConfiguration) Get() *EnvelopePurgeConfiguration {
	return v.value
}

func (v *NullableEnvelopePurgeConfiguration) Set(val *EnvelopePurgeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopePurgeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopePurgeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopePurgeConfiguration(val *EnvelopePurgeConfiguration) *NullableEnvelopePurgeConfiguration {
	return &NullableEnvelopePurgeConfiguration{value: val, isSet: true}
}

func (v NullableEnvelopePurgeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopePurgeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


