/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotaryJurisdiction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotaryJurisdiction{}

// NotaryJurisdiction Creating, updating, and deleting notary jurisdiction objects.
type NotaryJurisdiction struct {
	// 
	CommissionExpiration *string `json:"commissionExpiration,omitempty"`
	// 
	CommissionId *string `json:"commissionId,omitempty"`
	// 
	County *string `json:"county,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	Jurisdiction *Jurisdiction `json:"jurisdiction,omitempty"`
	// 
	RegisteredName *string `json:"registeredName,omitempty"`
	// 
	SealType *string `json:"sealType,omitempty"`
}

// NewNotaryJurisdiction instantiates a new NotaryJurisdiction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotaryJurisdiction() *NotaryJurisdiction {
	this := NotaryJurisdiction{}
	return &this
}

// NewNotaryJurisdictionWithDefaults instantiates a new NotaryJurisdiction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotaryJurisdictionWithDefaults() *NotaryJurisdiction {
	this := NotaryJurisdiction{}
	return &this
}

// GetCommissionExpiration returns the CommissionExpiration field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetCommissionExpiration() string {
	if o == nil || IsNil(o.CommissionExpiration) {
		var ret string
		return ret
	}
	return *o.CommissionExpiration
}

// GetCommissionExpirationOk returns a tuple with the CommissionExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetCommissionExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionExpiration) {
		return nil, false
	}
	return o.CommissionExpiration, true
}

// HasCommissionExpiration returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasCommissionExpiration() bool {
	if o != nil && !IsNil(o.CommissionExpiration) {
		return true
	}

	return false
}

// SetCommissionExpiration gets a reference to the given string and assigns it to the CommissionExpiration field.
func (o *NotaryJurisdiction) SetCommissionExpiration(v string) {
	o.CommissionExpiration = &v
}

// GetCommissionId returns the CommissionId field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetCommissionId() string {
	if o == nil || IsNil(o.CommissionId) {
		var ret string
		return ret
	}
	return *o.CommissionId
}

// GetCommissionIdOk returns a tuple with the CommissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetCommissionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionId) {
		return nil, false
	}
	return o.CommissionId, true
}

// HasCommissionId returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasCommissionId() bool {
	if o != nil && !IsNil(o.CommissionId) {
		return true
	}

	return false
}

// SetCommissionId gets a reference to the given string and assigns it to the CommissionId field.
func (o *NotaryJurisdiction) SetCommissionId(v string) {
	o.CommissionId = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetCounty() string {
	if o == nil || IsNil(o.County) {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetCountyOk() (*string, bool) {
	if o == nil || IsNil(o.County) {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasCounty() bool {
	if o != nil && !IsNil(o.County) {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *NotaryJurisdiction) SetCounty(v string) {
	o.County = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *NotaryJurisdiction) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetJurisdiction returns the Jurisdiction field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetJurisdiction() Jurisdiction {
	if o == nil || IsNil(o.Jurisdiction) {
		var ret Jurisdiction
		return ret
	}
	return *o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetJurisdictionOk() (*Jurisdiction, bool) {
	if o == nil || IsNil(o.Jurisdiction) {
		return nil, false
	}
	return o.Jurisdiction, true
}

// HasJurisdiction returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasJurisdiction() bool {
	if o != nil && !IsNil(o.Jurisdiction) {
		return true
	}

	return false
}

// SetJurisdiction gets a reference to the given Jurisdiction and assigns it to the Jurisdiction field.
func (o *NotaryJurisdiction) SetJurisdiction(v Jurisdiction) {
	o.Jurisdiction = &v
}

// GetRegisteredName returns the RegisteredName field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetRegisteredName() string {
	if o == nil || IsNil(o.RegisteredName) {
		var ret string
		return ret
	}
	return *o.RegisteredName
}

// GetRegisteredNameOk returns a tuple with the RegisteredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetRegisteredNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegisteredName) {
		return nil, false
	}
	return o.RegisteredName, true
}

// HasRegisteredName returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasRegisteredName() bool {
	if o != nil && !IsNil(o.RegisteredName) {
		return true
	}

	return false
}

// SetRegisteredName gets a reference to the given string and assigns it to the RegisteredName field.
func (o *NotaryJurisdiction) SetRegisteredName(v string) {
	o.RegisteredName = &v
}

// GetSealType returns the SealType field value if set, zero value otherwise.
func (o *NotaryJurisdiction) GetSealType() string {
	if o == nil || IsNil(o.SealType) {
		var ret string
		return ret
	}
	return *o.SealType
}

// GetSealTypeOk returns a tuple with the SealType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJurisdiction) GetSealTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SealType) {
		return nil, false
	}
	return o.SealType, true
}

// HasSealType returns a boolean if a field has been set.
func (o *NotaryJurisdiction) HasSealType() bool {
	if o != nil && !IsNil(o.SealType) {
		return true
	}

	return false
}

// SetSealType gets a reference to the given string and assigns it to the SealType field.
func (o *NotaryJurisdiction) SetSealType(v string) {
	o.SealType = &v
}

func (o NotaryJurisdiction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotaryJurisdiction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommissionExpiration) {
		toSerialize["commissionExpiration"] = o.CommissionExpiration
	}
	if !IsNil(o.CommissionId) {
		toSerialize["commissionId"] = o.CommissionId
	}
	if !IsNil(o.County) {
		toSerialize["county"] = o.County
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.Jurisdiction) {
		toSerialize["jurisdiction"] = o.Jurisdiction
	}
	if !IsNil(o.RegisteredName) {
		toSerialize["registeredName"] = o.RegisteredName
	}
	if !IsNil(o.SealType) {
		toSerialize["sealType"] = o.SealType
	}
	return toSerialize, nil
}

type NullableNotaryJurisdiction struct {
	value *NotaryJurisdiction
	isSet bool
}

func (v NullableNotaryJurisdiction) Get() *NotaryJurisdiction {
	return v.value
}

func (v *NullableNotaryJurisdiction) Set(val *NotaryJurisdiction) {
	v.value = val
	v.isSet = true
}

func (v NullableNotaryJurisdiction) IsSet() bool {
	return v.isSet
}

func (v *NullableNotaryJurisdiction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotaryJurisdiction(val *NotaryJurisdiction) *NullableNotaryJurisdiction {
	return &NullableNotaryJurisdiction{value: val, isSet: true}
}

func (v NullableNotaryJurisdiction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotaryJurisdiction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


