/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentsPublish type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentsPublish{}

// CommentsPublish 
type CommentsPublish struct {
	// 
	CommentsToPublish []CommentPublish `json:"commentsToPublish,omitempty"`
}

// NewCommentsPublish instantiates a new CommentsPublish object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentsPublish() *CommentsPublish {
	this := CommentsPublish{}
	return &this
}

// NewCommentsPublishWithDefaults instantiates a new CommentsPublish object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsPublishWithDefaults() *CommentsPublish {
	this := CommentsPublish{}
	return &this
}

// GetCommentsToPublish returns the CommentsToPublish field value if set, zero value otherwise.
func (o *CommentsPublish) GetCommentsToPublish() []CommentPublish {
	if o == nil || IsNil(o.CommentsToPublish) {
		var ret []CommentPublish
		return ret
	}
	return o.CommentsToPublish
}

// GetCommentsToPublishOk returns a tuple with the CommentsToPublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsPublish) GetCommentsToPublishOk() ([]CommentPublish, bool) {
	if o == nil || IsNil(o.CommentsToPublish) {
		return nil, false
	}
	return o.CommentsToPublish, true
}

// HasCommentsToPublish returns a boolean if a field has been set.
func (o *CommentsPublish) HasCommentsToPublish() bool {
	if o != nil && !IsNil(o.CommentsToPublish) {
		return true
	}

	return false
}

// SetCommentsToPublish gets a reference to the given []CommentPublish and assigns it to the CommentsToPublish field.
func (o *CommentsPublish) SetCommentsToPublish(v []CommentPublish) {
	o.CommentsToPublish = v
}

func (o CommentsPublish) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentsPublish) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommentsToPublish) {
		toSerialize["commentsToPublish"] = o.CommentsToPublish
	}
	return toSerialize, nil
}

type NullableCommentsPublish struct {
	value *CommentsPublish
	isSet bool
}

func (v NullableCommentsPublish) Get() *CommentsPublish {
	return v.value
}

func (v *NullableCommentsPublish) Set(val *CommentsPublish) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsPublish) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsPublish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsPublish(val *CommentsPublish) *NullableCommentsPublish {
	return &NullableCommentsPublish{value: val, isSet: true}
}

func (v NullableCommentsPublish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsPublish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


