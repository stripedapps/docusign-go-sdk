/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NewUsersDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewUsersDefinition{}

// NewUsersDefinition 
type NewUsersDefinition struct {
	// A list of one or more new users.
	NewUsers []UserInformation `json:"newUsers,omitempty"`
}

// NewNewUsersDefinition instantiates a new NewUsersDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewUsersDefinition() *NewUsersDefinition {
	this := NewUsersDefinition{}
	return &this
}

// NewNewUsersDefinitionWithDefaults instantiates a new NewUsersDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewUsersDefinitionWithDefaults() *NewUsersDefinition {
	this := NewUsersDefinition{}
	return &this
}

// GetNewUsers returns the NewUsers field value if set, zero value otherwise.
func (o *NewUsersDefinition) GetNewUsers() []UserInformation {
	if o == nil || IsNil(o.NewUsers) {
		var ret []UserInformation
		return ret
	}
	return o.NewUsers
}

// GetNewUsersOk returns a tuple with the NewUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUsersDefinition) GetNewUsersOk() ([]UserInformation, bool) {
	if o == nil || IsNil(o.NewUsers) {
		return nil, false
	}
	return o.NewUsers, true
}

// HasNewUsers returns a boolean if a field has been set.
func (o *NewUsersDefinition) HasNewUsers() bool {
	if o != nil && !IsNil(o.NewUsers) {
		return true
	}

	return false
}

// SetNewUsers gets a reference to the given []UserInformation and assigns it to the NewUsers field.
func (o *NewUsersDefinition) SetNewUsers(v []UserInformation) {
	o.NewUsers = v
}

func (o NewUsersDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewUsersDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewUsers) {
		toSerialize["newUsers"] = o.NewUsers
	}
	return toSerialize, nil
}

type NullableNewUsersDefinition struct {
	value *NewUsersDefinition
	isSet bool
}

func (v NullableNewUsersDefinition) Get() *NewUsersDefinition {
	return v.value
}

func (v *NullableNewUsersDefinition) Set(val *NewUsersDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUsersDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUsersDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUsersDefinition(val *NewUsersDefinition) *NullableNewUsersDefinition {
	return &NullableNewUsersDefinition{value: val, isSet: true}
}

func (v NullableNewUsersDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUsersDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


