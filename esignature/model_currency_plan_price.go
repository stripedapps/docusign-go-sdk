/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CurrencyPlanPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyPlanPrice{}

// CurrencyPlanPrice 
type CurrencyPlanPrice struct {
	// Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the account.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Specifies the currency symbol. Valid values:  - `AED` <br>  \"د.إ\" - `AFN` <br>  \"؋\" - `ALL` <br>  \"L\" - `AMD` <br>  \"֏\" - `ANG` <br>  \"ƒ\" - `AOA` <br>  \"Kz\" - `ARS` <br>  \"$\" - `AUD` <br>  \"$\" - `AWG` <br>  \"ƒ\" - `AZN` <br>  \"₼\" - `BAM` <br>  \"KM\" - `BBD` <br>  \"$\" - `BDT` <br>  \"৳\" - `BGN` <br>  \"лв\" - `BHD` <br>  \".د.ب\" - `BIF` <br>  \"FBu\" - `BMD` <br>  \"$\" - `BND` <br>  \"$\" - `BOB` <br>  \"$b\" - `BOV` <br>  \"BOV\" - `BRL` <br>  \"R$\" - `BSD` <br>  \"$\" - `BTN` <br>  \"Nu.\" - `BWP` <br>  \"P\" - `BYN` <br>  \"Br\" - `BYR` <br>  \"Br\" - `BZD` <br>  \"BZ$\" - `CAD` <br>  \"$\" - `CDF` <br>  \"FC\" - `CHE` <br>  \"CHE\" - `CHF` <br>  \"CHF\" - `CHW` <br>  \"CHW\" - `CLF` <br>  \"CLF\" - `CLP` <br>  \"$\" - `CNY` <br>  \"¥\" - `COP` <br>  \"$\" - `COU` <br>  \"COU\" - `CRC` <br>  \"₡\" - `CUC` <br>  \"$\" - `CUP` <br>  \"₱\" - `CVE` <br>  \"$\" - `CZK` <br>  \"Kč\" - `DJF` <br>  \"Fdj\" - `DKK` <br>  \"kr\" - `DOP` <br>  \"RD$\" - `DZD` <br>  \"دج\" - `EGP` <br>  \"£\" - `ERN` <br>  \"Nfk\" - `ETB` <br>  \"Br\" - `EUR` <br>  \"€\" - `FJD` <br>  \"$\" - `FKP` <br>  \"£\" - `GBP` <br>  \"£\" - `GEL` <br>  \"₾\" - `GHS` <br>  \"GH₵\" - `GIP` <br>  \"£\" - `GMD` <br>  \"D\" - `GNF` <br>  \"FG\" - `GTQ` <br>  \"Q\" - `GYD` <br>  \"$\" - `HKD` <br>  \"$\" - `HNL` <br>  \"L\" - `HRK` <br>  \"kn\" - `HTG` <br>  \"G\" - `HUF` <br>  \"Ft\" - `IDR` <br>  \"Rp\" - `ILS` <br>  \"₪\" - `INR` <br>  \"₹\" - `IQD` <br>  \"ع.د\" - `IRR` <br>  \"﷼\" - `ISK` <br>  \"kr\" - `JMD` <br>  \"J$\" - `JOD` <br>  \"JD\" - `JPY` <br>  \"¥\" - `KES` <br>  \"KSh\" - `KGS` <br>  \"лв\" - `KHR` <br>  \"៛\" - `KMF` <br>  \"CF\" - `KPW` <br>  \"₩\" - `KRW` <br>  \"₩\" - `KWD` <br>  \"KD\" - `KYD` <br>  \"$\" - `KZT` <br>  \"₸\" - `LAK` <br>  \"₭\" - `LBP` <br>  \"£\" - `LKR` <br>  \"₨\" - `LRD` <br>  \"$\" - `LSL` <br>  \"M\" - `LYD` <br>  \"LD\" - `MAD` <br>  \"MAD\" - `MDL` <br>  \"lei\" - `MGA` <br>  \"Ar\" - `MKD` <br>  \"ден\" - `MMK` <br>  \"K\" - `MNT` <br>  \"₮\" - `MOP` <br>  \"MOP$\" - `MRO` <br>  \"UM\" - `MUR` <br>  \"₨\" - `MVR` <br>  \"Rf\" - `MWK` <br>  \"MK\" - `MXN` <br>  \"$\" - `MXV` <br>  \"MXV\" - `MYR` <br>  \"RM\" - `MZN` <br>  \"MT\" - `NAD` <br>  \"$\" - `NGN` <br>  \"₦\" - `NIO` <br>  \"C$\" - `NOK` <br>  \"kr\" - `NPR` <br>  \"₨\" - `NZD` <br>  \"$\" - `OMR` <br>  \"﷼\" - `PAB` <br>  \"B/.\" - `PEN` <br>  \"S/.\" - `PGK` <br>  \"K\" - `PHP` <br>  \"₱\" - `PKR` <br>  \"₨\" - `PLN` <br>  \"zł\" - `PYG` <br>  \"Gs\" - `QAR` <br>  \"﷼\" - `RON` <br>  \"lei\" - `RSD` <br>  \"Дин.\" - `RUB` <br>  \"₽\" - `RWF` <br>  \"R₣\" - `SAR` <br>  \"﷼\" - `SBD` <br>  \"$\" - `SCR` <br>  \"₨\" - `SDG` <br>  \"ج.س.\" - `SEK` <br>  \"kr\" - `SGD` <br>  \"S$\" - `SHP` <br>  \"£\" - `SLL` <br>  \"Le\" - `SOS` <br>  \"S\" - `SRD` <br>  \"$\" - `SSP` <br>  \"£\" - `STD` <br>  \"Db\" - `SVC` <br>  \"$\" - `SYP` <br>  \"£\" - `SZL` <br>  \"E\" - `THB` <br>  \"฿\" - `TJS` <br>  \"SM\" - `TMT` <br>  \"T\" - `TND` <br>  \"د.ت\" - `TOP` <br>  \"T$\" - `TRY` <br>  \"₺\" - `TTD` <br>  \"TT$\" - `TWD` <br>  \"NT$\" - `TZS` <br>  \"TSh\" - `UAH` <br>  \"₴\" - `UGX` <br>  \"USh\" - `USD` <br>  \"$\" - `USN` <br>  \"$\" - `UYI` <br>  \"UYI\" - `UYU` <br>  \"$U\" - `UZS` <br>  \"лв\" - `VEF` <br>  \"Bs\" - `VND` <br>  \"₫\" - `VUV` <br>  \"VT\" - `WST` <br>  \"WS$\" - `XAF` <br>  \"FCFA\" - `XAG` <br>  \"XAG\"  Silver - `XAU` <br>  \"XAU\"  Gold - `XBA` <br>  \"XBA\"  Bond Markets Units European Composite Unit (EURCO) - `XBB` <br>  \"XBB\"  European Monetary Unit (E.M.U.-6) - `XBC` <br>  \"XBC\"  European Unit of Account 9(E.U.A.-9) - `XBD` <br>  \"XBD\"  European Unit of Account 17(E.U.A.-17) - `XCD` <br>  \"$\" - `XDR` <br>  \"XDR\" }` <br>  // Special Drawing Rights (SDRs)` <br>  units of account for IMF - `XOF` <br>  \"CFA\" - `XPD` <br>  \"XPD\"  Palladium - `XPF` <br>  \"₣\" - `XPT` <br>  \"XPT\"  Platinum - `XSU` <br>  \"Sucre\" - `XTS` <br>  \"XTS\" Reserved for testing purposes - `XUA` <br>  \"XUA\" - `XXX` <br>  \"XXX\" Denotes transaction involving no currency - `YER` <br>  \"﷼\" - `ZAR` <br>  \"R\" - `ZMW` <br>  \"ZK\" - `ZWL` <br>  \"$\" 
	CurrencySymbol *string `json:"currencySymbol,omitempty"`
	// The per-seat price associated with the plan.  Example: `\"456.0000\"`
	PerSeatPrice *string `json:"perSeatPrice,omitempty"`
	SupportedCardTypes *CreditCardTypes `json:"supportedCardTypes,omitempty"`
	// The support incident fee charged for each support incident.  Example: `\"$0.00\"`
	SupportIncidentFee *string `json:"supportIncidentFee,omitempty"`
	// The support plan fee charged for this plan.  Example: `\"$0.00\"`
	SupportPlanFee *string `json:"supportPlanFee,omitempty"`
}

// NewCurrencyPlanPrice instantiates a new CurrencyPlanPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyPlanPrice() *CurrencyPlanPrice {
	this := CurrencyPlanPrice{}
	return &this
}

// NewCurrencyPlanPriceWithDefaults instantiates a new CurrencyPlanPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyPlanPriceWithDefaults() *CurrencyPlanPrice {
	this := CurrencyPlanPrice{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CurrencyPlanPrice) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyPlanPrice) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CurrencyPlanPrice) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CurrencyPlanPrice) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *CurrencyPlanPrice) GetCurrencySymbol() string {
	if o == nil || IsNil(o.CurrencySymbol) {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyPlanPrice) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencySymbol) {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *CurrencyPlanPrice) HasCurrencySymbol() bool {
	if o != nil && !IsNil(o.CurrencySymbol) {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *CurrencyPlanPrice) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetPerSeatPrice returns the PerSeatPrice field value if set, zero value otherwise.
func (o *CurrencyPlanPrice) GetPerSeatPrice() string {
	if o == nil || IsNil(o.PerSeatPrice) {
		var ret string
		return ret
	}
	return *o.PerSeatPrice
}

// GetPerSeatPriceOk returns a tuple with the PerSeatPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyPlanPrice) GetPerSeatPriceOk() (*string, bool) {
	if o == nil || IsNil(o.PerSeatPrice) {
		return nil, false
	}
	return o.PerSeatPrice, true
}

// HasPerSeatPrice returns a boolean if a field has been set.
func (o *CurrencyPlanPrice) HasPerSeatPrice() bool {
	if o != nil && !IsNil(o.PerSeatPrice) {
		return true
	}

	return false
}

// SetPerSeatPrice gets a reference to the given string and assigns it to the PerSeatPrice field.
func (o *CurrencyPlanPrice) SetPerSeatPrice(v string) {
	o.PerSeatPrice = &v
}

// GetSupportedCardTypes returns the SupportedCardTypes field value if set, zero value otherwise.
func (o *CurrencyPlanPrice) GetSupportedCardTypes() CreditCardTypes {
	if o == nil || IsNil(o.SupportedCardTypes) {
		var ret CreditCardTypes
		return ret
	}
	return *o.SupportedCardTypes
}

// GetSupportedCardTypesOk returns a tuple with the SupportedCardTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyPlanPrice) GetSupportedCardTypesOk() (*CreditCardTypes, bool) {
	if o == nil || IsNil(o.SupportedCardTypes) {
		return nil, false
	}
	return o.SupportedCardTypes, true
}

// HasSupportedCardTypes returns a boolean if a field has been set.
func (o *CurrencyPlanPrice) HasSupportedCardTypes() bool {
	if o != nil && !IsNil(o.SupportedCardTypes) {
		return true
	}

	return false
}

// SetSupportedCardTypes gets a reference to the given CreditCardTypes and assigns it to the SupportedCardTypes field.
func (o *CurrencyPlanPrice) SetSupportedCardTypes(v CreditCardTypes) {
	o.SupportedCardTypes = &v
}

// GetSupportIncidentFee returns the SupportIncidentFee field value if set, zero value otherwise.
func (o *CurrencyPlanPrice) GetSupportIncidentFee() string {
	if o == nil || IsNil(o.SupportIncidentFee) {
		var ret string
		return ret
	}
	return *o.SupportIncidentFee
}

// GetSupportIncidentFeeOk returns a tuple with the SupportIncidentFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyPlanPrice) GetSupportIncidentFeeOk() (*string, bool) {
	if o == nil || IsNil(o.SupportIncidentFee) {
		return nil, false
	}
	return o.SupportIncidentFee, true
}

// HasSupportIncidentFee returns a boolean if a field has been set.
func (o *CurrencyPlanPrice) HasSupportIncidentFee() bool {
	if o != nil && !IsNil(o.SupportIncidentFee) {
		return true
	}

	return false
}

// SetSupportIncidentFee gets a reference to the given string and assigns it to the SupportIncidentFee field.
func (o *CurrencyPlanPrice) SetSupportIncidentFee(v string) {
	o.SupportIncidentFee = &v
}

// GetSupportPlanFee returns the SupportPlanFee field value if set, zero value otherwise.
func (o *CurrencyPlanPrice) GetSupportPlanFee() string {
	if o == nil || IsNil(o.SupportPlanFee) {
		var ret string
		return ret
	}
	return *o.SupportPlanFee
}

// GetSupportPlanFeeOk returns a tuple with the SupportPlanFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyPlanPrice) GetSupportPlanFeeOk() (*string, bool) {
	if o == nil || IsNil(o.SupportPlanFee) {
		return nil, false
	}
	return o.SupportPlanFee, true
}

// HasSupportPlanFee returns a boolean if a field has been set.
func (o *CurrencyPlanPrice) HasSupportPlanFee() bool {
	if o != nil && !IsNil(o.SupportPlanFee) {
		return true
	}

	return false
}

// SetSupportPlanFee gets a reference to the given string and assigns it to the SupportPlanFee field.
func (o *CurrencyPlanPrice) SetSupportPlanFee(v string) {
	o.SupportPlanFee = &v
}

func (o CurrencyPlanPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyPlanPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencySymbol) {
		toSerialize["currencySymbol"] = o.CurrencySymbol
	}
	if !IsNil(o.PerSeatPrice) {
		toSerialize["perSeatPrice"] = o.PerSeatPrice
	}
	if !IsNil(o.SupportedCardTypes) {
		toSerialize["supportedCardTypes"] = o.SupportedCardTypes
	}
	if !IsNil(o.SupportIncidentFee) {
		toSerialize["supportIncidentFee"] = o.SupportIncidentFee
	}
	if !IsNil(o.SupportPlanFee) {
		toSerialize["supportPlanFee"] = o.SupportPlanFee
	}
	return toSerialize, nil
}

type NullableCurrencyPlanPrice struct {
	value *CurrencyPlanPrice
	isSet bool
}

func (v NullableCurrencyPlanPrice) Get() *CurrencyPlanPrice {
	return v.value
}

func (v *NullableCurrencyPlanPrice) Set(val *CurrencyPlanPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyPlanPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyPlanPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyPlanPrice(val *CurrencyPlanPrice) *NullableCurrencyPlanPrice {
	return &NullableCurrencyPlanPrice{value: val, isSet: true}
}

func (v NullableCurrencyPlanPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyPlanPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


