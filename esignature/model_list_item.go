/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListItem{}

// ListItem One of the selectable items in the `listItems` property of a [`list`](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/) tab.
type ListItem struct {
	// When **true,** indicates that this item is the default selection shown to a signer.   Only one selection can be set as the default.
	Selected *string `json:"selected,omitempty"`
	SelectedMetadata *PropertyMetadata `json:"selectedMetadata,omitempty"`
	// Specifies the text that is shown in the dropdown list. 
	Text *string `json:"text,omitempty"`
	TextMetadata *PropertyMetadata `json:"textMetadata,omitempty"`
	// Specifies the value that is used when the list item is selected.
	Value *string `json:"value,omitempty"`
	ValueMetadata *PropertyMetadata `json:"valueMetadata,omitempty"`
}

// NewListItem instantiates a new ListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListItem() *ListItem {
	this := ListItem{}
	return &this
}

// NewListItemWithDefaults instantiates a new ListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListItemWithDefaults() *ListItem {
	this := ListItem{}
	return &this
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *ListItem) GetSelected() string {
	if o == nil || IsNil(o.Selected) {
		var ret string
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetSelectedOk() (*string, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *ListItem) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given string and assigns it to the Selected field.
func (o *ListItem) SetSelected(v string) {
	o.Selected = &v
}

// GetSelectedMetadata returns the SelectedMetadata field value if set, zero value otherwise.
func (o *ListItem) GetSelectedMetadata() PropertyMetadata {
	if o == nil || IsNil(o.SelectedMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.SelectedMetadata
}

// GetSelectedMetadataOk returns a tuple with the SelectedMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetSelectedMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.SelectedMetadata) {
		return nil, false
	}
	return o.SelectedMetadata, true
}

// HasSelectedMetadata returns a boolean if a field has been set.
func (o *ListItem) HasSelectedMetadata() bool {
	if o != nil && !IsNil(o.SelectedMetadata) {
		return true
	}

	return false
}

// SetSelectedMetadata gets a reference to the given PropertyMetadata and assigns it to the SelectedMetadata field.
func (o *ListItem) SetSelectedMetadata(v PropertyMetadata) {
	o.SelectedMetadata = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ListItem) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ListItem) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ListItem) SetText(v string) {
	o.Text = &v
}

// GetTextMetadata returns the TextMetadata field value if set, zero value otherwise.
func (o *ListItem) GetTextMetadata() PropertyMetadata {
	if o == nil || IsNil(o.TextMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.TextMetadata
}

// GetTextMetadataOk returns a tuple with the TextMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetTextMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.TextMetadata) {
		return nil, false
	}
	return o.TextMetadata, true
}

// HasTextMetadata returns a boolean if a field has been set.
func (o *ListItem) HasTextMetadata() bool {
	if o != nil && !IsNil(o.TextMetadata) {
		return true
	}

	return false
}

// SetTextMetadata gets a reference to the given PropertyMetadata and assigns it to the TextMetadata field.
func (o *ListItem) SetTextMetadata(v PropertyMetadata) {
	o.TextMetadata = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ListItem) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ListItem) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ListItem) SetValue(v string) {
	o.Value = &v
}

// GetValueMetadata returns the ValueMetadata field value if set, zero value otherwise.
func (o *ListItem) GetValueMetadata() PropertyMetadata {
	if o == nil || IsNil(o.ValueMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.ValueMetadata
}

// GetValueMetadataOk returns a tuple with the ValueMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetValueMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.ValueMetadata) {
		return nil, false
	}
	return o.ValueMetadata, true
}

// HasValueMetadata returns a boolean if a field has been set.
func (o *ListItem) HasValueMetadata() bool {
	if o != nil && !IsNil(o.ValueMetadata) {
		return true
	}

	return false
}

// SetValueMetadata gets a reference to the given PropertyMetadata and assigns it to the ValueMetadata field.
func (o *ListItem) SetValueMetadata(v PropertyMetadata) {
	o.ValueMetadata = &v
}

func (o ListItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	if !IsNil(o.SelectedMetadata) {
		toSerialize["selectedMetadata"] = o.SelectedMetadata
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.TextMetadata) {
		toSerialize["textMetadata"] = o.TextMetadata
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueMetadata) {
		toSerialize["valueMetadata"] = o.ValueMetadata
	}
	return toSerialize, nil
}

type NullableListItem struct {
	value *ListItem
	isSet bool
}

func (v NullableListItem) Get() *ListItem {
	return v.value
}

func (v *NullableListItem) Set(val *ListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListItem(val *ListItem) *NullableListItem {
	return &NullableListItem{value: val, isSet: true}
}

func (v NullableListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


