/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PayPalLegacySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayPalLegacySettings{}

// PayPalLegacySettings 
type PayPalLegacySettings struct {
	// The three-letter [ISO 4217][ISO 4217] currency code for the payment.  For example:  * AUD Australian dollar * CAD Canadian dollar * EUR Euro * GBP Great Britain pound * USD United States dollar  This is a read-only property.  [ISO 4217]:          https://en.wikipedia.org/wiki/ISO_4217 
	Currency *string `json:"currency,omitempty"`
	// 
	Partner *string `json:"partner,omitempty"`
	// The user's encrypted password hash.
	Password *string `json:"password,omitempty"`
	// The name of the user.
	UserName *string `json:"userName,omitempty"`
	// 
	Vendor *string `json:"vendor,omitempty"`
}

// NewPayPalLegacySettings instantiates a new PayPalLegacySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayPalLegacySettings() *PayPalLegacySettings {
	this := PayPalLegacySettings{}
	return &this
}

// NewPayPalLegacySettingsWithDefaults instantiates a new PayPalLegacySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayPalLegacySettingsWithDefaults() *PayPalLegacySettings {
	this := PayPalLegacySettings{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PayPalLegacySettings) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayPalLegacySettings) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PayPalLegacySettings) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PayPalLegacySettings) SetCurrency(v string) {
	o.Currency = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *PayPalLegacySettings) GetPartner() string {
	if o == nil || IsNil(o.Partner) {
		var ret string
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayPalLegacySettings) GetPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *PayPalLegacySettings) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given string and assigns it to the Partner field.
func (o *PayPalLegacySettings) SetPartner(v string) {
	o.Partner = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PayPalLegacySettings) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayPalLegacySettings) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PayPalLegacySettings) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PayPalLegacySettings) SetPassword(v string) {
	o.Password = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *PayPalLegacySettings) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayPalLegacySettings) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *PayPalLegacySettings) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *PayPalLegacySettings) SetUserName(v string) {
	o.UserName = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *PayPalLegacySettings) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayPalLegacySettings) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *PayPalLegacySettings) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *PayPalLegacySettings) SetVendor(v string) {
	o.Vendor = &v
}

func (o PayPalLegacySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayPalLegacySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	return toSerialize, nil
}

type NullablePayPalLegacySettings struct {
	value *PayPalLegacySettings
	isSet bool
}

func (v NullablePayPalLegacySettings) Get() *PayPalLegacySettings {
	return v.value
}

func (v *NullablePayPalLegacySettings) Set(val *PayPalLegacySettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePayPalLegacySettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePayPalLegacySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayPalLegacySettings(val *PayPalLegacySettings) *NullablePayPalLegacySettings {
	return &NullablePayPalLegacySettings{value: val, isSet: true}
}

func (v NullablePayPalLegacySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayPalLegacySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


