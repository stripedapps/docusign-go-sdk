/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotaryJournal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotaryJournal{}

// NotaryJournal 
type NotaryJournal struct {
	// The creation date of the account in UTC timedate format.
	CreatedDate *string `json:"createdDate,omitempty"`
	// The name of the document.
	DocumentName *string `json:"documentName,omitempty"`
	Jurisdiction *Jurisdiction `json:"jurisdiction,omitempty"`
	// A unique GUID for this journal entry.
	NotaryJournalId *string `json:"notaryJournalId,omitempty"`
	NotaryJournalMetaData *NotaryJournalMetaData `json:"notaryJournalMetaData,omitempty"`
	// The in-person signer's full legal name.  Required when `inPersonSigningType` is `inPersonSigner`. For eNotary flow, use `name` instead.  Maximum Length: 100 characters. 
	SignerName *string `json:"signerName,omitempty"`
}

// NewNotaryJournal instantiates a new NotaryJournal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotaryJournal() *NotaryJournal {
	this := NotaryJournal{}
	return &this
}

// NewNotaryJournalWithDefaults instantiates a new NotaryJournal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotaryJournalWithDefaults() *NotaryJournal {
	this := NotaryJournal{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *NotaryJournal) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJournal) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *NotaryJournal) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *NotaryJournal) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetDocumentName returns the DocumentName field value if set, zero value otherwise.
func (o *NotaryJournal) GetDocumentName() string {
	if o == nil || IsNil(o.DocumentName) {
		var ret string
		return ret
	}
	return *o.DocumentName
}

// GetDocumentNameOk returns a tuple with the DocumentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJournal) GetDocumentNameOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentName) {
		return nil, false
	}
	return o.DocumentName, true
}

// HasDocumentName returns a boolean if a field has been set.
func (o *NotaryJournal) HasDocumentName() bool {
	if o != nil && !IsNil(o.DocumentName) {
		return true
	}

	return false
}

// SetDocumentName gets a reference to the given string and assigns it to the DocumentName field.
func (o *NotaryJournal) SetDocumentName(v string) {
	o.DocumentName = &v
}

// GetJurisdiction returns the Jurisdiction field value if set, zero value otherwise.
func (o *NotaryJournal) GetJurisdiction() Jurisdiction {
	if o == nil || IsNil(o.Jurisdiction) {
		var ret Jurisdiction
		return ret
	}
	return *o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJournal) GetJurisdictionOk() (*Jurisdiction, bool) {
	if o == nil || IsNil(o.Jurisdiction) {
		return nil, false
	}
	return o.Jurisdiction, true
}

// HasJurisdiction returns a boolean if a field has been set.
func (o *NotaryJournal) HasJurisdiction() bool {
	if o != nil && !IsNil(o.Jurisdiction) {
		return true
	}

	return false
}

// SetJurisdiction gets a reference to the given Jurisdiction and assigns it to the Jurisdiction field.
func (o *NotaryJournal) SetJurisdiction(v Jurisdiction) {
	o.Jurisdiction = &v
}

// GetNotaryJournalId returns the NotaryJournalId field value if set, zero value otherwise.
func (o *NotaryJournal) GetNotaryJournalId() string {
	if o == nil || IsNil(o.NotaryJournalId) {
		var ret string
		return ret
	}
	return *o.NotaryJournalId
}

// GetNotaryJournalIdOk returns a tuple with the NotaryJournalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJournal) GetNotaryJournalIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotaryJournalId) {
		return nil, false
	}
	return o.NotaryJournalId, true
}

// HasNotaryJournalId returns a boolean if a field has been set.
func (o *NotaryJournal) HasNotaryJournalId() bool {
	if o != nil && !IsNil(o.NotaryJournalId) {
		return true
	}

	return false
}

// SetNotaryJournalId gets a reference to the given string and assigns it to the NotaryJournalId field.
func (o *NotaryJournal) SetNotaryJournalId(v string) {
	o.NotaryJournalId = &v
}

// GetNotaryJournalMetaData returns the NotaryJournalMetaData field value if set, zero value otherwise.
func (o *NotaryJournal) GetNotaryJournalMetaData() NotaryJournalMetaData {
	if o == nil || IsNil(o.NotaryJournalMetaData) {
		var ret NotaryJournalMetaData
		return ret
	}
	return *o.NotaryJournalMetaData
}

// GetNotaryJournalMetaDataOk returns a tuple with the NotaryJournalMetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJournal) GetNotaryJournalMetaDataOk() (*NotaryJournalMetaData, bool) {
	if o == nil || IsNil(o.NotaryJournalMetaData) {
		return nil, false
	}
	return o.NotaryJournalMetaData, true
}

// HasNotaryJournalMetaData returns a boolean if a field has been set.
func (o *NotaryJournal) HasNotaryJournalMetaData() bool {
	if o != nil && !IsNil(o.NotaryJournalMetaData) {
		return true
	}

	return false
}

// SetNotaryJournalMetaData gets a reference to the given NotaryJournalMetaData and assigns it to the NotaryJournalMetaData field.
func (o *NotaryJournal) SetNotaryJournalMetaData(v NotaryJournalMetaData) {
	o.NotaryJournalMetaData = &v
}

// GetSignerName returns the SignerName field value if set, zero value otherwise.
func (o *NotaryJournal) GetSignerName() string {
	if o == nil || IsNil(o.SignerName) {
		var ret string
		return ret
	}
	return *o.SignerName
}

// GetSignerNameOk returns a tuple with the SignerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryJournal) GetSignerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SignerName) {
		return nil, false
	}
	return o.SignerName, true
}

// HasSignerName returns a boolean if a field has been set.
func (o *NotaryJournal) HasSignerName() bool {
	if o != nil && !IsNil(o.SignerName) {
		return true
	}

	return false
}

// SetSignerName gets a reference to the given string and assigns it to the SignerName field.
func (o *NotaryJournal) SetSignerName(v string) {
	o.SignerName = &v
}

func (o NotaryJournal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotaryJournal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.DocumentName) {
		toSerialize["documentName"] = o.DocumentName
	}
	if !IsNil(o.Jurisdiction) {
		toSerialize["jurisdiction"] = o.Jurisdiction
	}
	if !IsNil(o.NotaryJournalId) {
		toSerialize["notaryJournalId"] = o.NotaryJournalId
	}
	if !IsNil(o.NotaryJournalMetaData) {
		toSerialize["notaryJournalMetaData"] = o.NotaryJournalMetaData
	}
	if !IsNil(o.SignerName) {
		toSerialize["signerName"] = o.SignerName
	}
	return toSerialize, nil
}

type NullableNotaryJournal struct {
	value *NotaryJournal
	isSet bool
}

func (v NullableNotaryJournal) Get() *NotaryJournal {
	return v.value
}

func (v *NullableNotaryJournal) Set(val *NotaryJournal) {
	v.value = val
	v.isSet = true
}

func (v NullableNotaryJournal) IsSet() bool {
	return v.isSet
}

func (v *NullableNotaryJournal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotaryJournal(val *NotaryJournal) *NullableNotaryJournal {
	return &NullableNotaryJournal{value: val, isSet: true}
}

func (v NullableNotaryJournal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotaryJournal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


