/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DocumentHtmlDisplaySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentHtmlDisplaySettings{}

// DocumentHtmlDisplaySettings This object defines how to display the HTML between the `startAnchor` and `endAnchor`.
type DocumentHtmlDisplaySettings struct {
	// Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.
	CellStyle *string `json:"cellStyle,omitempty"`
	CollapsibleSettings *DocumentHtmlCollapsibleDisplaySettings `json:"collapsibleSettings,omitempty"`
	// Sets the display and behavior properties. Possible  values are:  - `inline`:   Leaves the HTML where it is in the document.   This property lets you add a label or present on a separate page.  - `collapsible`:   The HTML in this section may be expanded or collapsed.   Initially this section is expanded.  - `collapsed`:   The HTML in this section may be expanded or collapsed.   Initially this section is collapsed.  - `continue_button`:   Creates a stop point in the document to draw the reader's   attention before proceeding to the next section.  - `responsive_table`:   Turns this section into a responsive table.   Note that this is only used on HTML tables that fall within the anchor start and end positions.  - `responsive_table_single_column`:   Turns this section into a responsive single-column table.   Note this is only used on HTML tables that fall within the anchor start and end positions.   The table will be converted to one single column where each current column will become a row, then stacked.  - `print_only`:   Do not show this portion of the HTML in the responsive signing view.   
	Display *string `json:"display,omitempty"`
	// The label to add to this display section in the signing page. 
	DisplayLabel *string `json:"displayLabel,omitempty"`
	// The position on the page where the display section appears.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	// The number of the page on which the display section appears.
	DisplayPageNumber *int32 `json:"displayPageNumber,omitempty"`
	// When **true,** the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`.
	HideLabelWhenOpened *bool `json:"hideLabelWhenOpened,omitempty"`
	// Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.
	InlineOuterStyle *string `json:"inlineOuterStyle,omitempty"`
	// The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`.
	LabelWhenOpened *string `json:"labelWhenOpened,omitempty"`
	// Enables you to add descriptive text that appears before a collapsed section or continue button.
	PreLabel *string `json:"preLabel,omitempty"`
	// When **true** and the section is expanded, the position of the section-close control scrolls to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`. 
	ScrollToTopWhenOpened *bool `json:"scrollToTopWhenOpened,omitempty"`
	// Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`.
	TableStyle *string `json:"tableStyle,omitempty"`
}

// NewDocumentHtmlDisplaySettings instantiates a new DocumentHtmlDisplaySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentHtmlDisplaySettings() *DocumentHtmlDisplaySettings {
	this := DocumentHtmlDisplaySettings{}
	return &this
}

// NewDocumentHtmlDisplaySettingsWithDefaults instantiates a new DocumentHtmlDisplaySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentHtmlDisplaySettingsWithDefaults() *DocumentHtmlDisplaySettings {
	this := DocumentHtmlDisplaySettings{}
	return &this
}

// GetCellStyle returns the CellStyle field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetCellStyle() string {
	if o == nil || IsNil(o.CellStyle) {
		var ret string
		return ret
	}
	return *o.CellStyle
}

// GetCellStyleOk returns a tuple with the CellStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetCellStyleOk() (*string, bool) {
	if o == nil || IsNil(o.CellStyle) {
		return nil, false
	}
	return o.CellStyle, true
}

// HasCellStyle returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasCellStyle() bool {
	if o != nil && !IsNil(o.CellStyle) {
		return true
	}

	return false
}

// SetCellStyle gets a reference to the given string and assigns it to the CellStyle field.
func (o *DocumentHtmlDisplaySettings) SetCellStyle(v string) {
	o.CellStyle = &v
}

// GetCollapsibleSettings returns the CollapsibleSettings field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetCollapsibleSettings() DocumentHtmlCollapsibleDisplaySettings {
	if o == nil || IsNil(o.CollapsibleSettings) {
		var ret DocumentHtmlCollapsibleDisplaySettings
		return ret
	}
	return *o.CollapsibleSettings
}

// GetCollapsibleSettingsOk returns a tuple with the CollapsibleSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetCollapsibleSettingsOk() (*DocumentHtmlCollapsibleDisplaySettings, bool) {
	if o == nil || IsNil(o.CollapsibleSettings) {
		return nil, false
	}
	return o.CollapsibleSettings, true
}

// HasCollapsibleSettings returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasCollapsibleSettings() bool {
	if o != nil && !IsNil(o.CollapsibleSettings) {
		return true
	}

	return false
}

// SetCollapsibleSettings gets a reference to the given DocumentHtmlCollapsibleDisplaySettings and assigns it to the CollapsibleSettings field.
func (o *DocumentHtmlDisplaySettings) SetCollapsibleSettings(v DocumentHtmlCollapsibleDisplaySettings) {
	o.CollapsibleSettings = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *DocumentHtmlDisplaySettings) SetDisplay(v string) {
	o.Display = &v
}

// GetDisplayLabel returns the DisplayLabel field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetDisplayLabel() string {
	if o == nil || IsNil(o.DisplayLabel) {
		var ret string
		return ret
	}
	return *o.DisplayLabel
}

// GetDisplayLabelOk returns a tuple with the DisplayLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetDisplayLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayLabel) {
		return nil, false
	}
	return o.DisplayLabel, true
}

// HasDisplayLabel returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasDisplayLabel() bool {
	if o != nil && !IsNil(o.DisplayLabel) {
		return true
	}

	return false
}

// SetDisplayLabel gets a reference to the given string and assigns it to the DisplayLabel field.
func (o *DocumentHtmlDisplaySettings) SetDisplayLabel(v string) {
	o.DisplayLabel = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *DocumentHtmlDisplaySettings) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetDisplayPageNumber returns the DisplayPageNumber field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetDisplayPageNumber() int32 {
	if o == nil || IsNil(o.DisplayPageNumber) {
		var ret int32
		return ret
	}
	return *o.DisplayPageNumber
}

// GetDisplayPageNumberOk returns a tuple with the DisplayPageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetDisplayPageNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayPageNumber) {
		return nil, false
	}
	return o.DisplayPageNumber, true
}

// HasDisplayPageNumber returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasDisplayPageNumber() bool {
	if o != nil && !IsNil(o.DisplayPageNumber) {
		return true
	}

	return false
}

// SetDisplayPageNumber gets a reference to the given int32 and assigns it to the DisplayPageNumber field.
func (o *DocumentHtmlDisplaySettings) SetDisplayPageNumber(v int32) {
	o.DisplayPageNumber = &v
}

// GetHideLabelWhenOpened returns the HideLabelWhenOpened field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetHideLabelWhenOpened() bool {
	if o == nil || IsNil(o.HideLabelWhenOpened) {
		var ret bool
		return ret
	}
	return *o.HideLabelWhenOpened
}

// GetHideLabelWhenOpenedOk returns a tuple with the HideLabelWhenOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetHideLabelWhenOpenedOk() (*bool, bool) {
	if o == nil || IsNil(o.HideLabelWhenOpened) {
		return nil, false
	}
	return o.HideLabelWhenOpened, true
}

// HasHideLabelWhenOpened returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasHideLabelWhenOpened() bool {
	if o != nil && !IsNil(o.HideLabelWhenOpened) {
		return true
	}

	return false
}

// SetHideLabelWhenOpened gets a reference to the given bool and assigns it to the HideLabelWhenOpened field.
func (o *DocumentHtmlDisplaySettings) SetHideLabelWhenOpened(v bool) {
	o.HideLabelWhenOpened = &v
}

// GetInlineOuterStyle returns the InlineOuterStyle field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetInlineOuterStyle() string {
	if o == nil || IsNil(o.InlineOuterStyle) {
		var ret string
		return ret
	}
	return *o.InlineOuterStyle
}

// GetInlineOuterStyleOk returns a tuple with the InlineOuterStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetInlineOuterStyleOk() (*string, bool) {
	if o == nil || IsNil(o.InlineOuterStyle) {
		return nil, false
	}
	return o.InlineOuterStyle, true
}

// HasInlineOuterStyle returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasInlineOuterStyle() bool {
	if o != nil && !IsNil(o.InlineOuterStyle) {
		return true
	}

	return false
}

// SetInlineOuterStyle gets a reference to the given string and assigns it to the InlineOuterStyle field.
func (o *DocumentHtmlDisplaySettings) SetInlineOuterStyle(v string) {
	o.InlineOuterStyle = &v
}

// GetLabelWhenOpened returns the LabelWhenOpened field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetLabelWhenOpened() string {
	if o == nil || IsNil(o.LabelWhenOpened) {
		var ret string
		return ret
	}
	return *o.LabelWhenOpened
}

// GetLabelWhenOpenedOk returns a tuple with the LabelWhenOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetLabelWhenOpenedOk() (*string, bool) {
	if o == nil || IsNil(o.LabelWhenOpened) {
		return nil, false
	}
	return o.LabelWhenOpened, true
}

// HasLabelWhenOpened returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasLabelWhenOpened() bool {
	if o != nil && !IsNil(o.LabelWhenOpened) {
		return true
	}

	return false
}

// SetLabelWhenOpened gets a reference to the given string and assigns it to the LabelWhenOpened field.
func (o *DocumentHtmlDisplaySettings) SetLabelWhenOpened(v string) {
	o.LabelWhenOpened = &v
}

// GetPreLabel returns the PreLabel field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetPreLabel() string {
	if o == nil || IsNil(o.PreLabel) {
		var ret string
		return ret
	}
	return *o.PreLabel
}

// GetPreLabelOk returns a tuple with the PreLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetPreLabelOk() (*string, bool) {
	if o == nil || IsNil(o.PreLabel) {
		return nil, false
	}
	return o.PreLabel, true
}

// HasPreLabel returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasPreLabel() bool {
	if o != nil && !IsNil(o.PreLabel) {
		return true
	}

	return false
}

// SetPreLabel gets a reference to the given string and assigns it to the PreLabel field.
func (o *DocumentHtmlDisplaySettings) SetPreLabel(v string) {
	o.PreLabel = &v
}

// GetScrollToTopWhenOpened returns the ScrollToTopWhenOpened field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetScrollToTopWhenOpened() bool {
	if o == nil || IsNil(o.ScrollToTopWhenOpened) {
		var ret bool
		return ret
	}
	return *o.ScrollToTopWhenOpened
}

// GetScrollToTopWhenOpenedOk returns a tuple with the ScrollToTopWhenOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetScrollToTopWhenOpenedOk() (*bool, bool) {
	if o == nil || IsNil(o.ScrollToTopWhenOpened) {
		return nil, false
	}
	return o.ScrollToTopWhenOpened, true
}

// HasScrollToTopWhenOpened returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasScrollToTopWhenOpened() bool {
	if o != nil && !IsNil(o.ScrollToTopWhenOpened) {
		return true
	}

	return false
}

// SetScrollToTopWhenOpened gets a reference to the given bool and assigns it to the ScrollToTopWhenOpened field.
func (o *DocumentHtmlDisplaySettings) SetScrollToTopWhenOpened(v bool) {
	o.ScrollToTopWhenOpened = &v
}

// GetTableStyle returns the TableStyle field value if set, zero value otherwise.
func (o *DocumentHtmlDisplaySettings) GetTableStyle() string {
	if o == nil || IsNil(o.TableStyle) {
		var ret string
		return ret
	}
	return *o.TableStyle
}

// GetTableStyleOk returns a tuple with the TableStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDisplaySettings) GetTableStyleOk() (*string, bool) {
	if o == nil || IsNil(o.TableStyle) {
		return nil, false
	}
	return o.TableStyle, true
}

// HasTableStyle returns a boolean if a field has been set.
func (o *DocumentHtmlDisplaySettings) HasTableStyle() bool {
	if o != nil && !IsNil(o.TableStyle) {
		return true
	}

	return false
}

// SetTableStyle gets a reference to the given string and assigns it to the TableStyle field.
func (o *DocumentHtmlDisplaySettings) SetTableStyle(v string) {
	o.TableStyle = &v
}

func (o DocumentHtmlDisplaySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentHtmlDisplaySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CellStyle) {
		toSerialize["cellStyle"] = o.CellStyle
	}
	if !IsNil(o.CollapsibleSettings) {
		toSerialize["collapsibleSettings"] = o.CollapsibleSettings
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.DisplayLabel) {
		toSerialize["displayLabel"] = o.DisplayLabel
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !IsNil(o.DisplayPageNumber) {
		toSerialize["displayPageNumber"] = o.DisplayPageNumber
	}
	if !IsNil(o.HideLabelWhenOpened) {
		toSerialize["hideLabelWhenOpened"] = o.HideLabelWhenOpened
	}
	if !IsNil(o.InlineOuterStyle) {
		toSerialize["inlineOuterStyle"] = o.InlineOuterStyle
	}
	if !IsNil(o.LabelWhenOpened) {
		toSerialize["labelWhenOpened"] = o.LabelWhenOpened
	}
	if !IsNil(o.PreLabel) {
		toSerialize["preLabel"] = o.PreLabel
	}
	if !IsNil(o.ScrollToTopWhenOpened) {
		toSerialize["scrollToTopWhenOpened"] = o.ScrollToTopWhenOpened
	}
	if !IsNil(o.TableStyle) {
		toSerialize["tableStyle"] = o.TableStyle
	}
	return toSerialize, nil
}

type NullableDocumentHtmlDisplaySettings struct {
	value *DocumentHtmlDisplaySettings
	isSet bool
}

func (v NullableDocumentHtmlDisplaySettings) Get() *DocumentHtmlDisplaySettings {
	return v.value
}

func (v *NullableDocumentHtmlDisplaySettings) Set(val *DocumentHtmlDisplaySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentHtmlDisplaySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentHtmlDisplaySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentHtmlDisplaySettings(val *DocumentHtmlDisplaySettings) *NullableDocumentHtmlDisplaySettings {
	return &NullableDocumentHtmlDisplaySettings{value: val, isSet: true}
}

func (v NullableDocumentHtmlDisplaySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentHtmlDisplaySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


