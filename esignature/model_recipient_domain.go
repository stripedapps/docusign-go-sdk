/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecipientDomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientDomain{}

// RecipientDomain 
type RecipientDomain struct {
	// 
	Active *string `json:"active,omitempty"`
	// 
	DomainCode *string `json:"domainCode,omitempty"`
	// 
	DomainName *string `json:"domainName,omitempty"`
	// 
	RecipientDomainId *string `json:"recipientDomainId,omitempty"`
}

// NewRecipientDomain instantiates a new RecipientDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientDomain() *RecipientDomain {
	this := RecipientDomain{}
	return &this
}

// NewRecipientDomainWithDefaults instantiates a new RecipientDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientDomainWithDefaults() *RecipientDomain {
	this := RecipientDomain{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RecipientDomain) GetActive() string {
	if o == nil || IsNil(o.Active) {
		var ret string
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientDomain) GetActiveOk() (*string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RecipientDomain) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given string and assigns it to the Active field.
func (o *RecipientDomain) SetActive(v string) {
	o.Active = &v
}

// GetDomainCode returns the DomainCode field value if set, zero value otherwise.
func (o *RecipientDomain) GetDomainCode() string {
	if o == nil || IsNil(o.DomainCode) {
		var ret string
		return ret
	}
	return *o.DomainCode
}

// GetDomainCodeOk returns a tuple with the DomainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientDomain) GetDomainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DomainCode) {
		return nil, false
	}
	return o.DomainCode, true
}

// HasDomainCode returns a boolean if a field has been set.
func (o *RecipientDomain) HasDomainCode() bool {
	if o != nil && !IsNil(o.DomainCode) {
		return true
	}

	return false
}

// SetDomainCode gets a reference to the given string and assigns it to the DomainCode field.
func (o *RecipientDomain) SetDomainCode(v string) {
	o.DomainCode = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *RecipientDomain) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientDomain) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *RecipientDomain) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *RecipientDomain) SetDomainName(v string) {
	o.DomainName = &v
}

// GetRecipientDomainId returns the RecipientDomainId field value if set, zero value otherwise.
func (o *RecipientDomain) GetRecipientDomainId() string {
	if o == nil || IsNil(o.RecipientDomainId) {
		var ret string
		return ret
	}
	return *o.RecipientDomainId
}

// GetRecipientDomainIdOk returns a tuple with the RecipientDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientDomain) GetRecipientDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientDomainId) {
		return nil, false
	}
	return o.RecipientDomainId, true
}

// HasRecipientDomainId returns a boolean if a field has been set.
func (o *RecipientDomain) HasRecipientDomainId() bool {
	if o != nil && !IsNil(o.RecipientDomainId) {
		return true
	}

	return false
}

// SetRecipientDomainId gets a reference to the given string and assigns it to the RecipientDomainId field.
func (o *RecipientDomain) SetRecipientDomainId(v string) {
	o.RecipientDomainId = &v
}

func (o RecipientDomain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.DomainCode) {
		toSerialize["domainCode"] = o.DomainCode
	}
	if !IsNil(o.DomainName) {
		toSerialize["domainName"] = o.DomainName
	}
	if !IsNil(o.RecipientDomainId) {
		toSerialize["recipientDomainId"] = o.RecipientDomainId
	}
	return toSerialize, nil
}

type NullableRecipientDomain struct {
	value *RecipientDomain
	isSet bool
}

func (v NullableRecipientDomain) Get() *RecipientDomain {
	return v.value
}

func (v *NullableRecipientDomain) Set(val *RecipientDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientDomain(val *RecipientDomain) *NullableRecipientDomain {
	return &NullableRecipientDomain{value: val, isSet: true}
}

func (v NullableRecipientDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


