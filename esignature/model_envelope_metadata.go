/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeMetadata{}

// EnvelopeMetadata 
type EnvelopeMetadata struct {
	// Specifies if the Advanced Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you. It offers more functionality than the Correct feature.
	AllowAdvancedCorrect *string `json:"allowAdvancedCorrect,omitempty"`
	// Specifies if the Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you, including the recipient, envelope, and document information.
	AllowCorrect *string `json:"allowCorrect,omitempty"`
	// Specifies if DocuSign eNotary service is enabled for the envelope.
	EnableSignWithNotary *string `json:"enableSignWithNotary,omitempty"`
}

// NewEnvelopeMetadata instantiates a new EnvelopeMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeMetadata() *EnvelopeMetadata {
	this := EnvelopeMetadata{}
	return &this
}

// NewEnvelopeMetadataWithDefaults instantiates a new EnvelopeMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeMetadataWithDefaults() *EnvelopeMetadata {
	this := EnvelopeMetadata{}
	return &this
}

// GetAllowAdvancedCorrect returns the AllowAdvancedCorrect field value if set, zero value otherwise.
func (o *EnvelopeMetadata) GetAllowAdvancedCorrect() string {
	if o == nil || IsNil(o.AllowAdvancedCorrect) {
		var ret string
		return ret
	}
	return *o.AllowAdvancedCorrect
}

// GetAllowAdvancedCorrectOk returns a tuple with the AllowAdvancedCorrect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeMetadata) GetAllowAdvancedCorrectOk() (*string, bool) {
	if o == nil || IsNil(o.AllowAdvancedCorrect) {
		return nil, false
	}
	return o.AllowAdvancedCorrect, true
}

// HasAllowAdvancedCorrect returns a boolean if a field has been set.
func (o *EnvelopeMetadata) HasAllowAdvancedCorrect() bool {
	if o != nil && !IsNil(o.AllowAdvancedCorrect) {
		return true
	}

	return false
}

// SetAllowAdvancedCorrect gets a reference to the given string and assigns it to the AllowAdvancedCorrect field.
func (o *EnvelopeMetadata) SetAllowAdvancedCorrect(v string) {
	o.AllowAdvancedCorrect = &v
}

// GetAllowCorrect returns the AllowCorrect field value if set, zero value otherwise.
func (o *EnvelopeMetadata) GetAllowCorrect() string {
	if o == nil || IsNil(o.AllowCorrect) {
		var ret string
		return ret
	}
	return *o.AllowCorrect
}

// GetAllowCorrectOk returns a tuple with the AllowCorrect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeMetadata) GetAllowCorrectOk() (*string, bool) {
	if o == nil || IsNil(o.AllowCorrect) {
		return nil, false
	}
	return o.AllowCorrect, true
}

// HasAllowCorrect returns a boolean if a field has been set.
func (o *EnvelopeMetadata) HasAllowCorrect() bool {
	if o != nil && !IsNil(o.AllowCorrect) {
		return true
	}

	return false
}

// SetAllowCorrect gets a reference to the given string and assigns it to the AllowCorrect field.
func (o *EnvelopeMetadata) SetAllowCorrect(v string) {
	o.AllowCorrect = &v
}

// GetEnableSignWithNotary returns the EnableSignWithNotary field value if set, zero value otherwise.
func (o *EnvelopeMetadata) GetEnableSignWithNotary() string {
	if o == nil || IsNil(o.EnableSignWithNotary) {
		var ret string
		return ret
	}
	return *o.EnableSignWithNotary
}

// GetEnableSignWithNotaryOk returns a tuple with the EnableSignWithNotary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeMetadata) GetEnableSignWithNotaryOk() (*string, bool) {
	if o == nil || IsNil(o.EnableSignWithNotary) {
		return nil, false
	}
	return o.EnableSignWithNotary, true
}

// HasEnableSignWithNotary returns a boolean if a field has been set.
func (o *EnvelopeMetadata) HasEnableSignWithNotary() bool {
	if o != nil && !IsNil(o.EnableSignWithNotary) {
		return true
	}

	return false
}

// SetEnableSignWithNotary gets a reference to the given string and assigns it to the EnableSignWithNotary field.
func (o *EnvelopeMetadata) SetEnableSignWithNotary(v string) {
	o.EnableSignWithNotary = &v
}

func (o EnvelopeMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAdvancedCorrect) {
		toSerialize["allowAdvancedCorrect"] = o.AllowAdvancedCorrect
	}
	if !IsNil(o.AllowCorrect) {
		toSerialize["allowCorrect"] = o.AllowCorrect
	}
	if !IsNil(o.EnableSignWithNotary) {
		toSerialize["enableSignWithNotary"] = o.EnableSignWithNotary
	}
	return toSerialize, nil
}

type NullableEnvelopeMetadata struct {
	value *EnvelopeMetadata
	isSet bool
}

func (v NullableEnvelopeMetadata) Get() *EnvelopeMetadata {
	return v.value
}

func (v *NullableEnvelopeMetadata) Set(val *EnvelopeMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeMetadata(val *EnvelopeMetadata) *NullableEnvelopeMetadata {
	return &NullableEnvelopeMetadata{value: val, isSet: true}
}

func (v NullableEnvelopeMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


