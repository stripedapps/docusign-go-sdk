/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PrefillFormData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrefillFormData{}

// PrefillFormData 
type PrefillFormData struct {
	// 
	FormData []FormDataItem `json:"formData,omitempty"`
	// The sender's email address.
	SenderEmail *string `json:"senderEmail,omitempty"`
	// The sender's name.
	SenderName *string `json:"senderName,omitempty"`
	// The ID of the sender.
	SenderUserId *string `json:"senderUserId,omitempty"`
}

// NewPrefillFormData instantiates a new PrefillFormData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefillFormData() *PrefillFormData {
	this := PrefillFormData{}
	return &this
}

// NewPrefillFormDataWithDefaults instantiates a new PrefillFormData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefillFormDataWithDefaults() *PrefillFormData {
	this := PrefillFormData{}
	return &this
}

// GetFormData returns the FormData field value if set, zero value otherwise.
func (o *PrefillFormData) GetFormData() []FormDataItem {
	if o == nil || IsNil(o.FormData) {
		var ret []FormDataItem
		return ret
	}
	return o.FormData
}

// GetFormDataOk returns a tuple with the FormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillFormData) GetFormDataOk() ([]FormDataItem, bool) {
	if o == nil || IsNil(o.FormData) {
		return nil, false
	}
	return o.FormData, true
}

// HasFormData returns a boolean if a field has been set.
func (o *PrefillFormData) HasFormData() bool {
	if o != nil && !IsNil(o.FormData) {
		return true
	}

	return false
}

// SetFormData gets a reference to the given []FormDataItem and assigns it to the FormData field.
func (o *PrefillFormData) SetFormData(v []FormDataItem) {
	o.FormData = v
}

// GetSenderEmail returns the SenderEmail field value if set, zero value otherwise.
func (o *PrefillFormData) GetSenderEmail() string {
	if o == nil || IsNil(o.SenderEmail) {
		var ret string
		return ret
	}
	return *o.SenderEmail
}

// GetSenderEmailOk returns a tuple with the SenderEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillFormData) GetSenderEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SenderEmail) {
		return nil, false
	}
	return o.SenderEmail, true
}

// HasSenderEmail returns a boolean if a field has been set.
func (o *PrefillFormData) HasSenderEmail() bool {
	if o != nil && !IsNil(o.SenderEmail) {
		return true
	}

	return false
}

// SetSenderEmail gets a reference to the given string and assigns it to the SenderEmail field.
func (o *PrefillFormData) SetSenderEmail(v string) {
	o.SenderEmail = &v
}

// GetSenderName returns the SenderName field value if set, zero value otherwise.
func (o *PrefillFormData) GetSenderName() string {
	if o == nil || IsNil(o.SenderName) {
		var ret string
		return ret
	}
	return *o.SenderName
}

// GetSenderNameOk returns a tuple with the SenderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillFormData) GetSenderNameOk() (*string, bool) {
	if o == nil || IsNil(o.SenderName) {
		return nil, false
	}
	return o.SenderName, true
}

// HasSenderName returns a boolean if a field has been set.
func (o *PrefillFormData) HasSenderName() bool {
	if o != nil && !IsNil(o.SenderName) {
		return true
	}

	return false
}

// SetSenderName gets a reference to the given string and assigns it to the SenderName field.
func (o *PrefillFormData) SetSenderName(v string) {
	o.SenderName = &v
}

// GetSenderUserId returns the SenderUserId field value if set, zero value otherwise.
func (o *PrefillFormData) GetSenderUserId() string {
	if o == nil || IsNil(o.SenderUserId) {
		var ret string
		return ret
	}
	return *o.SenderUserId
}

// GetSenderUserIdOk returns a tuple with the SenderUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillFormData) GetSenderUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.SenderUserId) {
		return nil, false
	}
	return o.SenderUserId, true
}

// HasSenderUserId returns a boolean if a field has been set.
func (o *PrefillFormData) HasSenderUserId() bool {
	if o != nil && !IsNil(o.SenderUserId) {
		return true
	}

	return false
}

// SetSenderUserId gets a reference to the given string and assigns it to the SenderUserId field.
func (o *PrefillFormData) SetSenderUserId(v string) {
	o.SenderUserId = &v
}

func (o PrefillFormData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrefillFormData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FormData) {
		toSerialize["formData"] = o.FormData
	}
	if !IsNil(o.SenderEmail) {
		toSerialize["senderEmail"] = o.SenderEmail
	}
	if !IsNil(o.SenderName) {
		toSerialize["senderName"] = o.SenderName
	}
	if !IsNil(o.SenderUserId) {
		toSerialize["senderUserId"] = o.SenderUserId
	}
	return toSerialize, nil
}

type NullablePrefillFormData struct {
	value *PrefillFormData
	isSet bool
}

func (v NullablePrefillFormData) Get() *PrefillFormData {
	return v.value
}

func (v *NullablePrefillFormData) Set(val *PrefillFormData) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefillFormData) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefillFormData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefillFormData(val *PrefillFormData) *NullablePrefillFormData {
	return &NullablePrefillFormData{value: val, isSet: true}
}

func (v NullablePrefillFormData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefillFormData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


