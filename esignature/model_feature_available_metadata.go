/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeatureAvailableMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureAvailableMetadata{}

// FeatureAvailableMetadata 
type FeatureAvailableMetadata struct {
	// 
	Availabilty *string `json:"availabilty,omitempty"`
	// 
	FeatureName *string `json:"featureName,omitempty"`
}

// NewFeatureAvailableMetadata instantiates a new FeatureAvailableMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureAvailableMetadata() *FeatureAvailableMetadata {
	this := FeatureAvailableMetadata{}
	return &this
}

// NewFeatureAvailableMetadataWithDefaults instantiates a new FeatureAvailableMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureAvailableMetadataWithDefaults() *FeatureAvailableMetadata {
	this := FeatureAvailableMetadata{}
	return &this
}

// GetAvailabilty returns the Availabilty field value if set, zero value otherwise.
func (o *FeatureAvailableMetadata) GetAvailabilty() string {
	if o == nil || IsNil(o.Availabilty) {
		var ret string
		return ret
	}
	return *o.Availabilty
}

// GetAvailabiltyOk returns a tuple with the Availabilty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureAvailableMetadata) GetAvailabiltyOk() (*string, bool) {
	if o == nil || IsNil(o.Availabilty) {
		return nil, false
	}
	return o.Availabilty, true
}

// HasAvailabilty returns a boolean if a field has been set.
func (o *FeatureAvailableMetadata) HasAvailabilty() bool {
	if o != nil && !IsNil(o.Availabilty) {
		return true
	}

	return false
}

// SetAvailabilty gets a reference to the given string and assigns it to the Availabilty field.
func (o *FeatureAvailableMetadata) SetAvailabilty(v string) {
	o.Availabilty = &v
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise.
func (o *FeatureAvailableMetadata) GetFeatureName() string {
	if o == nil || IsNil(o.FeatureName) {
		var ret string
		return ret
	}
	return *o.FeatureName
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureAvailableMetadata) GetFeatureNameOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureName) {
		return nil, false
	}
	return o.FeatureName, true
}

// HasFeatureName returns a boolean if a field has been set.
func (o *FeatureAvailableMetadata) HasFeatureName() bool {
	if o != nil && !IsNil(o.FeatureName) {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given string and assigns it to the FeatureName field.
func (o *FeatureAvailableMetadata) SetFeatureName(v string) {
	o.FeatureName = &v
}

func (o FeatureAvailableMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureAvailableMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Availabilty) {
		toSerialize["availabilty"] = o.Availabilty
	}
	if !IsNil(o.FeatureName) {
		toSerialize["featureName"] = o.FeatureName
	}
	return toSerialize, nil
}

type NullableFeatureAvailableMetadata struct {
	value *FeatureAvailableMetadata
	isSet bool
}

func (v NullableFeatureAvailableMetadata) Get() *FeatureAvailableMetadata {
	return v.value
}

func (v *NullableFeatureAvailableMetadata) Set(val *FeatureAvailableMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureAvailableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureAvailableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureAvailableMetadata(val *FeatureAvailableMetadata) *NullableFeatureAvailableMetadata {
	return &NullableFeatureAvailableMetadata{value: val, isSet: true}
}

func (v NullableFeatureAvailableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureAvailableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


