/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BccEmailAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BccEmailAddress{}

// BccEmailAddress Contains information about the BCC email address.
type BccEmailAddress struct {
	// Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email.    Example: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
	BccEmailAddressId *string `json:"bccEmailAddressId,omitempty"`
	// Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC for Email Archive information setting for this envelope.  Maximum of length: 100 characters. 
	Email *string `json:"email,omitempty"`
}

// NewBccEmailAddress instantiates a new BccEmailAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBccEmailAddress() *BccEmailAddress {
	this := BccEmailAddress{}
	return &this
}

// NewBccEmailAddressWithDefaults instantiates a new BccEmailAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBccEmailAddressWithDefaults() *BccEmailAddress {
	this := BccEmailAddress{}
	return &this
}

// GetBccEmailAddressId returns the BccEmailAddressId field value if set, zero value otherwise.
func (o *BccEmailAddress) GetBccEmailAddressId() string {
	if o == nil || IsNil(o.BccEmailAddressId) {
		var ret string
		return ret
	}
	return *o.BccEmailAddressId
}

// GetBccEmailAddressIdOk returns a tuple with the BccEmailAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailAddress) GetBccEmailAddressIdOk() (*string, bool) {
	if o == nil || IsNil(o.BccEmailAddressId) {
		return nil, false
	}
	return o.BccEmailAddressId, true
}

// HasBccEmailAddressId returns a boolean if a field has been set.
func (o *BccEmailAddress) HasBccEmailAddressId() bool {
	if o != nil && !IsNil(o.BccEmailAddressId) {
		return true
	}

	return false
}

// SetBccEmailAddressId gets a reference to the given string and assigns it to the BccEmailAddressId field.
func (o *BccEmailAddress) SetBccEmailAddressId(v string) {
	o.BccEmailAddressId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *BccEmailAddress) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailAddress) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *BccEmailAddress) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *BccEmailAddress) SetEmail(v string) {
	o.Email = &v
}

func (o BccEmailAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BccEmailAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BccEmailAddressId) {
		toSerialize["bccEmailAddressId"] = o.BccEmailAddressId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableBccEmailAddress struct {
	value *BccEmailAddress
	isSet bool
}

func (v NullableBccEmailAddress) Get() *BccEmailAddress {
	return v.value
}

func (v *NullableBccEmailAddress) Set(val *BccEmailAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableBccEmailAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableBccEmailAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBccEmailAddress(val *BccEmailAddress) *NullableBccEmailAddress {
	return &NullableBccEmailAddress{value: val, isSet: true}
}

func (v NullableBccEmailAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBccEmailAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


