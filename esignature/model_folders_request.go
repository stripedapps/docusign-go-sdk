/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FoldersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FoldersRequest{}

// FoldersRequest Information for a folder request.
type FoldersRequest struct {
	// An array of envelope ID GUIDs.
	EnvelopeIds []string `json:"envelopeIds,omitempty"`
	// Not used.
	Folders []Folder `json:"folders,omitempty"`
	//  The ID of the folder that the envelope is being moved from.
	FromFolderId *string `json:"fromFolderId,omitempty"`
}

// NewFoldersRequest instantiates a new FoldersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoldersRequest() *FoldersRequest {
	this := FoldersRequest{}
	return &this
}

// NewFoldersRequestWithDefaults instantiates a new FoldersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoldersRequestWithDefaults() *FoldersRequest {
	this := FoldersRequest{}
	return &this
}

// GetEnvelopeIds returns the EnvelopeIds field value if set, zero value otherwise.
func (o *FoldersRequest) GetEnvelopeIds() []string {
	if o == nil || IsNil(o.EnvelopeIds) {
		var ret []string
		return ret
	}
	return o.EnvelopeIds
}

// GetEnvelopeIdsOk returns a tuple with the EnvelopeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FoldersRequest) GetEnvelopeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnvelopeIds) {
		return nil, false
	}
	return o.EnvelopeIds, true
}

// HasEnvelopeIds returns a boolean if a field has been set.
func (o *FoldersRequest) HasEnvelopeIds() bool {
	if o != nil && !IsNil(o.EnvelopeIds) {
		return true
	}

	return false
}

// SetEnvelopeIds gets a reference to the given []string and assigns it to the EnvelopeIds field.
func (o *FoldersRequest) SetEnvelopeIds(v []string) {
	o.EnvelopeIds = v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *FoldersRequest) GetFolders() []Folder {
	if o == nil || IsNil(o.Folders) {
		var ret []Folder
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FoldersRequest) GetFoldersOk() ([]Folder, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *FoldersRequest) HasFolders() bool {
	if o != nil && !IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []Folder and assigns it to the Folders field.
func (o *FoldersRequest) SetFolders(v []Folder) {
	o.Folders = v
}

// GetFromFolderId returns the FromFolderId field value if set, zero value otherwise.
func (o *FoldersRequest) GetFromFolderId() string {
	if o == nil || IsNil(o.FromFolderId) {
		var ret string
		return ret
	}
	return *o.FromFolderId
}

// GetFromFolderIdOk returns a tuple with the FromFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FoldersRequest) GetFromFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FromFolderId) {
		return nil, false
	}
	return o.FromFolderId, true
}

// HasFromFolderId returns a boolean if a field has been set.
func (o *FoldersRequest) HasFromFolderId() bool {
	if o != nil && !IsNil(o.FromFolderId) {
		return true
	}

	return false
}

// SetFromFolderId gets a reference to the given string and assigns it to the FromFolderId field.
func (o *FoldersRequest) SetFromFolderId(v string) {
	o.FromFolderId = &v
}

func (o FoldersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FoldersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeIds) {
		toSerialize["envelopeIds"] = o.EnvelopeIds
	}
	if !IsNil(o.Folders) {
		toSerialize["folders"] = o.Folders
	}
	if !IsNil(o.FromFolderId) {
		toSerialize["fromFolderId"] = o.FromFolderId
	}
	return toSerialize, nil
}

type NullableFoldersRequest struct {
	value *FoldersRequest
	isSet bool
}

func (v NullableFoldersRequest) Get() *FoldersRequest {
	return v.value
}

func (v *NullableFoldersRequest) Set(val *FoldersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFoldersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFoldersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoldersRequest(val *FoldersRequest) *NullableFoldersRequest {
	return &NullableFoldersRequest{value: val, isSet: true}
}

func (v NullableFoldersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoldersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


