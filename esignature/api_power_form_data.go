/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PowerFormDataAPIService PowerFormDataAPI service
type PowerFormDataAPIService service

type ApiPowerFormsGetPowerFormFormDataRequest struct {
	ctx context.Context
	ApiService *PowerFormDataAPIService
	accountId string
	powerFormId string
	dataLayout *string
	fromDate *string
	toDate *string
}

// The layout in which to return the PowerForm data. Valid values are:  - &#x60;Native&#x60; - &#x60;Csv_Classic&#x60; - &#x60;Csv_One_Envelope_Per_Line&#x60; - &#x60;Xml_Classic&#x60;
func (r ApiPowerFormsGetPowerFormFormDataRequest) DataLayout(dataLayout string) ApiPowerFormsGetPowerFormFormDataRequest {
	r.dataLayout = &dataLayout
	return r
}

// The start date for a date range in UTC DateTime format.  **Note:** If this property is null, no date filtering is applied.
func (r ApiPowerFormsGetPowerFormFormDataRequest) FromDate(fromDate string) ApiPowerFormsGetPowerFormFormDataRequest {
	r.fromDate = &fromDate
	return r
}

// The end date of a date range in UTC DateTime format. The default value is &#x60;UtcNow&#x60;.
func (r ApiPowerFormsGetPowerFormFormDataRequest) ToDate(toDate string) ApiPowerFormsGetPowerFormFormDataRequest {
	r.toDate = &toDate
	return r
}

func (r ApiPowerFormsGetPowerFormFormDataRequest) Execute() (*PowerFormsFormDataResponse, *http.Response, error) {
	return r.ApiService.PowerFormsGetPowerFormFormDataExecute(r)
}

/*
PowerFormsGetPowerFormFormData Returns the data that users entered in a PowerForm.

This method enables Powerform Administrators or the sender of a PowerForm to download the data that recipients have entered into a PowerForm.

You specify the format in which you want to retrieve the data in the `Accept` header. This header accepts the following values:


- `application/json`: JSON format
- `application/xml`: XML format
- `text/csv`: Comma-separated value (CSV) format

**Note:** Only PowerForm Administrators or the PowerForm Sender can download the data associated with a PowerForm.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param powerFormId The ID of the PowerForm.
 @return ApiPowerFormsGetPowerFormFormDataRequest
*/
func (a *PowerFormDataAPIService) PowerFormsGetPowerFormFormData(ctx context.Context, accountId string, powerFormId string) ApiPowerFormsGetPowerFormFormDataRequest {
	return ApiPowerFormsGetPowerFormFormDataRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		powerFormId: powerFormId,
	}
}

// Execute executes the request
//  @return PowerFormsFormDataResponse
func (a *PowerFormDataAPIService) PowerFormsGetPowerFormFormDataExecute(r ApiPowerFormsGetPowerFormFormDataRequest) (*PowerFormsFormDataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFormsFormDataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PowerFormDataAPIService.PowerFormsGetPowerFormFormData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/powerforms/{powerFormId}/form_data"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"powerFormId"+"}", url.PathEscape(parameterValueToString(r.powerFormId, "powerFormId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dataLayout != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "data_layout", r.dataLayout, "")
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
