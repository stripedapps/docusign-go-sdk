/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomSettingsInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomSettingsInformation{}

// CustomSettingsInformation 
type CustomSettingsInformation struct {
	// The name/value pair information for the user custom setting.
	CustomSettings []NameValue `json:"customSettings,omitempty"`
}

// NewCustomSettingsInformation instantiates a new CustomSettingsInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomSettingsInformation() *CustomSettingsInformation {
	this := CustomSettingsInformation{}
	return &this
}

// NewCustomSettingsInformationWithDefaults instantiates a new CustomSettingsInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomSettingsInformationWithDefaults() *CustomSettingsInformation {
	this := CustomSettingsInformation{}
	return &this
}

// GetCustomSettings returns the CustomSettings field value if set, zero value otherwise.
func (o *CustomSettingsInformation) GetCustomSettings() []NameValue {
	if o == nil || IsNil(o.CustomSettings) {
		var ret []NameValue
		return ret
	}
	return o.CustomSettings
}

// GetCustomSettingsOk returns a tuple with the CustomSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomSettingsInformation) GetCustomSettingsOk() ([]NameValue, bool) {
	if o == nil || IsNil(o.CustomSettings) {
		return nil, false
	}
	return o.CustomSettings, true
}

// HasCustomSettings returns a boolean if a field has been set.
func (o *CustomSettingsInformation) HasCustomSettings() bool {
	if o != nil && !IsNil(o.CustomSettings) {
		return true
	}

	return false
}

// SetCustomSettings gets a reference to the given []NameValue and assigns it to the CustomSettings field.
func (o *CustomSettingsInformation) SetCustomSettings(v []NameValue) {
	o.CustomSettings = v
}

func (o CustomSettingsInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomSettingsInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomSettings) {
		toSerialize["customSettings"] = o.CustomSettings
	}
	return toSerialize, nil
}

type NullableCustomSettingsInformation struct {
	value *CustomSettingsInformation
	isSet bool
}

func (v NullableCustomSettingsInformation) Get() *CustomSettingsInformation {
	return v.value
}

func (v *NullableCustomSettingsInformation) Set(val *CustomSettingsInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomSettingsInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomSettingsInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomSettingsInformation(val *CustomSettingsInformation) *NullableCustomSettingsInformation {
	return &NullableCustomSettingsInformation{value: val, isSet: true}
}

func (v NullableCustomSettingsInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomSettingsInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


