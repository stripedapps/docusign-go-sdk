/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DocumentHtmlDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentHtmlDefinition{}

// DocumentHtmlDefinition Holds the properties that define how to generate the responsive-formatted HTML for the document. See [Responsive signing](/docs/esign-rest-api/esign101/concepts/responsive/) in the [eSignature concepts guide](/docs/esign-rest-api/esign101/concepts/).
type DocumentHtmlDefinition struct {
	// Contains text that all display anchors must start with. Using at least four characters will improve anchor processing performance.
	DisplayAnchorPrefix *string `json:"displayAnchorPrefix,omitempty"`
	// An object that defines how to handle a section of the HTML in signing. This property enables an incoming request to make a section of the HTML collapsible and expandable or hidden from view.  A start anchor, end anchor, or both are required. If the anchors are not found, the display anchor will be ignored.  For a list of the available types, see the [`display` property](/docs/esign-rest-api/reference/envelopes/envelopes/create/#schema__envelopedefinition_documents_htmldefinition_displayanchors_displaysettings_display) of the [`displaySettings` object.](/docs/esign-rest-api/reference/envelopes/envelopes/create/#schema__envelopedefinition_documents_htmldefinition_displayanchors_displaysettings)
	DisplayAnchors []DocumentHtmlDisplayAnchor `json:"displayAnchors,omitempty"`
	// The position on the page where the display section appears.
	DisplayOrder *string `json:"displayOrder,omitempty"`
	// The number of the page on which the display section appears.
	DisplayPageNumber *string `json:"displayPageNumber,omitempty"`
	// The GUID of the document.
	DocumentGuid *string `json:"documentGuid,omitempty"`
	// Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
	DocumentId *string `json:"documentId,omitempty"`
	// Header text or an HTML tag to place above the responsive HTML block.
	HeaderLabel *string `json:"headerLabel,omitempty"`
	// If set, the responsive HTML version of the signing document will only display on screens with the specified pixel width or less. If the screen is larger than the value that you specify, the default PDF version of the content displays instead.  This setting can also be configured at the account level. 
	MaxScreenWidth *string `json:"maxScreenWidth,omitempty"`
	// Holds a comma-separated list of HTML tags to remove if they have no text within their node (including child nodes).
	RemoveEmptyTags *string `json:"removeEmptyTags,omitempty"`
	// When **true** (the default), the **Mobile-Friendly** toggle displays at the top of the screen on the user's mobile device. When **false,** the toggle will not be displayed.  the **Mobile-Friendly** toggle lets the user switch between the mobile-friendly and the PDF versions of a document. For example, the recipient can use this toggle to review the document using the PDF view before they finish signing. 
	ShowMobileOptimizedToggle *string `json:"showMobileOptimizedToggle,omitempty"`
	// Specifies the type of responsive signing that will be used with the document.  If the value of this property is valid HTML, and the [smart sections feature][] is enabled, the HTML code is used to display the signing page:  ``` source: \"<html> ... <body><p>hello world</p></body></html>\" ```  If the value of this property is the string `document`, the HTML signing page is generated from the provided document.  ``` source: \"document\" ```  **Related topics**  - [How to create a signable HTML document](/docs/esign-rest-api/how-to/creating-signable-html/) - [How to convert a PDF file into a signable HTML document](/docs/esign-rest-api/how-to/converting-pdf/) - [Responsive signing](/docs/esign-rest-api/esign101/concepts/responsive/)   [smart sections feature]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=qlx1578456478178.html
	Source *string `json:"source,omitempty"`
}

// NewDocumentHtmlDefinition instantiates a new DocumentHtmlDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentHtmlDefinition() *DocumentHtmlDefinition {
	this := DocumentHtmlDefinition{}
	return &this
}

// NewDocumentHtmlDefinitionWithDefaults instantiates a new DocumentHtmlDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentHtmlDefinitionWithDefaults() *DocumentHtmlDefinition {
	this := DocumentHtmlDefinition{}
	return &this
}

// GetDisplayAnchorPrefix returns the DisplayAnchorPrefix field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetDisplayAnchorPrefix() string {
	if o == nil || IsNil(o.DisplayAnchorPrefix) {
		var ret string
		return ret
	}
	return *o.DisplayAnchorPrefix
}

// GetDisplayAnchorPrefixOk returns a tuple with the DisplayAnchorPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetDisplayAnchorPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayAnchorPrefix) {
		return nil, false
	}
	return o.DisplayAnchorPrefix, true
}

// HasDisplayAnchorPrefix returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasDisplayAnchorPrefix() bool {
	if o != nil && !IsNil(o.DisplayAnchorPrefix) {
		return true
	}

	return false
}

// SetDisplayAnchorPrefix gets a reference to the given string and assigns it to the DisplayAnchorPrefix field.
func (o *DocumentHtmlDefinition) SetDisplayAnchorPrefix(v string) {
	o.DisplayAnchorPrefix = &v
}

// GetDisplayAnchors returns the DisplayAnchors field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetDisplayAnchors() []DocumentHtmlDisplayAnchor {
	if o == nil || IsNil(o.DisplayAnchors) {
		var ret []DocumentHtmlDisplayAnchor
		return ret
	}
	return o.DisplayAnchors
}

// GetDisplayAnchorsOk returns a tuple with the DisplayAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetDisplayAnchorsOk() ([]DocumentHtmlDisplayAnchor, bool) {
	if o == nil || IsNil(o.DisplayAnchors) {
		return nil, false
	}
	return o.DisplayAnchors, true
}

// HasDisplayAnchors returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasDisplayAnchors() bool {
	if o != nil && !IsNil(o.DisplayAnchors) {
		return true
	}

	return false
}

// SetDisplayAnchors gets a reference to the given []DocumentHtmlDisplayAnchor and assigns it to the DisplayAnchors field.
func (o *DocumentHtmlDefinition) SetDisplayAnchors(v []DocumentHtmlDisplayAnchor) {
	o.DisplayAnchors = v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetDisplayOrder() string {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret string
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetDisplayOrderOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given string and assigns it to the DisplayOrder field.
func (o *DocumentHtmlDefinition) SetDisplayOrder(v string) {
	o.DisplayOrder = &v
}

// GetDisplayPageNumber returns the DisplayPageNumber field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetDisplayPageNumber() string {
	if o == nil || IsNil(o.DisplayPageNumber) {
		var ret string
		return ret
	}
	return *o.DisplayPageNumber
}

// GetDisplayPageNumberOk returns a tuple with the DisplayPageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetDisplayPageNumberOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayPageNumber) {
		return nil, false
	}
	return o.DisplayPageNumber, true
}

// HasDisplayPageNumber returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasDisplayPageNumber() bool {
	if o != nil && !IsNil(o.DisplayPageNumber) {
		return true
	}

	return false
}

// SetDisplayPageNumber gets a reference to the given string and assigns it to the DisplayPageNumber field.
func (o *DocumentHtmlDefinition) SetDisplayPageNumber(v string) {
	o.DisplayPageNumber = &v
}

// GetDocumentGuid returns the DocumentGuid field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetDocumentGuid() string {
	if o == nil || IsNil(o.DocumentGuid) {
		var ret string
		return ret
	}
	return *o.DocumentGuid
}

// GetDocumentGuidOk returns a tuple with the DocumentGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetDocumentGuidOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentGuid) {
		return nil, false
	}
	return o.DocumentGuid, true
}

// HasDocumentGuid returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasDocumentGuid() bool {
	if o != nil && !IsNil(o.DocumentGuid) {
		return true
	}

	return false
}

// SetDocumentGuid gets a reference to the given string and assigns it to the DocumentGuid field.
func (o *DocumentHtmlDefinition) SetDocumentGuid(v string) {
	o.DocumentGuid = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *DocumentHtmlDefinition) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetHeaderLabel returns the HeaderLabel field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetHeaderLabel() string {
	if o == nil || IsNil(o.HeaderLabel) {
		var ret string
		return ret
	}
	return *o.HeaderLabel
}

// GetHeaderLabelOk returns a tuple with the HeaderLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetHeaderLabelOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderLabel) {
		return nil, false
	}
	return o.HeaderLabel, true
}

// HasHeaderLabel returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasHeaderLabel() bool {
	if o != nil && !IsNil(o.HeaderLabel) {
		return true
	}

	return false
}

// SetHeaderLabel gets a reference to the given string and assigns it to the HeaderLabel field.
func (o *DocumentHtmlDefinition) SetHeaderLabel(v string) {
	o.HeaderLabel = &v
}

// GetMaxScreenWidth returns the MaxScreenWidth field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetMaxScreenWidth() string {
	if o == nil || IsNil(o.MaxScreenWidth) {
		var ret string
		return ret
	}
	return *o.MaxScreenWidth
}

// GetMaxScreenWidthOk returns a tuple with the MaxScreenWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetMaxScreenWidthOk() (*string, bool) {
	if o == nil || IsNil(o.MaxScreenWidth) {
		return nil, false
	}
	return o.MaxScreenWidth, true
}

// HasMaxScreenWidth returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasMaxScreenWidth() bool {
	if o != nil && !IsNil(o.MaxScreenWidth) {
		return true
	}

	return false
}

// SetMaxScreenWidth gets a reference to the given string and assigns it to the MaxScreenWidth field.
func (o *DocumentHtmlDefinition) SetMaxScreenWidth(v string) {
	o.MaxScreenWidth = &v
}

// GetRemoveEmptyTags returns the RemoveEmptyTags field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetRemoveEmptyTags() string {
	if o == nil || IsNil(o.RemoveEmptyTags) {
		var ret string
		return ret
	}
	return *o.RemoveEmptyTags
}

// GetRemoveEmptyTagsOk returns a tuple with the RemoveEmptyTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetRemoveEmptyTagsOk() (*string, bool) {
	if o == nil || IsNil(o.RemoveEmptyTags) {
		return nil, false
	}
	return o.RemoveEmptyTags, true
}

// HasRemoveEmptyTags returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasRemoveEmptyTags() bool {
	if o != nil && !IsNil(o.RemoveEmptyTags) {
		return true
	}

	return false
}

// SetRemoveEmptyTags gets a reference to the given string and assigns it to the RemoveEmptyTags field.
func (o *DocumentHtmlDefinition) SetRemoveEmptyTags(v string) {
	o.RemoveEmptyTags = &v
}

// GetShowMobileOptimizedToggle returns the ShowMobileOptimizedToggle field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetShowMobileOptimizedToggle() string {
	if o == nil || IsNil(o.ShowMobileOptimizedToggle) {
		var ret string
		return ret
	}
	return *o.ShowMobileOptimizedToggle
}

// GetShowMobileOptimizedToggleOk returns a tuple with the ShowMobileOptimizedToggle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetShowMobileOptimizedToggleOk() (*string, bool) {
	if o == nil || IsNil(o.ShowMobileOptimizedToggle) {
		return nil, false
	}
	return o.ShowMobileOptimizedToggle, true
}

// HasShowMobileOptimizedToggle returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasShowMobileOptimizedToggle() bool {
	if o != nil && !IsNil(o.ShowMobileOptimizedToggle) {
		return true
	}

	return false
}

// SetShowMobileOptimizedToggle gets a reference to the given string and assigns it to the ShowMobileOptimizedToggle field.
func (o *DocumentHtmlDefinition) SetShowMobileOptimizedToggle(v string) {
	o.ShowMobileOptimizedToggle = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DocumentHtmlDefinition) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinition) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DocumentHtmlDefinition) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DocumentHtmlDefinition) SetSource(v string) {
	o.Source = &v
}

func (o DocumentHtmlDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentHtmlDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayAnchorPrefix) {
		toSerialize["displayAnchorPrefix"] = o.DisplayAnchorPrefix
	}
	if !IsNil(o.DisplayAnchors) {
		toSerialize["displayAnchors"] = o.DisplayAnchors
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !IsNil(o.DisplayPageNumber) {
		toSerialize["displayPageNumber"] = o.DisplayPageNumber
	}
	if !IsNil(o.DocumentGuid) {
		toSerialize["documentGuid"] = o.DocumentGuid
	}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.HeaderLabel) {
		toSerialize["headerLabel"] = o.HeaderLabel
	}
	if !IsNil(o.MaxScreenWidth) {
		toSerialize["maxScreenWidth"] = o.MaxScreenWidth
	}
	if !IsNil(o.RemoveEmptyTags) {
		toSerialize["removeEmptyTags"] = o.RemoveEmptyTags
	}
	if !IsNil(o.ShowMobileOptimizedToggle) {
		toSerialize["showMobileOptimizedToggle"] = o.ShowMobileOptimizedToggle
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableDocumentHtmlDefinition struct {
	value *DocumentHtmlDefinition
	isSet bool
}

func (v NullableDocumentHtmlDefinition) Get() *DocumentHtmlDefinition {
	return v.value
}

func (v *NullableDocumentHtmlDefinition) Set(val *DocumentHtmlDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentHtmlDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentHtmlDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentHtmlDefinition(val *DocumentHtmlDefinition) *NullableDocumentHtmlDefinition {
	return &NullableDocumentHtmlDefinition{value: val, isSet: true}
}

func (v NullableDocumentHtmlDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentHtmlDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


