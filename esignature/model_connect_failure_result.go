/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectFailureResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectFailureResult{}

// ConnectFailureResult This object contains details about a Connect failure result.
type ConnectFailureResult struct {
	// Reserved for DocuSign.
	ConfigId *string `json:"configId,omitempty"`
	// Reserved for DocuSign. 
	ConfigUrl *string `json:"configUrl,omitempty"`
	// The envelope ID of the envelope status that failed to post.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// The connection status.
	Status *string `json:"status,omitempty"`
	// A human-readable message describing the connection status.
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// NewConnectFailureResult instantiates a new ConnectFailureResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectFailureResult() *ConnectFailureResult {
	this := ConnectFailureResult{}
	return &this
}

// NewConnectFailureResultWithDefaults instantiates a new ConnectFailureResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectFailureResultWithDefaults() *ConnectFailureResult {
	this := ConnectFailureResult{}
	return &this
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise.
func (o *ConnectFailureResult) GetConfigId() string {
	if o == nil || IsNil(o.ConfigId) {
		var ret string
		return ret
	}
	return *o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectFailureResult) GetConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigId) {
		return nil, false
	}
	return o.ConfigId, true
}

// HasConfigId returns a boolean if a field has been set.
func (o *ConnectFailureResult) HasConfigId() bool {
	if o != nil && !IsNil(o.ConfigId) {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given string and assigns it to the ConfigId field.
func (o *ConnectFailureResult) SetConfigId(v string) {
	o.ConfigId = &v
}

// GetConfigUrl returns the ConfigUrl field value if set, zero value otherwise.
func (o *ConnectFailureResult) GetConfigUrl() string {
	if o == nil || IsNil(o.ConfigUrl) {
		var ret string
		return ret
	}
	return *o.ConfigUrl
}

// GetConfigUrlOk returns a tuple with the ConfigUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectFailureResult) GetConfigUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigUrl) {
		return nil, false
	}
	return o.ConfigUrl, true
}

// HasConfigUrl returns a boolean if a field has been set.
func (o *ConnectFailureResult) HasConfigUrl() bool {
	if o != nil && !IsNil(o.ConfigUrl) {
		return true
	}

	return false
}

// SetConfigUrl gets a reference to the given string and assigns it to the ConfigUrl field.
func (o *ConnectFailureResult) SetConfigUrl(v string) {
	o.ConfigUrl = &v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *ConnectFailureResult) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectFailureResult) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *ConnectFailureResult) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *ConnectFailureResult) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectFailureResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectFailureResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectFailureResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectFailureResult) SetStatus(v string) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *ConnectFailureResult) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectFailureResult) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *ConnectFailureResult) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *ConnectFailureResult) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

func (o ConnectFailureResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectFailureResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigId) {
		toSerialize["configId"] = o.ConfigId
	}
	if !IsNil(o.ConfigUrl) {
		toSerialize["configUrl"] = o.ConfigUrl
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	return toSerialize, nil
}

type NullableConnectFailureResult struct {
	value *ConnectFailureResult
	isSet bool
}

func (v NullableConnectFailureResult) Get() *ConnectFailureResult {
	return v.value
}

func (v *NullableConnectFailureResult) Set(val *ConnectFailureResult) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectFailureResult) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectFailureResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectFailureResult(val *ConnectFailureResult) *NullableConnectFailureResult {
	return &NullableConnectFailureResult{value: val, isSet: true}
}

func (v NullableConnectFailureResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectFailureResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


