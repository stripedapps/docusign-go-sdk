/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Folder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Folder{}

// Folder This object contains details about a folder.
type Folder struct {
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	Filter *Filter `json:"filter,omitempty"`
	// The ID of the folder.
	FolderId *string `json:"folderId,omitempty"`
	// A list of envelopes and templates that the folder contains.
	FolderItems []FolderItemV2 `json:"folderItems,omitempty"`
	// A collection of folder objects returned in a response.
	Folders []Folder `json:"folders,omitempty"`
	// When **true,** the current user has access to the folder.
	HasAccess *string `json:"hasAccess,omitempty"`
	// When **true,** the folder has subfolders.
	HasSubFolders *string `json:"hasSubFolders,omitempty"`
	// The number of items in the folder.
	ItemCount *string `json:"itemCount,omitempty"`
	// The name of the folder.
	Name *string `json:"name,omitempty"`
	Owner *UserInfo `json:"owner,omitempty"`
	// The ID of the parent folder, or the special value `root` for the root folder.
	ParentFolderId *string `json:"parentFolderId,omitempty"`
	// The URI of the parent folder.
	ParentFolderUri *string `json:"parentFolderUri,omitempty"`
	// The number of subfolders.
	SubFolderCount *string `json:"subFolderCount,omitempty"`
	// The type of folder. Possible values include:  - `draft` - `inbox` - `normal` (a system-generated folder) - `recyclebin` - `sentitems` - `custom` (a custom folder created by a user)
	Type *string `json:"type,omitempty"`
	// The URI for the folder.
	Uri *string `json:"uri,omitempty"`
}

// NewFolder instantiates a new Folder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolder() *Folder {
	this := Folder{}
	return &this
}

// NewFolderWithDefaults instantiates a new Folder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderWithDefaults() *Folder {
	this := Folder{}
	return &this
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *Folder) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *Folder) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *Folder) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *Folder) GetFilter() Filter {
	if o == nil || IsNil(o.Filter) {
		var ret Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetFilterOk() (*Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *Folder) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Filter and assigns it to the Filter field.
func (o *Folder) SetFilter(v Filter) {
	o.Filter = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *Folder) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *Folder) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *Folder) SetFolderId(v string) {
	o.FolderId = &v
}

// GetFolderItems returns the FolderItems field value if set, zero value otherwise.
func (o *Folder) GetFolderItems() []FolderItemV2 {
	if o == nil || IsNil(o.FolderItems) {
		var ret []FolderItemV2
		return ret
	}
	return o.FolderItems
}

// GetFolderItemsOk returns a tuple with the FolderItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetFolderItemsOk() ([]FolderItemV2, bool) {
	if o == nil || IsNil(o.FolderItems) {
		return nil, false
	}
	return o.FolderItems, true
}

// HasFolderItems returns a boolean if a field has been set.
func (o *Folder) HasFolderItems() bool {
	if o != nil && !IsNil(o.FolderItems) {
		return true
	}

	return false
}

// SetFolderItems gets a reference to the given []FolderItemV2 and assigns it to the FolderItems field.
func (o *Folder) SetFolderItems(v []FolderItemV2) {
	o.FolderItems = v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *Folder) GetFolders() []Folder {
	if o == nil || IsNil(o.Folders) {
		var ret []Folder
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetFoldersOk() ([]Folder, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *Folder) HasFolders() bool {
	if o != nil && !IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []Folder and assigns it to the Folders field.
func (o *Folder) SetFolders(v []Folder) {
	o.Folders = v
}

// GetHasAccess returns the HasAccess field value if set, zero value otherwise.
func (o *Folder) GetHasAccess() string {
	if o == nil || IsNil(o.HasAccess) {
		var ret string
		return ret
	}
	return *o.HasAccess
}

// GetHasAccessOk returns a tuple with the HasAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetHasAccessOk() (*string, bool) {
	if o == nil || IsNil(o.HasAccess) {
		return nil, false
	}
	return o.HasAccess, true
}

// HasHasAccess returns a boolean if a field has been set.
func (o *Folder) HasHasAccess() bool {
	if o != nil && !IsNil(o.HasAccess) {
		return true
	}

	return false
}

// SetHasAccess gets a reference to the given string and assigns it to the HasAccess field.
func (o *Folder) SetHasAccess(v string) {
	o.HasAccess = &v
}

// GetHasSubFolders returns the HasSubFolders field value if set, zero value otherwise.
func (o *Folder) GetHasSubFolders() string {
	if o == nil || IsNil(o.HasSubFolders) {
		var ret string
		return ret
	}
	return *o.HasSubFolders
}

// GetHasSubFoldersOk returns a tuple with the HasSubFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetHasSubFoldersOk() (*string, bool) {
	if o == nil || IsNil(o.HasSubFolders) {
		return nil, false
	}
	return o.HasSubFolders, true
}

// HasHasSubFolders returns a boolean if a field has been set.
func (o *Folder) HasHasSubFolders() bool {
	if o != nil && !IsNil(o.HasSubFolders) {
		return true
	}

	return false
}

// SetHasSubFolders gets a reference to the given string and assigns it to the HasSubFolders field.
func (o *Folder) SetHasSubFolders(v string) {
	o.HasSubFolders = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *Folder) GetItemCount() string {
	if o == nil || IsNil(o.ItemCount) {
		var ret string
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetItemCountOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *Folder) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given string and assigns it to the ItemCount field.
func (o *Folder) SetItemCount(v string) {
	o.ItemCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Folder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Folder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Folder) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Folder) GetOwner() UserInfo {
	if o == nil || IsNil(o.Owner) {
		var ret UserInfo
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetOwnerOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Folder) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UserInfo and assigns it to the Owner field.
func (o *Folder) SetOwner(v UserInfo) {
	o.Owner = &v
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *Folder) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *Folder) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *Folder) SetParentFolderId(v string) {
	o.ParentFolderId = &v
}

// GetParentFolderUri returns the ParentFolderUri field value if set, zero value otherwise.
func (o *Folder) GetParentFolderUri() string {
	if o == nil || IsNil(o.ParentFolderUri) {
		var ret string
		return ret
	}
	return *o.ParentFolderUri
}

// GetParentFolderUriOk returns a tuple with the ParentFolderUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetParentFolderUriOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderUri) {
		return nil, false
	}
	return o.ParentFolderUri, true
}

// HasParentFolderUri returns a boolean if a field has been set.
func (o *Folder) HasParentFolderUri() bool {
	if o != nil && !IsNil(o.ParentFolderUri) {
		return true
	}

	return false
}

// SetParentFolderUri gets a reference to the given string and assigns it to the ParentFolderUri field.
func (o *Folder) SetParentFolderUri(v string) {
	o.ParentFolderUri = &v
}

// GetSubFolderCount returns the SubFolderCount field value if set, zero value otherwise.
func (o *Folder) GetSubFolderCount() string {
	if o == nil || IsNil(o.SubFolderCount) {
		var ret string
		return ret
	}
	return *o.SubFolderCount
}

// GetSubFolderCountOk returns a tuple with the SubFolderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetSubFolderCountOk() (*string, bool) {
	if o == nil || IsNil(o.SubFolderCount) {
		return nil, false
	}
	return o.SubFolderCount, true
}

// HasSubFolderCount returns a boolean if a field has been set.
func (o *Folder) HasSubFolderCount() bool {
	if o != nil && !IsNil(o.SubFolderCount) {
		return true
	}

	return false
}

// SetSubFolderCount gets a reference to the given string and assigns it to the SubFolderCount field.
func (o *Folder) SetSubFolderCount(v string) {
	o.SubFolderCount = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Folder) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Folder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Folder) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Folder) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folder) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Folder) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Folder) SetUri(v string) {
	o.Uri = &v
}

func (o Folder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Folder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.FolderItems) {
		toSerialize["folderItems"] = o.FolderItems
	}
	if !IsNil(o.Folders) {
		toSerialize["folders"] = o.Folders
	}
	if !IsNil(o.HasAccess) {
		toSerialize["hasAccess"] = o.HasAccess
	}
	if !IsNil(o.HasSubFolders) {
		toSerialize["hasSubFolders"] = o.HasSubFolders
	}
	if !IsNil(o.ItemCount) {
		toSerialize["itemCount"] = o.ItemCount
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.ParentFolderUri) {
		toSerialize["parentFolderUri"] = o.ParentFolderUri
	}
	if !IsNil(o.SubFolderCount) {
		toSerialize["subFolderCount"] = o.SubFolderCount
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableFolder struct {
	value *Folder
	isSet bool
}

func (v NullableFolder) Get() *Folder {
	return v.value
}

func (v *NullableFolder) Set(val *Folder) {
	v.value = val
	v.isSet = true
}

func (v NullableFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolder(val *Folder) *NullableFolder {
	return &NullableFolder{value: val, isSet: true}
}

func (v NullableFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


