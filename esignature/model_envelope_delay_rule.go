/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeDelayRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeDelayRule{}

// EnvelopeDelayRule A user-specified object that describes the envelope delay.  To indicate a relative delay, use `delay`. To indicate the exact datetime the envelope should be sent, use `resumeDate`. Only one of the two properties can be used.
type EnvelopeDelayRule struct {
	// A string timespan representing the duration of the sending delay. The timespan is in the format `d.hh:mm:ss` where `d` is the number of days, `hh` is the number of hours (measured on a 24-hour clock), `mm` is minutes, and `ss` is seconds. The maximum delay is 30 days.
	Delay *string `json:"delay,omitempty"`
	// An ISO 8601 formatted datetime string indicating the date and time that the envelope will be sent. The specified datetime must occur in the future. It must not exceed 30 days from the time that the request is made.
	ResumeDate *string `json:"resumeDate,omitempty"`
}

// NewEnvelopeDelayRule instantiates a new EnvelopeDelayRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeDelayRule() *EnvelopeDelayRule {
	this := EnvelopeDelayRule{}
	return &this
}

// NewEnvelopeDelayRuleWithDefaults instantiates a new EnvelopeDelayRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeDelayRuleWithDefaults() *EnvelopeDelayRule {
	this := EnvelopeDelayRule{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *EnvelopeDelayRule) GetDelay() string {
	if o == nil || IsNil(o.Delay) {
		var ret string
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDelayRule) GetDelayOk() (*string, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *EnvelopeDelayRule) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given string and assigns it to the Delay field.
func (o *EnvelopeDelayRule) SetDelay(v string) {
	o.Delay = &v
}

// GetResumeDate returns the ResumeDate field value if set, zero value otherwise.
func (o *EnvelopeDelayRule) GetResumeDate() string {
	if o == nil || IsNil(o.ResumeDate) {
		var ret string
		return ret
	}
	return *o.ResumeDate
}

// GetResumeDateOk returns a tuple with the ResumeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDelayRule) GetResumeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ResumeDate) {
		return nil, false
	}
	return o.ResumeDate, true
}

// HasResumeDate returns a boolean if a field has been set.
func (o *EnvelopeDelayRule) HasResumeDate() bool {
	if o != nil && !IsNil(o.ResumeDate) {
		return true
	}

	return false
}

// SetResumeDate gets a reference to the given string and assigns it to the ResumeDate field.
func (o *EnvelopeDelayRule) SetResumeDate(v string) {
	o.ResumeDate = &v
}

func (o EnvelopeDelayRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeDelayRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.ResumeDate) {
		toSerialize["resumeDate"] = o.ResumeDate
	}
	return toSerialize, nil
}

type NullableEnvelopeDelayRule struct {
	value *EnvelopeDelayRule
	isSet bool
}

func (v NullableEnvelopeDelayRule) Get() *EnvelopeDelayRule {
	return v.value
}

func (v *NullableEnvelopeDelayRule) Set(val *EnvelopeDelayRule) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeDelayRule) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeDelayRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeDelayRule(val *EnvelopeDelayRule) *NullableEnvelopeDelayRule {
	return &NullableEnvelopeDelayRule{value: val, isSet: true}
}

func (v NullableEnvelopeDelayRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeDelayRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


