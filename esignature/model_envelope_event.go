/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeEvent{}

// EnvelopeEvent For which envelope events should your webhook be called?
type EnvelopeEvent struct {
	// An envelope status for which your webhook should be called. Valid values:  * `Sent`  * `Delivered` * `Completed` * `Declined` * `Voided`
	EnvelopeEventStatusCode *string `json:"envelopeEventStatusCode,omitempty"`
	// When **true,** the Connect webhook messages will include the envelope's PDF documents. Including the PDF documents greatly increases the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger.
	IncludeDocuments *string `json:"includeDocuments,omitempty"`
}

// NewEnvelopeEvent instantiates a new EnvelopeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeEvent() *EnvelopeEvent {
	this := EnvelopeEvent{}
	return &this
}

// NewEnvelopeEventWithDefaults instantiates a new EnvelopeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeEventWithDefaults() *EnvelopeEvent {
	this := EnvelopeEvent{}
	return &this
}

// GetEnvelopeEventStatusCode returns the EnvelopeEventStatusCode field value if set, zero value otherwise.
func (o *EnvelopeEvent) GetEnvelopeEventStatusCode() string {
	if o == nil || IsNil(o.EnvelopeEventStatusCode) {
		var ret string
		return ret
	}
	return *o.EnvelopeEventStatusCode
}

// GetEnvelopeEventStatusCodeOk returns a tuple with the EnvelopeEventStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeEvent) GetEnvelopeEventStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeEventStatusCode) {
		return nil, false
	}
	return o.EnvelopeEventStatusCode, true
}

// HasEnvelopeEventStatusCode returns a boolean if a field has been set.
func (o *EnvelopeEvent) HasEnvelopeEventStatusCode() bool {
	if o != nil && !IsNil(o.EnvelopeEventStatusCode) {
		return true
	}

	return false
}

// SetEnvelopeEventStatusCode gets a reference to the given string and assigns it to the EnvelopeEventStatusCode field.
func (o *EnvelopeEvent) SetEnvelopeEventStatusCode(v string) {
	o.EnvelopeEventStatusCode = &v
}

// GetIncludeDocuments returns the IncludeDocuments field value if set, zero value otherwise.
func (o *EnvelopeEvent) GetIncludeDocuments() string {
	if o == nil || IsNil(o.IncludeDocuments) {
		var ret string
		return ret
	}
	return *o.IncludeDocuments
}

// GetIncludeDocumentsOk returns a tuple with the IncludeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeEvent) GetIncludeDocumentsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeDocuments) {
		return nil, false
	}
	return o.IncludeDocuments, true
}

// HasIncludeDocuments returns a boolean if a field has been set.
func (o *EnvelopeEvent) HasIncludeDocuments() bool {
	if o != nil && !IsNil(o.IncludeDocuments) {
		return true
	}

	return false
}

// SetIncludeDocuments gets a reference to the given string and assigns it to the IncludeDocuments field.
func (o *EnvelopeEvent) SetIncludeDocuments(v string) {
	o.IncludeDocuments = &v
}

func (o EnvelopeEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeEventStatusCode) {
		toSerialize["envelopeEventStatusCode"] = o.EnvelopeEventStatusCode
	}
	if !IsNil(o.IncludeDocuments) {
		toSerialize["includeDocuments"] = o.IncludeDocuments
	}
	return toSerialize, nil
}

type NullableEnvelopeEvent struct {
	value *EnvelopeEvent
	isSet bool
}

func (v NullableEnvelopeEvent) Get() *EnvelopeEvent {
	return v.value
}

func (v *NullableEnvelopeEvent) Set(val *EnvelopeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeEvent(val *EnvelopeEvent) *NullableEnvelopeEvent {
	return &NullableEnvelopeEvent{value: val, isSet: true}
}

func (v NullableEnvelopeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


