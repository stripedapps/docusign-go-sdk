/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TemplateDocumentVisibilityAPIService TemplateDocumentVisibilityAPI service
type TemplateDocumentVisibilityAPIService service

type ApiRecipientsGetTemplateRecipientDocumentVisibilityRequest struct {
	ctx context.Context
	ApiService *TemplateDocumentVisibilityAPIService
	accountId string
	recipientId string
	templateId string
}

func (r ApiRecipientsGetTemplateRecipientDocumentVisibilityRequest) Execute() (*DocumentVisibilityList, *http.Response, error) {
	return r.ApiService.RecipientsGetTemplateRecipientDocumentVisibilityExecute(r)
}

/*
RecipientsGetTemplateRecipientDocumentVisibility Returns document visibility for a template recipient

This method returns information about document visibility for a template recipient.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @param templateId The ID of the template.
 @return ApiRecipientsGetTemplateRecipientDocumentVisibilityRequest
*/
func (a *TemplateDocumentVisibilityAPIService) RecipientsGetTemplateRecipientDocumentVisibility(ctx context.Context, accountId string, recipientId string, templateId string) ApiRecipientsGetTemplateRecipientDocumentVisibilityRequest {
	return ApiRecipientsGetTemplateRecipientDocumentVisibilityRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		recipientId: recipientId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return DocumentVisibilityList
func (a *TemplateDocumentVisibilityAPIService) RecipientsGetTemplateRecipientDocumentVisibilityExecute(r ApiRecipientsGetTemplateRecipientDocumentVisibilityRequest) (*DocumentVisibilityList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentVisibilityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDocumentVisibilityAPIService.RecipientsGetTemplateRecipientDocumentVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/document_visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest struct {
	ctx context.Context
	ApiService *TemplateDocumentVisibilityAPIService
	accountId string
	recipientId string
	templateId string
	templateDocumentVisibilityList *TemplateDocumentVisibilityList
}

func (r ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest) TemplateDocumentVisibilityList(templateDocumentVisibilityList TemplateDocumentVisibilityList) ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest {
	r.templateDocumentVisibilityList = &templateDocumentVisibilityList
	return r
}

func (r ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest) Execute() (*TemplateDocumentVisibilityList, *http.Response, error) {
	return r.ApiService.RecipientsPutTemplateRecipientDocumentVisibilityExecute(r)
}

/*
RecipientsPutTemplateRecipientDocumentVisibility Updates document visibility for a template recipient

This method updates the document visibility for a template recipient.

**Note:** A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @param templateId The ID of the template.
 @return ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest
*/
func (a *TemplateDocumentVisibilityAPIService) RecipientsPutTemplateRecipientDocumentVisibility(ctx context.Context, accountId string, recipientId string, templateId string) ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest {
	return ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		recipientId: recipientId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return TemplateDocumentVisibilityList
func (a *TemplateDocumentVisibilityAPIService) RecipientsPutTemplateRecipientDocumentVisibilityExecute(r ApiRecipientsPutTemplateRecipientDocumentVisibilityRequest) (*TemplateDocumentVisibilityList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateDocumentVisibilityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDocumentVisibilityAPIService.RecipientsPutTemplateRecipientDocumentVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/document_visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateDocumentVisibilityList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest struct {
	ctx context.Context
	ApiService *TemplateDocumentVisibilityAPIService
	accountId string
	templateId string
	templateDocumentVisibilityList *TemplateDocumentVisibilityList
}

func (r ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest) TemplateDocumentVisibilityList(templateDocumentVisibilityList TemplateDocumentVisibilityList) ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest {
	r.templateDocumentVisibilityList = &templateDocumentVisibilityList
	return r
}

func (r ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest) Execute() (*TemplateDocumentVisibilityList, *http.Response, error) {
	return r.ApiService.RecipientsPutTemplateRecipientsDocumentVisibilityExecute(r)
}

/*
RecipientsPutTemplateRecipientsDocumentVisibility Updates document visibility for template recipients

This method updates document visibility for one or more template recipients based on the `recipientId` and `visible` values that you include in the request body.


**Note:** A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param templateId The ID of the template.
 @return ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest
*/
func (a *TemplateDocumentVisibilityAPIService) RecipientsPutTemplateRecipientsDocumentVisibility(ctx context.Context, accountId string, templateId string) ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest {
	return ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return TemplateDocumentVisibilityList
func (a *TemplateDocumentVisibilityAPIService) RecipientsPutTemplateRecipientsDocumentVisibilityExecute(r ApiRecipientsPutTemplateRecipientsDocumentVisibilityRequest) (*TemplateDocumentVisibilityList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplateDocumentVisibilityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDocumentVisibilityAPIService.RecipientsPutTemplateRecipientsDocumentVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/document_visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateDocumentVisibilityList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
