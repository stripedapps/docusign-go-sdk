/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LockInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LockInformation{}

// LockInformation 
type LockInformation struct {
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The number of seconds to lock the envelope for editing.  This value must be greater than `0` seconds.
	LockDurationInSeconds *string `json:"lockDurationInSeconds,omitempty"`
	// The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
	LockedByApp *string `json:"lockedByApp,omitempty"`
	LockedByUser *UserInfo `json:"lockedByUser,omitempty"`
	// The date and time that the lock expires.
	LockedUntilDateTime *string `json:"lockedUntilDateTime,omitempty"`
	// A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
	LockToken *string `json:"lockToken,omitempty"`
	// The type of lock.  Currently `edit` is the only supported type.
	LockType *string `json:"lockType,omitempty"`
	// When **true,** a scratchpad is used to edit information.  
	UseScratchPad *string `json:"useScratchPad,omitempty"`
}

// NewLockInformation instantiates a new LockInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockInformation() *LockInformation {
	this := LockInformation{}
	return &this
}

// NewLockInformationWithDefaults instantiates a new LockInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockInformationWithDefaults() *LockInformation {
	this := LockInformation{}
	return &this
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *LockInformation) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *LockInformation) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *LockInformation) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetLockDurationInSeconds returns the LockDurationInSeconds field value if set, zero value otherwise.
func (o *LockInformation) GetLockDurationInSeconds() string {
	if o == nil || IsNil(o.LockDurationInSeconds) {
		var ret string
		return ret
	}
	return *o.LockDurationInSeconds
}

// GetLockDurationInSecondsOk returns a tuple with the LockDurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetLockDurationInSecondsOk() (*string, bool) {
	if o == nil || IsNil(o.LockDurationInSeconds) {
		return nil, false
	}
	return o.LockDurationInSeconds, true
}

// HasLockDurationInSeconds returns a boolean if a field has been set.
func (o *LockInformation) HasLockDurationInSeconds() bool {
	if o != nil && !IsNil(o.LockDurationInSeconds) {
		return true
	}

	return false
}

// SetLockDurationInSeconds gets a reference to the given string and assigns it to the LockDurationInSeconds field.
func (o *LockInformation) SetLockDurationInSeconds(v string) {
	o.LockDurationInSeconds = &v
}

// GetLockedByApp returns the LockedByApp field value if set, zero value otherwise.
func (o *LockInformation) GetLockedByApp() string {
	if o == nil || IsNil(o.LockedByApp) {
		var ret string
		return ret
	}
	return *o.LockedByApp
}

// GetLockedByAppOk returns a tuple with the LockedByApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetLockedByAppOk() (*string, bool) {
	if o == nil || IsNil(o.LockedByApp) {
		return nil, false
	}
	return o.LockedByApp, true
}

// HasLockedByApp returns a boolean if a field has been set.
func (o *LockInformation) HasLockedByApp() bool {
	if o != nil && !IsNil(o.LockedByApp) {
		return true
	}

	return false
}

// SetLockedByApp gets a reference to the given string and assigns it to the LockedByApp field.
func (o *LockInformation) SetLockedByApp(v string) {
	o.LockedByApp = &v
}

// GetLockedByUser returns the LockedByUser field value if set, zero value otherwise.
func (o *LockInformation) GetLockedByUser() UserInfo {
	if o == nil || IsNil(o.LockedByUser) {
		var ret UserInfo
		return ret
	}
	return *o.LockedByUser
}

// GetLockedByUserOk returns a tuple with the LockedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetLockedByUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.LockedByUser) {
		return nil, false
	}
	return o.LockedByUser, true
}

// HasLockedByUser returns a boolean if a field has been set.
func (o *LockInformation) HasLockedByUser() bool {
	if o != nil && !IsNil(o.LockedByUser) {
		return true
	}

	return false
}

// SetLockedByUser gets a reference to the given UserInfo and assigns it to the LockedByUser field.
func (o *LockInformation) SetLockedByUser(v UserInfo) {
	o.LockedByUser = &v
}

// GetLockedUntilDateTime returns the LockedUntilDateTime field value if set, zero value otherwise.
func (o *LockInformation) GetLockedUntilDateTime() string {
	if o == nil || IsNil(o.LockedUntilDateTime) {
		var ret string
		return ret
	}
	return *o.LockedUntilDateTime
}

// GetLockedUntilDateTimeOk returns a tuple with the LockedUntilDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetLockedUntilDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LockedUntilDateTime) {
		return nil, false
	}
	return o.LockedUntilDateTime, true
}

// HasLockedUntilDateTime returns a boolean if a field has been set.
func (o *LockInformation) HasLockedUntilDateTime() bool {
	if o != nil && !IsNil(o.LockedUntilDateTime) {
		return true
	}

	return false
}

// SetLockedUntilDateTime gets a reference to the given string and assigns it to the LockedUntilDateTime field.
func (o *LockInformation) SetLockedUntilDateTime(v string) {
	o.LockedUntilDateTime = &v
}

// GetLockToken returns the LockToken field value if set, zero value otherwise.
func (o *LockInformation) GetLockToken() string {
	if o == nil || IsNil(o.LockToken) {
		var ret string
		return ret
	}
	return *o.LockToken
}

// GetLockTokenOk returns a tuple with the LockToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetLockTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LockToken) {
		return nil, false
	}
	return o.LockToken, true
}

// HasLockToken returns a boolean if a field has been set.
func (o *LockInformation) HasLockToken() bool {
	if o != nil && !IsNil(o.LockToken) {
		return true
	}

	return false
}

// SetLockToken gets a reference to the given string and assigns it to the LockToken field.
func (o *LockInformation) SetLockToken(v string) {
	o.LockToken = &v
}

// GetLockType returns the LockType field value if set, zero value otherwise.
func (o *LockInformation) GetLockType() string {
	if o == nil || IsNil(o.LockType) {
		var ret string
		return ret
	}
	return *o.LockType
}

// GetLockTypeOk returns a tuple with the LockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetLockTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LockType) {
		return nil, false
	}
	return o.LockType, true
}

// HasLockType returns a boolean if a field has been set.
func (o *LockInformation) HasLockType() bool {
	if o != nil && !IsNil(o.LockType) {
		return true
	}

	return false
}

// SetLockType gets a reference to the given string and assigns it to the LockType field.
func (o *LockInformation) SetLockType(v string) {
	o.LockType = &v
}

// GetUseScratchPad returns the UseScratchPad field value if set, zero value otherwise.
func (o *LockInformation) GetUseScratchPad() string {
	if o == nil || IsNil(o.UseScratchPad) {
		var ret string
		return ret
	}
	return *o.UseScratchPad
}

// GetUseScratchPadOk returns a tuple with the UseScratchPad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockInformation) GetUseScratchPadOk() (*string, bool) {
	if o == nil || IsNil(o.UseScratchPad) {
		return nil, false
	}
	return o.UseScratchPad, true
}

// HasUseScratchPad returns a boolean if a field has been set.
func (o *LockInformation) HasUseScratchPad() bool {
	if o != nil && !IsNil(o.UseScratchPad) {
		return true
	}

	return false
}

// SetUseScratchPad gets a reference to the given string and assigns it to the UseScratchPad field.
func (o *LockInformation) SetUseScratchPad(v string) {
	o.UseScratchPad = &v
}

func (o LockInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LockInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.LockDurationInSeconds) {
		toSerialize["lockDurationInSeconds"] = o.LockDurationInSeconds
	}
	if !IsNil(o.LockedByApp) {
		toSerialize["lockedByApp"] = o.LockedByApp
	}
	if !IsNil(o.LockedByUser) {
		toSerialize["lockedByUser"] = o.LockedByUser
	}
	if !IsNil(o.LockedUntilDateTime) {
		toSerialize["lockedUntilDateTime"] = o.LockedUntilDateTime
	}
	if !IsNil(o.LockToken) {
		toSerialize["lockToken"] = o.LockToken
	}
	if !IsNil(o.LockType) {
		toSerialize["lockType"] = o.LockType
	}
	if !IsNil(o.UseScratchPad) {
		toSerialize["useScratchPad"] = o.UseScratchPad
	}
	return toSerialize, nil
}

type NullableLockInformation struct {
	value *LockInformation
	isSet bool
}

func (v NullableLockInformation) Get() *LockInformation {
	return v.value
}

func (v *NullableLockInformation) Set(val *LockInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableLockInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableLockInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockInformation(val *LockInformation) *NullableLockInformation {
	return &NullableLockInformation{value: val, isSet: true}
}

func (v NullableLockInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


