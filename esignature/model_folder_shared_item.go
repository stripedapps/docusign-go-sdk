/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FolderSharedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderSharedItem{}

// FolderSharedItem 
type FolderSharedItem struct {
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The ID of the folder.
	FolderId *string `json:"folderId,omitempty"`
	// The name of the folder.
	Name *string `json:"name,omitempty"`
	Owner *UserInfo `json:"owner,omitempty"`
	// The ID of the parent folder.
	ParentFolderId *string `json:"parentFolderId,omitempty"`
	// The URI for the parent folder.
	ParentFolderUri *string `json:"parentFolderUri,omitempty"`
	// Indicates how the folder is shared. Valid values are:  - `not_shared` - `shared_to`
	Shared *string `json:"shared,omitempty"`
	// A list of groups that share the folder.
	SharedGroups []MemberGroupSharedItem `json:"sharedGroups,omitempty"`
	// A list of users that share the folder.
	SharedUsers []UserSharedItem `json:"sharedUsers,omitempty"`
	// A URI containing the user ID.
	Uri *string `json:"uri,omitempty"`
	User *UserInfo `json:"user,omitempty"`
}

// NewFolderSharedItem instantiates a new FolderSharedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderSharedItem() *FolderSharedItem {
	this := FolderSharedItem{}
	return &this
}

// NewFolderSharedItemWithDefaults instantiates a new FolderSharedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderSharedItemWithDefaults() *FolderSharedItem {
	this := FolderSharedItem{}
	return &this
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *FolderSharedItem) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *FolderSharedItem) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *FolderSharedItem) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *FolderSharedItem) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *FolderSharedItem) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *FolderSharedItem) SetFolderId(v string) {
	o.FolderId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FolderSharedItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FolderSharedItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FolderSharedItem) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *FolderSharedItem) GetOwner() UserInfo {
	if o == nil || IsNil(o.Owner) {
		var ret UserInfo
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetOwnerOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *FolderSharedItem) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UserInfo and assigns it to the Owner field.
func (o *FolderSharedItem) SetOwner(v UserInfo) {
	o.Owner = &v
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *FolderSharedItem) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *FolderSharedItem) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *FolderSharedItem) SetParentFolderId(v string) {
	o.ParentFolderId = &v
}

// GetParentFolderUri returns the ParentFolderUri field value if set, zero value otherwise.
func (o *FolderSharedItem) GetParentFolderUri() string {
	if o == nil || IsNil(o.ParentFolderUri) {
		var ret string
		return ret
	}
	return *o.ParentFolderUri
}

// GetParentFolderUriOk returns a tuple with the ParentFolderUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetParentFolderUriOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderUri) {
		return nil, false
	}
	return o.ParentFolderUri, true
}

// HasParentFolderUri returns a boolean if a field has been set.
func (o *FolderSharedItem) HasParentFolderUri() bool {
	if o != nil && !IsNil(o.ParentFolderUri) {
		return true
	}

	return false
}

// SetParentFolderUri gets a reference to the given string and assigns it to the ParentFolderUri field.
func (o *FolderSharedItem) SetParentFolderUri(v string) {
	o.ParentFolderUri = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *FolderSharedItem) GetShared() string {
	if o == nil || IsNil(o.Shared) {
		var ret string
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetSharedOk() (*string, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *FolderSharedItem) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given string and assigns it to the Shared field.
func (o *FolderSharedItem) SetShared(v string) {
	o.Shared = &v
}

// GetSharedGroups returns the SharedGroups field value if set, zero value otherwise.
func (o *FolderSharedItem) GetSharedGroups() []MemberGroupSharedItem {
	if o == nil || IsNil(o.SharedGroups) {
		var ret []MemberGroupSharedItem
		return ret
	}
	return o.SharedGroups
}

// GetSharedGroupsOk returns a tuple with the SharedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetSharedGroupsOk() ([]MemberGroupSharedItem, bool) {
	if o == nil || IsNil(o.SharedGroups) {
		return nil, false
	}
	return o.SharedGroups, true
}

// HasSharedGroups returns a boolean if a field has been set.
func (o *FolderSharedItem) HasSharedGroups() bool {
	if o != nil && !IsNil(o.SharedGroups) {
		return true
	}

	return false
}

// SetSharedGroups gets a reference to the given []MemberGroupSharedItem and assigns it to the SharedGroups field.
func (o *FolderSharedItem) SetSharedGroups(v []MemberGroupSharedItem) {
	o.SharedGroups = v
}

// GetSharedUsers returns the SharedUsers field value if set, zero value otherwise.
func (o *FolderSharedItem) GetSharedUsers() []UserSharedItem {
	if o == nil || IsNil(o.SharedUsers) {
		var ret []UserSharedItem
		return ret
	}
	return o.SharedUsers
}

// GetSharedUsersOk returns a tuple with the SharedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetSharedUsersOk() ([]UserSharedItem, bool) {
	if o == nil || IsNil(o.SharedUsers) {
		return nil, false
	}
	return o.SharedUsers, true
}

// HasSharedUsers returns a boolean if a field has been set.
func (o *FolderSharedItem) HasSharedUsers() bool {
	if o != nil && !IsNil(o.SharedUsers) {
		return true
	}

	return false
}

// SetSharedUsers gets a reference to the given []UserSharedItem and assigns it to the SharedUsers field.
func (o *FolderSharedItem) SetSharedUsers(v []UserSharedItem) {
	o.SharedUsers = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *FolderSharedItem) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *FolderSharedItem) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *FolderSharedItem) SetUri(v string) {
	o.Uri = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *FolderSharedItem) GetUser() UserInfo {
	if o == nil || IsNil(o.User) {
		var ret UserInfo
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSharedItem) GetUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *FolderSharedItem) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserInfo and assigns it to the User field.
func (o *FolderSharedItem) SetUser(v UserInfo) {
	o.User = &v
}

func (o FolderSharedItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderSharedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.ParentFolderUri) {
		toSerialize["parentFolderUri"] = o.ParentFolderUri
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.SharedGroups) {
		toSerialize["sharedGroups"] = o.SharedGroups
	}
	if !IsNil(o.SharedUsers) {
		toSerialize["sharedUsers"] = o.SharedUsers
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableFolderSharedItem struct {
	value *FolderSharedItem
	isSet bool
}

func (v NullableFolderSharedItem) Get() *FolderSharedItem {
	return v.value
}

func (v *NullableFolderSharedItem) Set(val *FolderSharedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderSharedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderSharedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderSharedItem(val *FolderSharedItem) *NullableFolderSharedItem {
	return &NullableFolderSharedItem{value: val, isSet: true}
}

func (v NullableFolderSharedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderSharedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


