/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CloudStorageAPIService CloudStorageAPI service
type CloudStorageAPIService service

type ApiCloudStorageFolderGetCloudStorageFolderRequest struct {
	ctx context.Context
	ApiService *CloudStorageAPIService
	accountId string
	folderId string
	serviceId string
	userId string
	cloudStorageFolderPath *string
	cloudStorageFolderidPlain *string
	count *string
	order *string
	orderBy *string
	searchText *string
	startPosition *string
}

// The file path to a cloud storage folder.
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) CloudStorageFolderPath(cloudStorageFolderPath string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.cloudStorageFolderPath = &cloudStorageFolderPath
	return r
}

// A plain-text folder ID that you can use as an alternative to the existing folder id. This property is mainly used for rooms. Enter multiple folder IDs as a comma-separated list.
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) CloudStorageFolderidPlain(cloudStorageFolderidPlain string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.cloudStorageFolderidPlain = &cloudStorageFolderidPlain
	return r
}

// The maximum number of results to return.  Use &#x60;start_position&#x60; to specify the number of results to skip.  Default: &#x60;25&#x60; 
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) Count(count string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.count = &count
	return r
}

// The order in which to sort the results.  Valid values are:    * &#x60;asc&#x60;: Ascending order. * &#x60;desc&#x60;: Descending order. 
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) Order(order string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.order = &order
	return r
}

// The file attribute to use to sort the results.  Valid values are:   * &#x60;modified&#x60; * &#x60;name&#x60;
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) OrderBy(orderBy string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.orderBy = &orderBy
	return r
}

// Use this parameter to search for specific text.
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) SearchText(searchText string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.searchText = &searchText
	return r
}

// The zero-based index of the result from which to start returning results.  Use with &#x60;count&#x60; to limit the number of results.  The default value is &#x60;0&#x60;. 
func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) StartPosition(startPosition string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	r.startPosition = &startPosition
	return r
}

func (r ApiCloudStorageFolderGetCloudStorageFolderRequest) Execute() (*ExternalFolder, *http.Response, error) {
	return r.ApiService.CloudStorageFolderGetCloudStorageFolderExecute(r)
}

/*
CloudStorageFolderGetCloudStorageFolder Gets a list of items from a cloud storage provider.

Retrieves a list of the user's items from the specified cloud storage provider. 

To limit the scope of the items returned, provide a comma-separated list of folder IDs in the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param folderId The ID of the folder.
 @param serviceId The ID of the service to access.   Valid values are the service name (\"Box\") or the numerical serviceId (\"4136\").
 @param userId The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
 @return ApiCloudStorageFolderGetCloudStorageFolderRequest
*/
func (a *CloudStorageAPIService) CloudStorageFolderGetCloudStorageFolder(ctx context.Context, accountId string, folderId string, serviceId string, userId string) ApiCloudStorageFolderGetCloudStorageFolderRequest {
	return ApiCloudStorageFolderGetCloudStorageFolderRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		folderId: folderId,
		serviceId: serviceId,
		userId: userId,
	}
}

// Execute executes the request
//  @return ExternalFolder
func (a *CloudStorageAPIService) CloudStorageFolderGetCloudStorageFolderExecute(r ApiCloudStorageFolderGetCloudStorageFolderRequest) (*ExternalFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStorageAPIService.CloudStorageFolderGetCloudStorageFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"folderId"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudStorageFolderPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_storage_folder_path", r.cloudStorageFolderPath, "")
	}
	if r.cloudStorageFolderidPlain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_storage_folderid_plain", r.cloudStorageFolderidPlain, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "")
	}
	if r.searchText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_text", r.searchText, "")
	}
	if r.startPosition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_position", r.startPosition, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudStorageFolderGetCloudStorageFolderAllRequest struct {
	ctx context.Context
	ApiService *CloudStorageAPIService
	accountId string
	serviceId string
	userId string
	cloudStorageFolderPath *string
	count *string
	order *string
	orderBy *string
	searchText *string
	startPosition *string
}

// A comma separated list of folder IDs included in the request. 
func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) CloudStorageFolderPath(cloudStorageFolderPath string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	r.cloudStorageFolderPath = &cloudStorageFolderPath
	return r
}

// The maximum number of results to return.  Use &#x60;start_position&#x60; to specify the number of results to skip.  Default: &#x60;25&#x60; 
func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) Count(count string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	r.count = &count
	return r
}

// The order in which to sort the results.  Valid values are:    * &#x60;asc&#x60;: Ascending order. * &#x60;desc&#x60;: Descending order. 
func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) Order(order string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	r.order = &order
	return r
}

// The file attribute to use to sort the results.  Valid values are:   * &#x60;modified&#x60; * &#x60;name&#x60;
func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) OrderBy(orderBy string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	r.orderBy = &orderBy
	return r
}

// Use this parameter to search for specific text.
func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) SearchText(searchText string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	r.searchText = &searchText
	return r
}

// The zero-based index of the result from which to start returning results.  Use with &#x60;count&#x60; to limit the number of results.  The default value is &#x60;0&#x60;. 
func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) StartPosition(startPosition string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	r.startPosition = &startPosition
	return r
}

func (r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) Execute() (*ExternalFolder, *http.Response, error) {
	return r.ApiService.CloudStorageFolderGetCloudStorageFolderAllExecute(r)
}

/*
CloudStorageFolderGetCloudStorageFolderAll Retrieves a list of all the items in a specified folder from the specified cloud storage provider.

Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param serviceId The ID of the service to access.   Valid values are the service name (\"Box\") or the numerical serviceId (\"4136\").
 @param userId The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
 @return ApiCloudStorageFolderGetCloudStorageFolderAllRequest
*/
func (a *CloudStorageAPIService) CloudStorageFolderGetCloudStorageFolderAll(ctx context.Context, accountId string, serviceId string, userId string) ApiCloudStorageFolderGetCloudStorageFolderAllRequest {
	return ApiCloudStorageFolderGetCloudStorageFolderAllRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		serviceId: serviceId,
		userId: userId,
	}
}

// Execute executes the request
//  @return ExternalFolder
func (a *CloudStorageAPIService) CloudStorageFolderGetCloudStorageFolderAllExecute(r ApiCloudStorageFolderGetCloudStorageFolderAllRequest) (*ExternalFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStorageAPIService.CloudStorageFolderGetCloudStorageFolderAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudStorageFolderPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_storage_folder_path", r.cloudStorageFolderPath, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "")
	}
	if r.searchText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_text", r.searchText, "")
	}
	if r.startPosition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_position", r.startPosition, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
