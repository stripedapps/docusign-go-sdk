/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DocumentGenerationAPIService DocumentGenerationAPI service
type DocumentGenerationAPIService service

type ApiDocGenFormFieldsGetEnvelopeDocGenFormFieldsRequest struct {
	ctx context.Context
	ApiService *DocumentGenerationAPIService
	accountId string
	envelopeId string
}

func (r ApiDocGenFormFieldsGetEnvelopeDocGenFormFieldsRequest) Execute() (*DocGenFormFieldResponse, *http.Response, error) {
	return r.ApiService.DocGenFormFieldsGetEnvelopeDocGenFormFieldsExecute(r)
}

/*
DocGenFormFieldsGetEnvelopeDocGenFormFields Returns form fields for an envelope

Given an `envelopeId` this method
returns the form fields found in
that envelope's documents.

The response for envelope that has one document
with form fields would look like this:

```json
{
  "docGenFormFields": [
    {
      "documentId": "2dc54cf5-xxxx-xxxx-xxxx-05132a2dd889",
      "docGenFormFieldList": [
        {
          "label": "Candidate_Name",
          "type": "TextBox",
          "required": "True",
          "name": "Candidate_Name"
        },
        {
          "label": "Job_Title",
          "type": "TextBox",
          "required": "True",
          "name": "Job_Title"
        },
        {
          "label": "Manager_Name",
          "type": "TextBox",
          "required": "True",
          "name": "Manager_Name"
        },
        {
          "label": "Start_Date",
          "type": "TextBox",
          "required": "True",
          "name": "Start_Date"
        },
        {
          "label": "Salary",
          "type": "TextBox",
          "required": "True",
          "name": "Salary"
        }
      ],
      "docGenDocumentStatus": "created"
    }
  ]
}
```

### Related topics

- [Document generation](/docs/esign-rest-api/esign101/concepts/documents/document-generation/) in the eSignature concepts guide
- [How to request a signature by email with document generation](/docs/esign-rest-api/how-to/request-signature-email-document-generation/)
- [Document Generation for DocuSign eSignature](https://support.docusign.com/s/document-item?bundleId=als1679428547895&topicId=ldx1679428689631.html) in the eSignature User Guide

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiDocGenFormFieldsGetEnvelopeDocGenFormFieldsRequest
*/
func (a *DocumentGenerationAPIService) DocGenFormFieldsGetEnvelopeDocGenFormFields(ctx context.Context, accountId string, envelopeId string) ApiDocGenFormFieldsGetEnvelopeDocGenFormFieldsRequest {
	return ApiDocGenFormFieldsGetEnvelopeDocGenFormFieldsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return DocGenFormFieldResponse
func (a *DocumentGenerationAPIService) DocGenFormFieldsGetEnvelopeDocGenFormFieldsExecute(r ApiDocGenFormFieldsGetEnvelopeDocGenFormFieldsRequest) (*DocGenFormFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocGenFormFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentGenerationAPIService.DocGenFormFieldsGetEnvelopeDocGenFormFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/docGenFormFields"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest struct {
	ctx context.Context
	ApiService *DocumentGenerationAPIService
	accountId string
	envelopeId string
	updateDocgenFormfieldsOnly *string
	docGenFormFieldRequest *DocGenFormFieldRequest
}

// When **true,** only the form fields are updated. When **false** or omitted, the documents are updated as well.
func (r ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest) UpdateDocgenFormfieldsOnly(updateDocgenFormfieldsOnly string) ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest {
	r.updateDocgenFormfieldsOnly = &updateDocgenFormfieldsOnly
	return r
}

func (r ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest) DocGenFormFieldRequest(docGenFormFieldRequest DocGenFormFieldRequest) ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest {
	r.docGenFormFieldRequest = &docGenFormFieldRequest
	return r
}

func (r ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest) Execute() (*DocGenFormFieldResponse, *http.Response, error) {
	return r.ApiService.DocGenFormFieldsPutEnvelopeDocGenFormFieldsExecute(r)
}

/*
DocGenFormFieldsPutEnvelopeDocGenFormFields Updates form fields for an envelope.

This method updates the form fields
for all the documents in a given
envelope.

The envelope must be in the `draft` state.


The request body for an envelope that has one document
with form fields would look like this:

```json
{
  "docGenFormFields": [
    {
      "documentId": "2dc54cf5-xxxx-xxxx-xxxx-05132a2dd889",
      "docGenFormFieldList": [
        {
          "name": "Candidate_Name",
          "value": "Peggy Olson"
        },
        {
          "name": "Job_Title",
          "value": "Copywriter"
        },
        {
          "name": "Manager_Name",
          "value": "Donald Draper"
        },
        {
          "name": "Start_Date",
          "value": "March 15, 1960"
        },
        {
          "name": "Salary",
          "value": "8000"
        }
      ]
    }
  ]
}
```

### Related topics

- [Document generation](/docs/esign-rest-api/esign101/concepts/documents/document-generation/) in the eSignature concepts guide
- [How to request a signature by email with document generation](/docs/esign-rest-api/how-to/request-signature-email-document-generation/)
- [Document Generation for DocuSign eSignature](https://support.docusign.com/s/document-item?bundleId=als1679428547895&topicId=ldx1679428689631.html) in the eSignature User Guide

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest
*/
func (a *DocumentGenerationAPIService) DocGenFormFieldsPutEnvelopeDocGenFormFields(ctx context.Context, accountId string, envelopeId string) ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest {
	return ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return DocGenFormFieldResponse
func (a *DocumentGenerationAPIService) DocGenFormFieldsPutEnvelopeDocGenFormFieldsExecute(r ApiDocGenFormFieldsPutEnvelopeDocGenFormFieldsRequest) (*DocGenFormFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocGenFormFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentGenerationAPIService.DocGenFormFieldsPutEnvelopeDocGenFormFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/docGenFormFields"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.updateDocgenFormfieldsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "update_docgen_formfields_only", r.updateDocgenFormfieldsOnly, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.docGenFormFieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
