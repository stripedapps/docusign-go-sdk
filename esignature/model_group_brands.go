/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupBrands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupBrands{}

// GroupBrands If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
type GroupBrands struct {
	// The brand that envelope recipients see when a brand is not explicitly set.
	RecipientBrandIdDefault *string `json:"recipientBrandIdDefault,omitempty"`
	// The brand that envelope senders see when a brand is not explicitly set.
	SenderBrandIdDefault *string `json:"senderBrandIdDefault,omitempty"`
	// A list of brands.
	BrandOptions []Brand `json:"brandOptions,omitempty"`
}

// NewGroupBrands instantiates a new GroupBrands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupBrands() *GroupBrands {
	this := GroupBrands{}
	return &this
}

// NewGroupBrandsWithDefaults instantiates a new GroupBrands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupBrandsWithDefaults() *GroupBrands {
	this := GroupBrands{}
	return &this
}

// GetRecipientBrandIdDefault returns the RecipientBrandIdDefault field value if set, zero value otherwise.
func (o *GroupBrands) GetRecipientBrandIdDefault() string {
	if o == nil || IsNil(o.RecipientBrandIdDefault) {
		var ret string
		return ret
	}
	return *o.RecipientBrandIdDefault
}

// GetRecipientBrandIdDefaultOk returns a tuple with the RecipientBrandIdDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupBrands) GetRecipientBrandIdDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientBrandIdDefault) {
		return nil, false
	}
	return o.RecipientBrandIdDefault, true
}

// HasRecipientBrandIdDefault returns a boolean if a field has been set.
func (o *GroupBrands) HasRecipientBrandIdDefault() bool {
	if o != nil && !IsNil(o.RecipientBrandIdDefault) {
		return true
	}

	return false
}

// SetRecipientBrandIdDefault gets a reference to the given string and assigns it to the RecipientBrandIdDefault field.
func (o *GroupBrands) SetRecipientBrandIdDefault(v string) {
	o.RecipientBrandIdDefault = &v
}

// GetSenderBrandIdDefault returns the SenderBrandIdDefault field value if set, zero value otherwise.
func (o *GroupBrands) GetSenderBrandIdDefault() string {
	if o == nil || IsNil(o.SenderBrandIdDefault) {
		var ret string
		return ret
	}
	return *o.SenderBrandIdDefault
}

// GetSenderBrandIdDefaultOk returns a tuple with the SenderBrandIdDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupBrands) GetSenderBrandIdDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.SenderBrandIdDefault) {
		return nil, false
	}
	return o.SenderBrandIdDefault, true
}

// HasSenderBrandIdDefault returns a boolean if a field has been set.
func (o *GroupBrands) HasSenderBrandIdDefault() bool {
	if o != nil && !IsNil(o.SenderBrandIdDefault) {
		return true
	}

	return false
}

// SetSenderBrandIdDefault gets a reference to the given string and assigns it to the SenderBrandIdDefault field.
func (o *GroupBrands) SetSenderBrandIdDefault(v string) {
	o.SenderBrandIdDefault = &v
}

// GetBrandOptions returns the BrandOptions field value if set, zero value otherwise.
func (o *GroupBrands) GetBrandOptions() []Brand {
	if o == nil || IsNil(o.BrandOptions) {
		var ret []Brand
		return ret
	}
	return o.BrandOptions
}

// GetBrandOptionsOk returns a tuple with the BrandOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupBrands) GetBrandOptionsOk() ([]Brand, bool) {
	if o == nil || IsNil(o.BrandOptions) {
		return nil, false
	}
	return o.BrandOptions, true
}

// HasBrandOptions returns a boolean if a field has been set.
func (o *GroupBrands) HasBrandOptions() bool {
	if o != nil && !IsNil(o.BrandOptions) {
		return true
	}

	return false
}

// SetBrandOptions gets a reference to the given []Brand and assigns it to the BrandOptions field.
func (o *GroupBrands) SetBrandOptions(v []Brand) {
	o.BrandOptions = v
}

func (o GroupBrands) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupBrands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecipientBrandIdDefault) {
		toSerialize["recipientBrandIdDefault"] = o.RecipientBrandIdDefault
	}
	if !IsNil(o.SenderBrandIdDefault) {
		toSerialize["senderBrandIdDefault"] = o.SenderBrandIdDefault
	}
	if !IsNil(o.BrandOptions) {
		toSerialize["brandOptions"] = o.BrandOptions
	}
	return toSerialize, nil
}

type NullableGroupBrands struct {
	value *GroupBrands
	isSet bool
}

func (v NullableGroupBrands) Get() *GroupBrands {
	return v.value
}

func (v *NullableGroupBrands) Set(val *GroupBrands) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupBrands) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupBrands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupBrands(val *GroupBrands) *NullableGroupBrands {
	return &NullableGroupBrands{value: val, isSet: true}
}

func (v NullableGroupBrands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupBrands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


