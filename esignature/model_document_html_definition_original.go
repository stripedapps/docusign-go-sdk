/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DocumentHtmlDefinitionOriginal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentHtmlDefinitionOriginal{}

// DocumentHtmlDefinitionOriginal 
type DocumentHtmlDefinitionOriginal struct {
	// Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
	DocumentId *string `json:"documentId,omitempty"`
	// The GUID of the document.
	DocumentIdGuid *string `json:"documentIdGuid,omitempty"`
	HtmlDefinition *DocumentHtmlDefinition `json:"htmlDefinition,omitempty"`
}

// NewDocumentHtmlDefinitionOriginal instantiates a new DocumentHtmlDefinitionOriginal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentHtmlDefinitionOriginal() *DocumentHtmlDefinitionOriginal {
	this := DocumentHtmlDefinitionOriginal{}
	return &this
}

// NewDocumentHtmlDefinitionOriginalWithDefaults instantiates a new DocumentHtmlDefinitionOriginal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentHtmlDefinitionOriginalWithDefaults() *DocumentHtmlDefinitionOriginal {
	this := DocumentHtmlDefinitionOriginal{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *DocumentHtmlDefinitionOriginal) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinitionOriginal) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *DocumentHtmlDefinitionOriginal) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *DocumentHtmlDefinitionOriginal) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetDocumentIdGuid returns the DocumentIdGuid field value if set, zero value otherwise.
func (o *DocumentHtmlDefinitionOriginal) GetDocumentIdGuid() string {
	if o == nil || IsNil(o.DocumentIdGuid) {
		var ret string
		return ret
	}
	return *o.DocumentIdGuid
}

// GetDocumentIdGuidOk returns a tuple with the DocumentIdGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinitionOriginal) GetDocumentIdGuidOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentIdGuid) {
		return nil, false
	}
	return o.DocumentIdGuid, true
}

// HasDocumentIdGuid returns a boolean if a field has been set.
func (o *DocumentHtmlDefinitionOriginal) HasDocumentIdGuid() bool {
	if o != nil && !IsNil(o.DocumentIdGuid) {
		return true
	}

	return false
}

// SetDocumentIdGuid gets a reference to the given string and assigns it to the DocumentIdGuid field.
func (o *DocumentHtmlDefinitionOriginal) SetDocumentIdGuid(v string) {
	o.DocumentIdGuid = &v
}

// GetHtmlDefinition returns the HtmlDefinition field value if set, zero value otherwise.
func (o *DocumentHtmlDefinitionOriginal) GetHtmlDefinition() DocumentHtmlDefinition {
	if o == nil || IsNil(o.HtmlDefinition) {
		var ret DocumentHtmlDefinition
		return ret
	}
	return *o.HtmlDefinition
}

// GetHtmlDefinitionOk returns a tuple with the HtmlDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentHtmlDefinitionOriginal) GetHtmlDefinitionOk() (*DocumentHtmlDefinition, bool) {
	if o == nil || IsNil(o.HtmlDefinition) {
		return nil, false
	}
	return o.HtmlDefinition, true
}

// HasHtmlDefinition returns a boolean if a field has been set.
func (o *DocumentHtmlDefinitionOriginal) HasHtmlDefinition() bool {
	if o != nil && !IsNil(o.HtmlDefinition) {
		return true
	}

	return false
}

// SetHtmlDefinition gets a reference to the given DocumentHtmlDefinition and assigns it to the HtmlDefinition field.
func (o *DocumentHtmlDefinitionOriginal) SetHtmlDefinition(v DocumentHtmlDefinition) {
	o.HtmlDefinition = &v
}

func (o DocumentHtmlDefinitionOriginal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentHtmlDefinitionOriginal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.DocumentIdGuid) {
		toSerialize["documentIdGuid"] = o.DocumentIdGuid
	}
	if !IsNil(o.HtmlDefinition) {
		toSerialize["htmlDefinition"] = o.HtmlDefinition
	}
	return toSerialize, nil
}

type NullableDocumentHtmlDefinitionOriginal struct {
	value *DocumentHtmlDefinitionOriginal
	isSet bool
}

func (v NullableDocumentHtmlDefinitionOriginal) Get() *DocumentHtmlDefinitionOriginal {
	return v.value
}

func (v *NullableDocumentHtmlDefinitionOriginal) Set(val *DocumentHtmlDefinitionOriginal) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentHtmlDefinitionOriginal) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentHtmlDefinitionOriginal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentHtmlDefinitionOriginal(val *DocumentHtmlDefinitionOriginal) *NullableDocumentHtmlDefinitionOriginal {
	return &NullableDocumentHtmlDefinitionOriginal{value: val, isSet: true}
}

func (v NullableDocumentHtmlDefinitionOriginal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentHtmlDefinitionOriginal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


