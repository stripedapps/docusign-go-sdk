/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DateStampProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateStampProperties{}

// DateStampProperties Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.  This property contains the following information about the central rectangle:  - `DateAreaX`: The X axis position of the top-left corner. - `DateAreaY`: The Y axis position of the top-left corner. - `DateAreaWidth`: The width of the rectangle. - `DateAreaHeight`: The height of the rectangle.
type DateStampProperties struct {
	// The height of the rectangle.
	DateAreaHeight *string `json:"dateAreaHeight,omitempty"`
	// The width of the rectangle.
	DateAreaWidth *string `json:"dateAreaWidth,omitempty"`
	// The X axis position of the top-left corner.
	DateAreaX *string `json:"dateAreaX,omitempty"`
	// The Y axis position of the top-left corner.
	DateAreaY *string `json:"dateAreaY,omitempty"`
}

// NewDateStampProperties instantiates a new DateStampProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateStampProperties() *DateStampProperties {
	this := DateStampProperties{}
	return &this
}

// NewDateStampPropertiesWithDefaults instantiates a new DateStampProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateStampPropertiesWithDefaults() *DateStampProperties {
	this := DateStampProperties{}
	return &this
}

// GetDateAreaHeight returns the DateAreaHeight field value if set, zero value otherwise.
func (o *DateStampProperties) GetDateAreaHeight() string {
	if o == nil || IsNil(o.DateAreaHeight) {
		var ret string
		return ret
	}
	return *o.DateAreaHeight
}

// GetDateAreaHeightOk returns a tuple with the DateAreaHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateStampProperties) GetDateAreaHeightOk() (*string, bool) {
	if o == nil || IsNil(o.DateAreaHeight) {
		return nil, false
	}
	return o.DateAreaHeight, true
}

// HasDateAreaHeight returns a boolean if a field has been set.
func (o *DateStampProperties) HasDateAreaHeight() bool {
	if o != nil && !IsNil(o.DateAreaHeight) {
		return true
	}

	return false
}

// SetDateAreaHeight gets a reference to the given string and assigns it to the DateAreaHeight field.
func (o *DateStampProperties) SetDateAreaHeight(v string) {
	o.DateAreaHeight = &v
}

// GetDateAreaWidth returns the DateAreaWidth field value if set, zero value otherwise.
func (o *DateStampProperties) GetDateAreaWidth() string {
	if o == nil || IsNil(o.DateAreaWidth) {
		var ret string
		return ret
	}
	return *o.DateAreaWidth
}

// GetDateAreaWidthOk returns a tuple with the DateAreaWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateStampProperties) GetDateAreaWidthOk() (*string, bool) {
	if o == nil || IsNil(o.DateAreaWidth) {
		return nil, false
	}
	return o.DateAreaWidth, true
}

// HasDateAreaWidth returns a boolean if a field has been set.
func (o *DateStampProperties) HasDateAreaWidth() bool {
	if o != nil && !IsNil(o.DateAreaWidth) {
		return true
	}

	return false
}

// SetDateAreaWidth gets a reference to the given string and assigns it to the DateAreaWidth field.
func (o *DateStampProperties) SetDateAreaWidth(v string) {
	o.DateAreaWidth = &v
}

// GetDateAreaX returns the DateAreaX field value if set, zero value otherwise.
func (o *DateStampProperties) GetDateAreaX() string {
	if o == nil || IsNil(o.DateAreaX) {
		var ret string
		return ret
	}
	return *o.DateAreaX
}

// GetDateAreaXOk returns a tuple with the DateAreaX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateStampProperties) GetDateAreaXOk() (*string, bool) {
	if o == nil || IsNil(o.DateAreaX) {
		return nil, false
	}
	return o.DateAreaX, true
}

// HasDateAreaX returns a boolean if a field has been set.
func (o *DateStampProperties) HasDateAreaX() bool {
	if o != nil && !IsNil(o.DateAreaX) {
		return true
	}

	return false
}

// SetDateAreaX gets a reference to the given string and assigns it to the DateAreaX field.
func (o *DateStampProperties) SetDateAreaX(v string) {
	o.DateAreaX = &v
}

// GetDateAreaY returns the DateAreaY field value if set, zero value otherwise.
func (o *DateStampProperties) GetDateAreaY() string {
	if o == nil || IsNil(o.DateAreaY) {
		var ret string
		return ret
	}
	return *o.DateAreaY
}

// GetDateAreaYOk returns a tuple with the DateAreaY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateStampProperties) GetDateAreaYOk() (*string, bool) {
	if o == nil || IsNil(o.DateAreaY) {
		return nil, false
	}
	return o.DateAreaY, true
}

// HasDateAreaY returns a boolean if a field has been set.
func (o *DateStampProperties) HasDateAreaY() bool {
	if o != nil && !IsNil(o.DateAreaY) {
		return true
	}

	return false
}

// SetDateAreaY gets a reference to the given string and assigns it to the DateAreaY field.
func (o *DateStampProperties) SetDateAreaY(v string) {
	o.DateAreaY = &v
}

func (o DateStampProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateStampProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateAreaHeight) {
		toSerialize["dateAreaHeight"] = o.DateAreaHeight
	}
	if !IsNil(o.DateAreaWidth) {
		toSerialize["dateAreaWidth"] = o.DateAreaWidth
	}
	if !IsNil(o.DateAreaX) {
		toSerialize["dateAreaX"] = o.DateAreaX
	}
	if !IsNil(o.DateAreaY) {
		toSerialize["dateAreaY"] = o.DateAreaY
	}
	return toSerialize, nil
}

type NullableDateStampProperties struct {
	value *DateStampProperties
	isSet bool
}

func (v NullableDateStampProperties) Get() *DateStampProperties {
	return v.value
}

func (v *NullableDateStampProperties) Set(val *DateStampProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableDateStampProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableDateStampProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateStampProperties(val *DateStampProperties) *NullableDateStampProperties {
	return &NullableDateStampProperties{value: val, isSet: true}
}

func (v NullableDateStampProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateStampProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


