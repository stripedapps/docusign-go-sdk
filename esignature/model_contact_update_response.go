/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContactUpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactUpdateResponse{}

// ContactUpdateResponse This response objects shows the updated details for the contacts.
type ContactUpdateResponse struct {
	// A list of contacts.
	Contacts []Contact `json:"contacts,omitempty"`
}

// NewContactUpdateResponse instantiates a new ContactUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactUpdateResponse() *ContactUpdateResponse {
	this := ContactUpdateResponse{}
	return &this
}

// NewContactUpdateResponseWithDefaults instantiates a new ContactUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactUpdateResponseWithDefaults() *ContactUpdateResponse {
	this := ContactUpdateResponse{}
	return &this
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *ContactUpdateResponse) GetContacts() []Contact {
	if o == nil || IsNil(o.Contacts) {
		var ret []Contact
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactUpdateResponse) GetContactsOk() ([]Contact, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *ContactUpdateResponse) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []Contact and assigns it to the Contacts field.
func (o *ContactUpdateResponse) SetContacts(v []Contact) {
	o.Contacts = v
}

func (o ContactUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactUpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	return toSerialize, nil
}

type NullableContactUpdateResponse struct {
	value *ContactUpdateResponse
	isSet bool
}

func (v NullableContactUpdateResponse) Get() *ContactUpdateResponse {
	return v.value
}

func (v *NullableContactUpdateResponse) Set(val *ContactUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContactUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContactUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactUpdateResponse(val *ContactUpdateResponse) *NullableContactUpdateResponse {
	return &NullableContactUpdateResponse{value: val, isSet: true}
}

func (v NullableContactUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


