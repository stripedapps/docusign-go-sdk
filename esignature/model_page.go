/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Page type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Page{}

// Page Description of a page of a document.
type Page struct {
	// The number of dots per inch used for the page image.
	Dpi *string `json:"dpi,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The height of the page in pixels. Must be an integer.
	Height *string `json:"height,omitempty"`
	// The number of image bytes.
	ImageBytes *string `json:"imageBytes,omitempty"`
	// The MIME type.
	MimeType *string `json:"mimeType,omitempty"`
	// The ID of the page.
	PageId *string `json:"pageId,omitempty"`
	// The sequence of the page in the document, or page number.
	Sequence *string `json:"sequence,omitempty"`
	// The width of the page in pixels. Must be an integer.
	Width *string `json:"width,omitempty"`
}

// NewPage instantiates a new Page object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPage() *Page {
	this := Page{}
	return &this
}

// NewPageWithDefaults instantiates a new Page object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageWithDefaults() *Page {
	this := Page{}
	return &this
}

// GetDpi returns the Dpi field value if set, zero value otherwise.
func (o *Page) GetDpi() string {
	if o == nil || IsNil(o.Dpi) {
		var ret string
		return ret
	}
	return *o.Dpi
}

// GetDpiOk returns a tuple with the Dpi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetDpiOk() (*string, bool) {
	if o == nil || IsNil(o.Dpi) {
		return nil, false
	}
	return o.Dpi, true
}

// HasDpi returns a boolean if a field has been set.
func (o *Page) HasDpi() bool {
	if o != nil && !IsNil(o.Dpi) {
		return true
	}

	return false
}

// SetDpi gets a reference to the given string and assigns it to the Dpi field.
func (o *Page) SetDpi(v string) {
	o.Dpi = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *Page) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *Page) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *Page) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *Page) GetHeight() string {
	if o == nil || IsNil(o.Height) {
		var ret string
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetHeightOk() (*string, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *Page) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given string and assigns it to the Height field.
func (o *Page) SetHeight(v string) {
	o.Height = &v
}

// GetImageBytes returns the ImageBytes field value if set, zero value otherwise.
func (o *Page) GetImageBytes() string {
	if o == nil || IsNil(o.ImageBytes) {
		var ret string
		return ret
	}
	return *o.ImageBytes
}

// GetImageBytesOk returns a tuple with the ImageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetImageBytesOk() (*string, bool) {
	if o == nil || IsNil(o.ImageBytes) {
		return nil, false
	}
	return o.ImageBytes, true
}

// HasImageBytes returns a boolean if a field has been set.
func (o *Page) HasImageBytes() bool {
	if o != nil && !IsNil(o.ImageBytes) {
		return true
	}

	return false
}

// SetImageBytes gets a reference to the given string and assigns it to the ImageBytes field.
func (o *Page) SetImageBytes(v string) {
	o.ImageBytes = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *Page) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *Page) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *Page) SetMimeType(v string) {
	o.MimeType = &v
}

// GetPageId returns the PageId field value if set, zero value otherwise.
func (o *Page) GetPageId() string {
	if o == nil || IsNil(o.PageId) {
		var ret string
		return ret
	}
	return *o.PageId
}

// GetPageIdOk returns a tuple with the PageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetPageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PageId) {
		return nil, false
	}
	return o.PageId, true
}

// HasPageId returns a boolean if a field has been set.
func (o *Page) HasPageId() bool {
	if o != nil && !IsNil(o.PageId) {
		return true
	}

	return false
}

// SetPageId gets a reference to the given string and assigns it to the PageId field.
func (o *Page) SetPageId(v string) {
	o.PageId = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *Page) GetSequence() string {
	if o == nil || IsNil(o.Sequence) {
		var ret string
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetSequenceOk() (*string, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *Page) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given string and assigns it to the Sequence field.
func (o *Page) SetSequence(v string) {
	o.Sequence = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *Page) GetWidth() string {
	if o == nil || IsNil(o.Width) {
		var ret string
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetWidthOk() (*string, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *Page) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given string and assigns it to the Width field.
func (o *Page) SetWidth(v string) {
	o.Width = &v
}

func (o Page) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Page) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dpi) {
		toSerialize["dpi"] = o.Dpi
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.ImageBytes) {
		toSerialize["imageBytes"] = o.ImageBytes
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if !IsNil(o.PageId) {
		toSerialize["pageId"] = o.PageId
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullablePage struct {
	value *Page
	isSet bool
}

func (v NullablePage) Get() *Page {
	return v.value
}

func (v *NullablePage) Set(val *Page) {
	v.value = val
	v.isSet = true
}

func (v NullablePage) IsSet() bool {
	return v.isSet
}

func (v *NullablePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePage(val *Page) *NullablePage {
	return &NullablePage{value: val, isSet: true}
}

func (v NullablePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


