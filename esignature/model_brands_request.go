/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BrandsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandsRequest{}

// BrandsRequest Details about one or more brands.
type BrandsRequest struct {
	// A list of brands.
	Brands []BrandRequest `json:"brands,omitempty"`
}

// NewBrandsRequest instantiates a new BrandsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandsRequest() *BrandsRequest {
	this := BrandsRequest{}
	return &this
}

// NewBrandsRequestWithDefaults instantiates a new BrandsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandsRequestWithDefaults() *BrandsRequest {
	this := BrandsRequest{}
	return &this
}

// GetBrands returns the Brands field value if set, zero value otherwise.
func (o *BrandsRequest) GetBrands() []BrandRequest {
	if o == nil || IsNil(o.Brands) {
		var ret []BrandRequest
		return ret
	}
	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandsRequest) GetBrandsOk() ([]BrandRequest, bool) {
	if o == nil || IsNil(o.Brands) {
		return nil, false
	}
	return o.Brands, true
}

// HasBrands returns a boolean if a field has been set.
func (o *BrandsRequest) HasBrands() bool {
	if o != nil && !IsNil(o.Brands) {
		return true
	}

	return false
}

// SetBrands gets a reference to the given []BrandRequest and assigns it to the Brands field.
func (o *BrandsRequest) SetBrands(v []BrandRequest) {
	o.Brands = v
}

func (o BrandsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Brands) {
		toSerialize["brands"] = o.Brands
	}
	return toSerialize, nil
}

type NullableBrandsRequest struct {
	value *BrandsRequest
	isSet bool
}

func (v NullableBrandsRequest) Get() *BrandsRequest {
	return v.value
}

func (v *NullableBrandsRequest) Set(val *BrandsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandsRequest(val *BrandsRequest) *NullableBrandsRequest {
	return &NullableBrandsRequest{value: val, isSet: true}
}

func (v NullableBrandsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


