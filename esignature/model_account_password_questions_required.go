/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountPasswordQuestionsRequired type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPasswordQuestionsRequired{}

// AccountPasswordQuestionsRequired Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
type AccountPasswordQuestionsRequired struct {
	// The maximum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or greater than `minimumQuestions`.
	MaximumQuestions *string `json:"maximumQuestions,omitempty"`
	// The minimum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or less than `maximumQuestions`.
	MinimumQuestions *string `json:"minimumQuestions,omitempty"`
}

// NewAccountPasswordQuestionsRequired instantiates a new AccountPasswordQuestionsRequired object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPasswordQuestionsRequired() *AccountPasswordQuestionsRequired {
	this := AccountPasswordQuestionsRequired{}
	return &this
}

// NewAccountPasswordQuestionsRequiredWithDefaults instantiates a new AccountPasswordQuestionsRequired object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPasswordQuestionsRequiredWithDefaults() *AccountPasswordQuestionsRequired {
	this := AccountPasswordQuestionsRequired{}
	return &this
}

// GetMaximumQuestions returns the MaximumQuestions field value if set, zero value otherwise.
func (o *AccountPasswordQuestionsRequired) GetMaximumQuestions() string {
	if o == nil || IsNil(o.MaximumQuestions) {
		var ret string
		return ret
	}
	return *o.MaximumQuestions
}

// GetMaximumQuestionsOk returns a tuple with the MaximumQuestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordQuestionsRequired) GetMaximumQuestionsOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumQuestions) {
		return nil, false
	}
	return o.MaximumQuestions, true
}

// HasMaximumQuestions returns a boolean if a field has been set.
func (o *AccountPasswordQuestionsRequired) HasMaximumQuestions() bool {
	if o != nil && !IsNil(o.MaximumQuestions) {
		return true
	}

	return false
}

// SetMaximumQuestions gets a reference to the given string and assigns it to the MaximumQuestions field.
func (o *AccountPasswordQuestionsRequired) SetMaximumQuestions(v string) {
	o.MaximumQuestions = &v
}

// GetMinimumQuestions returns the MinimumQuestions field value if set, zero value otherwise.
func (o *AccountPasswordQuestionsRequired) GetMinimumQuestions() string {
	if o == nil || IsNil(o.MinimumQuestions) {
		var ret string
		return ret
	}
	return *o.MinimumQuestions
}

// GetMinimumQuestionsOk returns a tuple with the MinimumQuestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordQuestionsRequired) GetMinimumQuestionsOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumQuestions) {
		return nil, false
	}
	return o.MinimumQuestions, true
}

// HasMinimumQuestions returns a boolean if a field has been set.
func (o *AccountPasswordQuestionsRequired) HasMinimumQuestions() bool {
	if o != nil && !IsNil(o.MinimumQuestions) {
		return true
	}

	return false
}

// SetMinimumQuestions gets a reference to the given string and assigns it to the MinimumQuestions field.
func (o *AccountPasswordQuestionsRequired) SetMinimumQuestions(v string) {
	o.MinimumQuestions = &v
}

func (o AccountPasswordQuestionsRequired) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPasswordQuestionsRequired) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaximumQuestions) {
		toSerialize["maximumQuestions"] = o.MaximumQuestions
	}
	if !IsNil(o.MinimumQuestions) {
		toSerialize["minimumQuestions"] = o.MinimumQuestions
	}
	return toSerialize, nil
}

type NullableAccountPasswordQuestionsRequired struct {
	value *AccountPasswordQuestionsRequired
	isSet bool
}

func (v NullableAccountPasswordQuestionsRequired) Get() *AccountPasswordQuestionsRequired {
	return v.value
}

func (v *NullableAccountPasswordQuestionsRequired) Set(val *AccountPasswordQuestionsRequired) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPasswordQuestionsRequired) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPasswordQuestionsRequired) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPasswordQuestionsRequired(val *AccountPasswordQuestionsRequired) *NullableAccountPasswordQuestionsRequired {
	return &NullableAccountPasswordQuestionsRequired{value: val, isSet: true}
}

func (v NullableAccountPasswordQuestionsRequired) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPasswordQuestionsRequired) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


