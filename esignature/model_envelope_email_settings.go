/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeEmailSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeEmailSettings{}

// EnvelopeEmailSettings Envelope email settings
type EnvelopeEmailSettings struct {
	// An array containing the email address that should receive a copy of all email communications related to an envelope for archiving purposes. Maximum Length: 100 characters.  While this property is an array, note that it takes only a single email address.  **Note:** Only users with the `canManageAccount` setting set to **true** can use this option.   DocuSign verifies that the email format is correct, but does not verify that the email address is active. You can use this for archiving purposes. However, using this property overrides the BCC for Email Archive information setting for this envelope.   **Example:** if your account has BCC for Email Archive set up for the email address archive@mycompany.com and you send an envelope using the BCC Email Override to send a BCC email to salesarchive@mycompany.com, then a copy of the envelope is only sent to the salesarchive@mycompany.com email address.
	BccEmailAddresses []BccEmailAddress `json:"bccEmailAddresses,omitempty"`
	// The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address is in a correct format, but does not verify that it is active. Maximum Length: 100 characters.
	ReplyEmailAddressOverride *string `json:"replyEmailAddressOverride,omitempty"`
	// The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters.
	ReplyEmailNameOverride *string `json:"replyEmailNameOverride,omitempty"`
}

// NewEnvelopeEmailSettings instantiates a new EnvelopeEmailSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeEmailSettings() *EnvelopeEmailSettings {
	this := EnvelopeEmailSettings{}
	return &this
}

// NewEnvelopeEmailSettingsWithDefaults instantiates a new EnvelopeEmailSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeEmailSettingsWithDefaults() *EnvelopeEmailSettings {
	this := EnvelopeEmailSettings{}
	return &this
}

// GetBccEmailAddresses returns the BccEmailAddresses field value if set, zero value otherwise.
func (o *EnvelopeEmailSettings) GetBccEmailAddresses() []BccEmailAddress {
	if o == nil || IsNil(o.BccEmailAddresses) {
		var ret []BccEmailAddress
		return ret
	}
	return o.BccEmailAddresses
}

// GetBccEmailAddressesOk returns a tuple with the BccEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeEmailSettings) GetBccEmailAddressesOk() ([]BccEmailAddress, bool) {
	if o == nil || IsNil(o.BccEmailAddresses) {
		return nil, false
	}
	return o.BccEmailAddresses, true
}

// HasBccEmailAddresses returns a boolean if a field has been set.
func (o *EnvelopeEmailSettings) HasBccEmailAddresses() bool {
	if o != nil && !IsNil(o.BccEmailAddresses) {
		return true
	}

	return false
}

// SetBccEmailAddresses gets a reference to the given []BccEmailAddress and assigns it to the BccEmailAddresses field.
func (o *EnvelopeEmailSettings) SetBccEmailAddresses(v []BccEmailAddress) {
	o.BccEmailAddresses = v
}

// GetReplyEmailAddressOverride returns the ReplyEmailAddressOverride field value if set, zero value otherwise.
func (o *EnvelopeEmailSettings) GetReplyEmailAddressOverride() string {
	if o == nil || IsNil(o.ReplyEmailAddressOverride) {
		var ret string
		return ret
	}
	return *o.ReplyEmailAddressOverride
}

// GetReplyEmailAddressOverrideOk returns a tuple with the ReplyEmailAddressOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeEmailSettings) GetReplyEmailAddressOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.ReplyEmailAddressOverride) {
		return nil, false
	}
	return o.ReplyEmailAddressOverride, true
}

// HasReplyEmailAddressOverride returns a boolean if a field has been set.
func (o *EnvelopeEmailSettings) HasReplyEmailAddressOverride() bool {
	if o != nil && !IsNil(o.ReplyEmailAddressOverride) {
		return true
	}

	return false
}

// SetReplyEmailAddressOverride gets a reference to the given string and assigns it to the ReplyEmailAddressOverride field.
func (o *EnvelopeEmailSettings) SetReplyEmailAddressOverride(v string) {
	o.ReplyEmailAddressOverride = &v
}

// GetReplyEmailNameOverride returns the ReplyEmailNameOverride field value if set, zero value otherwise.
func (o *EnvelopeEmailSettings) GetReplyEmailNameOverride() string {
	if o == nil || IsNil(o.ReplyEmailNameOverride) {
		var ret string
		return ret
	}
	return *o.ReplyEmailNameOverride
}

// GetReplyEmailNameOverrideOk returns a tuple with the ReplyEmailNameOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeEmailSettings) GetReplyEmailNameOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.ReplyEmailNameOverride) {
		return nil, false
	}
	return o.ReplyEmailNameOverride, true
}

// HasReplyEmailNameOverride returns a boolean if a field has been set.
func (o *EnvelopeEmailSettings) HasReplyEmailNameOverride() bool {
	if o != nil && !IsNil(o.ReplyEmailNameOverride) {
		return true
	}

	return false
}

// SetReplyEmailNameOverride gets a reference to the given string and assigns it to the ReplyEmailNameOverride field.
func (o *EnvelopeEmailSettings) SetReplyEmailNameOverride(v string) {
	o.ReplyEmailNameOverride = &v
}

func (o EnvelopeEmailSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeEmailSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BccEmailAddresses) {
		toSerialize["bccEmailAddresses"] = o.BccEmailAddresses
	}
	if !IsNil(o.ReplyEmailAddressOverride) {
		toSerialize["replyEmailAddressOverride"] = o.ReplyEmailAddressOverride
	}
	if !IsNil(o.ReplyEmailNameOverride) {
		toSerialize["replyEmailNameOverride"] = o.ReplyEmailNameOverride
	}
	return toSerialize, nil
}

type NullableEnvelopeEmailSettings struct {
	value *EnvelopeEmailSettings
	isSet bool
}

func (v NullableEnvelopeEmailSettings) Get() *EnvelopeEmailSettings {
	return v.value
}

func (v *NullableEnvelopeEmailSettings) Set(val *EnvelopeEmailSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeEmailSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeEmailSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeEmailSettings(val *EnvelopeEmailSettings) *NullableEnvelopeEmailSettings {
	return &NullableEnvelopeEmailSettings{value: val, isSet: true}
}

func (v NullableEnvelopeEmailSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeEmailSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


