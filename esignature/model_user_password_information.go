/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserPasswordInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPasswordInformation{}

// UserPasswordInformation 
type UserPasswordInformation struct {
	// The user's current password to be changed.
	CurrentPassword *string `json:"currentPassword,omitempty"`
	// The user's email address for the associated account.
	Email *string `json:"email,omitempty"`
	ForgottenPasswordInfo *ForgottenPasswordInformation `json:"forgottenPasswordInfo,omitempty"`
	// The user's new password.
	NewPassword *string `json:"newPassword,omitempty"`
}

// NewUserPasswordInformation instantiates a new UserPasswordInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordInformation() *UserPasswordInformation {
	this := UserPasswordInformation{}
	return &this
}

// NewUserPasswordInformationWithDefaults instantiates a new UserPasswordInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordInformationWithDefaults() *UserPasswordInformation {
	this := UserPasswordInformation{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UserPasswordInformation) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword) {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordInformation) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPassword) {
		return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UserPasswordInformation) HasCurrentPassword() bool {
	if o != nil && !IsNil(o.CurrentPassword) {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UserPasswordInformation) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserPasswordInformation) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordInformation) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserPasswordInformation) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserPasswordInformation) SetEmail(v string) {
	o.Email = &v
}

// GetForgottenPasswordInfo returns the ForgottenPasswordInfo field value if set, zero value otherwise.
func (o *UserPasswordInformation) GetForgottenPasswordInfo() ForgottenPasswordInformation {
	if o == nil || IsNil(o.ForgottenPasswordInfo) {
		var ret ForgottenPasswordInformation
		return ret
	}
	return *o.ForgottenPasswordInfo
}

// GetForgottenPasswordInfoOk returns a tuple with the ForgottenPasswordInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordInformation) GetForgottenPasswordInfoOk() (*ForgottenPasswordInformation, bool) {
	if o == nil || IsNil(o.ForgottenPasswordInfo) {
		return nil, false
	}
	return o.ForgottenPasswordInfo, true
}

// HasForgottenPasswordInfo returns a boolean if a field has been set.
func (o *UserPasswordInformation) HasForgottenPasswordInfo() bool {
	if o != nil && !IsNil(o.ForgottenPasswordInfo) {
		return true
	}

	return false
}

// SetForgottenPasswordInfo gets a reference to the given ForgottenPasswordInformation and assigns it to the ForgottenPasswordInfo field.
func (o *UserPasswordInformation) SetForgottenPasswordInfo(v ForgottenPasswordInformation) {
	o.ForgottenPasswordInfo = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UserPasswordInformation) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordInformation) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UserPasswordInformation) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UserPasswordInformation) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o UserPasswordInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPasswordInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentPassword) {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ForgottenPasswordInfo) {
		toSerialize["forgottenPasswordInfo"] = o.ForgottenPasswordInfo
	}
	if !IsNil(o.NewPassword) {
		toSerialize["newPassword"] = o.NewPassword
	}
	return toSerialize, nil
}

type NullableUserPasswordInformation struct {
	value *UserPasswordInformation
	isSet bool
}

func (v NullableUserPasswordInformation) Get() *UserPasswordInformation {
	return v.value
}

func (v *NullableUserPasswordInformation) Set(val *UserPasswordInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordInformation(val *UserPasswordInformation) *NullableUserPasswordInformation {
	return &NullableUserPasswordInformation{value: val, isSet: true}
}

func (v NullableUserPasswordInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


