/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Stamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stamp{}

// Stamp 
type Stamp struct {
	// The UTC date and time when the user adopted the signature.
	AdoptedDateTime *string `json:"adoptedDateTime,omitempty"`
	// The UTC DateTime when the item was created.
	CreatedDateTime *string `json:"createdDateTime,omitempty"`
	// 
	CustomField *string `json:"customField,omitempty"`
	DateStampProperties *DateStampProperties `json:"dateStampProperties,omitempty"`
	// When **true,** users may not resize the stamp.
	DisallowUserResizeStamp *string `json:"disallowUserResizeStamp,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// Optionally specify an external identifier for the user's signature.
	ExternalID *string `json:"externalID,omitempty"`
	// 
	ImageBase64 *string `json:"imageBase64,omitempty"`
	// Specificies the type of image. Valid values:  - `stamp_image` - `signature_image` - `initials_image`
	ImageType *string `json:"imageType,omitempty"`
	// The date and time that the item was last modified.
	LastModifiedDateTime *string `json:"lastModifiedDateTime,omitempty"`
	// The phonetic spelling of the `signatureName`.
	PhoneticName *string `json:"phoneticName,omitempty"`
	// Specifies the user's signature name.
	SignatureName *string `json:"signatureName,omitempty"`
	// The format of a stamp. Valid values are:  - `NameHanko`: The stamp represents only the signer's name. - `NameDateHanko`: The stamp represents the signer's name and the date. 
	StampFormat *string `json:"stampFormat,omitempty"`
	// The URI for retrieving the image of the user's stamp.
	StampImageUri *string `json:"stampImageUri,omitempty"`
	// The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
	StampSizeMM *string `json:"stampSizeMM,omitempty"`
	// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
	Status *string `json:"status,omitempty"`
}

// NewStamp instantiates a new Stamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStamp() *Stamp {
	this := Stamp{}
	return &this
}

// NewStampWithDefaults instantiates a new Stamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStampWithDefaults() *Stamp {
	this := Stamp{}
	return &this
}

// GetAdoptedDateTime returns the AdoptedDateTime field value if set, zero value otherwise.
func (o *Stamp) GetAdoptedDateTime() string {
	if o == nil || IsNil(o.AdoptedDateTime) {
		var ret string
		return ret
	}
	return *o.AdoptedDateTime
}

// GetAdoptedDateTimeOk returns a tuple with the AdoptedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetAdoptedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AdoptedDateTime) {
		return nil, false
	}
	return o.AdoptedDateTime, true
}

// HasAdoptedDateTime returns a boolean if a field has been set.
func (o *Stamp) HasAdoptedDateTime() bool {
	if o != nil && !IsNil(o.AdoptedDateTime) {
		return true
	}

	return false
}

// SetAdoptedDateTime gets a reference to the given string and assigns it to the AdoptedDateTime field.
func (o *Stamp) SetAdoptedDateTime(v string) {
	o.AdoptedDateTime = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *Stamp) GetCreatedDateTime() string {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret string
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetCreatedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Stamp) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given string and assigns it to the CreatedDateTime field.
func (o *Stamp) SetCreatedDateTime(v string) {
	o.CreatedDateTime = &v
}

// GetCustomField returns the CustomField field value if set, zero value otherwise.
func (o *Stamp) GetCustomField() string {
	if o == nil || IsNil(o.CustomField) {
		var ret string
		return ret
	}
	return *o.CustomField
}

// GetCustomFieldOk returns a tuple with the CustomField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetCustomFieldOk() (*string, bool) {
	if o == nil || IsNil(o.CustomField) {
		return nil, false
	}
	return o.CustomField, true
}

// HasCustomField returns a boolean if a field has been set.
func (o *Stamp) HasCustomField() bool {
	if o != nil && !IsNil(o.CustomField) {
		return true
	}

	return false
}

// SetCustomField gets a reference to the given string and assigns it to the CustomField field.
func (o *Stamp) SetCustomField(v string) {
	o.CustomField = &v
}

// GetDateStampProperties returns the DateStampProperties field value if set, zero value otherwise.
func (o *Stamp) GetDateStampProperties() DateStampProperties {
	if o == nil || IsNil(o.DateStampProperties) {
		var ret DateStampProperties
		return ret
	}
	return *o.DateStampProperties
}

// GetDateStampPropertiesOk returns a tuple with the DateStampProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetDateStampPropertiesOk() (*DateStampProperties, bool) {
	if o == nil || IsNil(o.DateStampProperties) {
		return nil, false
	}
	return o.DateStampProperties, true
}

// HasDateStampProperties returns a boolean if a field has been set.
func (o *Stamp) HasDateStampProperties() bool {
	if o != nil && !IsNil(o.DateStampProperties) {
		return true
	}

	return false
}

// SetDateStampProperties gets a reference to the given DateStampProperties and assigns it to the DateStampProperties field.
func (o *Stamp) SetDateStampProperties(v DateStampProperties) {
	o.DateStampProperties = &v
}

// GetDisallowUserResizeStamp returns the DisallowUserResizeStamp field value if set, zero value otherwise.
func (o *Stamp) GetDisallowUserResizeStamp() string {
	if o == nil || IsNil(o.DisallowUserResizeStamp) {
		var ret string
		return ret
	}
	return *o.DisallowUserResizeStamp
}

// GetDisallowUserResizeStampOk returns a tuple with the DisallowUserResizeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetDisallowUserResizeStampOk() (*string, bool) {
	if o == nil || IsNil(o.DisallowUserResizeStamp) {
		return nil, false
	}
	return o.DisallowUserResizeStamp, true
}

// HasDisallowUserResizeStamp returns a boolean if a field has been set.
func (o *Stamp) HasDisallowUserResizeStamp() bool {
	if o != nil && !IsNil(o.DisallowUserResizeStamp) {
		return true
	}

	return false
}

// SetDisallowUserResizeStamp gets a reference to the given string and assigns it to the DisallowUserResizeStamp field.
func (o *Stamp) SetDisallowUserResizeStamp(v string) {
	o.DisallowUserResizeStamp = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *Stamp) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *Stamp) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *Stamp) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetExternalID returns the ExternalID field value if set, zero value otherwise.
func (o *Stamp) GetExternalID() string {
	if o == nil || IsNil(o.ExternalID) {
		var ret string
		return ret
	}
	return *o.ExternalID
}

// GetExternalIDOk returns a tuple with the ExternalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetExternalIDOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalID) {
		return nil, false
	}
	return o.ExternalID, true
}

// HasExternalID returns a boolean if a field has been set.
func (o *Stamp) HasExternalID() bool {
	if o != nil && !IsNil(o.ExternalID) {
		return true
	}

	return false
}

// SetExternalID gets a reference to the given string and assigns it to the ExternalID field.
func (o *Stamp) SetExternalID(v string) {
	o.ExternalID = &v
}

// GetImageBase64 returns the ImageBase64 field value if set, zero value otherwise.
func (o *Stamp) GetImageBase64() string {
	if o == nil || IsNil(o.ImageBase64) {
		var ret string
		return ret
	}
	return *o.ImageBase64
}

// GetImageBase64Ok returns a tuple with the ImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetImageBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.ImageBase64) {
		return nil, false
	}
	return o.ImageBase64, true
}

// HasImageBase64 returns a boolean if a field has been set.
func (o *Stamp) HasImageBase64() bool {
	if o != nil && !IsNil(o.ImageBase64) {
		return true
	}

	return false
}

// SetImageBase64 gets a reference to the given string and assigns it to the ImageBase64 field.
func (o *Stamp) SetImageBase64(v string) {
	o.ImageBase64 = &v
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *Stamp) GetImageType() string {
	if o == nil || IsNil(o.ImageType) {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetImageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ImageType) {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *Stamp) HasImageType() bool {
	if o != nil && !IsNil(o.ImageType) {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *Stamp) SetImageType(v string) {
	o.ImageType = &v
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field value if set, zero value otherwise.
func (o *Stamp) GetLastModifiedDateTime() string {
	if o == nil || IsNil(o.LastModifiedDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetLastModifiedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedDateTime) {
		return nil, false
	}
	return o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *Stamp) HasLastModifiedDateTime() bool {
	if o != nil && !IsNil(o.LastModifiedDateTime) {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given string and assigns it to the LastModifiedDateTime field.
func (o *Stamp) SetLastModifiedDateTime(v string) {
	o.LastModifiedDateTime = &v
}

// GetPhoneticName returns the PhoneticName field value if set, zero value otherwise.
func (o *Stamp) GetPhoneticName() string {
	if o == nil || IsNil(o.PhoneticName) {
		var ret string
		return ret
	}
	return *o.PhoneticName
}

// GetPhoneticNameOk returns a tuple with the PhoneticName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetPhoneticNameOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneticName) {
		return nil, false
	}
	return o.PhoneticName, true
}

// HasPhoneticName returns a boolean if a field has been set.
func (o *Stamp) HasPhoneticName() bool {
	if o != nil && !IsNil(o.PhoneticName) {
		return true
	}

	return false
}

// SetPhoneticName gets a reference to the given string and assigns it to the PhoneticName field.
func (o *Stamp) SetPhoneticName(v string) {
	o.PhoneticName = &v
}

// GetSignatureName returns the SignatureName field value if set, zero value otherwise.
func (o *Stamp) GetSignatureName() string {
	if o == nil || IsNil(o.SignatureName) {
		var ret string
		return ret
	}
	return *o.SignatureName
}

// GetSignatureNameOk returns a tuple with the SignatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetSignatureNameOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureName) {
		return nil, false
	}
	return o.SignatureName, true
}

// HasSignatureName returns a boolean if a field has been set.
func (o *Stamp) HasSignatureName() bool {
	if o != nil && !IsNil(o.SignatureName) {
		return true
	}

	return false
}

// SetSignatureName gets a reference to the given string and assigns it to the SignatureName field.
func (o *Stamp) SetSignatureName(v string) {
	o.SignatureName = &v
}

// GetStampFormat returns the StampFormat field value if set, zero value otherwise.
func (o *Stamp) GetStampFormat() string {
	if o == nil || IsNil(o.StampFormat) {
		var ret string
		return ret
	}
	return *o.StampFormat
}

// GetStampFormatOk returns a tuple with the StampFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetStampFormatOk() (*string, bool) {
	if o == nil || IsNil(o.StampFormat) {
		return nil, false
	}
	return o.StampFormat, true
}

// HasStampFormat returns a boolean if a field has been set.
func (o *Stamp) HasStampFormat() bool {
	if o != nil && !IsNil(o.StampFormat) {
		return true
	}

	return false
}

// SetStampFormat gets a reference to the given string and assigns it to the StampFormat field.
func (o *Stamp) SetStampFormat(v string) {
	o.StampFormat = &v
}

// GetStampImageUri returns the StampImageUri field value if set, zero value otherwise.
func (o *Stamp) GetStampImageUri() string {
	if o == nil || IsNil(o.StampImageUri) {
		var ret string
		return ret
	}
	return *o.StampImageUri
}

// GetStampImageUriOk returns a tuple with the StampImageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetStampImageUriOk() (*string, bool) {
	if o == nil || IsNil(o.StampImageUri) {
		return nil, false
	}
	return o.StampImageUri, true
}

// HasStampImageUri returns a boolean if a field has been set.
func (o *Stamp) HasStampImageUri() bool {
	if o != nil && !IsNil(o.StampImageUri) {
		return true
	}

	return false
}

// SetStampImageUri gets a reference to the given string and assigns it to the StampImageUri field.
func (o *Stamp) SetStampImageUri(v string) {
	o.StampImageUri = &v
}

// GetStampSizeMM returns the StampSizeMM field value if set, zero value otherwise.
func (o *Stamp) GetStampSizeMM() string {
	if o == nil || IsNil(o.StampSizeMM) {
		var ret string
		return ret
	}
	return *o.StampSizeMM
}

// GetStampSizeMMOk returns a tuple with the StampSizeMM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetStampSizeMMOk() (*string, bool) {
	if o == nil || IsNil(o.StampSizeMM) {
		return nil, false
	}
	return o.StampSizeMM, true
}

// HasStampSizeMM returns a boolean if a field has been set.
func (o *Stamp) HasStampSizeMM() bool {
	if o != nil && !IsNil(o.StampSizeMM) {
		return true
	}

	return false
}

// SetStampSizeMM gets a reference to the given string and assigns it to the StampSizeMM field.
func (o *Stamp) SetStampSizeMM(v string) {
	o.StampSizeMM = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Stamp) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stamp) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Stamp) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Stamp) SetStatus(v string) {
	o.Status = &v
}

func (o Stamp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdoptedDateTime) {
		toSerialize["adoptedDateTime"] = o.AdoptedDateTime
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.CustomField) {
		toSerialize["customField"] = o.CustomField
	}
	if !IsNil(o.DateStampProperties) {
		toSerialize["dateStampProperties"] = o.DateStampProperties
	}
	if !IsNil(o.DisallowUserResizeStamp) {
		toSerialize["disallowUserResizeStamp"] = o.DisallowUserResizeStamp
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.ExternalID) {
		toSerialize["externalID"] = o.ExternalID
	}
	if !IsNil(o.ImageBase64) {
		toSerialize["imageBase64"] = o.ImageBase64
	}
	if !IsNil(o.ImageType) {
		toSerialize["imageType"] = o.ImageType
	}
	if !IsNil(o.LastModifiedDateTime) {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if !IsNil(o.PhoneticName) {
		toSerialize["phoneticName"] = o.PhoneticName
	}
	if !IsNil(o.SignatureName) {
		toSerialize["signatureName"] = o.SignatureName
	}
	if !IsNil(o.StampFormat) {
		toSerialize["stampFormat"] = o.StampFormat
	}
	if !IsNil(o.StampImageUri) {
		toSerialize["stampImageUri"] = o.StampImageUri
	}
	if !IsNil(o.StampSizeMM) {
		toSerialize["stampSizeMM"] = o.StampSizeMM
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableStamp struct {
	value *Stamp
	isSet bool
}

func (v NullableStamp) Get() *Stamp {
	return v.value
}

func (v *NullableStamp) Set(val *Stamp) {
	v.value = val
	v.isSet = true
}

func (v NullableStamp) IsSet() bool {
	return v.isSet
}

func (v *NullableStamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStamp(val *Stamp) *NullableStamp {
	return &NullableStamp{value: val, isSet: true}
}

func (v NullableStamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


