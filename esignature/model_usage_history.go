/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsageHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageHistory{}

// UsageHistory A complex element consisting of:   * lastSentDateTime - the date and time the user last sent an envelope.  * lastSignedDateTime - the date and time the user last signed an envelope. * sentCount - the number of envelopes the user has sent. * signedCount - the number of envelopes the user has signed.
type UsageHistory struct {
	// The date and time the user last sent an envelope. 
	LastSentDateTime *string `json:"lastSentDateTime,omitempty"`
	// The date and time the user last signed an envelope.
	LastSignedDateTime *string `json:"lastSignedDateTime,omitempty"`
	// The number of envelopes the user has sent. 
	SentCount *string `json:"sentCount,omitempty"`
	// The number of envelopes the user has signed. 
	SignedCount *string `json:"signedCount,omitempty"`
}

// NewUsageHistory instantiates a new UsageHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageHistory() *UsageHistory {
	this := UsageHistory{}
	return &this
}

// NewUsageHistoryWithDefaults instantiates a new UsageHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageHistoryWithDefaults() *UsageHistory {
	this := UsageHistory{}
	return &this
}

// GetLastSentDateTime returns the LastSentDateTime field value if set, zero value otherwise.
func (o *UsageHistory) GetLastSentDateTime() string {
	if o == nil || IsNil(o.LastSentDateTime) {
		var ret string
		return ret
	}
	return *o.LastSentDateTime
}

// GetLastSentDateTimeOk returns a tuple with the LastSentDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageHistory) GetLastSentDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastSentDateTime) {
		return nil, false
	}
	return o.LastSentDateTime, true
}

// HasLastSentDateTime returns a boolean if a field has been set.
func (o *UsageHistory) HasLastSentDateTime() bool {
	if o != nil && !IsNil(o.LastSentDateTime) {
		return true
	}

	return false
}

// SetLastSentDateTime gets a reference to the given string and assigns it to the LastSentDateTime field.
func (o *UsageHistory) SetLastSentDateTime(v string) {
	o.LastSentDateTime = &v
}

// GetLastSignedDateTime returns the LastSignedDateTime field value if set, zero value otherwise.
func (o *UsageHistory) GetLastSignedDateTime() string {
	if o == nil || IsNil(o.LastSignedDateTime) {
		var ret string
		return ret
	}
	return *o.LastSignedDateTime
}

// GetLastSignedDateTimeOk returns a tuple with the LastSignedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageHistory) GetLastSignedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastSignedDateTime) {
		return nil, false
	}
	return o.LastSignedDateTime, true
}

// HasLastSignedDateTime returns a boolean if a field has been set.
func (o *UsageHistory) HasLastSignedDateTime() bool {
	if o != nil && !IsNil(o.LastSignedDateTime) {
		return true
	}

	return false
}

// SetLastSignedDateTime gets a reference to the given string and assigns it to the LastSignedDateTime field.
func (o *UsageHistory) SetLastSignedDateTime(v string) {
	o.LastSignedDateTime = &v
}

// GetSentCount returns the SentCount field value if set, zero value otherwise.
func (o *UsageHistory) GetSentCount() string {
	if o == nil || IsNil(o.SentCount) {
		var ret string
		return ret
	}
	return *o.SentCount
}

// GetSentCountOk returns a tuple with the SentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageHistory) GetSentCountOk() (*string, bool) {
	if o == nil || IsNil(o.SentCount) {
		return nil, false
	}
	return o.SentCount, true
}

// HasSentCount returns a boolean if a field has been set.
func (o *UsageHistory) HasSentCount() bool {
	if o != nil && !IsNil(o.SentCount) {
		return true
	}

	return false
}

// SetSentCount gets a reference to the given string and assigns it to the SentCount field.
func (o *UsageHistory) SetSentCount(v string) {
	o.SentCount = &v
}

// GetSignedCount returns the SignedCount field value if set, zero value otherwise.
func (o *UsageHistory) GetSignedCount() string {
	if o == nil || IsNil(o.SignedCount) {
		var ret string
		return ret
	}
	return *o.SignedCount
}

// GetSignedCountOk returns a tuple with the SignedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageHistory) GetSignedCountOk() (*string, bool) {
	if o == nil || IsNil(o.SignedCount) {
		return nil, false
	}
	return o.SignedCount, true
}

// HasSignedCount returns a boolean if a field has been set.
func (o *UsageHistory) HasSignedCount() bool {
	if o != nil && !IsNil(o.SignedCount) {
		return true
	}

	return false
}

// SetSignedCount gets a reference to the given string and assigns it to the SignedCount field.
func (o *UsageHistory) SetSignedCount(v string) {
	o.SignedCount = &v
}

func (o UsageHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastSentDateTime) {
		toSerialize["lastSentDateTime"] = o.LastSentDateTime
	}
	if !IsNil(o.LastSignedDateTime) {
		toSerialize["lastSignedDateTime"] = o.LastSignedDateTime
	}
	if !IsNil(o.SentCount) {
		toSerialize["sentCount"] = o.SentCount
	}
	if !IsNil(o.SignedCount) {
		toSerialize["signedCount"] = o.SignedCount
	}
	return toSerialize, nil
}

type NullableUsageHistory struct {
	value *UsageHistory
	isSet bool
}

func (v NullableUsageHistory) Get() *UsageHistory {
	return v.value
}

func (v *NullableUsageHistory) Set(val *UsageHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageHistory(val *UsageHistory) *NullableUsageHistory {
	return &NullableUsageHistory{value: val, isSet: true}
}

func (v NullableUsageHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


