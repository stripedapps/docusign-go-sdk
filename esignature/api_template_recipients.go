/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TemplateRecipientsAPIService TemplateRecipientsAPI service
type TemplateRecipientsAPIService service

type ApiRecipientsDeleteTemplateRecipientRequest struct {
	ctx context.Context
	ApiService *TemplateRecipientsAPIService
	accountId string
	recipientId string
	templateId string
	templateRecipients *TemplateRecipients
}

func (r ApiRecipientsDeleteTemplateRecipientRequest) TemplateRecipients(templateRecipients TemplateRecipients) ApiRecipientsDeleteTemplateRecipientRequest {
	r.templateRecipients = &templateRecipients
	return r
}

func (r ApiRecipientsDeleteTemplateRecipientRequest) Execute() (*Recipients, *http.Response, error) {
	return r.ApiService.RecipientsDeleteTemplateRecipientExecute(r)
}

/*
RecipientsDeleteTemplateRecipient Deletes the specified recipient file from a template.

Deletes the specified recipient file from the specified template.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @param templateId The ID of the template.
 @return ApiRecipientsDeleteTemplateRecipientRequest
*/
func (a *TemplateRecipientsAPIService) RecipientsDeleteTemplateRecipient(ctx context.Context, accountId string, recipientId string, templateId string) ApiRecipientsDeleteTemplateRecipientRequest {
	return ApiRecipientsDeleteTemplateRecipientRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		recipientId: recipientId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return Recipients
func (a *TemplateRecipientsAPIService) RecipientsDeleteTemplateRecipientExecute(r ApiRecipientsDeleteTemplateRecipientRequest) (*Recipients, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Recipients
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateRecipientsAPIService.RecipientsDeleteTemplateRecipient")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateRecipients
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsDeleteTemplateRecipientsRequest struct {
	ctx context.Context
	ApiService *TemplateRecipientsAPIService
	accountId string
	templateId string
	templateRecipients *TemplateRecipients
}

func (r ApiRecipientsDeleteTemplateRecipientsRequest) TemplateRecipients(templateRecipients TemplateRecipients) ApiRecipientsDeleteTemplateRecipientsRequest {
	r.templateRecipients = &templateRecipients
	return r
}

func (r ApiRecipientsDeleteTemplateRecipientsRequest) Execute() (*Recipients, *http.Response, error) {
	return r.ApiService.RecipientsDeleteTemplateRecipientsExecute(r)
}

/*
RecipientsDeleteTemplateRecipients Deletes recipients from a template.

Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the `recipientId` being used as the key for deleting recipients.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param templateId The ID of the template.
 @return ApiRecipientsDeleteTemplateRecipientsRequest
*/
func (a *TemplateRecipientsAPIService) RecipientsDeleteTemplateRecipients(ctx context.Context, accountId string, templateId string) ApiRecipientsDeleteTemplateRecipientsRequest {
	return ApiRecipientsDeleteTemplateRecipientsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return Recipients
func (a *TemplateRecipientsAPIService) RecipientsDeleteTemplateRecipientsExecute(r ApiRecipientsDeleteTemplateRecipientsRequest) (*Recipients, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Recipients
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateRecipientsAPIService.RecipientsDeleteTemplateRecipients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateRecipients
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsGetTemplateRecipientsRequest struct {
	ctx context.Context
	ApiService *TemplateRecipientsAPIService
	accountId string
	templateId string
	includeAnchorTabLocations *string
	includeExtended *string
	includeTabs *string
}

//  When **true** and &#x60;include_tabs&#x60; is set to **true,** all tabs with anchor tab properties are included in the response. 
func (r ApiRecipientsGetTemplateRecipientsRequest) IncludeAnchorTabLocations(includeAnchorTabLocations string) ApiRecipientsGetTemplateRecipientsRequest {
	r.includeAnchorTabLocations = &includeAnchorTabLocations
	return r
}

//  When **true,** the extended properties are included in the response. 
func (r ApiRecipientsGetTemplateRecipientsRequest) IncludeExtended(includeExtended string) ApiRecipientsGetTemplateRecipientsRequest {
	r.includeExtended = &includeExtended
	return r
}

// When **true,** the tab information associated with the recipient is included in the response.
func (r ApiRecipientsGetTemplateRecipientsRequest) IncludeTabs(includeTabs string) ApiRecipientsGetTemplateRecipientsRequest {
	r.includeTabs = &includeTabs
	return r
}

func (r ApiRecipientsGetTemplateRecipientsRequest) Execute() (*Recipients, *http.Response, error) {
	return r.ApiService.RecipientsGetTemplateRecipientsExecute(r)
}

/*
RecipientsGetTemplateRecipients Gets recipient information from a template.

Retrieves the information for all recipients in the specified template.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param templateId The ID of the template.
 @return ApiRecipientsGetTemplateRecipientsRequest
*/
func (a *TemplateRecipientsAPIService) RecipientsGetTemplateRecipients(ctx context.Context, accountId string, templateId string) ApiRecipientsGetTemplateRecipientsRequest {
	return ApiRecipientsGetTemplateRecipientsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return Recipients
func (a *TemplateRecipientsAPIService) RecipientsGetTemplateRecipientsExecute(r ApiRecipientsGetTemplateRecipientsRequest) (*Recipients, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Recipients
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateRecipientsAPIService.RecipientsGetTemplateRecipients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeAnchorTabLocations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_anchor_tab_locations", r.includeAnchorTabLocations, "")
	}
	if r.includeExtended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_extended", r.includeExtended, "")
	}
	if r.includeTabs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_tabs", r.includeTabs, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsPostTemplateRecipientsRequest struct {
	ctx context.Context
	ApiService *TemplateRecipientsAPIService
	accountId string
	templateId string
	resendEnvelope *string
	templateRecipients *TemplateRecipients
}

// When **true,** resends the envelope to the recipients that you specify in the request body. Use this parameter to resend the envelope to a recipient who deleted the original email notification.  **Note:** Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here.
func (r ApiRecipientsPostTemplateRecipientsRequest) ResendEnvelope(resendEnvelope string) ApiRecipientsPostTemplateRecipientsRequest {
	r.resendEnvelope = &resendEnvelope
	return r
}

func (r ApiRecipientsPostTemplateRecipientsRequest) TemplateRecipients(templateRecipients TemplateRecipients) ApiRecipientsPostTemplateRecipientsRequest {
	r.templateRecipients = &templateRecipients
	return r
}

func (r ApiRecipientsPostTemplateRecipientsRequest) Execute() (*Recipients, *http.Response, error) {
	return r.ApiService.RecipientsPostTemplateRecipientsExecute(r)
}

/*
RecipientsPostTemplateRecipients Adds tabs for a recipient.

Adds one or more recipients to a template.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param templateId The ID of the template.
 @return ApiRecipientsPostTemplateRecipientsRequest
*/
func (a *TemplateRecipientsAPIService) RecipientsPostTemplateRecipients(ctx context.Context, accountId string, templateId string) ApiRecipientsPostTemplateRecipientsRequest {
	return ApiRecipientsPostTemplateRecipientsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return Recipients
func (a *TemplateRecipientsAPIService) RecipientsPostTemplateRecipientsExecute(r ApiRecipientsPostTemplateRecipientsRequest) (*Recipients, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Recipients
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateRecipientsAPIService.RecipientsPostTemplateRecipients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resendEnvelope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resend_envelope", r.resendEnvelope, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateRecipients
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsPutTemplateRecipientsRequest struct {
	ctx context.Context
	ApiService *TemplateRecipientsAPIService
	accountId string
	templateId string
	resendEnvelope *string
	templateRecipients *TemplateRecipients
}

// When **true,** resends the envelope to the recipients that you specify in the request body. Use this parameter to resend the envelope to a recipient who deleted the original email notification.  **Note:** Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here.
func (r ApiRecipientsPutTemplateRecipientsRequest) ResendEnvelope(resendEnvelope string) ApiRecipientsPutTemplateRecipientsRequest {
	r.resendEnvelope = &resendEnvelope
	return r
}

func (r ApiRecipientsPutTemplateRecipientsRequest) TemplateRecipients(templateRecipients TemplateRecipients) ApiRecipientsPutTemplateRecipientsRequest {
	r.templateRecipients = &templateRecipients
	return r
}

func (r ApiRecipientsPutTemplateRecipientsRequest) Execute() (*RecipientsUpdateSummary, *http.Response, error) {
	return r.ApiService.RecipientsPutTemplateRecipientsExecute(r)
}

/*
RecipientsPutTemplateRecipients Updates recipients in a template.

Updates recipients in a template. 

You can edit the following properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`, `accessCode`, and `requireIdLookup`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param templateId The ID of the template.
 @return ApiRecipientsPutTemplateRecipientsRequest
*/
func (a *TemplateRecipientsAPIService) RecipientsPutTemplateRecipients(ctx context.Context, accountId string, templateId string) ApiRecipientsPutTemplateRecipientsRequest {
	return ApiRecipientsPutTemplateRecipientsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return RecipientsUpdateSummary
func (a *TemplateRecipientsAPIService) RecipientsPutTemplateRecipientsExecute(r ApiRecipientsPutTemplateRecipientsRequest) (*RecipientsUpdateSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecipientsUpdateSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateRecipientsAPIService.RecipientsPutTemplateRecipients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resendEnvelope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resend_envelope", r.resendEnvelope, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templateRecipients
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsPostTemplateRecipientPreviewRequest struct {
	ctx context.Context
	ApiService *TemplateRecipientsAPIService
	accountId string
	templateId string
	recipientPreviewRequest *RecipientPreviewRequest
}

func (r ApiViewsPostTemplateRecipientPreviewRequest) RecipientPreviewRequest(recipientPreviewRequest RecipientPreviewRequest) ApiViewsPostTemplateRecipientPreviewRequest {
	r.recipientPreviewRequest = &recipientPreviewRequest
	return r
}

func (r ApiViewsPostTemplateRecipientPreviewRequest) Execute() (*ViewUrl, *http.Response, error) {
	return r.ApiService.ViewsPostTemplateRecipientPreviewExecute(r)
}

/*
ViewsPostTemplateRecipientPreview Creates a template recipient preview.

This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients' experience.

For more information, see [Preview and Send](https://support.docusign.com/s/document-item?bundleId=ulp1643236876813&topicId=oeg1578456408976.html).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param templateId The ID of the template.
 @return ApiViewsPostTemplateRecipientPreviewRequest
*/
func (a *TemplateRecipientsAPIService) ViewsPostTemplateRecipientPreview(ctx context.Context, accountId string, templateId string) ApiViewsPostTemplateRecipientPreviewRequest {
	return ApiViewsPostTemplateRecipientPreviewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return ViewUrl
func (a *TemplateRecipientsAPIService) ViewsPostTemplateRecipientPreviewExecute(r ApiViewsPostTemplateRecipientPreviewRequest) (*ViewUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateRecipientsAPIService.ViewsPostTemplateRecipientPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recipientPreviewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
