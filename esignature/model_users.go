/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Users type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Users{}

// Users The Users resource enables you to create and manage account users.
type Users struct {
	// The activation code a new user must enter when activating their account.
	ActivationAccessCode *string `json:"activationAccessCode,omitempty"`
	// The name of the user's company.
	Company *string `json:"company,omitempty"`
	// Object representing the user's custom Connect configuration.
	ConnectConfigurations []ConnectUserObject `json:"connectConfigurations,omitempty"`
	// 
	CountryCode *string `json:"countryCode,omitempty"`
	// The UTC DateTime when the item was created.
	CreatedDateTime *string `json:"createdDateTime,omitempty"`
	// The name/value pair information for the user custom setting.
	CustomSettings []NameValue `json:"customSettings,omitempty"`
	// The default account ID associated with the user.
	DefaultAccountId *string `json:"defaultAccountId,omitempty"`
	// The user's email address.
	Email *string `json:"email,omitempty"`
	// Boolean value that specifies whether the user is enabled for updates from DocuSign Connect.
	EnableConnectForUser *string `json:"enableConnectForUser,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The user's first name.  Maximum Length: 50 characters.
	FirstName *string `json:"firstName,omitempty"`
	ForgottenPasswordInfo *ForgottenPasswordInformation `json:"forgottenPasswordInfo,omitempty"`
	// A list of the group information for groups to add the user to. Use [UserGroups: listGroups](/docs/esign-rest-api/reference/usergroups/groups/list/) to get information about groups.  When setting a user's group, only the `groupId` is required. 
	GroupList []Group `json:"groupList,omitempty"`
	// 
	HasRemoteNotary *bool `json:"hasRemoteNotary,omitempty"`
	HomeAddress *AddressInformation `json:"homeAddress,omitempty"`
	// The URI for retrieving the image of the user's initials.
	InitialsImageUri *string `json:"initialsImageUri,omitempty"`
	// Determines if the feature set is actively set as part of the plan.
	IsAdmin *string `json:"isAdmin,omitempty"`
	// 
	IsAlternateAdmin *string `json:"isAlternateAdmin,omitempty"`
	// When **true,** National Association of Realtors (NAR) signature logos are enabled for the user.
	IsNAREnabled *string `json:"isNAREnabled,omitempty"`
	// The user's job title.
	JobTitle *string `json:"jobTitle,omitempty"`
	// The date and time when the user last logged in to the system.
	LastLogin *string `json:"lastLogin,omitempty"`
	// The user's last name.  Maximum Length: 50 characters.
	LastName *string `json:"lastName,omitempty"`
	// Shows the current status of the user's password. Possible values are:   * password_reset * password_active * password_expired * password_locked * password_reset_failed  
	LoginStatus *string `json:"loginStatus,omitempty"`
	// The user's middle name.  Limit: 50 characters.
	MiddleName *string `json:"middleName,omitempty"`
	// The user's password.
	Password *string `json:"password,omitempty"`
	// If password expiration is enabled, the date-time when the user's password expires.
	PasswordExpiration *string `json:"passwordExpiration,omitempty"`
	// The ID of the permission profile associated with the user.
	PermissionProfileId *string `json:"permissionProfileId,omitempty"`
	// The name of the permission profile associated with the user.
	PermissionProfileName *string `json:"permissionProfileName,omitempty"`
	// The URL for retrieving the user's profile image.
	ProfileImageUri *string `json:"profileImageUri,omitempty"`
	// This field is no longer supported for most accounts. To create an eSignature user without sending an activation email, use the Admin API by following [these steps](/docs/admin-api/how-to/create-active-user/).
	SendActivationEmail *string `json:"sendActivationEmail,omitempty"`
	// When **true,** specifies that an additional activation email be sent if user's log on fails before the account is activated.
	SendActivationOnInvalidLogin *string `json:"sendActivationOnInvalidLogin,omitempty"`
	// An endpoint URI that you can use to retrieve the user's signature image.
	SignatureImageUri *string `json:"signatureImageUri,omitempty"`
	// 
	Subscribe *string `json:"subscribe,omitempty"`
	// The suffix for the user's name, such as Jr, IV, PhD, etc.  Limit: 50 characters. 
	SuffixName *string `json:"suffixName,omitempty"`
	// The salutation for the user, such as Ms, Dr, Capt., etc.  Limit: 10 characters.
	Title *string `json:"title,omitempty"`
	// A URI containing the user ID.
	Uri *string `json:"uri,omitempty"`
	// The date and time that the user was added to the account.
	UserAddedToAccountDateTime *string `json:"userAddedToAccountDateTime,omitempty"`
	// The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
	UserId *string `json:"userId,omitempty"`
	// The user's full name. <!-- `title` + `firstName` + `middleName` + `lastName` + `suffixName` -->
	UserName *string `json:"userName,omitempty"`
	// The date and time that the user's profile was last modified.
	UserProfileLastModifiedDate *string `json:"userProfileLastModifiedDate,omitempty"`
	UserSettings *UserSettingsInformation `json:"userSettings,omitempty"`
	// Status of the user's account. One of:  - `ActivationRequired` - `ActivationSent` - `Active` - `Closed` - `Disabled` 
	UserStatus *string `json:"userStatus,omitempty"`
	// The type of user, for example `CompanyUser`.
	UserType *string `json:"userType,omitempty"`
	WorkAddress *AddressInformation `json:"workAddress,omitempty"`
}

// NewUsers instantiates a new Users object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsers() *Users {
	this := Users{}
	return &this
}

// NewUsersWithDefaults instantiates a new Users object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersWithDefaults() *Users {
	this := Users{}
	return &this
}

// GetActivationAccessCode returns the ActivationAccessCode field value if set, zero value otherwise.
func (o *Users) GetActivationAccessCode() string {
	if o == nil || IsNil(o.ActivationAccessCode) {
		var ret string
		return ret
	}
	return *o.ActivationAccessCode
}

// GetActivationAccessCodeOk returns a tuple with the ActivationAccessCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetActivationAccessCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationAccessCode) {
		return nil, false
	}
	return o.ActivationAccessCode, true
}

// HasActivationAccessCode returns a boolean if a field has been set.
func (o *Users) HasActivationAccessCode() bool {
	if o != nil && !IsNil(o.ActivationAccessCode) {
		return true
	}

	return false
}

// SetActivationAccessCode gets a reference to the given string and assigns it to the ActivationAccessCode field.
func (o *Users) SetActivationAccessCode(v string) {
	o.ActivationAccessCode = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *Users) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *Users) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *Users) SetCompany(v string) {
	o.Company = &v
}

// GetConnectConfigurations returns the ConnectConfigurations field value if set, zero value otherwise.
func (o *Users) GetConnectConfigurations() []ConnectUserObject {
	if o == nil || IsNil(o.ConnectConfigurations) {
		var ret []ConnectUserObject
		return ret
	}
	return o.ConnectConfigurations
}

// GetConnectConfigurationsOk returns a tuple with the ConnectConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetConnectConfigurationsOk() ([]ConnectUserObject, bool) {
	if o == nil || IsNil(o.ConnectConfigurations) {
		return nil, false
	}
	return o.ConnectConfigurations, true
}

// HasConnectConfigurations returns a boolean if a field has been set.
func (o *Users) HasConnectConfigurations() bool {
	if o != nil && !IsNil(o.ConnectConfigurations) {
		return true
	}

	return false
}

// SetConnectConfigurations gets a reference to the given []ConnectUserObject and assigns it to the ConnectConfigurations field.
func (o *Users) SetConnectConfigurations(v []ConnectUserObject) {
	o.ConnectConfigurations = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Users) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Users) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Users) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *Users) GetCreatedDateTime() string {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret string
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetCreatedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Users) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given string and assigns it to the CreatedDateTime field.
func (o *Users) SetCreatedDateTime(v string) {
	o.CreatedDateTime = &v
}

// GetCustomSettings returns the CustomSettings field value if set, zero value otherwise.
func (o *Users) GetCustomSettings() []NameValue {
	if o == nil || IsNil(o.CustomSettings) {
		var ret []NameValue
		return ret
	}
	return o.CustomSettings
}

// GetCustomSettingsOk returns a tuple with the CustomSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetCustomSettingsOk() ([]NameValue, bool) {
	if o == nil || IsNil(o.CustomSettings) {
		return nil, false
	}
	return o.CustomSettings, true
}

// HasCustomSettings returns a boolean if a field has been set.
func (o *Users) HasCustomSettings() bool {
	if o != nil && !IsNil(o.CustomSettings) {
		return true
	}

	return false
}

// SetCustomSettings gets a reference to the given []NameValue and assigns it to the CustomSettings field.
func (o *Users) SetCustomSettings(v []NameValue) {
	o.CustomSettings = v
}

// GetDefaultAccountId returns the DefaultAccountId field value if set, zero value otherwise.
func (o *Users) GetDefaultAccountId() string {
	if o == nil || IsNil(o.DefaultAccountId) {
		var ret string
		return ret
	}
	return *o.DefaultAccountId
}

// GetDefaultAccountIdOk returns a tuple with the DefaultAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetDefaultAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultAccountId) {
		return nil, false
	}
	return o.DefaultAccountId, true
}

// HasDefaultAccountId returns a boolean if a field has been set.
func (o *Users) HasDefaultAccountId() bool {
	if o != nil && !IsNil(o.DefaultAccountId) {
		return true
	}

	return false
}

// SetDefaultAccountId gets a reference to the given string and assigns it to the DefaultAccountId field.
func (o *Users) SetDefaultAccountId(v string) {
	o.DefaultAccountId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Users) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Users) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Users) SetEmail(v string) {
	o.Email = &v
}

// GetEnableConnectForUser returns the EnableConnectForUser field value if set, zero value otherwise.
func (o *Users) GetEnableConnectForUser() string {
	if o == nil || IsNil(o.EnableConnectForUser) {
		var ret string
		return ret
	}
	return *o.EnableConnectForUser
}

// GetEnableConnectForUserOk returns a tuple with the EnableConnectForUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetEnableConnectForUserOk() (*string, bool) {
	if o == nil || IsNil(o.EnableConnectForUser) {
		return nil, false
	}
	return o.EnableConnectForUser, true
}

// HasEnableConnectForUser returns a boolean if a field has been set.
func (o *Users) HasEnableConnectForUser() bool {
	if o != nil && !IsNil(o.EnableConnectForUser) {
		return true
	}

	return false
}

// SetEnableConnectForUser gets a reference to the given string and assigns it to the EnableConnectForUser field.
func (o *Users) SetEnableConnectForUser(v string) {
	o.EnableConnectForUser = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *Users) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *Users) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *Users) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Users) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Users) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Users) SetFirstName(v string) {
	o.FirstName = &v
}

// GetForgottenPasswordInfo returns the ForgottenPasswordInfo field value if set, zero value otherwise.
func (o *Users) GetForgottenPasswordInfo() ForgottenPasswordInformation {
	if o == nil || IsNil(o.ForgottenPasswordInfo) {
		var ret ForgottenPasswordInformation
		return ret
	}
	return *o.ForgottenPasswordInfo
}

// GetForgottenPasswordInfoOk returns a tuple with the ForgottenPasswordInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetForgottenPasswordInfoOk() (*ForgottenPasswordInformation, bool) {
	if o == nil || IsNil(o.ForgottenPasswordInfo) {
		return nil, false
	}
	return o.ForgottenPasswordInfo, true
}

// HasForgottenPasswordInfo returns a boolean if a field has been set.
func (o *Users) HasForgottenPasswordInfo() bool {
	if o != nil && !IsNil(o.ForgottenPasswordInfo) {
		return true
	}

	return false
}

// SetForgottenPasswordInfo gets a reference to the given ForgottenPasswordInformation and assigns it to the ForgottenPasswordInfo field.
func (o *Users) SetForgottenPasswordInfo(v ForgottenPasswordInformation) {
	o.ForgottenPasswordInfo = &v
}

// GetGroupList returns the GroupList field value if set, zero value otherwise.
func (o *Users) GetGroupList() []Group {
	if o == nil || IsNil(o.GroupList) {
		var ret []Group
		return ret
	}
	return o.GroupList
}

// GetGroupListOk returns a tuple with the GroupList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetGroupListOk() ([]Group, bool) {
	if o == nil || IsNil(o.GroupList) {
		return nil, false
	}
	return o.GroupList, true
}

// HasGroupList returns a boolean if a field has been set.
func (o *Users) HasGroupList() bool {
	if o != nil && !IsNil(o.GroupList) {
		return true
	}

	return false
}

// SetGroupList gets a reference to the given []Group and assigns it to the GroupList field.
func (o *Users) SetGroupList(v []Group) {
	o.GroupList = v
}

// GetHasRemoteNotary returns the HasRemoteNotary field value if set, zero value otherwise.
func (o *Users) GetHasRemoteNotary() bool {
	if o == nil || IsNil(o.HasRemoteNotary) {
		var ret bool
		return ret
	}
	return *o.HasRemoteNotary
}

// GetHasRemoteNotaryOk returns a tuple with the HasRemoteNotary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetHasRemoteNotaryOk() (*bool, bool) {
	if o == nil || IsNil(o.HasRemoteNotary) {
		return nil, false
	}
	return o.HasRemoteNotary, true
}

// HasHasRemoteNotary returns a boolean if a field has been set.
func (o *Users) HasHasRemoteNotary() bool {
	if o != nil && !IsNil(o.HasRemoteNotary) {
		return true
	}

	return false
}

// SetHasRemoteNotary gets a reference to the given bool and assigns it to the HasRemoteNotary field.
func (o *Users) SetHasRemoteNotary(v bool) {
	o.HasRemoteNotary = &v
}

// GetHomeAddress returns the HomeAddress field value if set, zero value otherwise.
func (o *Users) GetHomeAddress() AddressInformation {
	if o == nil || IsNil(o.HomeAddress) {
		var ret AddressInformation
		return ret
	}
	return *o.HomeAddress
}

// GetHomeAddressOk returns a tuple with the HomeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetHomeAddressOk() (*AddressInformation, bool) {
	if o == nil || IsNil(o.HomeAddress) {
		return nil, false
	}
	return o.HomeAddress, true
}

// HasHomeAddress returns a boolean if a field has been set.
func (o *Users) HasHomeAddress() bool {
	if o != nil && !IsNil(o.HomeAddress) {
		return true
	}

	return false
}

// SetHomeAddress gets a reference to the given AddressInformation and assigns it to the HomeAddress field.
func (o *Users) SetHomeAddress(v AddressInformation) {
	o.HomeAddress = &v
}

// GetInitialsImageUri returns the InitialsImageUri field value if set, zero value otherwise.
func (o *Users) GetInitialsImageUri() string {
	if o == nil || IsNil(o.InitialsImageUri) {
		var ret string
		return ret
	}
	return *o.InitialsImageUri
}

// GetInitialsImageUriOk returns a tuple with the InitialsImageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetInitialsImageUriOk() (*string, bool) {
	if o == nil || IsNil(o.InitialsImageUri) {
		return nil, false
	}
	return o.InitialsImageUri, true
}

// HasInitialsImageUri returns a boolean if a field has been set.
func (o *Users) HasInitialsImageUri() bool {
	if o != nil && !IsNil(o.InitialsImageUri) {
		return true
	}

	return false
}

// SetInitialsImageUri gets a reference to the given string and assigns it to the InitialsImageUri field.
func (o *Users) SetInitialsImageUri(v string) {
	o.InitialsImageUri = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *Users) GetIsAdmin() string {
	if o == nil || IsNil(o.IsAdmin) {
		var ret string
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetIsAdminOk() (*string, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *Users) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given string and assigns it to the IsAdmin field.
func (o *Users) SetIsAdmin(v string) {
	o.IsAdmin = &v
}

// GetIsAlternateAdmin returns the IsAlternateAdmin field value if set, zero value otherwise.
func (o *Users) GetIsAlternateAdmin() string {
	if o == nil || IsNil(o.IsAlternateAdmin) {
		var ret string
		return ret
	}
	return *o.IsAlternateAdmin
}

// GetIsAlternateAdminOk returns a tuple with the IsAlternateAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetIsAlternateAdminOk() (*string, bool) {
	if o == nil || IsNil(o.IsAlternateAdmin) {
		return nil, false
	}
	return o.IsAlternateAdmin, true
}

// HasIsAlternateAdmin returns a boolean if a field has been set.
func (o *Users) HasIsAlternateAdmin() bool {
	if o != nil && !IsNil(o.IsAlternateAdmin) {
		return true
	}

	return false
}

// SetIsAlternateAdmin gets a reference to the given string and assigns it to the IsAlternateAdmin field.
func (o *Users) SetIsAlternateAdmin(v string) {
	o.IsAlternateAdmin = &v
}

// GetIsNAREnabled returns the IsNAREnabled field value if set, zero value otherwise.
func (o *Users) GetIsNAREnabled() string {
	if o == nil || IsNil(o.IsNAREnabled) {
		var ret string
		return ret
	}
	return *o.IsNAREnabled
}

// GetIsNAREnabledOk returns a tuple with the IsNAREnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetIsNAREnabledOk() (*string, bool) {
	if o == nil || IsNil(o.IsNAREnabled) {
		return nil, false
	}
	return o.IsNAREnabled, true
}

// HasIsNAREnabled returns a boolean if a field has been set.
func (o *Users) HasIsNAREnabled() bool {
	if o != nil && !IsNil(o.IsNAREnabled) {
		return true
	}

	return false
}

// SetIsNAREnabled gets a reference to the given string and assigns it to the IsNAREnabled field.
func (o *Users) SetIsNAREnabled(v string) {
	o.IsNAREnabled = &v
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise.
func (o *Users) GetJobTitle() string {
	if o == nil || IsNil(o.JobTitle) {
		var ret string
		return ret
	}
	return *o.JobTitle
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetJobTitleOk() (*string, bool) {
	if o == nil || IsNil(o.JobTitle) {
		return nil, false
	}
	return o.JobTitle, true
}

// HasJobTitle returns a boolean if a field has been set.
func (o *Users) HasJobTitle() bool {
	if o != nil && !IsNil(o.JobTitle) {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given string and assigns it to the JobTitle field.
func (o *Users) SetJobTitle(v string) {
	o.JobTitle = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *Users) GetLastLogin() string {
	if o == nil || IsNil(o.LastLogin) {
		var ret string
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetLastLoginOk() (*string, bool) {
	if o == nil || IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *Users) HasLastLogin() bool {
	if o != nil && !IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given string and assigns it to the LastLogin field.
func (o *Users) SetLastLogin(v string) {
	o.LastLogin = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Users) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Users) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Users) SetLastName(v string) {
	o.LastName = &v
}

// GetLoginStatus returns the LoginStatus field value if set, zero value otherwise.
func (o *Users) GetLoginStatus() string {
	if o == nil || IsNil(o.LoginStatus) {
		var ret string
		return ret
	}
	return *o.LoginStatus
}

// GetLoginStatusOk returns a tuple with the LoginStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetLoginStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LoginStatus) {
		return nil, false
	}
	return o.LoginStatus, true
}

// HasLoginStatus returns a boolean if a field has been set.
func (o *Users) HasLoginStatus() bool {
	if o != nil && !IsNil(o.LoginStatus) {
		return true
	}

	return false
}

// SetLoginStatus gets a reference to the given string and assigns it to the LoginStatus field.
func (o *Users) SetLoginStatus(v string) {
	o.LoginStatus = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *Users) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *Users) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *Users) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Users) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Users) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Users) SetPassword(v string) {
	o.Password = &v
}

// GetPasswordExpiration returns the PasswordExpiration field value if set, zero value otherwise.
func (o *Users) GetPasswordExpiration() string {
	if o == nil || IsNil(o.PasswordExpiration) {
		var ret string
		return ret
	}
	return *o.PasswordExpiration
}

// GetPasswordExpirationOk returns a tuple with the PasswordExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetPasswordExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordExpiration) {
		return nil, false
	}
	return o.PasswordExpiration, true
}

// HasPasswordExpiration returns a boolean if a field has been set.
func (o *Users) HasPasswordExpiration() bool {
	if o != nil && !IsNil(o.PasswordExpiration) {
		return true
	}

	return false
}

// SetPasswordExpiration gets a reference to the given string and assigns it to the PasswordExpiration field.
func (o *Users) SetPasswordExpiration(v string) {
	o.PasswordExpiration = &v
}

// GetPermissionProfileId returns the PermissionProfileId field value if set, zero value otherwise.
func (o *Users) GetPermissionProfileId() string {
	if o == nil || IsNil(o.PermissionProfileId) {
		var ret string
		return ret
	}
	return *o.PermissionProfileId
}

// GetPermissionProfileIdOk returns a tuple with the PermissionProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetPermissionProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.PermissionProfileId) {
		return nil, false
	}
	return o.PermissionProfileId, true
}

// HasPermissionProfileId returns a boolean if a field has been set.
func (o *Users) HasPermissionProfileId() bool {
	if o != nil && !IsNil(o.PermissionProfileId) {
		return true
	}

	return false
}

// SetPermissionProfileId gets a reference to the given string and assigns it to the PermissionProfileId field.
func (o *Users) SetPermissionProfileId(v string) {
	o.PermissionProfileId = &v
}

// GetPermissionProfileName returns the PermissionProfileName field value if set, zero value otherwise.
func (o *Users) GetPermissionProfileName() string {
	if o == nil || IsNil(o.PermissionProfileName) {
		var ret string
		return ret
	}
	return *o.PermissionProfileName
}

// GetPermissionProfileNameOk returns a tuple with the PermissionProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetPermissionProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.PermissionProfileName) {
		return nil, false
	}
	return o.PermissionProfileName, true
}

// HasPermissionProfileName returns a boolean if a field has been set.
func (o *Users) HasPermissionProfileName() bool {
	if o != nil && !IsNil(o.PermissionProfileName) {
		return true
	}

	return false
}

// SetPermissionProfileName gets a reference to the given string and assigns it to the PermissionProfileName field.
func (o *Users) SetPermissionProfileName(v string) {
	o.PermissionProfileName = &v
}

// GetProfileImageUri returns the ProfileImageUri field value if set, zero value otherwise.
func (o *Users) GetProfileImageUri() string {
	if o == nil || IsNil(o.ProfileImageUri) {
		var ret string
		return ret
	}
	return *o.ProfileImageUri
}

// GetProfileImageUriOk returns a tuple with the ProfileImageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetProfileImageUriOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileImageUri) {
		return nil, false
	}
	return o.ProfileImageUri, true
}

// HasProfileImageUri returns a boolean if a field has been set.
func (o *Users) HasProfileImageUri() bool {
	if o != nil && !IsNil(o.ProfileImageUri) {
		return true
	}

	return false
}

// SetProfileImageUri gets a reference to the given string and assigns it to the ProfileImageUri field.
func (o *Users) SetProfileImageUri(v string) {
	o.ProfileImageUri = &v
}

// GetSendActivationEmail returns the SendActivationEmail field value if set, zero value otherwise.
func (o *Users) GetSendActivationEmail() string {
	if o == nil || IsNil(o.SendActivationEmail) {
		var ret string
		return ret
	}
	return *o.SendActivationEmail
}

// GetSendActivationEmailOk returns a tuple with the SendActivationEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetSendActivationEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SendActivationEmail) {
		return nil, false
	}
	return o.SendActivationEmail, true
}

// HasSendActivationEmail returns a boolean if a field has been set.
func (o *Users) HasSendActivationEmail() bool {
	if o != nil && !IsNil(o.SendActivationEmail) {
		return true
	}

	return false
}

// SetSendActivationEmail gets a reference to the given string and assigns it to the SendActivationEmail field.
func (o *Users) SetSendActivationEmail(v string) {
	o.SendActivationEmail = &v
}

// GetSendActivationOnInvalidLogin returns the SendActivationOnInvalidLogin field value if set, zero value otherwise.
func (o *Users) GetSendActivationOnInvalidLogin() string {
	if o == nil || IsNil(o.SendActivationOnInvalidLogin) {
		var ret string
		return ret
	}
	return *o.SendActivationOnInvalidLogin
}

// GetSendActivationOnInvalidLoginOk returns a tuple with the SendActivationOnInvalidLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetSendActivationOnInvalidLoginOk() (*string, bool) {
	if o == nil || IsNil(o.SendActivationOnInvalidLogin) {
		return nil, false
	}
	return o.SendActivationOnInvalidLogin, true
}

// HasSendActivationOnInvalidLogin returns a boolean if a field has been set.
func (o *Users) HasSendActivationOnInvalidLogin() bool {
	if o != nil && !IsNil(o.SendActivationOnInvalidLogin) {
		return true
	}

	return false
}

// SetSendActivationOnInvalidLogin gets a reference to the given string and assigns it to the SendActivationOnInvalidLogin field.
func (o *Users) SetSendActivationOnInvalidLogin(v string) {
	o.SendActivationOnInvalidLogin = &v
}

// GetSignatureImageUri returns the SignatureImageUri field value if set, zero value otherwise.
func (o *Users) GetSignatureImageUri() string {
	if o == nil || IsNil(o.SignatureImageUri) {
		var ret string
		return ret
	}
	return *o.SignatureImageUri
}

// GetSignatureImageUriOk returns a tuple with the SignatureImageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetSignatureImageUriOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureImageUri) {
		return nil, false
	}
	return o.SignatureImageUri, true
}

// HasSignatureImageUri returns a boolean if a field has been set.
func (o *Users) HasSignatureImageUri() bool {
	if o != nil && !IsNil(o.SignatureImageUri) {
		return true
	}

	return false
}

// SetSignatureImageUri gets a reference to the given string and assigns it to the SignatureImageUri field.
func (o *Users) SetSignatureImageUri(v string) {
	o.SignatureImageUri = &v
}

// GetSubscribe returns the Subscribe field value if set, zero value otherwise.
func (o *Users) GetSubscribe() string {
	if o == nil || IsNil(o.Subscribe) {
		var ret string
		return ret
	}
	return *o.Subscribe
}

// GetSubscribeOk returns a tuple with the Subscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetSubscribeOk() (*string, bool) {
	if o == nil || IsNil(o.Subscribe) {
		return nil, false
	}
	return o.Subscribe, true
}

// HasSubscribe returns a boolean if a field has been set.
func (o *Users) HasSubscribe() bool {
	if o != nil && !IsNil(o.Subscribe) {
		return true
	}

	return false
}

// SetSubscribe gets a reference to the given string and assigns it to the Subscribe field.
func (o *Users) SetSubscribe(v string) {
	o.Subscribe = &v
}

// GetSuffixName returns the SuffixName field value if set, zero value otherwise.
func (o *Users) GetSuffixName() string {
	if o == nil || IsNil(o.SuffixName) {
		var ret string
		return ret
	}
	return *o.SuffixName
}

// GetSuffixNameOk returns a tuple with the SuffixName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetSuffixNameOk() (*string, bool) {
	if o == nil || IsNil(o.SuffixName) {
		return nil, false
	}
	return o.SuffixName, true
}

// HasSuffixName returns a boolean if a field has been set.
func (o *Users) HasSuffixName() bool {
	if o != nil && !IsNil(o.SuffixName) {
		return true
	}

	return false
}

// SetSuffixName gets a reference to the given string and assigns it to the SuffixName field.
func (o *Users) SetSuffixName(v string) {
	o.SuffixName = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Users) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Users) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Users) SetTitle(v string) {
	o.Title = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Users) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Users) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Users) SetUri(v string) {
	o.Uri = &v
}

// GetUserAddedToAccountDateTime returns the UserAddedToAccountDateTime field value if set, zero value otherwise.
func (o *Users) GetUserAddedToAccountDateTime() string {
	if o == nil || IsNil(o.UserAddedToAccountDateTime) {
		var ret string
		return ret
	}
	return *o.UserAddedToAccountDateTime
}

// GetUserAddedToAccountDateTimeOk returns a tuple with the UserAddedToAccountDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserAddedToAccountDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UserAddedToAccountDateTime) {
		return nil, false
	}
	return o.UserAddedToAccountDateTime, true
}

// HasUserAddedToAccountDateTime returns a boolean if a field has been set.
func (o *Users) HasUserAddedToAccountDateTime() bool {
	if o != nil && !IsNil(o.UserAddedToAccountDateTime) {
		return true
	}

	return false
}

// SetUserAddedToAccountDateTime gets a reference to the given string and assigns it to the UserAddedToAccountDateTime field.
func (o *Users) SetUserAddedToAccountDateTime(v string) {
	o.UserAddedToAccountDateTime = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Users) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Users) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Users) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *Users) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *Users) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *Users) SetUserName(v string) {
	o.UserName = &v
}

// GetUserProfileLastModifiedDate returns the UserProfileLastModifiedDate field value if set, zero value otherwise.
func (o *Users) GetUserProfileLastModifiedDate() string {
	if o == nil || IsNil(o.UserProfileLastModifiedDate) {
		var ret string
		return ret
	}
	return *o.UserProfileLastModifiedDate
}

// GetUserProfileLastModifiedDateOk returns a tuple with the UserProfileLastModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserProfileLastModifiedDateOk() (*string, bool) {
	if o == nil || IsNil(o.UserProfileLastModifiedDate) {
		return nil, false
	}
	return o.UserProfileLastModifiedDate, true
}

// HasUserProfileLastModifiedDate returns a boolean if a field has been set.
func (o *Users) HasUserProfileLastModifiedDate() bool {
	if o != nil && !IsNil(o.UserProfileLastModifiedDate) {
		return true
	}

	return false
}

// SetUserProfileLastModifiedDate gets a reference to the given string and assigns it to the UserProfileLastModifiedDate field.
func (o *Users) SetUserProfileLastModifiedDate(v string) {
	o.UserProfileLastModifiedDate = &v
}

// GetUserSettings returns the UserSettings field value if set, zero value otherwise.
func (o *Users) GetUserSettings() UserSettingsInformation {
	if o == nil || IsNil(o.UserSettings) {
		var ret UserSettingsInformation
		return ret
	}
	return *o.UserSettings
}

// GetUserSettingsOk returns a tuple with the UserSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserSettingsOk() (*UserSettingsInformation, bool) {
	if o == nil || IsNil(o.UserSettings) {
		return nil, false
	}
	return o.UserSettings, true
}

// HasUserSettings returns a boolean if a field has been set.
func (o *Users) HasUserSettings() bool {
	if o != nil && !IsNil(o.UserSettings) {
		return true
	}

	return false
}

// SetUserSettings gets a reference to the given UserSettingsInformation and assigns it to the UserSettings field.
func (o *Users) SetUserSettings(v UserSettingsInformation) {
	o.UserSettings = &v
}

// GetUserStatus returns the UserStatus field value if set, zero value otherwise.
func (o *Users) GetUserStatus() string {
	if o == nil || IsNil(o.UserStatus) {
		var ret string
		return ret
	}
	return *o.UserStatus
}

// GetUserStatusOk returns a tuple with the UserStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UserStatus) {
		return nil, false
	}
	return o.UserStatus, true
}

// HasUserStatus returns a boolean if a field has been set.
func (o *Users) HasUserStatus() bool {
	if o != nil && !IsNil(o.UserStatus) {
		return true
	}

	return false
}

// SetUserStatus gets a reference to the given string and assigns it to the UserStatus field.
func (o *Users) SetUserStatus(v string) {
	o.UserStatus = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *Users) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *Users) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *Users) SetUserType(v string) {
	o.UserType = &v
}

// GetWorkAddress returns the WorkAddress field value if set, zero value otherwise.
func (o *Users) GetWorkAddress() AddressInformation {
	if o == nil || IsNil(o.WorkAddress) {
		var ret AddressInformation
		return ret
	}
	return *o.WorkAddress
}

// GetWorkAddressOk returns a tuple with the WorkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Users) GetWorkAddressOk() (*AddressInformation, bool) {
	if o == nil || IsNil(o.WorkAddress) {
		return nil, false
	}
	return o.WorkAddress, true
}

// HasWorkAddress returns a boolean if a field has been set.
func (o *Users) HasWorkAddress() bool {
	if o != nil && !IsNil(o.WorkAddress) {
		return true
	}

	return false
}

// SetWorkAddress gets a reference to the given AddressInformation and assigns it to the WorkAddress field.
func (o *Users) SetWorkAddress(v AddressInformation) {
	o.WorkAddress = &v
}

func (o Users) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Users) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivationAccessCode) {
		toSerialize["activationAccessCode"] = o.ActivationAccessCode
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.ConnectConfigurations) {
		toSerialize["connectConfigurations"] = o.ConnectConfigurations
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.CustomSettings) {
		toSerialize["customSettings"] = o.CustomSettings
	}
	if !IsNil(o.DefaultAccountId) {
		toSerialize["defaultAccountId"] = o.DefaultAccountId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EnableConnectForUser) {
		toSerialize["enableConnectForUser"] = o.EnableConnectForUser
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.ForgottenPasswordInfo) {
		toSerialize["forgottenPasswordInfo"] = o.ForgottenPasswordInfo
	}
	if !IsNil(o.GroupList) {
		toSerialize["groupList"] = o.GroupList
	}
	if !IsNil(o.HasRemoteNotary) {
		toSerialize["hasRemoteNotary"] = o.HasRemoteNotary
	}
	if !IsNil(o.HomeAddress) {
		toSerialize["homeAddress"] = o.HomeAddress
	}
	if !IsNil(o.InitialsImageUri) {
		toSerialize["initialsImageUri"] = o.InitialsImageUri
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["isAdmin"] = o.IsAdmin
	}
	if !IsNil(o.IsAlternateAdmin) {
		toSerialize["isAlternateAdmin"] = o.IsAlternateAdmin
	}
	if !IsNil(o.IsNAREnabled) {
		toSerialize["isNAREnabled"] = o.IsNAREnabled
	}
	if !IsNil(o.JobTitle) {
		toSerialize["jobTitle"] = o.JobTitle
	}
	if !IsNil(o.LastLogin) {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.LoginStatus) {
		toSerialize["loginStatus"] = o.LoginStatus
	}
	if !IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PasswordExpiration) {
		toSerialize["passwordExpiration"] = o.PasswordExpiration
	}
	if !IsNil(o.PermissionProfileId) {
		toSerialize["permissionProfileId"] = o.PermissionProfileId
	}
	if !IsNil(o.PermissionProfileName) {
		toSerialize["permissionProfileName"] = o.PermissionProfileName
	}
	if !IsNil(o.ProfileImageUri) {
		toSerialize["profileImageUri"] = o.ProfileImageUri
	}
	if !IsNil(o.SendActivationEmail) {
		toSerialize["sendActivationEmail"] = o.SendActivationEmail
	}
	if !IsNil(o.SendActivationOnInvalidLogin) {
		toSerialize["sendActivationOnInvalidLogin"] = o.SendActivationOnInvalidLogin
	}
	if !IsNil(o.SignatureImageUri) {
		toSerialize["signatureImageUri"] = o.SignatureImageUri
	}
	if !IsNil(o.Subscribe) {
		toSerialize["subscribe"] = o.Subscribe
	}
	if !IsNil(o.SuffixName) {
		toSerialize["suffixName"] = o.SuffixName
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.UserAddedToAccountDateTime) {
		toSerialize["userAddedToAccountDateTime"] = o.UserAddedToAccountDateTime
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.UserProfileLastModifiedDate) {
		toSerialize["userProfileLastModifiedDate"] = o.UserProfileLastModifiedDate
	}
	if !IsNil(o.UserSettings) {
		toSerialize["userSettings"] = o.UserSettings
	}
	if !IsNil(o.UserStatus) {
		toSerialize["userStatus"] = o.UserStatus
	}
	if !IsNil(o.UserType) {
		toSerialize["userType"] = o.UserType
	}
	if !IsNil(o.WorkAddress) {
		toSerialize["workAddress"] = o.WorkAddress
	}
	return toSerialize, nil
}

type NullableUsers struct {
	value *Users
	isSet bool
}

func (v NullableUsers) Get() *Users {
	return v.value
}

func (v *NullableUsers) Set(val *Users) {
	v.value = val
	v.isSet = true
}

func (v NullableUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsers(val *Users) *NullableUsers {
	return &NullableUsers{value: val, isSet: true}
}

func (v NullableUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


