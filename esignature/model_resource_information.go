/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceInformation{}

// ResourceInformation 
type ResourceInformation struct {
	// 
	Resources []NameValue `json:"resources,omitempty"`
}

// NewResourceInformation instantiates a new ResourceInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInformation() *ResourceInformation {
	this := ResourceInformation{}
	return &this
}

// NewResourceInformationWithDefaults instantiates a new ResourceInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInformationWithDefaults() *ResourceInformation {
	this := ResourceInformation{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ResourceInformation) GetResources() []NameValue {
	if o == nil || IsNil(o.Resources) {
		var ret []NameValue
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInformation) GetResourcesOk() ([]NameValue, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ResourceInformation) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []NameValue and assigns it to the Resources field.
func (o *ResourceInformation) SetResources(v []NameValue) {
	o.Resources = v
}

func (o ResourceInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableResourceInformation struct {
	value *ResourceInformation
	isSet bool
}

func (v NullableResourceInformation) Get() *ResourceInformation {
	return v.value
}

func (v *NullableResourceInformation) Set(val *ResourceInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInformation(val *ResourceInformation) *NullableResourceInformation {
	return &NullableResourceInformation{value: val, isSet: true}
}

func (v NullableResourceInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


