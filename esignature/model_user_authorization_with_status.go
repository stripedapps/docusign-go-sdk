/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserAuthorizationWithStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAuthorizationWithStatus{}

// UserAuthorizationWithStatus 
type UserAuthorizationWithStatus struct {
	Authorization *UserAuthorization `json:"authorization,omitempty"`
	// 
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// 
	Success *string `json:"success,omitempty"`
}

// NewUserAuthorizationWithStatus instantiates a new UserAuthorizationWithStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAuthorizationWithStatus() *UserAuthorizationWithStatus {
	this := UserAuthorizationWithStatus{}
	return &this
}

// NewUserAuthorizationWithStatusWithDefaults instantiates a new UserAuthorizationWithStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAuthorizationWithStatusWithDefaults() *UserAuthorizationWithStatus {
	this := UserAuthorizationWithStatus{}
	return &this
}

// GetAuthorization returns the Authorization field value if set, zero value otherwise.
func (o *UserAuthorizationWithStatus) GetAuthorization() UserAuthorization {
	if o == nil || IsNil(o.Authorization) {
		var ret UserAuthorization
		return ret
	}
	return *o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthorizationWithStatus) GetAuthorizationOk() (*UserAuthorization, bool) {
	if o == nil || IsNil(o.Authorization) {
		return nil, false
	}
	return o.Authorization, true
}

// HasAuthorization returns a boolean if a field has been set.
func (o *UserAuthorizationWithStatus) HasAuthorization() bool {
	if o != nil && !IsNil(o.Authorization) {
		return true
	}

	return false
}

// SetAuthorization gets a reference to the given UserAuthorization and assigns it to the Authorization field.
func (o *UserAuthorizationWithStatus) SetAuthorization(v UserAuthorization) {
	o.Authorization = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *UserAuthorizationWithStatus) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthorizationWithStatus) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *UserAuthorizationWithStatus) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *UserAuthorizationWithStatus) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UserAuthorizationWithStatus) GetSuccess() string {
	if o == nil || IsNil(o.Success) {
		var ret string
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthorizationWithStatus) GetSuccessOk() (*string, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *UserAuthorizationWithStatus) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given string and assigns it to the Success field.
func (o *UserAuthorizationWithStatus) SetSuccess(v string) {
	o.Success = &v
}

func (o UserAuthorizationWithStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAuthorizationWithStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorization) {
		toSerialize["authorization"] = o.Authorization
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableUserAuthorizationWithStatus struct {
	value *UserAuthorizationWithStatus
	isSet bool
}

func (v NullableUserAuthorizationWithStatus) Get() *UserAuthorizationWithStatus {
	return v.value
}

func (v *NullableUserAuthorizationWithStatus) Set(val *UserAuthorizationWithStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAuthorizationWithStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAuthorizationWithStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAuthorizationWithStatus(val *UserAuthorizationWithStatus) *NullableUserAuthorizationWithStatus {
	return &NullableUserAuthorizationWithStatus{value: val, isSet: true}
}

func (v NullableUserAuthorizationWithStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAuthorizationWithStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


