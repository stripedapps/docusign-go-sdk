/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BillingPlanResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingPlanResponse{}

// BillingPlanResponse Defines a billing plan response object.
type BillingPlanResponse struct {
	BillingPlan *BillingPlan `json:"billingPlan,omitempty"`
	// A list of billing plans that the current billing plan can be rolled into.
	SuccessorPlans []BillingPlan `json:"successorPlans,omitempty"`
}

// NewBillingPlanResponse instantiates a new BillingPlanResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingPlanResponse() *BillingPlanResponse {
	this := BillingPlanResponse{}
	return &this
}

// NewBillingPlanResponseWithDefaults instantiates a new BillingPlanResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPlanResponseWithDefaults() *BillingPlanResponse {
	this := BillingPlanResponse{}
	return &this
}

// GetBillingPlan returns the BillingPlan field value if set, zero value otherwise.
func (o *BillingPlanResponse) GetBillingPlan() BillingPlan {
	if o == nil || IsNil(o.BillingPlan) {
		var ret BillingPlan
		return ret
	}
	return *o.BillingPlan
}

// GetBillingPlanOk returns a tuple with the BillingPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanResponse) GetBillingPlanOk() (*BillingPlan, bool) {
	if o == nil || IsNil(o.BillingPlan) {
		return nil, false
	}
	return o.BillingPlan, true
}

// HasBillingPlan returns a boolean if a field has been set.
func (o *BillingPlanResponse) HasBillingPlan() bool {
	if o != nil && !IsNil(o.BillingPlan) {
		return true
	}

	return false
}

// SetBillingPlan gets a reference to the given BillingPlan and assigns it to the BillingPlan field.
func (o *BillingPlanResponse) SetBillingPlan(v BillingPlan) {
	o.BillingPlan = &v
}

// GetSuccessorPlans returns the SuccessorPlans field value if set, zero value otherwise.
func (o *BillingPlanResponse) GetSuccessorPlans() []BillingPlan {
	if o == nil || IsNil(o.SuccessorPlans) {
		var ret []BillingPlan
		return ret
	}
	return o.SuccessorPlans
}

// GetSuccessorPlansOk returns a tuple with the SuccessorPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanResponse) GetSuccessorPlansOk() ([]BillingPlan, bool) {
	if o == nil || IsNil(o.SuccessorPlans) {
		return nil, false
	}
	return o.SuccessorPlans, true
}

// HasSuccessorPlans returns a boolean if a field has been set.
func (o *BillingPlanResponse) HasSuccessorPlans() bool {
	if o != nil && !IsNil(o.SuccessorPlans) {
		return true
	}

	return false
}

// SetSuccessorPlans gets a reference to the given []BillingPlan and assigns it to the SuccessorPlans field.
func (o *BillingPlanResponse) SetSuccessorPlans(v []BillingPlan) {
	o.SuccessorPlans = v
}

func (o BillingPlanResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingPlanResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingPlan) {
		toSerialize["billingPlan"] = o.BillingPlan
	}
	if !IsNil(o.SuccessorPlans) {
		toSerialize["successorPlans"] = o.SuccessorPlans
	}
	return toSerialize, nil
}

type NullableBillingPlanResponse struct {
	value *BillingPlanResponse
	isSet bool
}

func (v NullableBillingPlanResponse) Get() *BillingPlanResponse {
	return v.value
}

func (v *NullableBillingPlanResponse) Set(val *BillingPlanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPlanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPlanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPlanResponse(val *BillingPlanResponse) *NullableBillingPlanResponse {
	return &NullableBillingPlanResponse{value: val, isSet: true}
}

func (v NullableBillingPlanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPlanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


