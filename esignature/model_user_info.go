/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfo{}

// UserInfo 
type UserInfo struct {
	// The account ID associated with the envelope.
	AccountId *string `json:"accountId,omitempty"`
	// The name on the account.
	AccountName *string `json:"accountName,omitempty"`
	// Access code provided to the user to activate the account.
	ActivationAccessCode *string `json:"activationAccessCode,omitempty"`
	// The user's email address.
	Email *string `json:"email,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// 
	IpAddress *string `json:"ipAddress,omitempty"`
	// When **true,** indicates that the user is logged in. This is a read-only property.
	LoginStatus *string `json:"loginStatus,omitempty"`
	// The user's membership ID.
	MembershipId *string `json:"membershipId,omitempty"`
	// This field is no longer supported for most accounts. To create an eSignature user without sending an activation email, use the Admin API by following [these steps](/docs/admin-api/how-to/create-active-user/).
	SendActivationEmail *string `json:"sendActivationEmail,omitempty"`
	// A URI containing the user ID.
	Uri *string `json:"uri,omitempty"`
	// The ID of the user to access.
	UserId *string `json:"userId,omitempty"`
	// The name of the user.
	UserName *string `json:"userName,omitempty"`
	// Status of the user's account. One of:  - `ActivationRequired` - `ActivationSent` - `Active` - `Closed` - `Disabled` 
	UserStatus *string `json:"userStatus,omitempty"`
	// The type of user, for example `CompanyUser`.
	UserType *string `json:"userType,omitempty"`
}

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo() *UserInfo {
	this := UserInfo{}
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *UserInfo) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *UserInfo) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *UserInfo) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *UserInfo) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *UserInfo) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *UserInfo) SetAccountName(v string) {
	o.AccountName = &v
}

// GetActivationAccessCode returns the ActivationAccessCode field value if set, zero value otherwise.
func (o *UserInfo) GetActivationAccessCode() string {
	if o == nil || IsNil(o.ActivationAccessCode) {
		var ret string
		return ret
	}
	return *o.ActivationAccessCode
}

// GetActivationAccessCodeOk returns a tuple with the ActivationAccessCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetActivationAccessCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationAccessCode) {
		return nil, false
	}
	return o.ActivationAccessCode, true
}

// HasActivationAccessCode returns a boolean if a field has been set.
func (o *UserInfo) HasActivationAccessCode() bool {
	if o != nil && !IsNil(o.ActivationAccessCode) {
		return true
	}

	return false
}

// SetActivationAccessCode gets a reference to the given string and assigns it to the ActivationAccessCode field.
func (o *UserInfo) SetActivationAccessCode(v string) {
	o.ActivationAccessCode = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *UserInfo) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *UserInfo) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *UserInfo) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *UserInfo) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *UserInfo) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *UserInfo) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLoginStatus returns the LoginStatus field value if set, zero value otherwise.
func (o *UserInfo) GetLoginStatus() string {
	if o == nil || IsNil(o.LoginStatus) {
		var ret string
		return ret
	}
	return *o.LoginStatus
}

// GetLoginStatusOk returns a tuple with the LoginStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetLoginStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LoginStatus) {
		return nil, false
	}
	return o.LoginStatus, true
}

// HasLoginStatus returns a boolean if a field has been set.
func (o *UserInfo) HasLoginStatus() bool {
	if o != nil && !IsNil(o.LoginStatus) {
		return true
	}

	return false
}

// SetLoginStatus gets a reference to the given string and assigns it to the LoginStatus field.
func (o *UserInfo) SetLoginStatus(v string) {
	o.LoginStatus = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *UserInfo) GetMembershipId() string {
	if o == nil || IsNil(o.MembershipId) {
		var ret string
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetMembershipIdOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *UserInfo) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given string and assigns it to the MembershipId field.
func (o *UserInfo) SetMembershipId(v string) {
	o.MembershipId = &v
}

// GetSendActivationEmail returns the SendActivationEmail field value if set, zero value otherwise.
func (o *UserInfo) GetSendActivationEmail() string {
	if o == nil || IsNil(o.SendActivationEmail) {
		var ret string
		return ret
	}
	return *o.SendActivationEmail
}

// GetSendActivationEmailOk returns a tuple with the SendActivationEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetSendActivationEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SendActivationEmail) {
		return nil, false
	}
	return o.SendActivationEmail, true
}

// HasSendActivationEmail returns a boolean if a field has been set.
func (o *UserInfo) HasSendActivationEmail() bool {
	if o != nil && !IsNil(o.SendActivationEmail) {
		return true
	}

	return false
}

// SetSendActivationEmail gets a reference to the given string and assigns it to the SendActivationEmail field.
func (o *UserInfo) SetSendActivationEmail(v string) {
	o.SendActivationEmail = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *UserInfo) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *UserInfo) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *UserInfo) SetUri(v string) {
	o.Uri = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *UserInfo) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *UserInfo) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *UserInfo) SetUserName(v string) {
	o.UserName = &v
}

// GetUserStatus returns the UserStatus field value if set, zero value otherwise.
func (o *UserInfo) GetUserStatus() string {
	if o == nil || IsNil(o.UserStatus) {
		var ret string
		return ret
	}
	return *o.UserStatus
}

// GetUserStatusOk returns a tuple with the UserStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUserStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UserStatus) {
		return nil, false
	}
	return o.UserStatus, true
}

// HasUserStatus returns a boolean if a field has been set.
func (o *UserInfo) HasUserStatus() bool {
	if o != nil && !IsNil(o.UserStatus) {
		return true
	}

	return false
}

// SetUserStatus gets a reference to the given string and assigns it to the UserStatus field.
func (o *UserInfo) SetUserStatus(v string) {
	o.UserStatus = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *UserInfo) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *UserInfo) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *UserInfo) SetUserType(v string) {
	o.UserType = &v
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.ActivationAccessCode) {
		toSerialize["activationAccessCode"] = o.ActivationAccessCode
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.LoginStatus) {
		toSerialize["loginStatus"] = o.LoginStatus
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.SendActivationEmail) {
		toSerialize["sendActivationEmail"] = o.SendActivationEmail
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.UserStatus) {
		toSerialize["userStatus"] = o.UserStatus
	}
	if !IsNil(o.UserType) {
		toSerialize["userType"] = o.UserType
	}
	return toSerialize, nil
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


