/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LocalePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalePolicy{}

// LocalePolicy 
type LocalePolicy struct {
	// Specifies the address format. Valid values:  - `en_us` - `ja_jp` - `zh_cn_tw` 
	AddressFormat *string `json:"addressFormat,omitempty"`
	AddressFormatMetadata *SettingsMetadata `json:"addressFormatMetadata,omitempty"`
	// 
	AllowRegion *string `json:"allowRegion,omitempty"`
	// Specifies the type of calendar. Valid values:  - `gregorian` - `japanese` - `buddhist` 
	CalendarType *string `json:"calendarType,omitempty"`
	CalendarTypeMetadata *SettingsMetadata `json:"calendarTypeMetadata,omitempty"`
	// The two letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code.
	CultureName *string `json:"cultureName,omitempty"`
	CultureNameMetadata *SettingsMetadata `json:"cultureNameMetadata,omitempty"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. 
	CurrencyCode *string `json:"currencyCode,omitempty"`
	CurrencyCodeMetadata *SettingsMetadata `json:"currencyCodeMetadata,omitempty"`
	// Determines how negative currency values are displayed.  In most cases, you should not need to change this value. See [Explicitly define formatting](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#explicitly-define-formatting).  Valid values:  - `Default`<br>   `0` - `OPar_CSym_1_Comma_234_Comma_567_Period_89_CPar`<br>   `($1,234,567.89)` - `Minus_CSym_1_Comma_234_Comma_567_Period_89`<br>   `-$1,234,567.89` - `Minus_CSym_Space_1_Period_234_Period_567_Comma_89`<br>   `-$ 1.234.567,89` - `CSym_Space_Minus_1_Period_234_Period_567_Comma_89`<br>   `$ -1.234.567,89` - `Minus_1_Period_234_Period_567_Comma_89_Space_CSym`<br>   `-1.234.567,89 $` - `OPar_1_Space_234_Space_567_Comma_89_Space_CSym_CPar`<br>   `(1 234 567,89 $)` - `Minus_1_Space_234_Space_567_Comma_89_Space_CSym`<br>   `-1 234 567,89 $` - `CSym_Minus_1_Quote_234_Quote_567_Period_89`<br>   `$-1'234'567.89` - `Minus_CSym_1_Period_234_Period_567_Comma_89`<br>   `-$1.234.567,89` - `Minus_CSym_1_Comma_234_Comma_567`<br>   `-$1,234,567` - `Minus_CSym_12_Comma_34_Comma_567_Period_89`<br>   `-$12,34,567.89` - `OPar_CSym_Space_1234_Comma_567_Period_89_CPar`<br>   `($ 1234,567.89)` - `CSym_Space_Minus_12_Comma_34_Comma_567_Period_89`<br>   `$ -12,34,567.89` - `CSym_Minus_12_Comma_34_Comma_567_Period_89`<br>   `$-1,234,567.89` - `CSym_Space_Minus_1_Space_234_Space_567_Comma_89`<br>   `$ -1 234 567,89` - `CSym_Space_Minus_1_Space_234_Space_567_Period_89`<br>   `$ -1 234 567.89` - `Minus_CSym_Space_1_Space_234_Space_567_Comma_89`<br>   `-$ 1 234 567,89` - `Minus_1_Space_234_Space_567_Comma_89_CSym`<br>   `-1 234 567,89$` - `Minus_1_Space_234_Space_567_Period_89_Space_CSym`<br>   `-1 234 567.89 $` - `OPar_CSym_1_Period_234_Period_567_CPar`<br>   `(1.234.567)` - `OPar_CSym_1_Comma_234_Comma_567_CPar`<br>   `($1,234,567)` - `Minus_1_Comma_234_Comma_567_Period_89_Space_CSym`<br>   `-1,234,567.89 $` - `Minus_CSym_Space_1_Comma_234_Comma_567_Period_89`<br>   `-$ 1,234,567.89` - `OPar_CSym_Space_1_Period_234_Period_567_Comma_89_CPar`<br>   `($ 1.234.567,89)` - `OPar_CSym_Space_1_Quote_234_Quote_567_Period_89_CPar`<br>   `($ 1'234'567.89)` - `OPar_CSym_Space_1_Space_234_Space_567_Comma_89_CPar`<br>   `($ 1 234 567,89)` - `OPar_CSym_Space_1_Space_234_Space_567_Period_89_CPar`<br>   `($ 1 234 567.89)` - `OPar_CSym_12_Comma_34_Comma_567_Period_89_CPar`<br>   `($12,34,567.89)` - `OPar_CSym_Space_12_Comma_34_Comma_567_Period_89_CPar`<br>   `($ 12,34,567.89)` - `OPar_1_Comma_234_Comma_567_Period_89_Space_CSym_CPar`<br>   `(1,234,567.89 $)` - `OPar_1_Period_234_Period_567_Comma_89_Space_CSym_CPar`<br>   `(1.234.567,89 $)` - `OPar_1_Space_234_Space_567_Comma_89_CSym_CPar`<br>   `(1 234 567,89$)` - `OPar_1_Space_234_Space_567_Period_89_Space_CSym_CPar`<br>   `(1 234 567.89 $)` - `OPar_CSym_Space_1_Comma_234_Comma_567_Period_89_CPar`<br>   `($ 1,234,567.89)` - `Minus_CSym_1_Period_234_Period_567`<br>   `-$ 1.234.567` - `Minus_CSym_Space_1_Quote_234_Quote_567_Period_89`<br>   `-$ 1'234'567.89` - `Minus_CSym_Space_1_Space_234_Space_567_Period_89`<br>   `-$ 1 234 567.89` - `CSym_Minus_1_Comma_234_Comma_567`<br>   `$-1,234,567` - `CSym_Minus_1_Period_234_Period_567`<br>   `$-1.234.567` - `CSym_Space_Minus_1_Quote_234_Quote_567_Period_89`<br>   `$ -1'234'567.89` - `CSym_Space_Minus_1_Comma_234_Comma_567_Period_89`<br>   `$ -1,234,567.89` - `Minus_CSym_Space_12_Comma_34_Comma_567_Period_89`<br>   `-$ 12,34,567.89` - `Minus_1_Period_234_Period_567_Space_CSym`<br>   `-123.456.789 $` - `CSym_Minus_1_Space_234_Space_567_Comma_89`<br>   `$-123 456 789,00` - `Minus_1_Quote_234_Quote_567_Period_89_Space_CSym`<br>   `-123'456'789.00 $` - `CSym_1_Comma_234_Comma_567_Period_89_Minus`<br>   `$123,456,789.00-` - `CSym_Minus_1_Period_234_Period_567_Comma_89`<br>   `$-123.456.789,00` - `OPar_CSym_1_Period_234_Period_567_Comma_89_CPar`<br>   `($123.456.789,00)` - `Minus_CSym_1234_Comma_567_Period_89`<br>   `-$123456,789.00` - `Minus_CSym_1_Space_234_Space_567_Comma_89`<br>   `-$123 456 789,00` 
	CurrencyNegativeFormat *string `json:"currencyNegativeFormat,omitempty"`
	CurrencyNegativeFormatMetadata *SettingsMetadata `json:"currencyNegativeFormatMetadata,omitempty"`
	// Determines how positive currency values are displayed.  In most cases, you should not need to change this value. See [Explicitly define formatting](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#explicitly-define-formatting).  Valid values:   - `Default`<br>   Uses the current locale. - `CSym_1_Comma_234_Comma_567_Period_89`<br>   `$1,234,567.89` - `CSym_Space_1_Period_234_Period_567_Comma_89`<br>   `$ 1.234.567,89` - `Leading_1_Period_234_Period_567_Comma_89_Space_CSym`<br>   `1.234.567,89 $` - `Leading_1_Space_234_Space_567_Comma_89_Space_CSym`<br>   `1 234 567,89 $` - `CSym_Space_1_Quote_234_Quote_567_Period_89`<br>   `$ 1'234'567.89` - `CSym_1_Comma_234_Comma_567`<br>   `$1,234,567` - `CSym_Space_12_Comma_34_Comma_567_Period_89`<br>   `$ 12,34,567.89` - `CSym_12_Comma_34_Comma_567_Period_89`<br>   `$12,34,567.89` - `CSym_Space_1234_Comma_567_Period_89`<br>   `$ 1234,567.89` - `Leading_1_Space_234_Space_567_Period_89_Space_CSym`<br>   `1 234 567.89 $` - `CSym_Space_1_Space_234_Space_567_Comma_89`<br>   `$ 1 234 567,89` - `CSym_Space_1_Space_234_Space_567_Period_89`<br>   `$ 1 234 567.89` - `Leading_1_Space_234_Space_567_Comma_89_CSym`<br>   `1 234 567,89$` - `CSym_1_Period_234_Period_567`<br>   `$1.234.567` - `Leading_1_Comma_234_Comma_567_Period_89_Space_CSym`<br>   `1,234,567. $` (New Armenian) - `CSym_Space_1_Comma_234_Comma_567_Period_89`<br>   `$ 1,234,567.89` (Persian) - `CSym_1_Period_234_Period_567_Comma_89`<br>   `$123.456.789,00` (es-CO) - `Leading_1_Quote_234_Quote_567_Period_89_Space_CSym`<br>   `123'456'789.00 $` (fr-ch) - `CSym_1234_Comma_567_Period_89`<br>   `$123456,789.00` (es-PR) - `Leading_1_Period_234_Period_567_Space_CSym`<br>   `123.456.789 $` - `CSym_1_Space_234_Space_567_Comma_89`<br>   `$123 456 789,00` (en-ZA, es-CR) 
	CurrencyPositiveFormat *string `json:"currencyPositiveFormat,omitempty"`
	CurrencyPositiveFormatMetadata *SettingsMetadata `json:"currencyPositiveFormatMetadata,omitempty"`
	// 
	CustomDateFormat *string `json:"customDateFormat,omitempty"`
	// 
	CustomSignDateFormat *string `json:"customSignDateFormat,omitempty"`
	// 
	CustomSignTimeFormat *string `json:"customSignTimeFormat,omitempty"`
	// 
	CustomTimeFormat *string `json:"customTimeFormat,omitempty"`
	// Specifies the date format. Valid values:  - `default` <br> used the UI's  - `longformat` <br> use the UI's long format - `dd_mm_yy` <br> dd-MM-yy - `dd_mmm_yy` <br> dd-MMM-yy - `dd_mm_yyyy` <br> dd-MM-yyyy - `dd_mmm_yyyy` <br> dd-MMM-yyyy - `ddmmmmyyyy` <br> dd MMMM yyyy - `ddmmyyyy` <br> dd/MM/yyyy - `ddmmyyyy_de` <br> dd.MM.yyyy - `dmyyyy` <br> d/M/yyyy - `d_m_yyyy` <br> d-M-yyyy - `mmmd_yyyy` <br> MMM d, yyyy - `mmm_dd_yyyy` <br> MMM-dd-yyyy - `mmmmd_yyyy` <br> MMMM d, yyyy - `mm_dd_yyyy` <br> MM-dd-yyyy - `mdyyyy` <br> M/d/yyyy - `yyyy_mmm_dd` <br> yyyy-MMM-dd - `yyyy_mm_dd` <br> yyyy-MM-dd - `yyyymmdd` <br> yyyy/MM/dd - `yyyymd` <br> yyyy/M/d - `custom` <br> Customer set own value - `mmddyyyy` <br> MM/dd/yyyy - `mmddyy` <br> MM/dd/yy - `yyyy_mmmm_d` <br> yyyy MMMM d 
	DateFormat *string `json:"dateFormat,omitempty"`
	DateFormatMetadata *SettingsMetadata `json:"dateFormatMetadata,omitempty"`
	// 
	EffectiveAddressFormat *string `json:"effectiveAddressFormat,omitempty"`
	// 
	EffectiveCalendarType *string `json:"effectiveCalendarType,omitempty"`
	// 
	EffectiveCurrencyCode *string `json:"effectiveCurrencyCode,omitempty"`
	// 
	EffectiveCurrencyNegativeFormat *string `json:"effectiveCurrencyNegativeFormat,omitempty"`
	// 
	EffectiveCurrencyPositiveFormat *string `json:"effectiveCurrencyPositiveFormat,omitempty"`
	// 
	EffectiveCustomDateFormat *string `json:"effectiveCustomDateFormat,omitempty"`
	// 
	EffectiveCustomTimeFormat *string `json:"effectiveCustomTimeFormat,omitempty"`
	// 
	EffectiveDateFormat *string `json:"effectiveDateFormat,omitempty"`
	// 
	EffectiveInitialFormat *string `json:"effectiveInitialFormat,omitempty"`
	// 
	EffectiveNameFormat *string `json:"effectiveNameFormat,omitempty"`
	// 
	EffectiveTimeFormat *string `json:"effectiveTimeFormat,omitempty"`
	// 
	EffectiveTimeZone *string `json:"effectiveTimeZone,omitempty"`
	// When a user is required to enter their initials, this property specifies how initials are rendered. The examples show the initials for \"William Henry Gates\".   - `first1last1`<br> \"WG\" - `last2`<br> \"GA\" - `first2`<br> \"WI\" - `last2_cjk`<br> first two characters from last name in CJK characters.  <!-- Components/BusinessObjects/Models/ConcealedApiRestModels/localePolicyEnums.cs --> 
	InitialFormat *string `json:"initialFormat,omitempty"`
	InitialFormatMetadata *SettingsMetadata `json:"initialFormatMetadata,omitempty"`
	// Describes how names are displayed. Valid values:  - `first_middle_last`<br>William Henry Gates - `full`<br>Mr William Henry Gates III - `last_first`<br>Gates William - `lastfirst`<br>GatesWilliam - `last_first_cjk`<br>Gates William only with CJK characters - `lastfirst_cjk`<br>GatesWilliam only with CJK characters  <!-- Web/RestApi/Models/v2_1/localePolicy.cs#L341-L366 --> 
	NameFormat *string `json:"nameFormat,omitempty"`
	NameFormatMetadata *SettingsMetadata `json:"nameFormatMetadata,omitempty"`
	// The format for the signature date. Valid values are:  - `d/M/yyyy` - `dd-MM-yy` - `dd-MMM-yy` - `dd-MM-yyyy` - `dd.MM.yyyy` - `dd-MMM-yyyy` - `dd MMMM yyyy` - `M/d/yyyy` - `MM-dd-yyyy` - `MM/dd/yyyy` - `MM/dd/yy` - `MMM-dd-yyyy` - `MMM d, yyyy` - `MMMM d, yyyy` - `yyyy-MM-dd` - `yyyy-MMM-dd` - `yyyy/MM/dd` - `yyyy MMMM d`  **Note:** Only Admin users can change this setting. 
	SignDateFormat *string `json:"signDateFormat,omitempty"`
	SignDateFormatMetadata *SettingsMetadata `json:"signDateFormatMetadata,omitempty"`
	// The format for the signature time. Valid values are:  - `none` - `HH:mm` - `h:mm` - `HH:mm:ss` - `h:mm:ss` 
	SignTimeFormat *string `json:"signTimeFormat,omitempty"`
	SignTimeFormatMetadata *SettingsMetadata `json:"signTimeFormatMetadata,omitempty"`
	// Specifies the time format. Valid values:  - `none`      <br>None - `hh_mm`     <br>hh:mm  - `hhmm`      <br>HH:mm - `hhmmss`    <br>HH:mm:ss - `hhmmsstt`  <br>HH:mm:ss tt - `hhmmtt`    <br> HH:mm tt - `hmm`       <br>h:mm - `hmmss`     <br>h:mm:ss - `hmmsstt`   <br>h:mm:ss tt - `hmmtt`     <br>h:mm tt - `custom`    <br>Customer-set format  <!-- Web/RestApi/Models/v2_1/localePolicy.cs#L501-L546 -->
	TimeFormat *string `json:"timeFormat,omitempty"`
	TimeFormatMetadata *SettingsMetadata `json:"timeFormatMetadata,omitempty"`
	// Specifies the time zone. Valid values:  - `TZ_01_AfghanistanStandardTime` - `TZ_02_AlaskanStandardTime` - `TZ_03_ArabStandardTime` - `TZ_04_ArabianStandardTime` - `TZ_05_ArabicStandardTime` - `TZ_06_ArgentinaStandardTime` - `TZ_07_AtlanticStandardTime` - `TZ_08_AUS_CentralStandardTime` - `TZ_09_AUS_EasternStandardTime` - `TZ_10_AzerbaijanStandardTime` - `TZ_11_AzoresStandardTime` - `TZ_12_BangladeshStandardTime` - `TZ_13_CanadaCentralStandardTime` - `TZ_14_CapeVerdeStandardTime` - `TZ_15_CaucasusStandardTime` - `TZ_16_CentralAustraliaStandardTime` - `TZ_17_CentralAmericaStandardTime` - `TZ_18_CentralAsiaStandardTime` - `TZ_19_CentralBrazilianStandardTime` - `TZ_20_CentralEuropeStandardTime` - `TZ_21_CentralEuropeanStandardTime` - `TZ_22_CentralPacificStandardTime` - `TZ_23_CentralStandardTime` - `TZ_24_CentralStandardTimeMexico` - `TZ_25_ChinaStandardTime` - `TZ_26_DatelineStandardTime` - `TZ_27_E_AfricaStandardTime` - `TZ_28_E_AustraliaStandardTime` - `TZ_29_E_EuropeStandardTime` - `TZ_30_E_SouthAmericaStandardTime` - `TZ_31_EasternStandardTime` - `TZ_32_EgyptStandardTime` - `TZ_33_EkaterinburgStandardTime` - `TZ_34_FijiStandardTime` - `TZ_35_FLE_StandardTime` - `TZ_36_GeorgianStandardTime` - `TZ_37_GMT_StandardTime` - `TZ_38_GreenlandStandardTime` - `TZ_39_GreenwichStandardTime` - `TZ_40_GTB_StandardTime` - `TZ_41_HawaiianStandardTime` - `TZ_42_IndiaStandardTime` - `TZ_43_IranStandardTime` - `TZ_44_IsraelStandardTime` - `TZ_45_JordanStandardTime` - `TZ_46_KaliningradStandardTime` - `TZ_47_KamchatkaStandardTime` - `TZ_48_KoreaStandardTime` - `TZ_49_MagadanStandardTime` - `TZ_50_MauritiusStandardTime` - `TZ_51_MidAtlanticStandardTime` - `TZ_52_MiddleEastStandardTime` - `TZ_53_MontevideoStandardTime` - `TZ_54_MoroccoStandardTime` - `TZ_55_MountainStandardTime` - `TZ_56_MountainStandardTimeMMexico` - `TZ_57_MyanmarStandardTime` - `TZ_58_N_CentralAsiaStandardTime` - `TZ_59_NamibiaStandardTime` - `TZ_60_NepalStandardTime` - `TZ_61_NewZealandStandardTime` - `TZ_62_NewfoundlandStandardTime` - `TZ_63_NorthAsiaEastStandardTime` - `TZ_64_NorthAsiaStandardTime` - `TZ_65_PacificSAStandardTime` - `TZ_66_PacificStandardTime` - `TZ_67_PacificStandardTimeMexico` - `TZ_68_PakistanStandardTime` - `TZ_69_ParaguayStandardTime` - `TZ_70_RomanceStandardTime` - `TZ_71_RussianStandardTime` - `TZ_72_SAEasternStandardTime` - `TZ_73_SAPacificStandardTime` - `TZ_74_SAWesternStandardTime` - `TZ_75_SamoaStandardTime` - `TZ_76_SE_AsiaStandardTime` - `TZ_77_SingaporeStandardTime` - `TZ_78_SouthAfricaStandardTime` - `TZ_79_SriLankaStandardTime` - `TZ_80_SyriaStandardTime` - `TZ_81_TaipeiStandardTime` - `TZ_82_TasmaniaStandardTime` - `TZ_83_TokyoStandardTime` - `TZ_84_TongaStandardTime` - `TZ_85_TurkeyStandardTime` - `TZ_86_UlaanbaatarStandardTime` - `TZ_87_US_EasternStandardTime` - `TZ_88_USMountainStandardTime` - `TZ_89_VenezuelaStandardTime` - `TZ_90_VladivostokStandardTime` - `TZ_91_W_AustraliaStandardTime` - `TZ_92_W_CentralAfricaStandardTime` - `TZ_93_W_EuropeStandardTime` - `TZ_94_WestAsiaStandardTime` - `TZ_95_WestPacificStandardTime` - `TZ_96_YakutskStandardTime` 
	TimeZone *string `json:"timeZone,omitempty"`
	TimeZoneMetadata *SettingsMetadata `json:"timeZoneMetadata,omitempty"`
}

// NewLocalePolicy instantiates a new LocalePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalePolicy() *LocalePolicy {
	this := LocalePolicy{}
	return &this
}

// NewLocalePolicyWithDefaults instantiates a new LocalePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalePolicyWithDefaults() *LocalePolicy {
	this := LocalePolicy{}
	return &this
}

// GetAddressFormat returns the AddressFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetAddressFormat() string {
	if o == nil || IsNil(o.AddressFormat) {
		var ret string
		return ret
	}
	return *o.AddressFormat
}

// GetAddressFormatOk returns a tuple with the AddressFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetAddressFormatOk() (*string, bool) {
	if o == nil || IsNil(o.AddressFormat) {
		return nil, false
	}
	return o.AddressFormat, true
}

// HasAddressFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasAddressFormat() bool {
	if o != nil && !IsNil(o.AddressFormat) {
		return true
	}

	return false
}

// SetAddressFormat gets a reference to the given string and assigns it to the AddressFormat field.
func (o *LocalePolicy) SetAddressFormat(v string) {
	o.AddressFormat = &v
}

// GetAddressFormatMetadata returns the AddressFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetAddressFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.AddressFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.AddressFormatMetadata
}

// GetAddressFormatMetadataOk returns a tuple with the AddressFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetAddressFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.AddressFormatMetadata) {
		return nil, false
	}
	return o.AddressFormatMetadata, true
}

// HasAddressFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasAddressFormatMetadata() bool {
	if o != nil && !IsNil(o.AddressFormatMetadata) {
		return true
	}

	return false
}

// SetAddressFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the AddressFormatMetadata field.
func (o *LocalePolicy) SetAddressFormatMetadata(v SettingsMetadata) {
	o.AddressFormatMetadata = &v
}

// GetAllowRegion returns the AllowRegion field value if set, zero value otherwise.
func (o *LocalePolicy) GetAllowRegion() string {
	if o == nil || IsNil(o.AllowRegion) {
		var ret string
		return ret
	}
	return *o.AllowRegion
}

// GetAllowRegionOk returns a tuple with the AllowRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetAllowRegionOk() (*string, bool) {
	if o == nil || IsNil(o.AllowRegion) {
		return nil, false
	}
	return o.AllowRegion, true
}

// HasAllowRegion returns a boolean if a field has been set.
func (o *LocalePolicy) HasAllowRegion() bool {
	if o != nil && !IsNil(o.AllowRegion) {
		return true
	}

	return false
}

// SetAllowRegion gets a reference to the given string and assigns it to the AllowRegion field.
func (o *LocalePolicy) SetAllowRegion(v string) {
	o.AllowRegion = &v
}

// GetCalendarType returns the CalendarType field value if set, zero value otherwise.
func (o *LocalePolicy) GetCalendarType() string {
	if o == nil || IsNil(o.CalendarType) {
		var ret string
		return ret
	}
	return *o.CalendarType
}

// GetCalendarTypeOk returns a tuple with the CalendarType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCalendarTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CalendarType) {
		return nil, false
	}
	return o.CalendarType, true
}

// HasCalendarType returns a boolean if a field has been set.
func (o *LocalePolicy) HasCalendarType() bool {
	if o != nil && !IsNil(o.CalendarType) {
		return true
	}

	return false
}

// SetCalendarType gets a reference to the given string and assigns it to the CalendarType field.
func (o *LocalePolicy) SetCalendarType(v string) {
	o.CalendarType = &v
}

// GetCalendarTypeMetadata returns the CalendarTypeMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetCalendarTypeMetadata() SettingsMetadata {
	if o == nil || IsNil(o.CalendarTypeMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.CalendarTypeMetadata
}

// GetCalendarTypeMetadataOk returns a tuple with the CalendarTypeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCalendarTypeMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.CalendarTypeMetadata) {
		return nil, false
	}
	return o.CalendarTypeMetadata, true
}

// HasCalendarTypeMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasCalendarTypeMetadata() bool {
	if o != nil && !IsNil(o.CalendarTypeMetadata) {
		return true
	}

	return false
}

// SetCalendarTypeMetadata gets a reference to the given SettingsMetadata and assigns it to the CalendarTypeMetadata field.
func (o *LocalePolicy) SetCalendarTypeMetadata(v SettingsMetadata) {
	o.CalendarTypeMetadata = &v
}

// GetCultureName returns the CultureName field value if set, zero value otherwise.
func (o *LocalePolicy) GetCultureName() string {
	if o == nil || IsNil(o.CultureName) {
		var ret string
		return ret
	}
	return *o.CultureName
}

// GetCultureNameOk returns a tuple with the CultureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCultureNameOk() (*string, bool) {
	if o == nil || IsNil(o.CultureName) {
		return nil, false
	}
	return o.CultureName, true
}

// HasCultureName returns a boolean if a field has been set.
func (o *LocalePolicy) HasCultureName() bool {
	if o != nil && !IsNil(o.CultureName) {
		return true
	}

	return false
}

// SetCultureName gets a reference to the given string and assigns it to the CultureName field.
func (o *LocalePolicy) SetCultureName(v string) {
	o.CultureName = &v
}

// GetCultureNameMetadata returns the CultureNameMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetCultureNameMetadata() SettingsMetadata {
	if o == nil || IsNil(o.CultureNameMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.CultureNameMetadata
}

// GetCultureNameMetadataOk returns a tuple with the CultureNameMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCultureNameMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.CultureNameMetadata) {
		return nil, false
	}
	return o.CultureNameMetadata, true
}

// HasCultureNameMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasCultureNameMetadata() bool {
	if o != nil && !IsNil(o.CultureNameMetadata) {
		return true
	}

	return false
}

// SetCultureNameMetadata gets a reference to the given SettingsMetadata and assigns it to the CultureNameMetadata field.
func (o *LocalePolicy) SetCultureNameMetadata(v SettingsMetadata) {
	o.CultureNameMetadata = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *LocalePolicy) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *LocalePolicy) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *LocalePolicy) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencyCodeMetadata returns the CurrencyCodeMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetCurrencyCodeMetadata() SettingsMetadata {
	if o == nil || IsNil(o.CurrencyCodeMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.CurrencyCodeMetadata
}

// GetCurrencyCodeMetadataOk returns a tuple with the CurrencyCodeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCurrencyCodeMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.CurrencyCodeMetadata) {
		return nil, false
	}
	return o.CurrencyCodeMetadata, true
}

// HasCurrencyCodeMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasCurrencyCodeMetadata() bool {
	if o != nil && !IsNil(o.CurrencyCodeMetadata) {
		return true
	}

	return false
}

// SetCurrencyCodeMetadata gets a reference to the given SettingsMetadata and assigns it to the CurrencyCodeMetadata field.
func (o *LocalePolicy) SetCurrencyCodeMetadata(v SettingsMetadata) {
	o.CurrencyCodeMetadata = &v
}

// GetCurrencyNegativeFormat returns the CurrencyNegativeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetCurrencyNegativeFormat() string {
	if o == nil || IsNil(o.CurrencyNegativeFormat) {
		var ret string
		return ret
	}
	return *o.CurrencyNegativeFormat
}

// GetCurrencyNegativeFormatOk returns a tuple with the CurrencyNegativeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCurrencyNegativeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyNegativeFormat) {
		return nil, false
	}
	return o.CurrencyNegativeFormat, true
}

// HasCurrencyNegativeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasCurrencyNegativeFormat() bool {
	if o != nil && !IsNil(o.CurrencyNegativeFormat) {
		return true
	}

	return false
}

// SetCurrencyNegativeFormat gets a reference to the given string and assigns it to the CurrencyNegativeFormat field.
func (o *LocalePolicy) SetCurrencyNegativeFormat(v string) {
	o.CurrencyNegativeFormat = &v
}

// GetCurrencyNegativeFormatMetadata returns the CurrencyNegativeFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetCurrencyNegativeFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.CurrencyNegativeFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.CurrencyNegativeFormatMetadata
}

// GetCurrencyNegativeFormatMetadataOk returns a tuple with the CurrencyNegativeFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCurrencyNegativeFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.CurrencyNegativeFormatMetadata) {
		return nil, false
	}
	return o.CurrencyNegativeFormatMetadata, true
}

// HasCurrencyNegativeFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasCurrencyNegativeFormatMetadata() bool {
	if o != nil && !IsNil(o.CurrencyNegativeFormatMetadata) {
		return true
	}

	return false
}

// SetCurrencyNegativeFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the CurrencyNegativeFormatMetadata field.
func (o *LocalePolicy) SetCurrencyNegativeFormatMetadata(v SettingsMetadata) {
	o.CurrencyNegativeFormatMetadata = &v
}

// GetCurrencyPositiveFormat returns the CurrencyPositiveFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetCurrencyPositiveFormat() string {
	if o == nil || IsNil(o.CurrencyPositiveFormat) {
		var ret string
		return ret
	}
	return *o.CurrencyPositiveFormat
}

// GetCurrencyPositiveFormatOk returns a tuple with the CurrencyPositiveFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCurrencyPositiveFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyPositiveFormat) {
		return nil, false
	}
	return o.CurrencyPositiveFormat, true
}

// HasCurrencyPositiveFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasCurrencyPositiveFormat() bool {
	if o != nil && !IsNil(o.CurrencyPositiveFormat) {
		return true
	}

	return false
}

// SetCurrencyPositiveFormat gets a reference to the given string and assigns it to the CurrencyPositiveFormat field.
func (o *LocalePolicy) SetCurrencyPositiveFormat(v string) {
	o.CurrencyPositiveFormat = &v
}

// GetCurrencyPositiveFormatMetadata returns the CurrencyPositiveFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetCurrencyPositiveFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.CurrencyPositiveFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.CurrencyPositiveFormatMetadata
}

// GetCurrencyPositiveFormatMetadataOk returns a tuple with the CurrencyPositiveFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCurrencyPositiveFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.CurrencyPositiveFormatMetadata) {
		return nil, false
	}
	return o.CurrencyPositiveFormatMetadata, true
}

// HasCurrencyPositiveFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasCurrencyPositiveFormatMetadata() bool {
	if o != nil && !IsNil(o.CurrencyPositiveFormatMetadata) {
		return true
	}

	return false
}

// SetCurrencyPositiveFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the CurrencyPositiveFormatMetadata field.
func (o *LocalePolicy) SetCurrencyPositiveFormatMetadata(v SettingsMetadata) {
	o.CurrencyPositiveFormatMetadata = &v
}

// GetCustomDateFormat returns the CustomDateFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetCustomDateFormat() string {
	if o == nil || IsNil(o.CustomDateFormat) {
		var ret string
		return ret
	}
	return *o.CustomDateFormat
}

// GetCustomDateFormatOk returns a tuple with the CustomDateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCustomDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CustomDateFormat) {
		return nil, false
	}
	return o.CustomDateFormat, true
}

// HasCustomDateFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasCustomDateFormat() bool {
	if o != nil && !IsNil(o.CustomDateFormat) {
		return true
	}

	return false
}

// SetCustomDateFormat gets a reference to the given string and assigns it to the CustomDateFormat field.
func (o *LocalePolicy) SetCustomDateFormat(v string) {
	o.CustomDateFormat = &v
}

// GetCustomSignDateFormat returns the CustomSignDateFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetCustomSignDateFormat() string {
	if o == nil || IsNil(o.CustomSignDateFormat) {
		var ret string
		return ret
	}
	return *o.CustomSignDateFormat
}

// GetCustomSignDateFormatOk returns a tuple with the CustomSignDateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCustomSignDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CustomSignDateFormat) {
		return nil, false
	}
	return o.CustomSignDateFormat, true
}

// HasCustomSignDateFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasCustomSignDateFormat() bool {
	if o != nil && !IsNil(o.CustomSignDateFormat) {
		return true
	}

	return false
}

// SetCustomSignDateFormat gets a reference to the given string and assigns it to the CustomSignDateFormat field.
func (o *LocalePolicy) SetCustomSignDateFormat(v string) {
	o.CustomSignDateFormat = &v
}

// GetCustomSignTimeFormat returns the CustomSignTimeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetCustomSignTimeFormat() string {
	if o == nil || IsNil(o.CustomSignTimeFormat) {
		var ret string
		return ret
	}
	return *o.CustomSignTimeFormat
}

// GetCustomSignTimeFormatOk returns a tuple with the CustomSignTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCustomSignTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CustomSignTimeFormat) {
		return nil, false
	}
	return o.CustomSignTimeFormat, true
}

// HasCustomSignTimeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasCustomSignTimeFormat() bool {
	if o != nil && !IsNil(o.CustomSignTimeFormat) {
		return true
	}

	return false
}

// SetCustomSignTimeFormat gets a reference to the given string and assigns it to the CustomSignTimeFormat field.
func (o *LocalePolicy) SetCustomSignTimeFormat(v string) {
	o.CustomSignTimeFormat = &v
}

// GetCustomTimeFormat returns the CustomTimeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetCustomTimeFormat() string {
	if o == nil || IsNil(o.CustomTimeFormat) {
		var ret string
		return ret
	}
	return *o.CustomTimeFormat
}

// GetCustomTimeFormatOk returns a tuple with the CustomTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetCustomTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CustomTimeFormat) {
		return nil, false
	}
	return o.CustomTimeFormat, true
}

// HasCustomTimeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasCustomTimeFormat() bool {
	if o != nil && !IsNil(o.CustomTimeFormat) {
		return true
	}

	return false
}

// SetCustomTimeFormat gets a reference to the given string and assigns it to the CustomTimeFormat field.
func (o *LocalePolicy) SetCustomTimeFormat(v string) {
	o.CustomTimeFormat = &v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetDateFormat() string {
	if o == nil || IsNil(o.DateFormat) {
		var ret string
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DateFormat) {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasDateFormat() bool {
	if o != nil && !IsNil(o.DateFormat) {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given string and assigns it to the DateFormat field.
func (o *LocalePolicy) SetDateFormat(v string) {
	o.DateFormat = &v
}

// GetDateFormatMetadata returns the DateFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetDateFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.DateFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.DateFormatMetadata
}

// GetDateFormatMetadataOk returns a tuple with the DateFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetDateFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.DateFormatMetadata) {
		return nil, false
	}
	return o.DateFormatMetadata, true
}

// HasDateFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasDateFormatMetadata() bool {
	if o != nil && !IsNil(o.DateFormatMetadata) {
		return true
	}

	return false
}

// SetDateFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the DateFormatMetadata field.
func (o *LocalePolicy) SetDateFormatMetadata(v SettingsMetadata) {
	o.DateFormatMetadata = &v
}

// GetEffectiveAddressFormat returns the EffectiveAddressFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveAddressFormat() string {
	if o == nil || IsNil(o.EffectiveAddressFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveAddressFormat
}

// GetEffectiveAddressFormatOk returns a tuple with the EffectiveAddressFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveAddressFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveAddressFormat) {
		return nil, false
	}
	return o.EffectiveAddressFormat, true
}

// HasEffectiveAddressFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveAddressFormat() bool {
	if o != nil && !IsNil(o.EffectiveAddressFormat) {
		return true
	}

	return false
}

// SetEffectiveAddressFormat gets a reference to the given string and assigns it to the EffectiveAddressFormat field.
func (o *LocalePolicy) SetEffectiveAddressFormat(v string) {
	o.EffectiveAddressFormat = &v
}

// GetEffectiveCalendarType returns the EffectiveCalendarType field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveCalendarType() string {
	if o == nil || IsNil(o.EffectiveCalendarType) {
		var ret string
		return ret
	}
	return *o.EffectiveCalendarType
}

// GetEffectiveCalendarTypeOk returns a tuple with the EffectiveCalendarType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveCalendarTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCalendarType) {
		return nil, false
	}
	return o.EffectiveCalendarType, true
}

// HasEffectiveCalendarType returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveCalendarType() bool {
	if o != nil && !IsNil(o.EffectiveCalendarType) {
		return true
	}

	return false
}

// SetEffectiveCalendarType gets a reference to the given string and assigns it to the EffectiveCalendarType field.
func (o *LocalePolicy) SetEffectiveCalendarType(v string) {
	o.EffectiveCalendarType = &v
}

// GetEffectiveCurrencyCode returns the EffectiveCurrencyCode field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveCurrencyCode() string {
	if o == nil || IsNil(o.EffectiveCurrencyCode) {
		var ret string
		return ret
	}
	return *o.EffectiveCurrencyCode
}

// GetEffectiveCurrencyCodeOk returns a tuple with the EffectiveCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCurrencyCode) {
		return nil, false
	}
	return o.EffectiveCurrencyCode, true
}

// HasEffectiveCurrencyCode returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveCurrencyCode() bool {
	if o != nil && !IsNil(o.EffectiveCurrencyCode) {
		return true
	}

	return false
}

// SetEffectiveCurrencyCode gets a reference to the given string and assigns it to the EffectiveCurrencyCode field.
func (o *LocalePolicy) SetEffectiveCurrencyCode(v string) {
	o.EffectiveCurrencyCode = &v
}

// GetEffectiveCurrencyNegativeFormat returns the EffectiveCurrencyNegativeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveCurrencyNegativeFormat() string {
	if o == nil || IsNil(o.EffectiveCurrencyNegativeFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveCurrencyNegativeFormat
}

// GetEffectiveCurrencyNegativeFormatOk returns a tuple with the EffectiveCurrencyNegativeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveCurrencyNegativeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCurrencyNegativeFormat) {
		return nil, false
	}
	return o.EffectiveCurrencyNegativeFormat, true
}

// HasEffectiveCurrencyNegativeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveCurrencyNegativeFormat() bool {
	if o != nil && !IsNil(o.EffectiveCurrencyNegativeFormat) {
		return true
	}

	return false
}

// SetEffectiveCurrencyNegativeFormat gets a reference to the given string and assigns it to the EffectiveCurrencyNegativeFormat field.
func (o *LocalePolicy) SetEffectiveCurrencyNegativeFormat(v string) {
	o.EffectiveCurrencyNegativeFormat = &v
}

// GetEffectiveCurrencyPositiveFormat returns the EffectiveCurrencyPositiveFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveCurrencyPositiveFormat() string {
	if o == nil || IsNil(o.EffectiveCurrencyPositiveFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveCurrencyPositiveFormat
}

// GetEffectiveCurrencyPositiveFormatOk returns a tuple with the EffectiveCurrencyPositiveFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveCurrencyPositiveFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCurrencyPositiveFormat) {
		return nil, false
	}
	return o.EffectiveCurrencyPositiveFormat, true
}

// HasEffectiveCurrencyPositiveFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveCurrencyPositiveFormat() bool {
	if o != nil && !IsNil(o.EffectiveCurrencyPositiveFormat) {
		return true
	}

	return false
}

// SetEffectiveCurrencyPositiveFormat gets a reference to the given string and assigns it to the EffectiveCurrencyPositiveFormat field.
func (o *LocalePolicy) SetEffectiveCurrencyPositiveFormat(v string) {
	o.EffectiveCurrencyPositiveFormat = &v
}

// GetEffectiveCustomDateFormat returns the EffectiveCustomDateFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveCustomDateFormat() string {
	if o == nil || IsNil(o.EffectiveCustomDateFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveCustomDateFormat
}

// GetEffectiveCustomDateFormatOk returns a tuple with the EffectiveCustomDateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveCustomDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCustomDateFormat) {
		return nil, false
	}
	return o.EffectiveCustomDateFormat, true
}

// HasEffectiveCustomDateFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveCustomDateFormat() bool {
	if o != nil && !IsNil(o.EffectiveCustomDateFormat) {
		return true
	}

	return false
}

// SetEffectiveCustomDateFormat gets a reference to the given string and assigns it to the EffectiveCustomDateFormat field.
func (o *LocalePolicy) SetEffectiveCustomDateFormat(v string) {
	o.EffectiveCustomDateFormat = &v
}

// GetEffectiveCustomTimeFormat returns the EffectiveCustomTimeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveCustomTimeFormat() string {
	if o == nil || IsNil(o.EffectiveCustomTimeFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveCustomTimeFormat
}

// GetEffectiveCustomTimeFormatOk returns a tuple with the EffectiveCustomTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveCustomTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCustomTimeFormat) {
		return nil, false
	}
	return o.EffectiveCustomTimeFormat, true
}

// HasEffectiveCustomTimeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveCustomTimeFormat() bool {
	if o != nil && !IsNil(o.EffectiveCustomTimeFormat) {
		return true
	}

	return false
}

// SetEffectiveCustomTimeFormat gets a reference to the given string and assigns it to the EffectiveCustomTimeFormat field.
func (o *LocalePolicy) SetEffectiveCustomTimeFormat(v string) {
	o.EffectiveCustomTimeFormat = &v
}

// GetEffectiveDateFormat returns the EffectiveDateFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveDateFormat() string {
	if o == nil || IsNil(o.EffectiveDateFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveDateFormat
}

// GetEffectiveDateFormatOk returns a tuple with the EffectiveDateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDateFormat) {
		return nil, false
	}
	return o.EffectiveDateFormat, true
}

// HasEffectiveDateFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveDateFormat() bool {
	if o != nil && !IsNil(o.EffectiveDateFormat) {
		return true
	}

	return false
}

// SetEffectiveDateFormat gets a reference to the given string and assigns it to the EffectiveDateFormat field.
func (o *LocalePolicy) SetEffectiveDateFormat(v string) {
	o.EffectiveDateFormat = &v
}

// GetEffectiveInitialFormat returns the EffectiveInitialFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveInitialFormat() string {
	if o == nil || IsNil(o.EffectiveInitialFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveInitialFormat
}

// GetEffectiveInitialFormatOk returns a tuple with the EffectiveInitialFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveInitialFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveInitialFormat) {
		return nil, false
	}
	return o.EffectiveInitialFormat, true
}

// HasEffectiveInitialFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveInitialFormat() bool {
	if o != nil && !IsNil(o.EffectiveInitialFormat) {
		return true
	}

	return false
}

// SetEffectiveInitialFormat gets a reference to the given string and assigns it to the EffectiveInitialFormat field.
func (o *LocalePolicy) SetEffectiveInitialFormat(v string) {
	o.EffectiveInitialFormat = &v
}

// GetEffectiveNameFormat returns the EffectiveNameFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveNameFormat() string {
	if o == nil || IsNil(o.EffectiveNameFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveNameFormat
}

// GetEffectiveNameFormatOk returns a tuple with the EffectiveNameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveNameFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveNameFormat) {
		return nil, false
	}
	return o.EffectiveNameFormat, true
}

// HasEffectiveNameFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveNameFormat() bool {
	if o != nil && !IsNil(o.EffectiveNameFormat) {
		return true
	}

	return false
}

// SetEffectiveNameFormat gets a reference to the given string and assigns it to the EffectiveNameFormat field.
func (o *LocalePolicy) SetEffectiveNameFormat(v string) {
	o.EffectiveNameFormat = &v
}

// GetEffectiveTimeFormat returns the EffectiveTimeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveTimeFormat() string {
	if o == nil || IsNil(o.EffectiveTimeFormat) {
		var ret string
		return ret
	}
	return *o.EffectiveTimeFormat
}

// GetEffectiveTimeFormatOk returns a tuple with the EffectiveTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveTimeFormat) {
		return nil, false
	}
	return o.EffectiveTimeFormat, true
}

// HasEffectiveTimeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveTimeFormat() bool {
	if o != nil && !IsNil(o.EffectiveTimeFormat) {
		return true
	}

	return false
}

// SetEffectiveTimeFormat gets a reference to the given string and assigns it to the EffectiveTimeFormat field.
func (o *LocalePolicy) SetEffectiveTimeFormat(v string) {
	o.EffectiveTimeFormat = &v
}

// GetEffectiveTimeZone returns the EffectiveTimeZone field value if set, zero value otherwise.
func (o *LocalePolicy) GetEffectiveTimeZone() string {
	if o == nil || IsNil(o.EffectiveTimeZone) {
		var ret string
		return ret
	}
	return *o.EffectiveTimeZone
}

// GetEffectiveTimeZoneOk returns a tuple with the EffectiveTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetEffectiveTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveTimeZone) {
		return nil, false
	}
	return o.EffectiveTimeZone, true
}

// HasEffectiveTimeZone returns a boolean if a field has been set.
func (o *LocalePolicy) HasEffectiveTimeZone() bool {
	if o != nil && !IsNil(o.EffectiveTimeZone) {
		return true
	}

	return false
}

// SetEffectiveTimeZone gets a reference to the given string and assigns it to the EffectiveTimeZone field.
func (o *LocalePolicy) SetEffectiveTimeZone(v string) {
	o.EffectiveTimeZone = &v
}

// GetInitialFormat returns the InitialFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetInitialFormat() string {
	if o == nil || IsNil(o.InitialFormat) {
		var ret string
		return ret
	}
	return *o.InitialFormat
}

// GetInitialFormatOk returns a tuple with the InitialFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetInitialFormatOk() (*string, bool) {
	if o == nil || IsNil(o.InitialFormat) {
		return nil, false
	}
	return o.InitialFormat, true
}

// HasInitialFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasInitialFormat() bool {
	if o != nil && !IsNil(o.InitialFormat) {
		return true
	}

	return false
}

// SetInitialFormat gets a reference to the given string and assigns it to the InitialFormat field.
func (o *LocalePolicy) SetInitialFormat(v string) {
	o.InitialFormat = &v
}

// GetInitialFormatMetadata returns the InitialFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetInitialFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.InitialFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.InitialFormatMetadata
}

// GetInitialFormatMetadataOk returns a tuple with the InitialFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetInitialFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.InitialFormatMetadata) {
		return nil, false
	}
	return o.InitialFormatMetadata, true
}

// HasInitialFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasInitialFormatMetadata() bool {
	if o != nil && !IsNil(o.InitialFormatMetadata) {
		return true
	}

	return false
}

// SetInitialFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the InitialFormatMetadata field.
func (o *LocalePolicy) SetInitialFormatMetadata(v SettingsMetadata) {
	o.InitialFormatMetadata = &v
}

// GetNameFormat returns the NameFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetNameFormat() string {
	if o == nil || IsNil(o.NameFormat) {
		var ret string
		return ret
	}
	return *o.NameFormat
}

// GetNameFormatOk returns a tuple with the NameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetNameFormatOk() (*string, bool) {
	if o == nil || IsNil(o.NameFormat) {
		return nil, false
	}
	return o.NameFormat, true
}

// HasNameFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasNameFormat() bool {
	if o != nil && !IsNil(o.NameFormat) {
		return true
	}

	return false
}

// SetNameFormat gets a reference to the given string and assigns it to the NameFormat field.
func (o *LocalePolicy) SetNameFormat(v string) {
	o.NameFormat = &v
}

// GetNameFormatMetadata returns the NameFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetNameFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.NameFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.NameFormatMetadata
}

// GetNameFormatMetadataOk returns a tuple with the NameFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetNameFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.NameFormatMetadata) {
		return nil, false
	}
	return o.NameFormatMetadata, true
}

// HasNameFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasNameFormatMetadata() bool {
	if o != nil && !IsNil(o.NameFormatMetadata) {
		return true
	}

	return false
}

// SetNameFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the NameFormatMetadata field.
func (o *LocalePolicy) SetNameFormatMetadata(v SettingsMetadata) {
	o.NameFormatMetadata = &v
}

// GetSignDateFormat returns the SignDateFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetSignDateFormat() string {
	if o == nil || IsNil(o.SignDateFormat) {
		var ret string
		return ret
	}
	return *o.SignDateFormat
}

// GetSignDateFormatOk returns a tuple with the SignDateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetSignDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.SignDateFormat) {
		return nil, false
	}
	return o.SignDateFormat, true
}

// HasSignDateFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasSignDateFormat() bool {
	if o != nil && !IsNil(o.SignDateFormat) {
		return true
	}

	return false
}

// SetSignDateFormat gets a reference to the given string and assigns it to the SignDateFormat field.
func (o *LocalePolicy) SetSignDateFormat(v string) {
	o.SignDateFormat = &v
}

// GetSignDateFormatMetadata returns the SignDateFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetSignDateFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.SignDateFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.SignDateFormatMetadata
}

// GetSignDateFormatMetadataOk returns a tuple with the SignDateFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetSignDateFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.SignDateFormatMetadata) {
		return nil, false
	}
	return o.SignDateFormatMetadata, true
}

// HasSignDateFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasSignDateFormatMetadata() bool {
	if o != nil && !IsNil(o.SignDateFormatMetadata) {
		return true
	}

	return false
}

// SetSignDateFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the SignDateFormatMetadata field.
func (o *LocalePolicy) SetSignDateFormatMetadata(v SettingsMetadata) {
	o.SignDateFormatMetadata = &v
}

// GetSignTimeFormat returns the SignTimeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetSignTimeFormat() string {
	if o == nil || IsNil(o.SignTimeFormat) {
		var ret string
		return ret
	}
	return *o.SignTimeFormat
}

// GetSignTimeFormatOk returns a tuple with the SignTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetSignTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.SignTimeFormat) {
		return nil, false
	}
	return o.SignTimeFormat, true
}

// HasSignTimeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasSignTimeFormat() bool {
	if o != nil && !IsNil(o.SignTimeFormat) {
		return true
	}

	return false
}

// SetSignTimeFormat gets a reference to the given string and assigns it to the SignTimeFormat field.
func (o *LocalePolicy) SetSignTimeFormat(v string) {
	o.SignTimeFormat = &v
}

// GetSignTimeFormatMetadata returns the SignTimeFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetSignTimeFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.SignTimeFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.SignTimeFormatMetadata
}

// GetSignTimeFormatMetadataOk returns a tuple with the SignTimeFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetSignTimeFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.SignTimeFormatMetadata) {
		return nil, false
	}
	return o.SignTimeFormatMetadata, true
}

// HasSignTimeFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasSignTimeFormatMetadata() bool {
	if o != nil && !IsNil(o.SignTimeFormatMetadata) {
		return true
	}

	return false
}

// SetSignTimeFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the SignTimeFormatMetadata field.
func (o *LocalePolicy) SetSignTimeFormatMetadata(v SettingsMetadata) {
	o.SignTimeFormatMetadata = &v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *LocalePolicy) GetTimeFormat() string {
	if o == nil || IsNil(o.TimeFormat) {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *LocalePolicy) HasTimeFormat() bool {
	if o != nil && !IsNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *LocalePolicy) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

// GetTimeFormatMetadata returns the TimeFormatMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetTimeFormatMetadata() SettingsMetadata {
	if o == nil || IsNil(o.TimeFormatMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.TimeFormatMetadata
}

// GetTimeFormatMetadataOk returns a tuple with the TimeFormatMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetTimeFormatMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.TimeFormatMetadata) {
		return nil, false
	}
	return o.TimeFormatMetadata, true
}

// HasTimeFormatMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasTimeFormatMetadata() bool {
	if o != nil && !IsNil(o.TimeFormatMetadata) {
		return true
	}

	return false
}

// SetTimeFormatMetadata gets a reference to the given SettingsMetadata and assigns it to the TimeFormatMetadata field.
func (o *LocalePolicy) SetTimeFormatMetadata(v SettingsMetadata) {
	o.TimeFormatMetadata = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *LocalePolicy) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *LocalePolicy) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *LocalePolicy) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetTimeZoneMetadata returns the TimeZoneMetadata field value if set, zero value otherwise.
func (o *LocalePolicy) GetTimeZoneMetadata() SettingsMetadata {
	if o == nil || IsNil(o.TimeZoneMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.TimeZoneMetadata
}

// GetTimeZoneMetadataOk returns a tuple with the TimeZoneMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalePolicy) GetTimeZoneMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.TimeZoneMetadata) {
		return nil, false
	}
	return o.TimeZoneMetadata, true
}

// HasTimeZoneMetadata returns a boolean if a field has been set.
func (o *LocalePolicy) HasTimeZoneMetadata() bool {
	if o != nil && !IsNil(o.TimeZoneMetadata) {
		return true
	}

	return false
}

// SetTimeZoneMetadata gets a reference to the given SettingsMetadata and assigns it to the TimeZoneMetadata field.
func (o *LocalePolicy) SetTimeZoneMetadata(v SettingsMetadata) {
	o.TimeZoneMetadata = &v
}

func (o LocalePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressFormat) {
		toSerialize["addressFormat"] = o.AddressFormat
	}
	if !IsNil(o.AddressFormatMetadata) {
		toSerialize["addressFormatMetadata"] = o.AddressFormatMetadata
	}
	if !IsNil(o.AllowRegion) {
		toSerialize["allowRegion"] = o.AllowRegion
	}
	if !IsNil(o.CalendarType) {
		toSerialize["calendarType"] = o.CalendarType
	}
	if !IsNil(o.CalendarTypeMetadata) {
		toSerialize["calendarTypeMetadata"] = o.CalendarTypeMetadata
	}
	if !IsNil(o.CultureName) {
		toSerialize["cultureName"] = o.CultureName
	}
	if !IsNil(o.CultureNameMetadata) {
		toSerialize["cultureNameMetadata"] = o.CultureNameMetadata
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyCodeMetadata) {
		toSerialize["currencyCodeMetadata"] = o.CurrencyCodeMetadata
	}
	if !IsNil(o.CurrencyNegativeFormat) {
		toSerialize["currencyNegativeFormat"] = o.CurrencyNegativeFormat
	}
	if !IsNil(o.CurrencyNegativeFormatMetadata) {
		toSerialize["currencyNegativeFormatMetadata"] = o.CurrencyNegativeFormatMetadata
	}
	if !IsNil(o.CurrencyPositiveFormat) {
		toSerialize["currencyPositiveFormat"] = o.CurrencyPositiveFormat
	}
	if !IsNil(o.CurrencyPositiveFormatMetadata) {
		toSerialize["currencyPositiveFormatMetadata"] = o.CurrencyPositiveFormatMetadata
	}
	if !IsNil(o.CustomDateFormat) {
		toSerialize["customDateFormat"] = o.CustomDateFormat
	}
	if !IsNil(o.CustomSignDateFormat) {
		toSerialize["customSignDateFormat"] = o.CustomSignDateFormat
	}
	if !IsNil(o.CustomSignTimeFormat) {
		toSerialize["customSignTimeFormat"] = o.CustomSignTimeFormat
	}
	if !IsNil(o.CustomTimeFormat) {
		toSerialize["customTimeFormat"] = o.CustomTimeFormat
	}
	if !IsNil(o.DateFormat) {
		toSerialize["dateFormat"] = o.DateFormat
	}
	if !IsNil(o.DateFormatMetadata) {
		toSerialize["dateFormatMetadata"] = o.DateFormatMetadata
	}
	if !IsNil(o.EffectiveAddressFormat) {
		toSerialize["effectiveAddressFormat"] = o.EffectiveAddressFormat
	}
	if !IsNil(o.EffectiveCalendarType) {
		toSerialize["effectiveCalendarType"] = o.EffectiveCalendarType
	}
	if !IsNil(o.EffectiveCurrencyCode) {
		toSerialize["effectiveCurrencyCode"] = o.EffectiveCurrencyCode
	}
	if !IsNil(o.EffectiveCurrencyNegativeFormat) {
		toSerialize["effectiveCurrencyNegativeFormat"] = o.EffectiveCurrencyNegativeFormat
	}
	if !IsNil(o.EffectiveCurrencyPositiveFormat) {
		toSerialize["effectiveCurrencyPositiveFormat"] = o.EffectiveCurrencyPositiveFormat
	}
	if !IsNil(o.EffectiveCustomDateFormat) {
		toSerialize["effectiveCustomDateFormat"] = o.EffectiveCustomDateFormat
	}
	if !IsNil(o.EffectiveCustomTimeFormat) {
		toSerialize["effectiveCustomTimeFormat"] = o.EffectiveCustomTimeFormat
	}
	if !IsNil(o.EffectiveDateFormat) {
		toSerialize["effectiveDateFormat"] = o.EffectiveDateFormat
	}
	if !IsNil(o.EffectiveInitialFormat) {
		toSerialize["effectiveInitialFormat"] = o.EffectiveInitialFormat
	}
	if !IsNil(o.EffectiveNameFormat) {
		toSerialize["effectiveNameFormat"] = o.EffectiveNameFormat
	}
	if !IsNil(o.EffectiveTimeFormat) {
		toSerialize["effectiveTimeFormat"] = o.EffectiveTimeFormat
	}
	if !IsNil(o.EffectiveTimeZone) {
		toSerialize["effectiveTimeZone"] = o.EffectiveTimeZone
	}
	if !IsNil(o.InitialFormat) {
		toSerialize["initialFormat"] = o.InitialFormat
	}
	if !IsNil(o.InitialFormatMetadata) {
		toSerialize["initialFormatMetadata"] = o.InitialFormatMetadata
	}
	if !IsNil(o.NameFormat) {
		toSerialize["nameFormat"] = o.NameFormat
	}
	if !IsNil(o.NameFormatMetadata) {
		toSerialize["nameFormatMetadata"] = o.NameFormatMetadata
	}
	if !IsNil(o.SignDateFormat) {
		toSerialize["signDateFormat"] = o.SignDateFormat
	}
	if !IsNil(o.SignDateFormatMetadata) {
		toSerialize["signDateFormatMetadata"] = o.SignDateFormatMetadata
	}
	if !IsNil(o.SignTimeFormat) {
		toSerialize["signTimeFormat"] = o.SignTimeFormat
	}
	if !IsNil(o.SignTimeFormatMetadata) {
		toSerialize["signTimeFormatMetadata"] = o.SignTimeFormatMetadata
	}
	if !IsNil(o.TimeFormat) {
		toSerialize["timeFormat"] = o.TimeFormat
	}
	if !IsNil(o.TimeFormatMetadata) {
		toSerialize["timeFormatMetadata"] = o.TimeFormatMetadata
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.TimeZoneMetadata) {
		toSerialize["timeZoneMetadata"] = o.TimeZoneMetadata
	}
	return toSerialize, nil
}

type NullableLocalePolicy struct {
	value *LocalePolicy
	isSet bool
}

func (v NullableLocalePolicy) Get() *LocalePolicy {
	return v.value
}

func (v *NullableLocalePolicy) Set(val *LocalePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalePolicy(val *LocalePolicy) *NullableLocalePolicy {
	return &NullableLocalePolicy{value: val, isSet: true}
}

func (v NullableLocalePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


