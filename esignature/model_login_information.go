/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LoginInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginInformation{}

// LoginInformation 
type LoginInformation struct {
	// Contains a token that can be used for authentication in API calls instead of using the user name and password. Only returned if the `api_password=true` query string is added to the URL.
	ApiPassword *string `json:"apiPassword,omitempty"`
	// The list of accounts that authenticating user is a member of.
	LoginAccounts []LoginAccount `json:"loginAccounts,omitempty"`
}

// NewLoginInformation instantiates a new LoginInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginInformation() *LoginInformation {
	this := LoginInformation{}
	return &this
}

// NewLoginInformationWithDefaults instantiates a new LoginInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginInformationWithDefaults() *LoginInformation {
	this := LoginInformation{}
	return &this
}

// GetApiPassword returns the ApiPassword field value if set, zero value otherwise.
func (o *LoginInformation) GetApiPassword() string {
	if o == nil || IsNil(o.ApiPassword) {
		var ret string
		return ret
	}
	return *o.ApiPassword
}

// GetApiPasswordOk returns a tuple with the ApiPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginInformation) GetApiPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ApiPassword) {
		return nil, false
	}
	return o.ApiPassword, true
}

// HasApiPassword returns a boolean if a field has been set.
func (o *LoginInformation) HasApiPassword() bool {
	if o != nil && !IsNil(o.ApiPassword) {
		return true
	}

	return false
}

// SetApiPassword gets a reference to the given string and assigns it to the ApiPassword field.
func (o *LoginInformation) SetApiPassword(v string) {
	o.ApiPassword = &v
}

// GetLoginAccounts returns the LoginAccounts field value if set, zero value otherwise.
func (o *LoginInformation) GetLoginAccounts() []LoginAccount {
	if o == nil || IsNil(o.LoginAccounts) {
		var ret []LoginAccount
		return ret
	}
	return o.LoginAccounts
}

// GetLoginAccountsOk returns a tuple with the LoginAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginInformation) GetLoginAccountsOk() ([]LoginAccount, bool) {
	if o == nil || IsNil(o.LoginAccounts) {
		return nil, false
	}
	return o.LoginAccounts, true
}

// HasLoginAccounts returns a boolean if a field has been set.
func (o *LoginInformation) HasLoginAccounts() bool {
	if o != nil && !IsNil(o.LoginAccounts) {
		return true
	}

	return false
}

// SetLoginAccounts gets a reference to the given []LoginAccount and assigns it to the LoginAccounts field.
func (o *LoginInformation) SetLoginAccounts(v []LoginAccount) {
	o.LoginAccounts = v
}

func (o LoginInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiPassword) {
		toSerialize["apiPassword"] = o.ApiPassword
	}
	if !IsNil(o.LoginAccounts) {
		toSerialize["loginAccounts"] = o.LoginAccounts
	}
	return toSerialize, nil
}

type NullableLoginInformation struct {
	value *LoginInformation
	isSet bool
}

func (v NullableLoginInformation) Get() *LoginInformation {
	return v.value
}

func (v *NullableLoginInformation) Set(val *LoginInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginInformation(val *LoginInformation) *NullableLoginInformation {
	return &NullableLoginInformation{value: val, isSet: true}
}

func (v NullableLoginInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


