/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Envelopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Envelopes{}

// Envelopes Envelope creation, management
type Envelopes struct {
	// Reserved for DocuSign.
	AccessControlListBase64 *string `json:"accessControlListBase64,omitempty"`
	// When **true,** users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document.
	AllowComments *string `json:"allowComments,omitempty"`
	// When **true,** the Document Markup feature is enabled.  **Note:**  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting at the account level. 
	AllowMarkup *string `json:"allowMarkup,omitempty"`
	// When **true,** the recipient can redirect an envelope to a more appropriate recipient.
	AllowReassign *string `json:"allowReassign,omitempty"`
	// When **true,** recipients can view the history of the envelope.
	AllowViewHistory *string `json:"allowViewHistory,omitempty"`
	// Deprecated. This feature has been replaced by signing groups.
	AnySigner *string `json:"anySigner,omitempty"`
	// When **true,** the envelope is queued for processing and the value of the `status` property is set to `Processing`. Additionally, GET status calls return `Processing` until completed.   **Note:** A `transactionId` is required for this call to work correctly. When the envelope is created, the status is `Processing` and an `envelopeId` is not returned in the response. To get the `envelopeId`, use a GET envelope query by using the [transactionId](/docs/esign-rest-api/reference/envelopes/envelopes/create/) or by checking the Connect notification.
	Asynchronous *string `json:"asynchronous,omitempty"`
	// Contains a URL for retrieving the attachments that are associated with the envelope.
	AttachmentsUri *string `json:"attachmentsUri,omitempty"`
	// When **true,** marks all of the documents in the envelope as authoritative copies.  **Note:** You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false.**
	AuthoritativeCopy *string `json:"authoritativeCopy,omitempty"`
	// The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set. If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
	AuthoritativeCopyDefault *string `json:"authoritativeCopyDefault,omitempty"`
	// When **true,** autonavigation is set for the recipient. 
	AutoNavigation *string `json:"autoNavigation,omitempty"`
	// The ID of the brand.
	BrandId *string `json:"brandId,omitempty"`
	// When **true,** the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
	BrandLock *string `json:"brandLock,omitempty"`
	// 
	BurnDefaultTabData *string `json:"burnDefaultTabData,omitempty"`
	// The URI for retrieving certificate information.
	CertificateUri *string `json:"certificateUri,omitempty"`
	// Specifies the date and time this item was completed.
	CompletedDateTime *string `json:"completedDateTime,omitempty"`
	// 
	CopyRecipientData *string `json:"copyRecipientData,omitempty"`
	// The UTC DateTime when the item was created.
	CreatedDateTime *string `json:"createdDateTime,omitempty"`
	CustomFields *AccountCustomFields `json:"customFields,omitempty"`
	// The URI for retrieving custom fields.
	CustomFieldsUri *string `json:"customFieldsUri,omitempty"`
	// The date and time the recipient declined the document. This property is read-only.
	DeclinedDateTime *string `json:"declinedDateTime,omitempty"`
	// Reserved for DocuSign.
	DeletedDateTime *string `json:"deletedDateTime,omitempty"`
	// The date and time that the envelope was delivered to the recipient. This property is read-only.
	DeliveredDateTime *string `json:"deliveredDateTime,omitempty"`
	// When **true,** responsive documents are disabled for the envelope.
	DisableResponsiveDocument *string `json:"disableResponsiveDocument,omitempty"`
	// The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.
	DocumentBase64 *string `json:"documentBase64,omitempty"`
	// The URI for retrieving all of the documents associated with the envelope as a single PDF file.
	DocumentsCombinedUri *string `json:"documentsCombinedUri,omitempty"`
	// The URI for retrieving all of the documents associated with the envelope as separate files.
	DocumentsUri *string `json:"documentsUri,omitempty"`
	// This is the same as the email body. If specified it is included in the email body for all envelope recipients.
	EmailBlurb *string `json:"emailBlurb,omitempty"`
	EmailSettings *EmailSettings `json:"emailSettings,omitempty"`
	// The subject line of the email message that is sent to all recipients.  For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/#template-email-subject-merge-fields).  **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters. 
	EmailSubject *string `json:"emailSubject,omitempty"`
	// When **true,** the signer is allowed to print the document and sign it on paper.
	EnableWetSign *string `json:"enableWetSign,omitempty"`
	// When **true,** signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.  **Note:** To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true.**  [docviz]: /docs/esign-rest-api/reference/envelopes/envelopedocumentvisibility/
	EnforceSignerVisibility *string `json:"enforceSignerVisibility,omitempty"`
	// An array of attachment objects that provide information about the attachments that are associated with the envelope.
	EnvelopeAttachments []Attachment `json:"envelopeAttachments,omitempty"`
	EnvelopeCustomMetadata *EnvelopeCustomMetadata `json:"envelopeCustomMetadata,omitempty"`
	// An array containing information about the documents that are included in the envelope.
	EnvelopeDocuments []EnvelopeDocument `json:"envelopeDocuments,omitempty"`
	// The envelope ID of the envelope status that failed to post.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// When **true,** [Envelope ID Stamping](https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=tfm1578456367923.html) is enabled. After a document or attachment is stamped with an Envelope ID, the ID is seen by all recipients and becomes a permanent part of the document and cannot be removed.
	EnvelopeIdStamping *string `json:"envelopeIdStamping,omitempty"`
	// Reserved for DocuSign.
	EnvelopeLocation *string `json:"envelopeLocation,omitempty"`
	EnvelopeMetadata *EnvelopeMetadata `json:"envelopeMetadata,omitempty"`
	// The URI for retrieving the envelope or envelopes.
	EnvelopeUri *string `json:"envelopeUri,omitempty"`
	// Not used. Use the [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations) property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead.
	ExpireAfter *string `json:"expireAfter,omitempty"`
	// Not used. Use the [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations) property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead.
	ExpireDateTime *string `json:"expireDateTime,omitempty"`
	// Not used. Use the [`expirations`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification_expirations) property in the [`notification`](/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition_notification) object instead.
	ExpireEnabled *string `json:"expireEnabled,omitempty"`
	// May contain an external identifier for the envelope.
	ExternalEnvelopeId *string `json:"externalEnvelopeId,omitempty"`
	// A list of folder objects.
	Folders []Folder `json:"folders,omitempty"`
	// When **true,** indicates that users have added comments to the envelope.
	HasComments *string `json:"hasComments,omitempty"`
	// Specifies if the `EnvelopeFormData` associated with any forms in the envelope has changed.
	HasFormDataChanged *string `json:"hasFormDataChanged,omitempty"`
	// When **true,** indicates that a .wav file used for voice authentication is included in the envelope. 
	HasWavFile *string `json:"hasWavFile,omitempty"`
	// Reserved for DocuSign.
	Holder *string `json:"holder,omitempty"`
	// The date and time the envelope was initially sent.
	InitialSentDateTime *string `json:"initialSentDateTime,omitempty"`
	// When **true,** indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
	Is21CFRPart11 *string `json:"is21CFRPart11,omitempty"`
	// When **true,** indicates that the envelope is a dynamic envelope.
	IsDynamicEnvelope *string `json:"isDynamicEnvelope,omitempty"`
	// When **true,** indicates that the envelope is a signature-provided envelope.
	IsSignatureProviderEnvelope *string `json:"isSignatureProviderEnvelope,omitempty"`
	// The date and time that the item was last modified.
	LastModifiedDateTime *string `json:"lastModifiedDateTime,omitempty"`
	// Reserved for DocuSign.
	Location *string `json:"location,omitempty"`
	LockInformation *EnvelopeLocks `json:"lockInformation,omitempty"`
	// When **true,** prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope.   Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes.   However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
	MessageLock *string `json:"messageLock,omitempty"`
	Notification *Notification `json:"notification,omitempty"`
	// The URI for retrieving notifications.
	NotificationUri *string `json:"notificationUri,omitempty"`
	PowerForm *PowerForm `json:"powerForm,omitempty"`
	// The date that a purge was completed.
	PurgeCompletedDate *string `json:"purgeCompletedDate,omitempty"`
	// The date that a purge was requested.
	PurgeRequestDate *string `json:"purgeRequestDate,omitempty"`
	// Shows the current purge state for the envelope. Valid values:  - `unpurged`: There has been no successful request to purge documents. - `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged. - `documents_dequeued`: The envelope documents have been taken out of the purge queue. - `documents_purged`: The envelope documents have been successfully purged. - `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged. - `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged. - `documents_and_metadata_and_redact_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged, nor has personal information been redacted. - `documents_and_metadata_and_redact_purged`: The envelope documents and metadata have been successfully purged, and personal information has been redacted.  **Related topics**  - [Purging documents (eSingature Concepts)](/docs/esign-rest-api/esign101/concepts/documents/purging/) - [Purging documents in an envelope (blog post)](https://www.docusign.com/blog/developers/purging-documents-envelope)  
	PurgeState *string `json:"purgeState,omitempty"`
	Recipients *EnvelopeRecipients `json:"recipients,omitempty"`
	// When **true,** prevents senders from changing, correcting, or deleting the recipient information for the envelope.
	RecipientsLock *string `json:"recipientsLock,omitempty"`
	// Contains a URI for an endpoint that you can use to retrieve the recipients.
	RecipientsUri *string `json:"recipientsUri,omitempty"`
	Sender *UserInfo `json:"sender,omitempty"`
	// The UTC DateTime when the envelope was sent. This property is read-only.
	SentDateTime *string `json:"sentDateTime,omitempty"`
	// When **true,** recipients can sign on a mobile device.  **Note:** Only Admin users can change this setting. 
	SignerCanSignOnMobile *string `json:"signerCanSignOnMobile,omitempty"`
	// Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
	SigningLocation *string `json:"signingLocation,omitempty"`
	// * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in. * `created`: The envelope is created as a draft. It can be modified and sent later. * `declined`: The envelope has been declined by the recipients. * `delivered`: The envelope has been delivered to the recipients. * `sent`: The envelope will be sent to the recipients after the envelope is created. * `signed`: The envelope has been signed by the recipients. * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope. 
	Status *string `json:"status,omitempty"`
	// The data and time that the status changed.
	StatusChangedDateTime *string `json:"statusChangedDateTime,omitempty"`
	// The DateTime that the envelope changed status (i.e. was created or sent.)
	StatusDateTime *string `json:"statusDateTime,omitempty"`
	// The URI for retrieving the templates.
	TemplatesUri *string `json:"templatesUri,omitempty"`
	//  Used to identify an envelope. The ID is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
	TransactionId *string `json:"transactionId,omitempty"`
	// When **true,** the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When **false,** the Electronic Record and Signature Disclosure is not shown to any envelope recipients.   If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
	UseDisclosure *string `json:"useDisclosure,omitempty"`
	// The date and time the envelope or template was voided.
	VoidedDateTime *string `json:"voidedDateTime,omitempty"`
	// The reason the envelope or template was voided.  **Note:** The string is truncated to the first 200 characters. 
	VoidedReason *string `json:"voidedReason,omitempty"`
	Workflow *Workflow `json:"workflow,omitempty"`
}

// NewEnvelopes instantiates a new Envelopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopes() *Envelopes {
	this := Envelopes{}
	return &this
}

// NewEnvelopesWithDefaults instantiates a new Envelopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopesWithDefaults() *Envelopes {
	this := Envelopes{}
	return &this
}

// GetAccessControlListBase64 returns the AccessControlListBase64 field value if set, zero value otherwise.
func (o *Envelopes) GetAccessControlListBase64() string {
	if o == nil || IsNil(o.AccessControlListBase64) {
		var ret string
		return ret
	}
	return *o.AccessControlListBase64
}

// GetAccessControlListBase64Ok returns a tuple with the AccessControlListBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAccessControlListBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.AccessControlListBase64) {
		return nil, false
	}
	return o.AccessControlListBase64, true
}

// HasAccessControlListBase64 returns a boolean if a field has been set.
func (o *Envelopes) HasAccessControlListBase64() bool {
	if o != nil && !IsNil(o.AccessControlListBase64) {
		return true
	}

	return false
}

// SetAccessControlListBase64 gets a reference to the given string and assigns it to the AccessControlListBase64 field.
func (o *Envelopes) SetAccessControlListBase64(v string) {
	o.AccessControlListBase64 = &v
}

// GetAllowComments returns the AllowComments field value if set, zero value otherwise.
func (o *Envelopes) GetAllowComments() string {
	if o == nil || IsNil(o.AllowComments) {
		var ret string
		return ret
	}
	return *o.AllowComments
}

// GetAllowCommentsOk returns a tuple with the AllowComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAllowCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.AllowComments) {
		return nil, false
	}
	return o.AllowComments, true
}

// HasAllowComments returns a boolean if a field has been set.
func (o *Envelopes) HasAllowComments() bool {
	if o != nil && !IsNil(o.AllowComments) {
		return true
	}

	return false
}

// SetAllowComments gets a reference to the given string and assigns it to the AllowComments field.
func (o *Envelopes) SetAllowComments(v string) {
	o.AllowComments = &v
}

// GetAllowMarkup returns the AllowMarkup field value if set, zero value otherwise.
func (o *Envelopes) GetAllowMarkup() string {
	if o == nil || IsNil(o.AllowMarkup) {
		var ret string
		return ret
	}
	return *o.AllowMarkup
}

// GetAllowMarkupOk returns a tuple with the AllowMarkup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAllowMarkupOk() (*string, bool) {
	if o == nil || IsNil(o.AllowMarkup) {
		return nil, false
	}
	return o.AllowMarkup, true
}

// HasAllowMarkup returns a boolean if a field has been set.
func (o *Envelopes) HasAllowMarkup() bool {
	if o != nil && !IsNil(o.AllowMarkup) {
		return true
	}

	return false
}

// SetAllowMarkup gets a reference to the given string and assigns it to the AllowMarkup field.
func (o *Envelopes) SetAllowMarkup(v string) {
	o.AllowMarkup = &v
}

// GetAllowReassign returns the AllowReassign field value if set, zero value otherwise.
func (o *Envelopes) GetAllowReassign() string {
	if o == nil || IsNil(o.AllowReassign) {
		var ret string
		return ret
	}
	return *o.AllowReassign
}

// GetAllowReassignOk returns a tuple with the AllowReassign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAllowReassignOk() (*string, bool) {
	if o == nil || IsNil(o.AllowReassign) {
		return nil, false
	}
	return o.AllowReassign, true
}

// HasAllowReassign returns a boolean if a field has been set.
func (o *Envelopes) HasAllowReassign() bool {
	if o != nil && !IsNil(o.AllowReassign) {
		return true
	}

	return false
}

// SetAllowReassign gets a reference to the given string and assigns it to the AllowReassign field.
func (o *Envelopes) SetAllowReassign(v string) {
	o.AllowReassign = &v
}

// GetAllowViewHistory returns the AllowViewHistory field value if set, zero value otherwise.
func (o *Envelopes) GetAllowViewHistory() string {
	if o == nil || IsNil(o.AllowViewHistory) {
		var ret string
		return ret
	}
	return *o.AllowViewHistory
}

// GetAllowViewHistoryOk returns a tuple with the AllowViewHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAllowViewHistoryOk() (*string, bool) {
	if o == nil || IsNil(o.AllowViewHistory) {
		return nil, false
	}
	return o.AllowViewHistory, true
}

// HasAllowViewHistory returns a boolean if a field has been set.
func (o *Envelopes) HasAllowViewHistory() bool {
	if o != nil && !IsNil(o.AllowViewHistory) {
		return true
	}

	return false
}

// SetAllowViewHistory gets a reference to the given string and assigns it to the AllowViewHistory field.
func (o *Envelopes) SetAllowViewHistory(v string) {
	o.AllowViewHistory = &v
}

// GetAnySigner returns the AnySigner field value if set, zero value otherwise.
func (o *Envelopes) GetAnySigner() string {
	if o == nil || IsNil(o.AnySigner) {
		var ret string
		return ret
	}
	return *o.AnySigner
}

// GetAnySignerOk returns a tuple with the AnySigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAnySignerOk() (*string, bool) {
	if o == nil || IsNil(o.AnySigner) {
		return nil, false
	}
	return o.AnySigner, true
}

// HasAnySigner returns a boolean if a field has been set.
func (o *Envelopes) HasAnySigner() bool {
	if o != nil && !IsNil(o.AnySigner) {
		return true
	}

	return false
}

// SetAnySigner gets a reference to the given string and assigns it to the AnySigner field.
func (o *Envelopes) SetAnySigner(v string) {
	o.AnySigner = &v
}

// GetAsynchronous returns the Asynchronous field value if set, zero value otherwise.
func (o *Envelopes) GetAsynchronous() string {
	if o == nil || IsNil(o.Asynchronous) {
		var ret string
		return ret
	}
	return *o.Asynchronous
}

// GetAsynchronousOk returns a tuple with the Asynchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAsynchronousOk() (*string, bool) {
	if o == nil || IsNil(o.Asynchronous) {
		return nil, false
	}
	return o.Asynchronous, true
}

// HasAsynchronous returns a boolean if a field has been set.
func (o *Envelopes) HasAsynchronous() bool {
	if o != nil && !IsNil(o.Asynchronous) {
		return true
	}

	return false
}

// SetAsynchronous gets a reference to the given string and assigns it to the Asynchronous field.
func (o *Envelopes) SetAsynchronous(v string) {
	o.Asynchronous = &v
}

// GetAttachmentsUri returns the AttachmentsUri field value if set, zero value otherwise.
func (o *Envelopes) GetAttachmentsUri() string {
	if o == nil || IsNil(o.AttachmentsUri) {
		var ret string
		return ret
	}
	return *o.AttachmentsUri
}

// GetAttachmentsUriOk returns a tuple with the AttachmentsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAttachmentsUriOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentsUri) {
		return nil, false
	}
	return o.AttachmentsUri, true
}

// HasAttachmentsUri returns a boolean if a field has been set.
func (o *Envelopes) HasAttachmentsUri() bool {
	if o != nil && !IsNil(o.AttachmentsUri) {
		return true
	}

	return false
}

// SetAttachmentsUri gets a reference to the given string and assigns it to the AttachmentsUri field.
func (o *Envelopes) SetAttachmentsUri(v string) {
	o.AttachmentsUri = &v
}

// GetAuthoritativeCopy returns the AuthoritativeCopy field value if set, zero value otherwise.
func (o *Envelopes) GetAuthoritativeCopy() string {
	if o == nil || IsNil(o.AuthoritativeCopy) {
		var ret string
		return ret
	}
	return *o.AuthoritativeCopy
}

// GetAuthoritativeCopyOk returns a tuple with the AuthoritativeCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAuthoritativeCopyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthoritativeCopy) {
		return nil, false
	}
	return o.AuthoritativeCopy, true
}

// HasAuthoritativeCopy returns a boolean if a field has been set.
func (o *Envelopes) HasAuthoritativeCopy() bool {
	if o != nil && !IsNil(o.AuthoritativeCopy) {
		return true
	}

	return false
}

// SetAuthoritativeCopy gets a reference to the given string and assigns it to the AuthoritativeCopy field.
func (o *Envelopes) SetAuthoritativeCopy(v string) {
	o.AuthoritativeCopy = &v
}

// GetAuthoritativeCopyDefault returns the AuthoritativeCopyDefault field value if set, zero value otherwise.
func (o *Envelopes) GetAuthoritativeCopyDefault() string {
	if o == nil || IsNil(o.AuthoritativeCopyDefault) {
		var ret string
		return ret
	}
	return *o.AuthoritativeCopyDefault
}

// GetAuthoritativeCopyDefaultOk returns a tuple with the AuthoritativeCopyDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAuthoritativeCopyDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.AuthoritativeCopyDefault) {
		return nil, false
	}
	return o.AuthoritativeCopyDefault, true
}

// HasAuthoritativeCopyDefault returns a boolean if a field has been set.
func (o *Envelopes) HasAuthoritativeCopyDefault() bool {
	if o != nil && !IsNil(o.AuthoritativeCopyDefault) {
		return true
	}

	return false
}

// SetAuthoritativeCopyDefault gets a reference to the given string and assigns it to the AuthoritativeCopyDefault field.
func (o *Envelopes) SetAuthoritativeCopyDefault(v string) {
	o.AuthoritativeCopyDefault = &v
}

// GetAutoNavigation returns the AutoNavigation field value if set, zero value otherwise.
func (o *Envelopes) GetAutoNavigation() string {
	if o == nil || IsNil(o.AutoNavigation) {
		var ret string
		return ret
	}
	return *o.AutoNavigation
}

// GetAutoNavigationOk returns a tuple with the AutoNavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetAutoNavigationOk() (*string, bool) {
	if o == nil || IsNil(o.AutoNavigation) {
		return nil, false
	}
	return o.AutoNavigation, true
}

// HasAutoNavigation returns a boolean if a field has been set.
func (o *Envelopes) HasAutoNavigation() bool {
	if o != nil && !IsNil(o.AutoNavigation) {
		return true
	}

	return false
}

// SetAutoNavigation gets a reference to the given string and assigns it to the AutoNavigation field.
func (o *Envelopes) SetAutoNavigation(v string) {
	o.AutoNavigation = &v
}

// GetBrandId returns the BrandId field value if set, zero value otherwise.
func (o *Envelopes) GetBrandId() string {
	if o == nil || IsNil(o.BrandId) {
		var ret string
		return ret
	}
	return *o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetBrandIdOk() (*string, bool) {
	if o == nil || IsNil(o.BrandId) {
		return nil, false
	}
	return o.BrandId, true
}

// HasBrandId returns a boolean if a field has been set.
func (o *Envelopes) HasBrandId() bool {
	if o != nil && !IsNil(o.BrandId) {
		return true
	}

	return false
}

// SetBrandId gets a reference to the given string and assigns it to the BrandId field.
func (o *Envelopes) SetBrandId(v string) {
	o.BrandId = &v
}

// GetBrandLock returns the BrandLock field value if set, zero value otherwise.
func (o *Envelopes) GetBrandLock() string {
	if o == nil || IsNil(o.BrandLock) {
		var ret string
		return ret
	}
	return *o.BrandLock
}

// GetBrandLockOk returns a tuple with the BrandLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetBrandLockOk() (*string, bool) {
	if o == nil || IsNil(o.BrandLock) {
		return nil, false
	}
	return o.BrandLock, true
}

// HasBrandLock returns a boolean if a field has been set.
func (o *Envelopes) HasBrandLock() bool {
	if o != nil && !IsNil(o.BrandLock) {
		return true
	}

	return false
}

// SetBrandLock gets a reference to the given string and assigns it to the BrandLock field.
func (o *Envelopes) SetBrandLock(v string) {
	o.BrandLock = &v
}

// GetBurnDefaultTabData returns the BurnDefaultTabData field value if set, zero value otherwise.
func (o *Envelopes) GetBurnDefaultTabData() string {
	if o == nil || IsNil(o.BurnDefaultTabData) {
		var ret string
		return ret
	}
	return *o.BurnDefaultTabData
}

// GetBurnDefaultTabDataOk returns a tuple with the BurnDefaultTabData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetBurnDefaultTabDataOk() (*string, bool) {
	if o == nil || IsNil(o.BurnDefaultTabData) {
		return nil, false
	}
	return o.BurnDefaultTabData, true
}

// HasBurnDefaultTabData returns a boolean if a field has been set.
func (o *Envelopes) HasBurnDefaultTabData() bool {
	if o != nil && !IsNil(o.BurnDefaultTabData) {
		return true
	}

	return false
}

// SetBurnDefaultTabData gets a reference to the given string and assigns it to the BurnDefaultTabData field.
func (o *Envelopes) SetBurnDefaultTabData(v string) {
	o.BurnDefaultTabData = &v
}

// GetCertificateUri returns the CertificateUri field value if set, zero value otherwise.
func (o *Envelopes) GetCertificateUri() string {
	if o == nil || IsNil(o.CertificateUri) {
		var ret string
		return ret
	}
	return *o.CertificateUri
}

// GetCertificateUriOk returns a tuple with the CertificateUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetCertificateUriOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateUri) {
		return nil, false
	}
	return o.CertificateUri, true
}

// HasCertificateUri returns a boolean if a field has been set.
func (o *Envelopes) HasCertificateUri() bool {
	if o != nil && !IsNil(o.CertificateUri) {
		return true
	}

	return false
}

// SetCertificateUri gets a reference to the given string and assigns it to the CertificateUri field.
func (o *Envelopes) SetCertificateUri(v string) {
	o.CertificateUri = &v
}

// GetCompletedDateTime returns the CompletedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetCompletedDateTime() string {
	if o == nil || IsNil(o.CompletedDateTime) {
		var ret string
		return ret
	}
	return *o.CompletedDateTime
}

// GetCompletedDateTimeOk returns a tuple with the CompletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetCompletedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDateTime) {
		return nil, false
	}
	return o.CompletedDateTime, true
}

// HasCompletedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasCompletedDateTime() bool {
	if o != nil && !IsNil(o.CompletedDateTime) {
		return true
	}

	return false
}

// SetCompletedDateTime gets a reference to the given string and assigns it to the CompletedDateTime field.
func (o *Envelopes) SetCompletedDateTime(v string) {
	o.CompletedDateTime = &v
}

// GetCopyRecipientData returns the CopyRecipientData field value if set, zero value otherwise.
func (o *Envelopes) GetCopyRecipientData() string {
	if o == nil || IsNil(o.CopyRecipientData) {
		var ret string
		return ret
	}
	return *o.CopyRecipientData
}

// GetCopyRecipientDataOk returns a tuple with the CopyRecipientData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetCopyRecipientDataOk() (*string, bool) {
	if o == nil || IsNil(o.CopyRecipientData) {
		return nil, false
	}
	return o.CopyRecipientData, true
}

// HasCopyRecipientData returns a boolean if a field has been set.
func (o *Envelopes) HasCopyRecipientData() bool {
	if o != nil && !IsNil(o.CopyRecipientData) {
		return true
	}

	return false
}

// SetCopyRecipientData gets a reference to the given string and assigns it to the CopyRecipientData field.
func (o *Envelopes) SetCopyRecipientData(v string) {
	o.CopyRecipientData = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetCreatedDateTime() string {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret string
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetCreatedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given string and assigns it to the CreatedDateTime field.
func (o *Envelopes) SetCreatedDateTime(v string) {
	o.CreatedDateTime = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Envelopes) GetCustomFields() AccountCustomFields {
	if o == nil || IsNil(o.CustomFields) {
		var ret AccountCustomFields
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetCustomFieldsOk() (*AccountCustomFields, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Envelopes) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given AccountCustomFields and assigns it to the CustomFields field.
func (o *Envelopes) SetCustomFields(v AccountCustomFields) {
	o.CustomFields = &v
}

// GetCustomFieldsUri returns the CustomFieldsUri field value if set, zero value otherwise.
func (o *Envelopes) GetCustomFieldsUri() string {
	if o == nil || IsNil(o.CustomFieldsUri) {
		var ret string
		return ret
	}
	return *o.CustomFieldsUri
}

// GetCustomFieldsUriOk returns a tuple with the CustomFieldsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetCustomFieldsUriOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFieldsUri) {
		return nil, false
	}
	return o.CustomFieldsUri, true
}

// HasCustomFieldsUri returns a boolean if a field has been set.
func (o *Envelopes) HasCustomFieldsUri() bool {
	if o != nil && !IsNil(o.CustomFieldsUri) {
		return true
	}

	return false
}

// SetCustomFieldsUri gets a reference to the given string and assigns it to the CustomFieldsUri field.
func (o *Envelopes) SetCustomFieldsUri(v string) {
	o.CustomFieldsUri = &v
}

// GetDeclinedDateTime returns the DeclinedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetDeclinedDateTime() string {
	if o == nil || IsNil(o.DeclinedDateTime) {
		var ret string
		return ret
	}
	return *o.DeclinedDateTime
}

// GetDeclinedDateTimeOk returns a tuple with the DeclinedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDeclinedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DeclinedDateTime) {
		return nil, false
	}
	return o.DeclinedDateTime, true
}

// HasDeclinedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasDeclinedDateTime() bool {
	if o != nil && !IsNil(o.DeclinedDateTime) {
		return true
	}

	return false
}

// SetDeclinedDateTime gets a reference to the given string and assigns it to the DeclinedDateTime field.
func (o *Envelopes) SetDeclinedDateTime(v string) {
	o.DeclinedDateTime = &v
}

// GetDeletedDateTime returns the DeletedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetDeletedDateTime() string {
	if o == nil || IsNil(o.DeletedDateTime) {
		var ret string
		return ret
	}
	return *o.DeletedDateTime
}

// GetDeletedDateTimeOk returns a tuple with the DeletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDeletedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedDateTime) {
		return nil, false
	}
	return o.DeletedDateTime, true
}

// HasDeletedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasDeletedDateTime() bool {
	if o != nil && !IsNil(o.DeletedDateTime) {
		return true
	}

	return false
}

// SetDeletedDateTime gets a reference to the given string and assigns it to the DeletedDateTime field.
func (o *Envelopes) SetDeletedDateTime(v string) {
	o.DeletedDateTime = &v
}

// GetDeliveredDateTime returns the DeliveredDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetDeliveredDateTime() string {
	if o == nil || IsNil(o.DeliveredDateTime) {
		var ret string
		return ret
	}
	return *o.DeliveredDateTime
}

// GetDeliveredDateTimeOk returns a tuple with the DeliveredDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDeliveredDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveredDateTime) {
		return nil, false
	}
	return o.DeliveredDateTime, true
}

// HasDeliveredDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasDeliveredDateTime() bool {
	if o != nil && !IsNil(o.DeliveredDateTime) {
		return true
	}

	return false
}

// SetDeliveredDateTime gets a reference to the given string and assigns it to the DeliveredDateTime field.
func (o *Envelopes) SetDeliveredDateTime(v string) {
	o.DeliveredDateTime = &v
}

// GetDisableResponsiveDocument returns the DisableResponsiveDocument field value if set, zero value otherwise.
func (o *Envelopes) GetDisableResponsiveDocument() string {
	if o == nil || IsNil(o.DisableResponsiveDocument) {
		var ret string
		return ret
	}
	return *o.DisableResponsiveDocument
}

// GetDisableResponsiveDocumentOk returns a tuple with the DisableResponsiveDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDisableResponsiveDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.DisableResponsiveDocument) {
		return nil, false
	}
	return o.DisableResponsiveDocument, true
}

// HasDisableResponsiveDocument returns a boolean if a field has been set.
func (o *Envelopes) HasDisableResponsiveDocument() bool {
	if o != nil && !IsNil(o.DisableResponsiveDocument) {
		return true
	}

	return false
}

// SetDisableResponsiveDocument gets a reference to the given string and assigns it to the DisableResponsiveDocument field.
func (o *Envelopes) SetDisableResponsiveDocument(v string) {
	o.DisableResponsiveDocument = &v
}

// GetDocumentBase64 returns the DocumentBase64 field value if set, zero value otherwise.
func (o *Envelopes) GetDocumentBase64() string {
	if o == nil || IsNil(o.DocumentBase64) {
		var ret string
		return ret
	}
	return *o.DocumentBase64
}

// GetDocumentBase64Ok returns a tuple with the DocumentBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDocumentBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.DocumentBase64) {
		return nil, false
	}
	return o.DocumentBase64, true
}

// HasDocumentBase64 returns a boolean if a field has been set.
func (o *Envelopes) HasDocumentBase64() bool {
	if o != nil && !IsNil(o.DocumentBase64) {
		return true
	}

	return false
}

// SetDocumentBase64 gets a reference to the given string and assigns it to the DocumentBase64 field.
func (o *Envelopes) SetDocumentBase64(v string) {
	o.DocumentBase64 = &v
}

// GetDocumentsCombinedUri returns the DocumentsCombinedUri field value if set, zero value otherwise.
func (o *Envelopes) GetDocumentsCombinedUri() string {
	if o == nil || IsNil(o.DocumentsCombinedUri) {
		var ret string
		return ret
	}
	return *o.DocumentsCombinedUri
}

// GetDocumentsCombinedUriOk returns a tuple with the DocumentsCombinedUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDocumentsCombinedUriOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentsCombinedUri) {
		return nil, false
	}
	return o.DocumentsCombinedUri, true
}

// HasDocumentsCombinedUri returns a boolean if a field has been set.
func (o *Envelopes) HasDocumentsCombinedUri() bool {
	if o != nil && !IsNil(o.DocumentsCombinedUri) {
		return true
	}

	return false
}

// SetDocumentsCombinedUri gets a reference to the given string and assigns it to the DocumentsCombinedUri field.
func (o *Envelopes) SetDocumentsCombinedUri(v string) {
	o.DocumentsCombinedUri = &v
}

// GetDocumentsUri returns the DocumentsUri field value if set, zero value otherwise.
func (o *Envelopes) GetDocumentsUri() string {
	if o == nil || IsNil(o.DocumentsUri) {
		var ret string
		return ret
	}
	return *o.DocumentsUri
}

// GetDocumentsUriOk returns a tuple with the DocumentsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetDocumentsUriOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentsUri) {
		return nil, false
	}
	return o.DocumentsUri, true
}

// HasDocumentsUri returns a boolean if a field has been set.
func (o *Envelopes) HasDocumentsUri() bool {
	if o != nil && !IsNil(o.DocumentsUri) {
		return true
	}

	return false
}

// SetDocumentsUri gets a reference to the given string and assigns it to the DocumentsUri field.
func (o *Envelopes) SetDocumentsUri(v string) {
	o.DocumentsUri = &v
}

// GetEmailBlurb returns the EmailBlurb field value if set, zero value otherwise.
func (o *Envelopes) GetEmailBlurb() string {
	if o == nil || IsNil(o.EmailBlurb) {
		var ret string
		return ret
	}
	return *o.EmailBlurb
}

// GetEmailBlurbOk returns a tuple with the EmailBlurb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEmailBlurbOk() (*string, bool) {
	if o == nil || IsNil(o.EmailBlurb) {
		return nil, false
	}
	return o.EmailBlurb, true
}

// HasEmailBlurb returns a boolean if a field has been set.
func (o *Envelopes) HasEmailBlurb() bool {
	if o != nil && !IsNil(o.EmailBlurb) {
		return true
	}

	return false
}

// SetEmailBlurb gets a reference to the given string and assigns it to the EmailBlurb field.
func (o *Envelopes) SetEmailBlurb(v string) {
	o.EmailBlurb = &v
}

// GetEmailSettings returns the EmailSettings field value if set, zero value otherwise.
func (o *Envelopes) GetEmailSettings() EmailSettings {
	if o == nil || IsNil(o.EmailSettings) {
		var ret EmailSettings
		return ret
	}
	return *o.EmailSettings
}

// GetEmailSettingsOk returns a tuple with the EmailSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEmailSettingsOk() (*EmailSettings, bool) {
	if o == nil || IsNil(o.EmailSettings) {
		return nil, false
	}
	return o.EmailSettings, true
}

// HasEmailSettings returns a boolean if a field has been set.
func (o *Envelopes) HasEmailSettings() bool {
	if o != nil && !IsNil(o.EmailSettings) {
		return true
	}

	return false
}

// SetEmailSettings gets a reference to the given EmailSettings and assigns it to the EmailSettings field.
func (o *Envelopes) SetEmailSettings(v EmailSettings) {
	o.EmailSettings = &v
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise.
func (o *Envelopes) GetEmailSubject() string {
	if o == nil || IsNil(o.EmailSubject) {
		var ret string
		return ret
	}
	return *o.EmailSubject
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEmailSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.EmailSubject) {
		return nil, false
	}
	return o.EmailSubject, true
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *Envelopes) HasEmailSubject() bool {
	if o != nil && !IsNil(o.EmailSubject) {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given string and assigns it to the EmailSubject field.
func (o *Envelopes) SetEmailSubject(v string) {
	o.EmailSubject = &v
}

// GetEnableWetSign returns the EnableWetSign field value if set, zero value otherwise.
func (o *Envelopes) GetEnableWetSign() string {
	if o == nil || IsNil(o.EnableWetSign) {
		var ret string
		return ret
	}
	return *o.EnableWetSign
}

// GetEnableWetSignOk returns a tuple with the EnableWetSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnableWetSignOk() (*string, bool) {
	if o == nil || IsNil(o.EnableWetSign) {
		return nil, false
	}
	return o.EnableWetSign, true
}

// HasEnableWetSign returns a boolean if a field has been set.
func (o *Envelopes) HasEnableWetSign() bool {
	if o != nil && !IsNil(o.EnableWetSign) {
		return true
	}

	return false
}

// SetEnableWetSign gets a reference to the given string and assigns it to the EnableWetSign field.
func (o *Envelopes) SetEnableWetSign(v string) {
	o.EnableWetSign = &v
}

// GetEnforceSignerVisibility returns the EnforceSignerVisibility field value if set, zero value otherwise.
func (o *Envelopes) GetEnforceSignerVisibility() string {
	if o == nil || IsNil(o.EnforceSignerVisibility) {
		var ret string
		return ret
	}
	return *o.EnforceSignerVisibility
}

// GetEnforceSignerVisibilityOk returns a tuple with the EnforceSignerVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnforceSignerVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.EnforceSignerVisibility) {
		return nil, false
	}
	return o.EnforceSignerVisibility, true
}

// HasEnforceSignerVisibility returns a boolean if a field has been set.
func (o *Envelopes) HasEnforceSignerVisibility() bool {
	if o != nil && !IsNil(o.EnforceSignerVisibility) {
		return true
	}

	return false
}

// SetEnforceSignerVisibility gets a reference to the given string and assigns it to the EnforceSignerVisibility field.
func (o *Envelopes) SetEnforceSignerVisibility(v string) {
	o.EnforceSignerVisibility = &v
}

// GetEnvelopeAttachments returns the EnvelopeAttachments field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeAttachments() []Attachment {
	if o == nil || IsNil(o.EnvelopeAttachments) {
		var ret []Attachment
		return ret
	}
	return o.EnvelopeAttachments
}

// GetEnvelopeAttachmentsOk returns a tuple with the EnvelopeAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.EnvelopeAttachments) {
		return nil, false
	}
	return o.EnvelopeAttachments, true
}

// HasEnvelopeAttachments returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeAttachments() bool {
	if o != nil && !IsNil(o.EnvelopeAttachments) {
		return true
	}

	return false
}

// SetEnvelopeAttachments gets a reference to the given []Attachment and assigns it to the EnvelopeAttachments field.
func (o *Envelopes) SetEnvelopeAttachments(v []Attachment) {
	o.EnvelopeAttachments = v
}

// GetEnvelopeCustomMetadata returns the EnvelopeCustomMetadata field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeCustomMetadata() EnvelopeCustomMetadata {
	if o == nil || IsNil(o.EnvelopeCustomMetadata) {
		var ret EnvelopeCustomMetadata
		return ret
	}
	return *o.EnvelopeCustomMetadata
}

// GetEnvelopeCustomMetadataOk returns a tuple with the EnvelopeCustomMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeCustomMetadataOk() (*EnvelopeCustomMetadata, bool) {
	if o == nil || IsNil(o.EnvelopeCustomMetadata) {
		return nil, false
	}
	return o.EnvelopeCustomMetadata, true
}

// HasEnvelopeCustomMetadata returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeCustomMetadata() bool {
	if o != nil && !IsNil(o.EnvelopeCustomMetadata) {
		return true
	}

	return false
}

// SetEnvelopeCustomMetadata gets a reference to the given EnvelopeCustomMetadata and assigns it to the EnvelopeCustomMetadata field.
func (o *Envelopes) SetEnvelopeCustomMetadata(v EnvelopeCustomMetadata) {
	o.EnvelopeCustomMetadata = &v
}

// GetEnvelopeDocuments returns the EnvelopeDocuments field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeDocuments() []EnvelopeDocument {
	if o == nil || IsNil(o.EnvelopeDocuments) {
		var ret []EnvelopeDocument
		return ret
	}
	return o.EnvelopeDocuments
}

// GetEnvelopeDocumentsOk returns a tuple with the EnvelopeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeDocumentsOk() ([]EnvelopeDocument, bool) {
	if o == nil || IsNil(o.EnvelopeDocuments) {
		return nil, false
	}
	return o.EnvelopeDocuments, true
}

// HasEnvelopeDocuments returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeDocuments() bool {
	if o != nil && !IsNil(o.EnvelopeDocuments) {
		return true
	}

	return false
}

// SetEnvelopeDocuments gets a reference to the given []EnvelopeDocument and assigns it to the EnvelopeDocuments field.
func (o *Envelopes) SetEnvelopeDocuments(v []EnvelopeDocument) {
	o.EnvelopeDocuments = v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *Envelopes) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetEnvelopeIdStamping returns the EnvelopeIdStamping field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeIdStamping() string {
	if o == nil || IsNil(o.EnvelopeIdStamping) {
		var ret string
		return ret
	}
	return *o.EnvelopeIdStamping
}

// GetEnvelopeIdStampingOk returns a tuple with the EnvelopeIdStamping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeIdStampingOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeIdStamping) {
		return nil, false
	}
	return o.EnvelopeIdStamping, true
}

// HasEnvelopeIdStamping returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeIdStamping() bool {
	if o != nil && !IsNil(o.EnvelopeIdStamping) {
		return true
	}

	return false
}

// SetEnvelopeIdStamping gets a reference to the given string and assigns it to the EnvelopeIdStamping field.
func (o *Envelopes) SetEnvelopeIdStamping(v string) {
	o.EnvelopeIdStamping = &v
}

// GetEnvelopeLocation returns the EnvelopeLocation field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeLocation() string {
	if o == nil || IsNil(o.EnvelopeLocation) {
		var ret string
		return ret
	}
	return *o.EnvelopeLocation
}

// GetEnvelopeLocationOk returns a tuple with the EnvelopeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeLocationOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeLocation) {
		return nil, false
	}
	return o.EnvelopeLocation, true
}

// HasEnvelopeLocation returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeLocation() bool {
	if o != nil && !IsNil(o.EnvelopeLocation) {
		return true
	}

	return false
}

// SetEnvelopeLocation gets a reference to the given string and assigns it to the EnvelopeLocation field.
func (o *Envelopes) SetEnvelopeLocation(v string) {
	o.EnvelopeLocation = &v
}

// GetEnvelopeMetadata returns the EnvelopeMetadata field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeMetadata() EnvelopeMetadata {
	if o == nil || IsNil(o.EnvelopeMetadata) {
		var ret EnvelopeMetadata
		return ret
	}
	return *o.EnvelopeMetadata
}

// GetEnvelopeMetadataOk returns a tuple with the EnvelopeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeMetadataOk() (*EnvelopeMetadata, bool) {
	if o == nil || IsNil(o.EnvelopeMetadata) {
		return nil, false
	}
	return o.EnvelopeMetadata, true
}

// HasEnvelopeMetadata returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeMetadata() bool {
	if o != nil && !IsNil(o.EnvelopeMetadata) {
		return true
	}

	return false
}

// SetEnvelopeMetadata gets a reference to the given EnvelopeMetadata and assigns it to the EnvelopeMetadata field.
func (o *Envelopes) SetEnvelopeMetadata(v EnvelopeMetadata) {
	o.EnvelopeMetadata = &v
}

// GetEnvelopeUri returns the EnvelopeUri field value if set, zero value otherwise.
func (o *Envelopes) GetEnvelopeUri() string {
	if o == nil || IsNil(o.EnvelopeUri) {
		var ret string
		return ret
	}
	return *o.EnvelopeUri
}

// GetEnvelopeUriOk returns a tuple with the EnvelopeUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetEnvelopeUriOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeUri) {
		return nil, false
	}
	return o.EnvelopeUri, true
}

// HasEnvelopeUri returns a boolean if a field has been set.
func (o *Envelopes) HasEnvelopeUri() bool {
	if o != nil && !IsNil(o.EnvelopeUri) {
		return true
	}

	return false
}

// SetEnvelopeUri gets a reference to the given string and assigns it to the EnvelopeUri field.
func (o *Envelopes) SetEnvelopeUri(v string) {
	o.EnvelopeUri = &v
}

// GetExpireAfter returns the ExpireAfter field value if set, zero value otherwise.
func (o *Envelopes) GetExpireAfter() string {
	if o == nil || IsNil(o.ExpireAfter) {
		var ret string
		return ret
	}
	return *o.ExpireAfter
}

// GetExpireAfterOk returns a tuple with the ExpireAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetExpireAfterOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireAfter) {
		return nil, false
	}
	return o.ExpireAfter, true
}

// HasExpireAfter returns a boolean if a field has been set.
func (o *Envelopes) HasExpireAfter() bool {
	if o != nil && !IsNil(o.ExpireAfter) {
		return true
	}

	return false
}

// SetExpireAfter gets a reference to the given string and assigns it to the ExpireAfter field.
func (o *Envelopes) SetExpireAfter(v string) {
	o.ExpireAfter = &v
}

// GetExpireDateTime returns the ExpireDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetExpireDateTime() string {
	if o == nil || IsNil(o.ExpireDateTime) {
		var ret string
		return ret
	}
	return *o.ExpireDateTime
}

// GetExpireDateTimeOk returns a tuple with the ExpireDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetExpireDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireDateTime) {
		return nil, false
	}
	return o.ExpireDateTime, true
}

// HasExpireDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasExpireDateTime() bool {
	if o != nil && !IsNil(o.ExpireDateTime) {
		return true
	}

	return false
}

// SetExpireDateTime gets a reference to the given string and assigns it to the ExpireDateTime field.
func (o *Envelopes) SetExpireDateTime(v string) {
	o.ExpireDateTime = &v
}

// GetExpireEnabled returns the ExpireEnabled field value if set, zero value otherwise.
func (o *Envelopes) GetExpireEnabled() string {
	if o == nil || IsNil(o.ExpireEnabled) {
		var ret string
		return ret
	}
	return *o.ExpireEnabled
}

// GetExpireEnabledOk returns a tuple with the ExpireEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetExpireEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireEnabled) {
		return nil, false
	}
	return o.ExpireEnabled, true
}

// HasExpireEnabled returns a boolean if a field has been set.
func (o *Envelopes) HasExpireEnabled() bool {
	if o != nil && !IsNil(o.ExpireEnabled) {
		return true
	}

	return false
}

// SetExpireEnabled gets a reference to the given string and assigns it to the ExpireEnabled field.
func (o *Envelopes) SetExpireEnabled(v string) {
	o.ExpireEnabled = &v
}

// GetExternalEnvelopeId returns the ExternalEnvelopeId field value if set, zero value otherwise.
func (o *Envelopes) GetExternalEnvelopeId() string {
	if o == nil || IsNil(o.ExternalEnvelopeId) {
		var ret string
		return ret
	}
	return *o.ExternalEnvelopeId
}

// GetExternalEnvelopeIdOk returns a tuple with the ExternalEnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetExternalEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalEnvelopeId) {
		return nil, false
	}
	return o.ExternalEnvelopeId, true
}

// HasExternalEnvelopeId returns a boolean if a field has been set.
func (o *Envelopes) HasExternalEnvelopeId() bool {
	if o != nil && !IsNil(o.ExternalEnvelopeId) {
		return true
	}

	return false
}

// SetExternalEnvelopeId gets a reference to the given string and assigns it to the ExternalEnvelopeId field.
func (o *Envelopes) SetExternalEnvelopeId(v string) {
	o.ExternalEnvelopeId = &v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *Envelopes) GetFolders() []Folder {
	if o == nil || IsNil(o.Folders) {
		var ret []Folder
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetFoldersOk() ([]Folder, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *Envelopes) HasFolders() bool {
	if o != nil && !IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []Folder and assigns it to the Folders field.
func (o *Envelopes) SetFolders(v []Folder) {
	o.Folders = v
}

// GetHasComments returns the HasComments field value if set, zero value otherwise.
func (o *Envelopes) GetHasComments() string {
	if o == nil || IsNil(o.HasComments) {
		var ret string
		return ret
	}
	return *o.HasComments
}

// GetHasCommentsOk returns a tuple with the HasComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetHasCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.HasComments) {
		return nil, false
	}
	return o.HasComments, true
}

// HasHasComments returns a boolean if a field has been set.
func (o *Envelopes) HasHasComments() bool {
	if o != nil && !IsNil(o.HasComments) {
		return true
	}

	return false
}

// SetHasComments gets a reference to the given string and assigns it to the HasComments field.
func (o *Envelopes) SetHasComments(v string) {
	o.HasComments = &v
}

// GetHasFormDataChanged returns the HasFormDataChanged field value if set, zero value otherwise.
func (o *Envelopes) GetHasFormDataChanged() string {
	if o == nil || IsNil(o.HasFormDataChanged) {
		var ret string
		return ret
	}
	return *o.HasFormDataChanged
}

// GetHasFormDataChangedOk returns a tuple with the HasFormDataChanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetHasFormDataChangedOk() (*string, bool) {
	if o == nil || IsNil(o.HasFormDataChanged) {
		return nil, false
	}
	return o.HasFormDataChanged, true
}

// HasHasFormDataChanged returns a boolean if a field has been set.
func (o *Envelopes) HasHasFormDataChanged() bool {
	if o != nil && !IsNil(o.HasFormDataChanged) {
		return true
	}

	return false
}

// SetHasFormDataChanged gets a reference to the given string and assigns it to the HasFormDataChanged field.
func (o *Envelopes) SetHasFormDataChanged(v string) {
	o.HasFormDataChanged = &v
}

// GetHasWavFile returns the HasWavFile field value if set, zero value otherwise.
func (o *Envelopes) GetHasWavFile() string {
	if o == nil || IsNil(o.HasWavFile) {
		var ret string
		return ret
	}
	return *o.HasWavFile
}

// GetHasWavFileOk returns a tuple with the HasWavFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetHasWavFileOk() (*string, bool) {
	if o == nil || IsNil(o.HasWavFile) {
		return nil, false
	}
	return o.HasWavFile, true
}

// HasHasWavFile returns a boolean if a field has been set.
func (o *Envelopes) HasHasWavFile() bool {
	if o != nil && !IsNil(o.HasWavFile) {
		return true
	}

	return false
}

// SetHasWavFile gets a reference to the given string and assigns it to the HasWavFile field.
func (o *Envelopes) SetHasWavFile(v string) {
	o.HasWavFile = &v
}

// GetHolder returns the Holder field value if set, zero value otherwise.
func (o *Envelopes) GetHolder() string {
	if o == nil || IsNil(o.Holder) {
		var ret string
		return ret
	}
	return *o.Holder
}

// GetHolderOk returns a tuple with the Holder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetHolderOk() (*string, bool) {
	if o == nil || IsNil(o.Holder) {
		return nil, false
	}
	return o.Holder, true
}

// HasHolder returns a boolean if a field has been set.
func (o *Envelopes) HasHolder() bool {
	if o != nil && !IsNil(o.Holder) {
		return true
	}

	return false
}

// SetHolder gets a reference to the given string and assigns it to the Holder field.
func (o *Envelopes) SetHolder(v string) {
	o.Holder = &v
}

// GetInitialSentDateTime returns the InitialSentDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetInitialSentDateTime() string {
	if o == nil || IsNil(o.InitialSentDateTime) {
		var ret string
		return ret
	}
	return *o.InitialSentDateTime
}

// GetInitialSentDateTimeOk returns a tuple with the InitialSentDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetInitialSentDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.InitialSentDateTime) {
		return nil, false
	}
	return o.InitialSentDateTime, true
}

// HasInitialSentDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasInitialSentDateTime() bool {
	if o != nil && !IsNil(o.InitialSentDateTime) {
		return true
	}

	return false
}

// SetInitialSentDateTime gets a reference to the given string and assigns it to the InitialSentDateTime field.
func (o *Envelopes) SetInitialSentDateTime(v string) {
	o.InitialSentDateTime = &v
}

// GetIs21CFRPart11 returns the Is21CFRPart11 field value if set, zero value otherwise.
func (o *Envelopes) GetIs21CFRPart11() string {
	if o == nil || IsNil(o.Is21CFRPart11) {
		var ret string
		return ret
	}
	return *o.Is21CFRPart11
}

// GetIs21CFRPart11Ok returns a tuple with the Is21CFRPart11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetIs21CFRPart11Ok() (*string, bool) {
	if o == nil || IsNil(o.Is21CFRPart11) {
		return nil, false
	}
	return o.Is21CFRPart11, true
}

// HasIs21CFRPart11 returns a boolean if a field has been set.
func (o *Envelopes) HasIs21CFRPart11() bool {
	if o != nil && !IsNil(o.Is21CFRPart11) {
		return true
	}

	return false
}

// SetIs21CFRPart11 gets a reference to the given string and assigns it to the Is21CFRPart11 field.
func (o *Envelopes) SetIs21CFRPart11(v string) {
	o.Is21CFRPart11 = &v
}

// GetIsDynamicEnvelope returns the IsDynamicEnvelope field value if set, zero value otherwise.
func (o *Envelopes) GetIsDynamicEnvelope() string {
	if o == nil || IsNil(o.IsDynamicEnvelope) {
		var ret string
		return ret
	}
	return *o.IsDynamicEnvelope
}

// GetIsDynamicEnvelopeOk returns a tuple with the IsDynamicEnvelope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetIsDynamicEnvelopeOk() (*string, bool) {
	if o == nil || IsNil(o.IsDynamicEnvelope) {
		return nil, false
	}
	return o.IsDynamicEnvelope, true
}

// HasIsDynamicEnvelope returns a boolean if a field has been set.
func (o *Envelopes) HasIsDynamicEnvelope() bool {
	if o != nil && !IsNil(o.IsDynamicEnvelope) {
		return true
	}

	return false
}

// SetIsDynamicEnvelope gets a reference to the given string and assigns it to the IsDynamicEnvelope field.
func (o *Envelopes) SetIsDynamicEnvelope(v string) {
	o.IsDynamicEnvelope = &v
}

// GetIsSignatureProviderEnvelope returns the IsSignatureProviderEnvelope field value if set, zero value otherwise.
func (o *Envelopes) GetIsSignatureProviderEnvelope() string {
	if o == nil || IsNil(o.IsSignatureProviderEnvelope) {
		var ret string
		return ret
	}
	return *o.IsSignatureProviderEnvelope
}

// GetIsSignatureProviderEnvelopeOk returns a tuple with the IsSignatureProviderEnvelope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetIsSignatureProviderEnvelopeOk() (*string, bool) {
	if o == nil || IsNil(o.IsSignatureProviderEnvelope) {
		return nil, false
	}
	return o.IsSignatureProviderEnvelope, true
}

// HasIsSignatureProviderEnvelope returns a boolean if a field has been set.
func (o *Envelopes) HasIsSignatureProviderEnvelope() bool {
	if o != nil && !IsNil(o.IsSignatureProviderEnvelope) {
		return true
	}

	return false
}

// SetIsSignatureProviderEnvelope gets a reference to the given string and assigns it to the IsSignatureProviderEnvelope field.
func (o *Envelopes) SetIsSignatureProviderEnvelope(v string) {
	o.IsSignatureProviderEnvelope = &v
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetLastModifiedDateTime() string {
	if o == nil || IsNil(o.LastModifiedDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetLastModifiedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedDateTime) {
		return nil, false
	}
	return o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasLastModifiedDateTime() bool {
	if o != nil && !IsNil(o.LastModifiedDateTime) {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given string and assigns it to the LastModifiedDateTime field.
func (o *Envelopes) SetLastModifiedDateTime(v string) {
	o.LastModifiedDateTime = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Envelopes) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Envelopes) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Envelopes) SetLocation(v string) {
	o.Location = &v
}

// GetLockInformation returns the LockInformation field value if set, zero value otherwise.
func (o *Envelopes) GetLockInformation() EnvelopeLocks {
	if o == nil || IsNil(o.LockInformation) {
		var ret EnvelopeLocks
		return ret
	}
	return *o.LockInformation
}

// GetLockInformationOk returns a tuple with the LockInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetLockInformationOk() (*EnvelopeLocks, bool) {
	if o == nil || IsNil(o.LockInformation) {
		return nil, false
	}
	return o.LockInformation, true
}

// HasLockInformation returns a boolean if a field has been set.
func (o *Envelopes) HasLockInformation() bool {
	if o != nil && !IsNil(o.LockInformation) {
		return true
	}

	return false
}

// SetLockInformation gets a reference to the given EnvelopeLocks and assigns it to the LockInformation field.
func (o *Envelopes) SetLockInformation(v EnvelopeLocks) {
	o.LockInformation = &v
}

// GetMessageLock returns the MessageLock field value if set, zero value otherwise.
func (o *Envelopes) GetMessageLock() string {
	if o == nil || IsNil(o.MessageLock) {
		var ret string
		return ret
	}
	return *o.MessageLock
}

// GetMessageLockOk returns a tuple with the MessageLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetMessageLockOk() (*string, bool) {
	if o == nil || IsNil(o.MessageLock) {
		return nil, false
	}
	return o.MessageLock, true
}

// HasMessageLock returns a boolean if a field has been set.
func (o *Envelopes) HasMessageLock() bool {
	if o != nil && !IsNil(o.MessageLock) {
		return true
	}

	return false
}

// SetMessageLock gets a reference to the given string and assigns it to the MessageLock field.
func (o *Envelopes) SetMessageLock(v string) {
	o.MessageLock = &v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *Envelopes) GetNotification() Notification {
	if o == nil || IsNil(o.Notification) {
		var ret Notification
		return ret
	}
	return *o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetNotificationOk() (*Notification, bool) {
	if o == nil || IsNil(o.Notification) {
		return nil, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *Envelopes) HasNotification() bool {
	if o != nil && !IsNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given Notification and assigns it to the Notification field.
func (o *Envelopes) SetNotification(v Notification) {
	o.Notification = &v
}

// GetNotificationUri returns the NotificationUri field value if set, zero value otherwise.
func (o *Envelopes) GetNotificationUri() string {
	if o == nil || IsNil(o.NotificationUri) {
		var ret string
		return ret
	}
	return *o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetNotificationUriOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationUri) {
		return nil, false
	}
	return o.NotificationUri, true
}

// HasNotificationUri returns a boolean if a field has been set.
func (o *Envelopes) HasNotificationUri() bool {
	if o != nil && !IsNil(o.NotificationUri) {
		return true
	}

	return false
}

// SetNotificationUri gets a reference to the given string and assigns it to the NotificationUri field.
func (o *Envelopes) SetNotificationUri(v string) {
	o.NotificationUri = &v
}

// GetPowerForm returns the PowerForm field value if set, zero value otherwise.
func (o *Envelopes) GetPowerForm() PowerForm {
	if o == nil || IsNil(o.PowerForm) {
		var ret PowerForm
		return ret
	}
	return *o.PowerForm
}

// GetPowerFormOk returns a tuple with the PowerForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetPowerFormOk() (*PowerForm, bool) {
	if o == nil || IsNil(o.PowerForm) {
		return nil, false
	}
	return o.PowerForm, true
}

// HasPowerForm returns a boolean if a field has been set.
func (o *Envelopes) HasPowerForm() bool {
	if o != nil && !IsNil(o.PowerForm) {
		return true
	}

	return false
}

// SetPowerForm gets a reference to the given PowerForm and assigns it to the PowerForm field.
func (o *Envelopes) SetPowerForm(v PowerForm) {
	o.PowerForm = &v
}

// GetPurgeCompletedDate returns the PurgeCompletedDate field value if set, zero value otherwise.
func (o *Envelopes) GetPurgeCompletedDate() string {
	if o == nil || IsNil(o.PurgeCompletedDate) {
		var ret string
		return ret
	}
	return *o.PurgeCompletedDate
}

// GetPurgeCompletedDateOk returns a tuple with the PurgeCompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetPurgeCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeCompletedDate) {
		return nil, false
	}
	return o.PurgeCompletedDate, true
}

// HasPurgeCompletedDate returns a boolean if a field has been set.
func (o *Envelopes) HasPurgeCompletedDate() bool {
	if o != nil && !IsNil(o.PurgeCompletedDate) {
		return true
	}

	return false
}

// SetPurgeCompletedDate gets a reference to the given string and assigns it to the PurgeCompletedDate field.
func (o *Envelopes) SetPurgeCompletedDate(v string) {
	o.PurgeCompletedDate = &v
}

// GetPurgeRequestDate returns the PurgeRequestDate field value if set, zero value otherwise.
func (o *Envelopes) GetPurgeRequestDate() string {
	if o == nil || IsNil(o.PurgeRequestDate) {
		var ret string
		return ret
	}
	return *o.PurgeRequestDate
}

// GetPurgeRequestDateOk returns a tuple with the PurgeRequestDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetPurgeRequestDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeRequestDate) {
		return nil, false
	}
	return o.PurgeRequestDate, true
}

// HasPurgeRequestDate returns a boolean if a field has been set.
func (o *Envelopes) HasPurgeRequestDate() bool {
	if o != nil && !IsNil(o.PurgeRequestDate) {
		return true
	}

	return false
}

// SetPurgeRequestDate gets a reference to the given string and assigns it to the PurgeRequestDate field.
func (o *Envelopes) SetPurgeRequestDate(v string) {
	o.PurgeRequestDate = &v
}

// GetPurgeState returns the PurgeState field value if set, zero value otherwise.
func (o *Envelopes) GetPurgeState() string {
	if o == nil || IsNil(o.PurgeState) {
		var ret string
		return ret
	}
	return *o.PurgeState
}

// GetPurgeStateOk returns a tuple with the PurgeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetPurgeStateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeState) {
		return nil, false
	}
	return o.PurgeState, true
}

// HasPurgeState returns a boolean if a field has been set.
func (o *Envelopes) HasPurgeState() bool {
	if o != nil && !IsNil(o.PurgeState) {
		return true
	}

	return false
}

// SetPurgeState gets a reference to the given string and assigns it to the PurgeState field.
func (o *Envelopes) SetPurgeState(v string) {
	o.PurgeState = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *Envelopes) GetRecipients() EnvelopeRecipients {
	if o == nil || IsNil(o.Recipients) {
		var ret EnvelopeRecipients
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetRecipientsOk() (*EnvelopeRecipients, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *Envelopes) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given EnvelopeRecipients and assigns it to the Recipients field.
func (o *Envelopes) SetRecipients(v EnvelopeRecipients) {
	o.Recipients = &v
}

// GetRecipientsLock returns the RecipientsLock field value if set, zero value otherwise.
func (o *Envelopes) GetRecipientsLock() string {
	if o == nil || IsNil(o.RecipientsLock) {
		var ret string
		return ret
	}
	return *o.RecipientsLock
}

// GetRecipientsLockOk returns a tuple with the RecipientsLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetRecipientsLockOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientsLock) {
		return nil, false
	}
	return o.RecipientsLock, true
}

// HasRecipientsLock returns a boolean if a field has been set.
func (o *Envelopes) HasRecipientsLock() bool {
	if o != nil && !IsNil(o.RecipientsLock) {
		return true
	}

	return false
}

// SetRecipientsLock gets a reference to the given string and assigns it to the RecipientsLock field.
func (o *Envelopes) SetRecipientsLock(v string) {
	o.RecipientsLock = &v
}

// GetRecipientsUri returns the RecipientsUri field value if set, zero value otherwise.
func (o *Envelopes) GetRecipientsUri() string {
	if o == nil || IsNil(o.RecipientsUri) {
		var ret string
		return ret
	}
	return *o.RecipientsUri
}

// GetRecipientsUriOk returns a tuple with the RecipientsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetRecipientsUriOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientsUri) {
		return nil, false
	}
	return o.RecipientsUri, true
}

// HasRecipientsUri returns a boolean if a field has been set.
func (o *Envelopes) HasRecipientsUri() bool {
	if o != nil && !IsNil(o.RecipientsUri) {
		return true
	}

	return false
}

// SetRecipientsUri gets a reference to the given string and assigns it to the RecipientsUri field.
func (o *Envelopes) SetRecipientsUri(v string) {
	o.RecipientsUri = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *Envelopes) GetSender() UserInfo {
	if o == nil || IsNil(o.Sender) {
		var ret UserInfo
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetSenderOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *Envelopes) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given UserInfo and assigns it to the Sender field.
func (o *Envelopes) SetSender(v UserInfo) {
	o.Sender = &v
}

// GetSentDateTime returns the SentDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetSentDateTime() string {
	if o == nil || IsNil(o.SentDateTime) {
		var ret string
		return ret
	}
	return *o.SentDateTime
}

// GetSentDateTimeOk returns a tuple with the SentDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetSentDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SentDateTime) {
		return nil, false
	}
	return o.SentDateTime, true
}

// HasSentDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasSentDateTime() bool {
	if o != nil && !IsNil(o.SentDateTime) {
		return true
	}

	return false
}

// SetSentDateTime gets a reference to the given string and assigns it to the SentDateTime field.
func (o *Envelopes) SetSentDateTime(v string) {
	o.SentDateTime = &v
}

// GetSignerCanSignOnMobile returns the SignerCanSignOnMobile field value if set, zero value otherwise.
func (o *Envelopes) GetSignerCanSignOnMobile() string {
	if o == nil || IsNil(o.SignerCanSignOnMobile) {
		var ret string
		return ret
	}
	return *o.SignerCanSignOnMobile
}

// GetSignerCanSignOnMobileOk returns a tuple with the SignerCanSignOnMobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetSignerCanSignOnMobileOk() (*string, bool) {
	if o == nil || IsNil(o.SignerCanSignOnMobile) {
		return nil, false
	}
	return o.SignerCanSignOnMobile, true
}

// HasSignerCanSignOnMobile returns a boolean if a field has been set.
func (o *Envelopes) HasSignerCanSignOnMobile() bool {
	if o != nil && !IsNil(o.SignerCanSignOnMobile) {
		return true
	}

	return false
}

// SetSignerCanSignOnMobile gets a reference to the given string and assigns it to the SignerCanSignOnMobile field.
func (o *Envelopes) SetSignerCanSignOnMobile(v string) {
	o.SignerCanSignOnMobile = &v
}

// GetSigningLocation returns the SigningLocation field value if set, zero value otherwise.
func (o *Envelopes) GetSigningLocation() string {
	if o == nil || IsNil(o.SigningLocation) {
		var ret string
		return ret
	}
	return *o.SigningLocation
}

// GetSigningLocationOk returns a tuple with the SigningLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetSigningLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SigningLocation) {
		return nil, false
	}
	return o.SigningLocation, true
}

// HasSigningLocation returns a boolean if a field has been set.
func (o *Envelopes) HasSigningLocation() bool {
	if o != nil && !IsNil(o.SigningLocation) {
		return true
	}

	return false
}

// SetSigningLocation gets a reference to the given string and assigns it to the SigningLocation field.
func (o *Envelopes) SetSigningLocation(v string) {
	o.SigningLocation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Envelopes) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Envelopes) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Envelopes) SetStatus(v string) {
	o.Status = &v
}

// GetStatusChangedDateTime returns the StatusChangedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetStatusChangedDateTime() string {
	if o == nil || IsNil(o.StatusChangedDateTime) {
		var ret string
		return ret
	}
	return *o.StatusChangedDateTime
}

// GetStatusChangedDateTimeOk returns a tuple with the StatusChangedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetStatusChangedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusChangedDateTime) {
		return nil, false
	}
	return o.StatusChangedDateTime, true
}

// HasStatusChangedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasStatusChangedDateTime() bool {
	if o != nil && !IsNil(o.StatusChangedDateTime) {
		return true
	}

	return false
}

// SetStatusChangedDateTime gets a reference to the given string and assigns it to the StatusChangedDateTime field.
func (o *Envelopes) SetStatusChangedDateTime(v string) {
	o.StatusChangedDateTime = &v
}

// GetStatusDateTime returns the StatusDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetStatusDateTime() string {
	if o == nil || IsNil(o.StatusDateTime) {
		var ret string
		return ret
	}
	return *o.StatusDateTime
}

// GetStatusDateTimeOk returns a tuple with the StatusDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetStatusDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDateTime) {
		return nil, false
	}
	return o.StatusDateTime, true
}

// HasStatusDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasStatusDateTime() bool {
	if o != nil && !IsNil(o.StatusDateTime) {
		return true
	}

	return false
}

// SetStatusDateTime gets a reference to the given string and assigns it to the StatusDateTime field.
func (o *Envelopes) SetStatusDateTime(v string) {
	o.StatusDateTime = &v
}

// GetTemplatesUri returns the TemplatesUri field value if set, zero value otherwise.
func (o *Envelopes) GetTemplatesUri() string {
	if o == nil || IsNil(o.TemplatesUri) {
		var ret string
		return ret
	}
	return *o.TemplatesUri
}

// GetTemplatesUriOk returns a tuple with the TemplatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetTemplatesUriOk() (*string, bool) {
	if o == nil || IsNil(o.TemplatesUri) {
		return nil, false
	}
	return o.TemplatesUri, true
}

// HasTemplatesUri returns a boolean if a field has been set.
func (o *Envelopes) HasTemplatesUri() bool {
	if o != nil && !IsNil(o.TemplatesUri) {
		return true
	}

	return false
}

// SetTemplatesUri gets a reference to the given string and assigns it to the TemplatesUri field.
func (o *Envelopes) SetTemplatesUri(v string) {
	o.TemplatesUri = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *Envelopes) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *Envelopes) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *Envelopes) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetUseDisclosure returns the UseDisclosure field value if set, zero value otherwise.
func (o *Envelopes) GetUseDisclosure() string {
	if o == nil || IsNil(o.UseDisclosure) {
		var ret string
		return ret
	}
	return *o.UseDisclosure
}

// GetUseDisclosureOk returns a tuple with the UseDisclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetUseDisclosureOk() (*string, bool) {
	if o == nil || IsNil(o.UseDisclosure) {
		return nil, false
	}
	return o.UseDisclosure, true
}

// HasUseDisclosure returns a boolean if a field has been set.
func (o *Envelopes) HasUseDisclosure() bool {
	if o != nil && !IsNil(o.UseDisclosure) {
		return true
	}

	return false
}

// SetUseDisclosure gets a reference to the given string and assigns it to the UseDisclosure field.
func (o *Envelopes) SetUseDisclosure(v string) {
	o.UseDisclosure = &v
}

// GetVoidedDateTime returns the VoidedDateTime field value if set, zero value otherwise.
func (o *Envelopes) GetVoidedDateTime() string {
	if o == nil || IsNil(o.VoidedDateTime) {
		var ret string
		return ret
	}
	return *o.VoidedDateTime
}

// GetVoidedDateTimeOk returns a tuple with the VoidedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetVoidedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.VoidedDateTime) {
		return nil, false
	}
	return o.VoidedDateTime, true
}

// HasVoidedDateTime returns a boolean if a field has been set.
func (o *Envelopes) HasVoidedDateTime() bool {
	if o != nil && !IsNil(o.VoidedDateTime) {
		return true
	}

	return false
}

// SetVoidedDateTime gets a reference to the given string and assigns it to the VoidedDateTime field.
func (o *Envelopes) SetVoidedDateTime(v string) {
	o.VoidedDateTime = &v
}

// GetVoidedReason returns the VoidedReason field value if set, zero value otherwise.
func (o *Envelopes) GetVoidedReason() string {
	if o == nil || IsNil(o.VoidedReason) {
		var ret string
		return ret
	}
	return *o.VoidedReason
}

// GetVoidedReasonOk returns a tuple with the VoidedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetVoidedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.VoidedReason) {
		return nil, false
	}
	return o.VoidedReason, true
}

// HasVoidedReason returns a boolean if a field has been set.
func (o *Envelopes) HasVoidedReason() bool {
	if o != nil && !IsNil(o.VoidedReason) {
		return true
	}

	return false
}

// SetVoidedReason gets a reference to the given string and assigns it to the VoidedReason field.
func (o *Envelopes) SetVoidedReason(v string) {
	o.VoidedReason = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *Envelopes) GetWorkflow() Workflow {
	if o == nil || IsNil(o.Workflow) {
		var ret Workflow
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Envelopes) GetWorkflowOk() (*Workflow, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *Envelopes) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given Workflow and assigns it to the Workflow field.
func (o *Envelopes) SetWorkflow(v Workflow) {
	o.Workflow = &v
}

func (o Envelopes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Envelopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessControlListBase64) {
		toSerialize["accessControlListBase64"] = o.AccessControlListBase64
	}
	if !IsNil(o.AllowComments) {
		toSerialize["allowComments"] = o.AllowComments
	}
	if !IsNil(o.AllowMarkup) {
		toSerialize["allowMarkup"] = o.AllowMarkup
	}
	if !IsNil(o.AllowReassign) {
		toSerialize["allowReassign"] = o.AllowReassign
	}
	if !IsNil(o.AllowViewHistory) {
		toSerialize["allowViewHistory"] = o.AllowViewHistory
	}
	if !IsNil(o.AnySigner) {
		toSerialize["anySigner"] = o.AnySigner
	}
	if !IsNil(o.Asynchronous) {
		toSerialize["asynchronous"] = o.Asynchronous
	}
	if !IsNil(o.AttachmentsUri) {
		toSerialize["attachmentsUri"] = o.AttachmentsUri
	}
	if !IsNil(o.AuthoritativeCopy) {
		toSerialize["authoritativeCopy"] = o.AuthoritativeCopy
	}
	if !IsNil(o.AuthoritativeCopyDefault) {
		toSerialize["authoritativeCopyDefault"] = o.AuthoritativeCopyDefault
	}
	if !IsNil(o.AutoNavigation) {
		toSerialize["autoNavigation"] = o.AutoNavigation
	}
	if !IsNil(o.BrandId) {
		toSerialize["brandId"] = o.BrandId
	}
	if !IsNil(o.BrandLock) {
		toSerialize["brandLock"] = o.BrandLock
	}
	if !IsNil(o.BurnDefaultTabData) {
		toSerialize["burnDefaultTabData"] = o.BurnDefaultTabData
	}
	if !IsNil(o.CertificateUri) {
		toSerialize["certificateUri"] = o.CertificateUri
	}
	if !IsNil(o.CompletedDateTime) {
		toSerialize["completedDateTime"] = o.CompletedDateTime
	}
	if !IsNil(o.CopyRecipientData) {
		toSerialize["copyRecipientData"] = o.CopyRecipientData
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !IsNil(o.CustomFieldsUri) {
		toSerialize["customFieldsUri"] = o.CustomFieldsUri
	}
	if !IsNil(o.DeclinedDateTime) {
		toSerialize["declinedDateTime"] = o.DeclinedDateTime
	}
	if !IsNil(o.DeletedDateTime) {
		toSerialize["deletedDateTime"] = o.DeletedDateTime
	}
	if !IsNil(o.DeliveredDateTime) {
		toSerialize["deliveredDateTime"] = o.DeliveredDateTime
	}
	if !IsNil(o.DisableResponsiveDocument) {
		toSerialize["disableResponsiveDocument"] = o.DisableResponsiveDocument
	}
	if !IsNil(o.DocumentBase64) {
		toSerialize["documentBase64"] = o.DocumentBase64
	}
	if !IsNil(o.DocumentsCombinedUri) {
		toSerialize["documentsCombinedUri"] = o.DocumentsCombinedUri
	}
	if !IsNil(o.DocumentsUri) {
		toSerialize["documentsUri"] = o.DocumentsUri
	}
	if !IsNil(o.EmailBlurb) {
		toSerialize["emailBlurb"] = o.EmailBlurb
	}
	if !IsNil(o.EmailSettings) {
		toSerialize["emailSettings"] = o.EmailSettings
	}
	if !IsNil(o.EmailSubject) {
		toSerialize["emailSubject"] = o.EmailSubject
	}
	if !IsNil(o.EnableWetSign) {
		toSerialize["enableWetSign"] = o.EnableWetSign
	}
	if !IsNil(o.EnforceSignerVisibility) {
		toSerialize["enforceSignerVisibility"] = o.EnforceSignerVisibility
	}
	if !IsNil(o.EnvelopeAttachments) {
		toSerialize["envelopeAttachments"] = o.EnvelopeAttachments
	}
	if !IsNil(o.EnvelopeCustomMetadata) {
		toSerialize["envelopeCustomMetadata"] = o.EnvelopeCustomMetadata
	}
	if !IsNil(o.EnvelopeDocuments) {
		toSerialize["envelopeDocuments"] = o.EnvelopeDocuments
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.EnvelopeIdStamping) {
		toSerialize["envelopeIdStamping"] = o.EnvelopeIdStamping
	}
	if !IsNil(o.EnvelopeLocation) {
		toSerialize["envelopeLocation"] = o.EnvelopeLocation
	}
	if !IsNil(o.EnvelopeMetadata) {
		toSerialize["envelopeMetadata"] = o.EnvelopeMetadata
	}
	if !IsNil(o.EnvelopeUri) {
		toSerialize["envelopeUri"] = o.EnvelopeUri
	}
	if !IsNil(o.ExpireAfter) {
		toSerialize["expireAfter"] = o.ExpireAfter
	}
	if !IsNil(o.ExpireDateTime) {
		toSerialize["expireDateTime"] = o.ExpireDateTime
	}
	if !IsNil(o.ExpireEnabled) {
		toSerialize["expireEnabled"] = o.ExpireEnabled
	}
	if !IsNil(o.ExternalEnvelopeId) {
		toSerialize["externalEnvelopeId"] = o.ExternalEnvelopeId
	}
	if !IsNil(o.Folders) {
		toSerialize["folders"] = o.Folders
	}
	if !IsNil(o.HasComments) {
		toSerialize["hasComments"] = o.HasComments
	}
	if !IsNil(o.HasFormDataChanged) {
		toSerialize["hasFormDataChanged"] = o.HasFormDataChanged
	}
	if !IsNil(o.HasWavFile) {
		toSerialize["hasWavFile"] = o.HasWavFile
	}
	if !IsNil(o.Holder) {
		toSerialize["holder"] = o.Holder
	}
	if !IsNil(o.InitialSentDateTime) {
		toSerialize["initialSentDateTime"] = o.InitialSentDateTime
	}
	if !IsNil(o.Is21CFRPart11) {
		toSerialize["is21CFRPart11"] = o.Is21CFRPart11
	}
	if !IsNil(o.IsDynamicEnvelope) {
		toSerialize["isDynamicEnvelope"] = o.IsDynamicEnvelope
	}
	if !IsNil(o.IsSignatureProviderEnvelope) {
		toSerialize["isSignatureProviderEnvelope"] = o.IsSignatureProviderEnvelope
	}
	if !IsNil(o.LastModifiedDateTime) {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.LockInformation) {
		toSerialize["lockInformation"] = o.LockInformation
	}
	if !IsNil(o.MessageLock) {
		toSerialize["messageLock"] = o.MessageLock
	}
	if !IsNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	if !IsNil(o.NotificationUri) {
		toSerialize["notificationUri"] = o.NotificationUri
	}
	if !IsNil(o.PowerForm) {
		toSerialize["powerForm"] = o.PowerForm
	}
	if !IsNil(o.PurgeCompletedDate) {
		toSerialize["purgeCompletedDate"] = o.PurgeCompletedDate
	}
	if !IsNil(o.PurgeRequestDate) {
		toSerialize["purgeRequestDate"] = o.PurgeRequestDate
	}
	if !IsNil(o.PurgeState) {
		toSerialize["purgeState"] = o.PurgeState
	}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.RecipientsLock) {
		toSerialize["recipientsLock"] = o.RecipientsLock
	}
	if !IsNil(o.RecipientsUri) {
		toSerialize["recipientsUri"] = o.RecipientsUri
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.SentDateTime) {
		toSerialize["sentDateTime"] = o.SentDateTime
	}
	if !IsNil(o.SignerCanSignOnMobile) {
		toSerialize["signerCanSignOnMobile"] = o.SignerCanSignOnMobile
	}
	if !IsNil(o.SigningLocation) {
		toSerialize["signingLocation"] = o.SigningLocation
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusChangedDateTime) {
		toSerialize["statusChangedDateTime"] = o.StatusChangedDateTime
	}
	if !IsNil(o.StatusDateTime) {
		toSerialize["statusDateTime"] = o.StatusDateTime
	}
	if !IsNil(o.TemplatesUri) {
		toSerialize["templatesUri"] = o.TemplatesUri
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	if !IsNil(o.UseDisclosure) {
		toSerialize["useDisclosure"] = o.UseDisclosure
	}
	if !IsNil(o.VoidedDateTime) {
		toSerialize["voidedDateTime"] = o.VoidedDateTime
	}
	if !IsNil(o.VoidedReason) {
		toSerialize["voidedReason"] = o.VoidedReason
	}
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	return toSerialize, nil
}

type NullableEnvelopes struct {
	value *Envelopes
	isSet bool
}

func (v NullableEnvelopes) Get() *Envelopes {
	return v.value
}

func (v *NullableEnvelopes) Set(val *Envelopes) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopes) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopes(val *Envelopes) *NullableEnvelopes {
	return &NullableEnvelopes{value: val, isSet: true}
}

func (v NullableEnvelopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


