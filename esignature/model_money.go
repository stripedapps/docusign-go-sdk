/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Money type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Money{}

// Money Describes information about the `total` of a payment. 
type Money struct {
	// The total payment amount in the currency's base unit. For example, for USD the base currency is one cent. 
	AmountInBaseUnit *string `json:"amountInBaseUnit,omitempty"`
	// The three-letter [ISO 4217][ISO 4217] currency code for the payment.  For example:  * AUD Australian dollar * CAD Canadian dollar * EUR Euro * GBP Great Britain pound * USD United States dollar  This is a read-only property.  [ISO 4217]:          https://en.wikipedia.org/wiki/ISO_4217 
	Currency *string `json:"currency,omitempty"`
	// The payment amount as displayed in the `currency`.  For example, if the payment amount is USD 12.59, the `amountInBaseUnit` is 1259 (cents), and the displayed amount is `$12.59 USD`.  This is a read-only property. 
	DisplayAmount *string `json:"displayAmount,omitempty"`
}

// NewMoney instantiates a new Money object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoney() *Money {
	this := Money{}
	return &this
}

// NewMoneyWithDefaults instantiates a new Money object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoneyWithDefaults() *Money {
	this := Money{}
	return &this
}

// GetAmountInBaseUnit returns the AmountInBaseUnit field value if set, zero value otherwise.
func (o *Money) GetAmountInBaseUnit() string {
	if o == nil || IsNil(o.AmountInBaseUnit) {
		var ret string
		return ret
	}
	return *o.AmountInBaseUnit
}

// GetAmountInBaseUnitOk returns a tuple with the AmountInBaseUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Money) GetAmountInBaseUnitOk() (*string, bool) {
	if o == nil || IsNil(o.AmountInBaseUnit) {
		return nil, false
	}
	return o.AmountInBaseUnit, true
}

// HasAmountInBaseUnit returns a boolean if a field has been set.
func (o *Money) HasAmountInBaseUnit() bool {
	if o != nil && !IsNil(o.AmountInBaseUnit) {
		return true
	}

	return false
}

// SetAmountInBaseUnit gets a reference to the given string and assigns it to the AmountInBaseUnit field.
func (o *Money) SetAmountInBaseUnit(v string) {
	o.AmountInBaseUnit = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Money) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Money) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Money) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Money) SetCurrency(v string) {
	o.Currency = &v
}

// GetDisplayAmount returns the DisplayAmount field value if set, zero value otherwise.
func (o *Money) GetDisplayAmount() string {
	if o == nil || IsNil(o.DisplayAmount) {
		var ret string
		return ret
	}
	return *o.DisplayAmount
}

// GetDisplayAmountOk returns a tuple with the DisplayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Money) GetDisplayAmountOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayAmount) {
		return nil, false
	}
	return o.DisplayAmount, true
}

// HasDisplayAmount returns a boolean if a field has been set.
func (o *Money) HasDisplayAmount() bool {
	if o != nil && !IsNil(o.DisplayAmount) {
		return true
	}

	return false
}

// SetDisplayAmount gets a reference to the given string and assigns it to the DisplayAmount field.
func (o *Money) SetDisplayAmount(v string) {
	o.DisplayAmount = &v
}

func (o Money) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Money) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountInBaseUnit) {
		toSerialize["amountInBaseUnit"] = o.AmountInBaseUnit
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DisplayAmount) {
		toSerialize["displayAmount"] = o.DisplayAmount
	}
	return toSerialize, nil
}

type NullableMoney struct {
	value *Money
	isSet bool
}

func (v NullableMoney) Get() *Money {
	return v.value
}

func (v *NullableMoney) Set(val *Money) {
	v.value = val
	v.isSet = true
}

func (v NullableMoney) IsSet() bool {
	return v.isSet
}

func (v *NullableMoney) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoney(val *Money) *NullableMoney {
	return &NullableMoney{value: val, isSet: true}
}

func (v NullableMoney) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoney) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


