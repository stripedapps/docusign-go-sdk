/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountPasswordStrengthTypeOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPasswordStrengthTypeOption{}

// AccountPasswordStrengthTypeOption 
type AccountPasswordStrengthTypeOption struct {
	// Minimum length of the access code string.
	MinimumLength *string `json:"minimumLength,omitempty"`
	// 
	Name *string `json:"name,omitempty"`
	// When **true,** passwords must include a digit. The default value is `false`.
	PasswordIncludeDigit *string `json:"passwordIncludeDigit,omitempty"`
	// When **true,** passwords must include either a digit or a special character. The default value is `false`.  **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces.
	PasswordIncludeDigitOrSpecialCharacter *string `json:"passwordIncludeDigitOrSpecialCharacter,omitempty"`
	// When **true,** passwords must include a lowercase letter. The default value is `false`.
	PasswordIncludeLowerCase *string `json:"passwordIncludeLowerCase,omitempty"`
	// When **true,** passwords must include a special character. The default value is `false`.  **Note:** Passwords cannot include angle brackets (`<` `>`) or spaces.
	PasswordIncludeSpecialCharacter *string `json:"passwordIncludeSpecialCharacter,omitempty"`
	// When **true,** passwords must include an uppercase letter. The default value is `false`.
	PasswordIncludeUpperCase *string `json:"passwordIncludeUpperCase,omitempty"`
}

// NewAccountPasswordStrengthTypeOption instantiates a new AccountPasswordStrengthTypeOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPasswordStrengthTypeOption() *AccountPasswordStrengthTypeOption {
	this := AccountPasswordStrengthTypeOption{}
	return &this
}

// NewAccountPasswordStrengthTypeOptionWithDefaults instantiates a new AccountPasswordStrengthTypeOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPasswordStrengthTypeOptionWithDefaults() *AccountPasswordStrengthTypeOption {
	this := AccountPasswordStrengthTypeOption{}
	return &this
}

// GetMinimumLength returns the MinimumLength field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetMinimumLength() string {
	if o == nil || IsNil(o.MinimumLength) {
		var ret string
		return ret
	}
	return *o.MinimumLength
}

// GetMinimumLengthOk returns a tuple with the MinimumLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetMinimumLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumLength) {
		return nil, false
	}
	return o.MinimumLength, true
}

// HasMinimumLength returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasMinimumLength() bool {
	if o != nil && !IsNil(o.MinimumLength) {
		return true
	}

	return false
}

// SetMinimumLength gets a reference to the given string and assigns it to the MinimumLength field.
func (o *AccountPasswordStrengthTypeOption) SetMinimumLength(v string) {
	o.MinimumLength = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountPasswordStrengthTypeOption) SetName(v string) {
	o.Name = &v
}

// GetPasswordIncludeDigit returns the PasswordIncludeDigit field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeDigit() string {
	if o == nil || IsNil(o.PasswordIncludeDigit) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeDigit
}

// GetPasswordIncludeDigitOk returns a tuple with the PasswordIncludeDigit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeDigitOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeDigit) {
		return nil, false
	}
	return o.PasswordIncludeDigit, true
}

// HasPasswordIncludeDigit returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasPasswordIncludeDigit() bool {
	if o != nil && !IsNil(o.PasswordIncludeDigit) {
		return true
	}

	return false
}

// SetPasswordIncludeDigit gets a reference to the given string and assigns it to the PasswordIncludeDigit field.
func (o *AccountPasswordStrengthTypeOption) SetPasswordIncludeDigit(v string) {
	o.PasswordIncludeDigit = &v
}

// GetPasswordIncludeDigitOrSpecialCharacter returns the PasswordIncludeDigitOrSpecialCharacter field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeDigitOrSpecialCharacter() string {
	if o == nil || IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeDigitOrSpecialCharacter
}

// GetPasswordIncludeDigitOrSpecialCharacterOk returns a tuple with the PasswordIncludeDigitOrSpecialCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeDigitOrSpecialCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		return nil, false
	}
	return o.PasswordIncludeDigitOrSpecialCharacter, true
}

// HasPasswordIncludeDigitOrSpecialCharacter returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasPasswordIncludeDigitOrSpecialCharacter() bool {
	if o != nil && !IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		return true
	}

	return false
}

// SetPasswordIncludeDigitOrSpecialCharacter gets a reference to the given string and assigns it to the PasswordIncludeDigitOrSpecialCharacter field.
func (o *AccountPasswordStrengthTypeOption) SetPasswordIncludeDigitOrSpecialCharacter(v string) {
	o.PasswordIncludeDigitOrSpecialCharacter = &v
}

// GetPasswordIncludeLowerCase returns the PasswordIncludeLowerCase field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeLowerCase() string {
	if o == nil || IsNil(o.PasswordIncludeLowerCase) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeLowerCase
}

// GetPasswordIncludeLowerCaseOk returns a tuple with the PasswordIncludeLowerCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeLowerCaseOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeLowerCase) {
		return nil, false
	}
	return o.PasswordIncludeLowerCase, true
}

// HasPasswordIncludeLowerCase returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasPasswordIncludeLowerCase() bool {
	if o != nil && !IsNil(o.PasswordIncludeLowerCase) {
		return true
	}

	return false
}

// SetPasswordIncludeLowerCase gets a reference to the given string and assigns it to the PasswordIncludeLowerCase field.
func (o *AccountPasswordStrengthTypeOption) SetPasswordIncludeLowerCase(v string) {
	o.PasswordIncludeLowerCase = &v
}

// GetPasswordIncludeSpecialCharacter returns the PasswordIncludeSpecialCharacter field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeSpecialCharacter() string {
	if o == nil || IsNil(o.PasswordIncludeSpecialCharacter) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeSpecialCharacter
}

// GetPasswordIncludeSpecialCharacterOk returns a tuple with the PasswordIncludeSpecialCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeSpecialCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeSpecialCharacter) {
		return nil, false
	}
	return o.PasswordIncludeSpecialCharacter, true
}

// HasPasswordIncludeSpecialCharacter returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasPasswordIncludeSpecialCharacter() bool {
	if o != nil && !IsNil(o.PasswordIncludeSpecialCharacter) {
		return true
	}

	return false
}

// SetPasswordIncludeSpecialCharacter gets a reference to the given string and assigns it to the PasswordIncludeSpecialCharacter field.
func (o *AccountPasswordStrengthTypeOption) SetPasswordIncludeSpecialCharacter(v string) {
	o.PasswordIncludeSpecialCharacter = &v
}

// GetPasswordIncludeUpperCase returns the PasswordIncludeUpperCase field value if set, zero value otherwise.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeUpperCase() string {
	if o == nil || IsNil(o.PasswordIncludeUpperCase) {
		var ret string
		return ret
	}
	return *o.PasswordIncludeUpperCase
}

// GetPasswordIncludeUpperCaseOk returns a tuple with the PasswordIncludeUpperCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthTypeOption) GetPasswordIncludeUpperCaseOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordIncludeUpperCase) {
		return nil, false
	}
	return o.PasswordIncludeUpperCase, true
}

// HasPasswordIncludeUpperCase returns a boolean if a field has been set.
func (o *AccountPasswordStrengthTypeOption) HasPasswordIncludeUpperCase() bool {
	if o != nil && !IsNil(o.PasswordIncludeUpperCase) {
		return true
	}

	return false
}

// SetPasswordIncludeUpperCase gets a reference to the given string and assigns it to the PasswordIncludeUpperCase field.
func (o *AccountPasswordStrengthTypeOption) SetPasswordIncludeUpperCase(v string) {
	o.PasswordIncludeUpperCase = &v
}

func (o AccountPasswordStrengthTypeOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPasswordStrengthTypeOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinimumLength) {
		toSerialize["minimumLength"] = o.MinimumLength
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PasswordIncludeDigit) {
		toSerialize["passwordIncludeDigit"] = o.PasswordIncludeDigit
	}
	if !IsNil(o.PasswordIncludeDigitOrSpecialCharacter) {
		toSerialize["passwordIncludeDigitOrSpecialCharacter"] = o.PasswordIncludeDigitOrSpecialCharacter
	}
	if !IsNil(o.PasswordIncludeLowerCase) {
		toSerialize["passwordIncludeLowerCase"] = o.PasswordIncludeLowerCase
	}
	if !IsNil(o.PasswordIncludeSpecialCharacter) {
		toSerialize["passwordIncludeSpecialCharacter"] = o.PasswordIncludeSpecialCharacter
	}
	if !IsNil(o.PasswordIncludeUpperCase) {
		toSerialize["passwordIncludeUpperCase"] = o.PasswordIncludeUpperCase
	}
	return toSerialize, nil
}

type NullableAccountPasswordStrengthTypeOption struct {
	value *AccountPasswordStrengthTypeOption
	isSet bool
}

func (v NullableAccountPasswordStrengthTypeOption) Get() *AccountPasswordStrengthTypeOption {
	return v.value
}

func (v *NullableAccountPasswordStrengthTypeOption) Set(val *AccountPasswordStrengthTypeOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPasswordStrengthTypeOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPasswordStrengthTypeOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPasswordStrengthTypeOption(val *AccountPasswordStrengthTypeOption) *NullableAccountPasswordStrengthTypeOption {
	return &NullableAccountPasswordStrengthTypeOption{value: val, isSet: true}
}

func (v NullableAccountPasswordStrengthTypeOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPasswordStrengthTypeOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


