/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddressInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressInformation{}

// AddressInformation Contains address information.
type AddressInformation struct {
	// The first line of the user's address. Maximum length: 100 characters.
	Address1 *string `json:"address1,omitempty"`
	// The second line of the user's address. Maximum length: 100 characters.
	Address2 *string `json:"address2,omitempty"`
	// The user's city. Maximum length: 40 characters.
	City *string `json:"city,omitempty"`
	// The user's country. Maximum length: 50 characters.
	Country *string `json:"country,omitempty"`
	// A fax number associated with the address, if one is available.
	Fax *string `json:"fax,omitempty"`
	// A phone number associated with the address.
	Phone *string `json:"phone,omitempty"`
	// The user's postal code. Maximum length: 20 characters.
	PostalCode *string `json:"postalCode,omitempty"`
	// The user's state or province. Maximum length: 40 characters.
	StateOrProvince *string `json:"stateOrProvince,omitempty"`
	// 
	ZipPlus4 *string `json:"zipPlus4,omitempty"`
}

// NewAddressInformation instantiates a new AddressInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressInformation() *AddressInformation {
	this := AddressInformation{}
	return &this
}

// NewAddressInformationWithDefaults instantiates a new AddressInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressInformationWithDefaults() *AddressInformation {
	this := AddressInformation{}
	return &this
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *AddressInformation) GetAddress1() string {
	if o == nil || IsNil(o.Address1) {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetAddress1Ok() (*string, bool) {
	if o == nil || IsNil(o.Address1) {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *AddressInformation) HasAddress1() bool {
	if o != nil && !IsNil(o.Address1) {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *AddressInformation) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *AddressInformation) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *AddressInformation) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *AddressInformation) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AddressInformation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AddressInformation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AddressInformation) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AddressInformation) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AddressInformation) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AddressInformation) SetCountry(v string) {
	o.Country = &v
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *AddressInformation) GetFax() string {
	if o == nil || IsNil(o.Fax) {
		var ret string
		return ret
	}
	return *o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetFaxOk() (*string, bool) {
	if o == nil || IsNil(o.Fax) {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *AddressInformation) HasFax() bool {
	if o != nil && !IsNil(o.Fax) {
		return true
	}

	return false
}

// SetFax gets a reference to the given string and assigns it to the Fax field.
func (o *AddressInformation) SetFax(v string) {
	o.Fax = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *AddressInformation) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *AddressInformation) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *AddressInformation) SetPhone(v string) {
	o.Phone = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *AddressInformation) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *AddressInformation) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *AddressInformation) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetStateOrProvince returns the StateOrProvince field value if set, zero value otherwise.
func (o *AddressInformation) GetStateOrProvince() string {
	if o == nil || IsNil(o.StateOrProvince) {
		var ret string
		return ret
	}
	return *o.StateOrProvince
}

// GetStateOrProvinceOk returns a tuple with the StateOrProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetStateOrProvinceOk() (*string, bool) {
	if o == nil || IsNil(o.StateOrProvince) {
		return nil, false
	}
	return o.StateOrProvince, true
}

// HasStateOrProvince returns a boolean if a field has been set.
func (o *AddressInformation) HasStateOrProvince() bool {
	if o != nil && !IsNil(o.StateOrProvince) {
		return true
	}

	return false
}

// SetStateOrProvince gets a reference to the given string and assigns it to the StateOrProvince field.
func (o *AddressInformation) SetStateOrProvince(v string) {
	o.StateOrProvince = &v
}

// GetZipPlus4 returns the ZipPlus4 field value if set, zero value otherwise.
func (o *AddressInformation) GetZipPlus4() string {
	if o == nil || IsNil(o.ZipPlus4) {
		var ret string
		return ret
	}
	return *o.ZipPlus4
}

// GetZipPlus4Ok returns a tuple with the ZipPlus4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInformation) GetZipPlus4Ok() (*string, bool) {
	if o == nil || IsNil(o.ZipPlus4) {
		return nil, false
	}
	return o.ZipPlus4, true
}

// HasZipPlus4 returns a boolean if a field has been set.
func (o *AddressInformation) HasZipPlus4() bool {
	if o != nil && !IsNil(o.ZipPlus4) {
		return true
	}

	return false
}

// SetZipPlus4 gets a reference to the given string and assigns it to the ZipPlus4 field.
func (o *AddressInformation) SetZipPlus4(v string) {
	o.ZipPlus4 = &v
}

func (o AddressInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address1) {
		toSerialize["address1"] = o.Address1
	}
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Fax) {
		toSerialize["fax"] = o.Fax
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	if !IsNil(o.StateOrProvince) {
		toSerialize["stateOrProvince"] = o.StateOrProvince
	}
	if !IsNil(o.ZipPlus4) {
		toSerialize["zipPlus4"] = o.ZipPlus4
	}
	return toSerialize, nil
}

type NullableAddressInformation struct {
	value *AddressInformation
	isSet bool
}

func (v NullableAddressInformation) Get() *AddressInformation {
	return v.value
}

func (v *NullableAddressInformation) Set(val *AddressInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressInformation(val *AddressInformation) *NullableAddressInformation {
	return &NullableAddressInformation{value: val, isSet: true}
}

func (v NullableAddressInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


