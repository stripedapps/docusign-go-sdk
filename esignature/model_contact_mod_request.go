/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContactModRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactModRequest{}

// ContactModRequest The request object containing the new information for the contacts.
type ContactModRequest struct {
	// A list of contacts.
	ContactList []Contact `json:"contactList,omitempty"`
}

// NewContactModRequest instantiates a new ContactModRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactModRequest() *ContactModRequest {
	this := ContactModRequest{}
	return &this
}

// NewContactModRequestWithDefaults instantiates a new ContactModRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactModRequestWithDefaults() *ContactModRequest {
	this := ContactModRequest{}
	return &this
}

// GetContactList returns the ContactList field value if set, zero value otherwise.
func (o *ContactModRequest) GetContactList() []Contact {
	if o == nil || IsNil(o.ContactList) {
		var ret []Contact
		return ret
	}
	return o.ContactList
}

// GetContactListOk returns a tuple with the ContactList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactModRequest) GetContactListOk() ([]Contact, bool) {
	if o == nil || IsNil(o.ContactList) {
		return nil, false
	}
	return o.ContactList, true
}

// HasContactList returns a boolean if a field has been set.
func (o *ContactModRequest) HasContactList() bool {
	if o != nil && !IsNil(o.ContactList) {
		return true
	}

	return false
}

// SetContactList gets a reference to the given []Contact and assigns it to the ContactList field.
func (o *ContactModRequest) SetContactList(v []Contact) {
	o.ContactList = v
}

func (o ContactModRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactModRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactList) {
		toSerialize["contactList"] = o.ContactList
	}
	return toSerialize, nil
}

type NullableContactModRequest struct {
	value *ContactModRequest
	isSet bool
}

func (v NullableContactModRequest) Get() *ContactModRequest {
	return v.value
}

func (v *NullableContactModRequest) Set(val *ContactModRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableContactModRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableContactModRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactModRequest(val *ContactModRequest) *NullableContactModRequest {
	return &NullableContactModRequest{value: val, isSet: true}
}

func (v NullableContactModRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactModRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


