/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BrandEmailContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandEmailContent{}

// BrandEmailContent Deprecated.
type BrandEmailContent struct {
	// Deprecated.
	Content *string `json:"content,omitempty"`
	// Deprecated.
	EmailContentType *string `json:"emailContentType,omitempty"`
	// Deprecated.
	EmailToLink *string `json:"emailToLink,omitempty"`
	// Deprecated.
	LinkText *string `json:"linkText,omitempty"`
}

// NewBrandEmailContent instantiates a new BrandEmailContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandEmailContent() *BrandEmailContent {
	this := BrandEmailContent{}
	return &this
}

// NewBrandEmailContentWithDefaults instantiates a new BrandEmailContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandEmailContentWithDefaults() *BrandEmailContent {
	this := BrandEmailContent{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *BrandEmailContent) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandEmailContent) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *BrandEmailContent) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *BrandEmailContent) SetContent(v string) {
	o.Content = &v
}

// GetEmailContentType returns the EmailContentType field value if set, zero value otherwise.
func (o *BrandEmailContent) GetEmailContentType() string {
	if o == nil || IsNil(o.EmailContentType) {
		var ret string
		return ret
	}
	return *o.EmailContentType
}

// GetEmailContentTypeOk returns a tuple with the EmailContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandEmailContent) GetEmailContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EmailContentType) {
		return nil, false
	}
	return o.EmailContentType, true
}

// HasEmailContentType returns a boolean if a field has been set.
func (o *BrandEmailContent) HasEmailContentType() bool {
	if o != nil && !IsNil(o.EmailContentType) {
		return true
	}

	return false
}

// SetEmailContentType gets a reference to the given string and assigns it to the EmailContentType field.
func (o *BrandEmailContent) SetEmailContentType(v string) {
	o.EmailContentType = &v
}

// GetEmailToLink returns the EmailToLink field value if set, zero value otherwise.
func (o *BrandEmailContent) GetEmailToLink() string {
	if o == nil || IsNil(o.EmailToLink) {
		var ret string
		return ret
	}
	return *o.EmailToLink
}

// GetEmailToLinkOk returns a tuple with the EmailToLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandEmailContent) GetEmailToLinkOk() (*string, bool) {
	if o == nil || IsNil(o.EmailToLink) {
		return nil, false
	}
	return o.EmailToLink, true
}

// HasEmailToLink returns a boolean if a field has been set.
func (o *BrandEmailContent) HasEmailToLink() bool {
	if o != nil && !IsNil(o.EmailToLink) {
		return true
	}

	return false
}

// SetEmailToLink gets a reference to the given string and assigns it to the EmailToLink field.
func (o *BrandEmailContent) SetEmailToLink(v string) {
	o.EmailToLink = &v
}

// GetLinkText returns the LinkText field value if set, zero value otherwise.
func (o *BrandEmailContent) GetLinkText() string {
	if o == nil || IsNil(o.LinkText) {
		var ret string
		return ret
	}
	return *o.LinkText
}

// GetLinkTextOk returns a tuple with the LinkText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandEmailContent) GetLinkTextOk() (*string, bool) {
	if o == nil || IsNil(o.LinkText) {
		return nil, false
	}
	return o.LinkText, true
}

// HasLinkText returns a boolean if a field has been set.
func (o *BrandEmailContent) HasLinkText() bool {
	if o != nil && !IsNil(o.LinkText) {
		return true
	}

	return false
}

// SetLinkText gets a reference to the given string and assigns it to the LinkText field.
func (o *BrandEmailContent) SetLinkText(v string) {
	o.LinkText = &v
}

func (o BrandEmailContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandEmailContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.EmailContentType) {
		toSerialize["emailContentType"] = o.EmailContentType
	}
	if !IsNil(o.EmailToLink) {
		toSerialize["emailToLink"] = o.EmailToLink
	}
	if !IsNil(o.LinkText) {
		toSerialize["linkText"] = o.LinkText
	}
	return toSerialize, nil
}

type NullableBrandEmailContent struct {
	value *BrandEmailContent
	isSet bool
}

func (v NullableBrandEmailContent) Get() *BrandEmailContent {
	return v.value
}

func (v *NullableBrandEmailContent) Set(val *BrandEmailContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandEmailContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandEmailContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandEmailContent(val *BrandEmailContent) *NullableBrandEmailContent {
	return &NullableBrandEmailContent{value: val, isSet: true}
}

func (v NullableBrandEmailContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandEmailContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


