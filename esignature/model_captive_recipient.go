/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CaptiveRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaptiveRecipient{}

// CaptiveRecipient This object contains details about a captive (embedded) recipient.
type CaptiveRecipient struct {
	// Specifies whether the recipient is embedded or remote.   If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.  **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.  Maximum length: 100 characters.  
	ClientUserId *string `json:"clientUserId,omitempty"`
	// The email address associated with the captive recipient.
	Email *string `json:"email,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The username associated with the captive recipient.
	UserName *string `json:"userName,omitempty"`
}

// NewCaptiveRecipient instantiates a new CaptiveRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaptiveRecipient() *CaptiveRecipient {
	this := CaptiveRecipient{}
	return &this
}

// NewCaptiveRecipientWithDefaults instantiates a new CaptiveRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaptiveRecipientWithDefaults() *CaptiveRecipient {
	this := CaptiveRecipient{}
	return &this
}

// GetClientUserId returns the ClientUserId field value if set, zero value otherwise.
func (o *CaptiveRecipient) GetClientUserId() string {
	if o == nil || IsNil(o.ClientUserId) {
		var ret string
		return ret
	}
	return *o.ClientUserId
}

// GetClientUserIdOk returns a tuple with the ClientUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptiveRecipient) GetClientUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientUserId) {
		return nil, false
	}
	return o.ClientUserId, true
}

// HasClientUserId returns a boolean if a field has been set.
func (o *CaptiveRecipient) HasClientUserId() bool {
	if o != nil && !IsNil(o.ClientUserId) {
		return true
	}

	return false
}

// SetClientUserId gets a reference to the given string and assigns it to the ClientUserId field.
func (o *CaptiveRecipient) SetClientUserId(v string) {
	o.ClientUserId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CaptiveRecipient) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptiveRecipient) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CaptiveRecipient) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CaptiveRecipient) SetEmail(v string) {
	o.Email = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *CaptiveRecipient) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptiveRecipient) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *CaptiveRecipient) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *CaptiveRecipient) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *CaptiveRecipient) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptiveRecipient) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *CaptiveRecipient) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *CaptiveRecipient) SetUserName(v string) {
	o.UserName = &v
}

func (o CaptiveRecipient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaptiveRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientUserId) {
		toSerialize["clientUserId"] = o.ClientUserId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableCaptiveRecipient struct {
	value *CaptiveRecipient
	isSet bool
}

func (v NullableCaptiveRecipient) Get() *CaptiveRecipient {
	return v.value
}

func (v *NullableCaptiveRecipient) Set(val *CaptiveRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableCaptiveRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableCaptiveRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaptiveRecipient(val *CaptiveRecipient) *NullableCaptiveRecipient {
	return &NullableCaptiveRecipient{value: val, isSet: true}
}

func (v NullableCaptiveRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaptiveRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


