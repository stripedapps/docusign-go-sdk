/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScheduledSending type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledSending{}

// ScheduledSending A complex element that specifies the scheduled sending settings for the envelope.
type ScheduledSending struct {
	// The ID of the bulk list. Set this optional value to use scheduled sending with a bulk send operation.
	BulkListId *string `json:"bulkListId,omitempty"`
	// The timestamp of when the envelope is scheduled to be sent in ISO 8601 format.  This property is read-only. 
	ResumeDate *string `json:"resumeDate,omitempty"`
	// User-specified rules indicating how and when the envelope should be scheduled for sending. Only one rule may be specified.
	Rules []EnvelopeDelayRule `json:"rules,omitempty"`
	// Status of the scheduled sending job. Valid values:  * `pending`: The envelope has not yet been sent and the scheduled sending delay has not been initiated. * `started`: The sender has initiated the sending process. The delay has not elapsed, so the envelope has not yet been sent to the first recipient. * `completed`: The delay has elapsed and the envelope has been sent to the first recipient.  This property is read-only.
	Status *string `json:"status,omitempty"`
}

// NewScheduledSending instantiates a new ScheduledSending object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledSending() *ScheduledSending {
	this := ScheduledSending{}
	return &this
}

// NewScheduledSendingWithDefaults instantiates a new ScheduledSending object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledSendingWithDefaults() *ScheduledSending {
	this := ScheduledSending{}
	return &this
}

// GetBulkListId returns the BulkListId field value if set, zero value otherwise.
func (o *ScheduledSending) GetBulkListId() string {
	if o == nil || IsNil(o.BulkListId) {
		var ret string
		return ret
	}
	return *o.BulkListId
}

// GetBulkListIdOk returns a tuple with the BulkListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSending) GetBulkListIdOk() (*string, bool) {
	if o == nil || IsNil(o.BulkListId) {
		return nil, false
	}
	return o.BulkListId, true
}

// HasBulkListId returns a boolean if a field has been set.
func (o *ScheduledSending) HasBulkListId() bool {
	if o != nil && !IsNil(o.BulkListId) {
		return true
	}

	return false
}

// SetBulkListId gets a reference to the given string and assigns it to the BulkListId field.
func (o *ScheduledSending) SetBulkListId(v string) {
	o.BulkListId = &v
}

// GetResumeDate returns the ResumeDate field value if set, zero value otherwise.
func (o *ScheduledSending) GetResumeDate() string {
	if o == nil || IsNil(o.ResumeDate) {
		var ret string
		return ret
	}
	return *o.ResumeDate
}

// GetResumeDateOk returns a tuple with the ResumeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSending) GetResumeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ResumeDate) {
		return nil, false
	}
	return o.ResumeDate, true
}

// HasResumeDate returns a boolean if a field has been set.
func (o *ScheduledSending) HasResumeDate() bool {
	if o != nil && !IsNil(o.ResumeDate) {
		return true
	}

	return false
}

// SetResumeDate gets a reference to the given string and assigns it to the ResumeDate field.
func (o *ScheduledSending) SetResumeDate(v string) {
	o.ResumeDate = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ScheduledSending) GetRules() []EnvelopeDelayRule {
	if o == nil || IsNil(o.Rules) {
		var ret []EnvelopeDelayRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSending) GetRulesOk() ([]EnvelopeDelayRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ScheduledSending) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []EnvelopeDelayRule and assigns it to the Rules field.
func (o *ScheduledSending) SetRules(v []EnvelopeDelayRule) {
	o.Rules = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScheduledSending) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSending) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScheduledSending) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ScheduledSending) SetStatus(v string) {
	o.Status = &v
}

func (o ScheduledSending) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledSending) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BulkListId) {
		toSerialize["bulkListId"] = o.BulkListId
	}
	if !IsNil(o.ResumeDate) {
		toSerialize["resumeDate"] = o.ResumeDate
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableScheduledSending struct {
	value *ScheduledSending
	isSet bool
}

func (v NullableScheduledSending) Get() *ScheduledSending {
	return v.value
}

func (v *NullableScheduledSending) Set(val *ScheduledSending) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledSending) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledSending) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledSending(val *ScheduledSending) *NullableScheduledSending {
	return &NullableScheduledSending{value: val, isSet: true}
}

func (v NullableScheduledSending) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledSending) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


