/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountCustomFieldsAPIService AccountCustomFieldsAPI service
type AccountCustomFieldsAPIService service

type ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest struct {
	ctx context.Context
	ApiService *AccountCustomFieldsAPIService
	accountId string
	customFieldId string
	applyToTemplates *string
}

func (r ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest) ApplyToTemplates(applyToTemplates string) ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest {
	r.applyToTemplates = &applyToTemplates
	return r
}

func (r ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest) Execute() (*http.Response, error) {
	return r.ApiService.AccountCustomFieldsDeleteAccountCustomFieldsExecute(r)
}

/*
AccountCustomFieldsDeleteAccountCustomFields Deletes an account custom field.

This method deletes an existing account custom field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param customFieldId The ID of the custom field.
 @return ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest
*/
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsDeleteAccountCustomFields(ctx context.Context, accountId string, customFieldId string) ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest {
	return ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		customFieldId: customFieldId,
	}
}

// Execute executes the request
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsDeleteAccountCustomFieldsExecute(r ApiAccountCustomFieldsDeleteAccountCustomFieldsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCustomFieldsAPIService.AccountCustomFieldsDeleteAccountCustomFields")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/custom_fields/{customFieldId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", url.PathEscape(parameterValueToString(r.customFieldId, "customFieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.applyToTemplates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "apply_to_templates", r.applyToTemplates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAccountCustomFieldsGetAccountCustomFieldsRequest struct {
	ctx context.Context
	ApiService *AccountCustomFieldsAPIService
	accountId string
}

func (r ApiAccountCustomFieldsGetAccountCustomFieldsRequest) Execute() (*AccountCustomFields, *http.Response, error) {
	return r.ApiService.AccountCustomFieldsGetAccountCustomFieldsExecute(r)
}

/*
AccountCustomFieldsGetAccountCustomFields Gets a list of custom fields.

This method returns a list of the envelope and document custom fields associated with an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiAccountCustomFieldsGetAccountCustomFieldsRequest
*/
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsGetAccountCustomFields(ctx context.Context, accountId string) ApiAccountCustomFieldsGetAccountCustomFieldsRequest {
	return ApiAccountCustomFieldsGetAccountCustomFieldsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountCustomFields
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsGetAccountCustomFieldsExecute(r ApiAccountCustomFieldsGetAccountCustomFieldsRequest) (*AccountCustomFields, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountCustomFields
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCustomFieldsAPIService.AccountCustomFieldsGetAccountCustomFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/custom_fields"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountCustomFieldsPostAccountCustomFieldsRequest struct {
	ctx context.Context
	ApiService *AccountCustomFieldsAPIService
	accountId string
	applyToTemplates *string
	customField *CustomField
}

// (Optional) When **true,** the new custom field is applied to all of the templates on the account.
func (r ApiAccountCustomFieldsPostAccountCustomFieldsRequest) ApplyToTemplates(applyToTemplates string) ApiAccountCustomFieldsPostAccountCustomFieldsRequest {
	r.applyToTemplates = &applyToTemplates
	return r
}

func (r ApiAccountCustomFieldsPostAccountCustomFieldsRequest) CustomField(customField CustomField) ApiAccountCustomFieldsPostAccountCustomFieldsRequest {
	r.customField = &customField
	return r
}

func (r ApiAccountCustomFieldsPostAccountCustomFieldsRequest) Execute() (*AccountCustomFields, *http.Response, error) {
	return r.ApiService.AccountCustomFieldsPostAccountCustomFieldsExecute(r)
}

/*
AccountCustomFieldsPostAccountCustomFields Creates an account custom field.

This method creates a custom field and makes it available for all new envelopes associated with an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiAccountCustomFieldsPostAccountCustomFieldsRequest
*/
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsPostAccountCustomFields(ctx context.Context, accountId string) ApiAccountCustomFieldsPostAccountCustomFieldsRequest {
	return ApiAccountCustomFieldsPostAccountCustomFieldsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountCustomFields
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsPostAccountCustomFieldsExecute(r ApiAccountCustomFieldsPostAccountCustomFieldsRequest) (*AccountCustomFields, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountCustomFields
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCustomFieldsAPIService.AccountCustomFieldsPostAccountCustomFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/custom_fields"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.applyToTemplates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "apply_to_templates", r.applyToTemplates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountCustomFieldsPutAccountCustomFieldsRequest struct {
	ctx context.Context
	ApiService *AccountCustomFieldsAPIService
	accountId string
	customFieldId string
	applyToTemplates *string
	customField *CustomField
}

func (r ApiAccountCustomFieldsPutAccountCustomFieldsRequest) ApplyToTemplates(applyToTemplates string) ApiAccountCustomFieldsPutAccountCustomFieldsRequest {
	r.applyToTemplates = &applyToTemplates
	return r
}

func (r ApiAccountCustomFieldsPutAccountCustomFieldsRequest) CustomField(customField CustomField) ApiAccountCustomFieldsPutAccountCustomFieldsRequest {
	r.customField = &customField
	return r
}

func (r ApiAccountCustomFieldsPutAccountCustomFieldsRequest) Execute() (*AccountCustomFields, *http.Response, error) {
	return r.ApiService.AccountCustomFieldsPutAccountCustomFieldsExecute(r)
}

/*
AccountCustomFieldsPutAccountCustomFields Updates an account custom field.

This method updates an existing account custom field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param customFieldId The ID of the custom field.
 @return ApiAccountCustomFieldsPutAccountCustomFieldsRequest
*/
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsPutAccountCustomFields(ctx context.Context, accountId string, customFieldId string) ApiAccountCustomFieldsPutAccountCustomFieldsRequest {
	return ApiAccountCustomFieldsPutAccountCustomFieldsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		customFieldId: customFieldId,
	}
}

// Execute executes the request
//  @return AccountCustomFields
func (a *AccountCustomFieldsAPIService) AccountCustomFieldsPutAccountCustomFieldsExecute(r ApiAccountCustomFieldsPutAccountCustomFieldsRequest) (*AccountCustomFields, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountCustomFields
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCustomFieldsAPIService.AccountCustomFieldsPutAccountCustomFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/custom_fields/{customFieldId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", url.PathEscape(parameterValueToString(r.customFieldId, "customFieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.applyToTemplates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "apply_to_templates", r.applyToTemplates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
