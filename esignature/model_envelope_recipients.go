/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeRecipients type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeRecipients{}

// EnvelopeRecipients Envelope recipients
type EnvelopeRecipients struct {
	// A list of agent recipients assigned to the documents.
	Agents []Agent `json:"agents,omitempty"`
	// A list of carbon copy recipients assigned to the documents.
	CarbonCopies []CarbonCopy `json:"carbonCopies,omitempty"`
	// A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
	CertifiedDeliveries []CertifiedDelivery `json:"certifiedDeliveries,omitempty"`
	// The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions.
	CurrentRoutingOrder *string `json:"currentRoutingOrder,omitempty"`
	// A list of users who can edit the envelope.
	Editors []Editor `json:"editors,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
	InPersonSigners []InPersonSigner `json:"inPersonSigners,omitempty"`
	// Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
	Intermediaries []Intermediary `json:"intermediaries,omitempty"`
	// A list of notary recipients on the envelope.
	Notaries []NotaryRecipient `json:"notaries,omitempty"`
	// 
	Participants []Participant `json:"participants,omitempty"`
	// The number of recipients in the envelope.
	RecipientCount *string `json:"recipientCount,omitempty"`
	// A list of electronic seals to apply to documents.
	Seals []SealSign `json:"seals,omitempty"`
	// A list of signers on the envelope.
	Signers []Signer `json:"signers,omitempty"`
	// A list of signers who act as witnesses on the envelope.
	Witnesses []Witness `json:"witnesses,omitempty"`
}

// NewEnvelopeRecipients instantiates a new EnvelopeRecipients object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeRecipients() *EnvelopeRecipients {
	this := EnvelopeRecipients{}
	return &this
}

// NewEnvelopeRecipientsWithDefaults instantiates a new EnvelopeRecipients object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeRecipientsWithDefaults() *EnvelopeRecipients {
	this := EnvelopeRecipients{}
	return &this
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetAgents() []Agent {
	if o == nil || IsNil(o.Agents) {
		var ret []Agent
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetAgentsOk() ([]Agent, bool) {
	if o == nil || IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasAgents() bool {
	if o != nil && !IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []Agent and assigns it to the Agents field.
func (o *EnvelopeRecipients) SetAgents(v []Agent) {
	o.Agents = v
}

// GetCarbonCopies returns the CarbonCopies field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetCarbonCopies() []CarbonCopy {
	if o == nil || IsNil(o.CarbonCopies) {
		var ret []CarbonCopy
		return ret
	}
	return o.CarbonCopies
}

// GetCarbonCopiesOk returns a tuple with the CarbonCopies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetCarbonCopiesOk() ([]CarbonCopy, bool) {
	if o == nil || IsNil(o.CarbonCopies) {
		return nil, false
	}
	return o.CarbonCopies, true
}

// HasCarbonCopies returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasCarbonCopies() bool {
	if o != nil && !IsNil(o.CarbonCopies) {
		return true
	}

	return false
}

// SetCarbonCopies gets a reference to the given []CarbonCopy and assigns it to the CarbonCopies field.
func (o *EnvelopeRecipients) SetCarbonCopies(v []CarbonCopy) {
	o.CarbonCopies = v
}

// GetCertifiedDeliveries returns the CertifiedDeliveries field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetCertifiedDeliveries() []CertifiedDelivery {
	if o == nil || IsNil(o.CertifiedDeliveries) {
		var ret []CertifiedDelivery
		return ret
	}
	return o.CertifiedDeliveries
}

// GetCertifiedDeliveriesOk returns a tuple with the CertifiedDeliveries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetCertifiedDeliveriesOk() ([]CertifiedDelivery, bool) {
	if o == nil || IsNil(o.CertifiedDeliveries) {
		return nil, false
	}
	return o.CertifiedDeliveries, true
}

// HasCertifiedDeliveries returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasCertifiedDeliveries() bool {
	if o != nil && !IsNil(o.CertifiedDeliveries) {
		return true
	}

	return false
}

// SetCertifiedDeliveries gets a reference to the given []CertifiedDelivery and assigns it to the CertifiedDeliveries field.
func (o *EnvelopeRecipients) SetCertifiedDeliveries(v []CertifiedDelivery) {
	o.CertifiedDeliveries = v
}

// GetCurrentRoutingOrder returns the CurrentRoutingOrder field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetCurrentRoutingOrder() string {
	if o == nil || IsNil(o.CurrentRoutingOrder) {
		var ret string
		return ret
	}
	return *o.CurrentRoutingOrder
}

// GetCurrentRoutingOrderOk returns a tuple with the CurrentRoutingOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetCurrentRoutingOrderOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentRoutingOrder) {
		return nil, false
	}
	return o.CurrentRoutingOrder, true
}

// HasCurrentRoutingOrder returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasCurrentRoutingOrder() bool {
	if o != nil && !IsNil(o.CurrentRoutingOrder) {
		return true
	}

	return false
}

// SetCurrentRoutingOrder gets a reference to the given string and assigns it to the CurrentRoutingOrder field.
func (o *EnvelopeRecipients) SetCurrentRoutingOrder(v string) {
	o.CurrentRoutingOrder = &v
}

// GetEditors returns the Editors field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetEditors() []Editor {
	if o == nil || IsNil(o.Editors) {
		var ret []Editor
		return ret
	}
	return o.Editors
}

// GetEditorsOk returns a tuple with the Editors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetEditorsOk() ([]Editor, bool) {
	if o == nil || IsNil(o.Editors) {
		return nil, false
	}
	return o.Editors, true
}

// HasEditors returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasEditors() bool {
	if o != nil && !IsNil(o.Editors) {
		return true
	}

	return false
}

// SetEditors gets a reference to the given []Editor and assigns it to the Editors field.
func (o *EnvelopeRecipients) SetEditors(v []Editor) {
	o.Editors = v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *EnvelopeRecipients) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetInPersonSigners returns the InPersonSigners field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetInPersonSigners() []InPersonSigner {
	if o == nil || IsNil(o.InPersonSigners) {
		var ret []InPersonSigner
		return ret
	}
	return o.InPersonSigners
}

// GetInPersonSignersOk returns a tuple with the InPersonSigners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetInPersonSignersOk() ([]InPersonSigner, bool) {
	if o == nil || IsNil(o.InPersonSigners) {
		return nil, false
	}
	return o.InPersonSigners, true
}

// HasInPersonSigners returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasInPersonSigners() bool {
	if o != nil && !IsNil(o.InPersonSigners) {
		return true
	}

	return false
}

// SetInPersonSigners gets a reference to the given []InPersonSigner and assigns it to the InPersonSigners field.
func (o *EnvelopeRecipients) SetInPersonSigners(v []InPersonSigner) {
	o.InPersonSigners = v
}

// GetIntermediaries returns the Intermediaries field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetIntermediaries() []Intermediary {
	if o == nil || IsNil(o.Intermediaries) {
		var ret []Intermediary
		return ret
	}
	return o.Intermediaries
}

// GetIntermediariesOk returns a tuple with the Intermediaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetIntermediariesOk() ([]Intermediary, bool) {
	if o == nil || IsNil(o.Intermediaries) {
		return nil, false
	}
	return o.Intermediaries, true
}

// HasIntermediaries returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasIntermediaries() bool {
	if o != nil && !IsNil(o.Intermediaries) {
		return true
	}

	return false
}

// SetIntermediaries gets a reference to the given []Intermediary and assigns it to the Intermediaries field.
func (o *EnvelopeRecipients) SetIntermediaries(v []Intermediary) {
	o.Intermediaries = v
}

// GetNotaries returns the Notaries field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetNotaries() []NotaryRecipient {
	if o == nil || IsNil(o.Notaries) {
		var ret []NotaryRecipient
		return ret
	}
	return o.Notaries
}

// GetNotariesOk returns a tuple with the Notaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetNotariesOk() ([]NotaryRecipient, bool) {
	if o == nil || IsNil(o.Notaries) {
		return nil, false
	}
	return o.Notaries, true
}

// HasNotaries returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasNotaries() bool {
	if o != nil && !IsNil(o.Notaries) {
		return true
	}

	return false
}

// SetNotaries gets a reference to the given []NotaryRecipient and assigns it to the Notaries field.
func (o *EnvelopeRecipients) SetNotaries(v []NotaryRecipient) {
	o.Notaries = v
}

// GetParticipants returns the Participants field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetParticipants() []Participant {
	if o == nil || IsNil(o.Participants) {
		var ret []Participant
		return ret
	}
	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetParticipantsOk() ([]Participant, bool) {
	if o == nil || IsNil(o.Participants) {
		return nil, false
	}
	return o.Participants, true
}

// HasParticipants returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasParticipants() bool {
	if o != nil && !IsNil(o.Participants) {
		return true
	}

	return false
}

// SetParticipants gets a reference to the given []Participant and assigns it to the Participants field.
func (o *EnvelopeRecipients) SetParticipants(v []Participant) {
	o.Participants = v
}

// GetRecipientCount returns the RecipientCount field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetRecipientCount() string {
	if o == nil || IsNil(o.RecipientCount) {
		var ret string
		return ret
	}
	return *o.RecipientCount
}

// GetRecipientCountOk returns a tuple with the RecipientCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetRecipientCountOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientCount) {
		return nil, false
	}
	return o.RecipientCount, true
}

// HasRecipientCount returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasRecipientCount() bool {
	if o != nil && !IsNil(o.RecipientCount) {
		return true
	}

	return false
}

// SetRecipientCount gets a reference to the given string and assigns it to the RecipientCount field.
func (o *EnvelopeRecipients) SetRecipientCount(v string) {
	o.RecipientCount = &v
}

// GetSeals returns the Seals field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetSeals() []SealSign {
	if o == nil || IsNil(o.Seals) {
		var ret []SealSign
		return ret
	}
	return o.Seals
}

// GetSealsOk returns a tuple with the Seals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetSealsOk() ([]SealSign, bool) {
	if o == nil || IsNil(o.Seals) {
		return nil, false
	}
	return o.Seals, true
}

// HasSeals returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasSeals() bool {
	if o != nil && !IsNil(o.Seals) {
		return true
	}

	return false
}

// SetSeals gets a reference to the given []SealSign and assigns it to the Seals field.
func (o *EnvelopeRecipients) SetSeals(v []SealSign) {
	o.Seals = v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetSigners() []Signer {
	if o == nil || IsNil(o.Signers) {
		var ret []Signer
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetSignersOk() ([]Signer, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []Signer and assigns it to the Signers field.
func (o *EnvelopeRecipients) SetSigners(v []Signer) {
	o.Signers = v
}

// GetWitnesses returns the Witnesses field value if set, zero value otherwise.
func (o *EnvelopeRecipients) GetWitnesses() []Witness {
	if o == nil || IsNil(o.Witnesses) {
		var ret []Witness
		return ret
	}
	return o.Witnesses
}

// GetWitnessesOk returns a tuple with the Witnesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeRecipients) GetWitnessesOk() ([]Witness, bool) {
	if o == nil || IsNil(o.Witnesses) {
		return nil, false
	}
	return o.Witnesses, true
}

// HasWitnesses returns a boolean if a field has been set.
func (o *EnvelopeRecipients) HasWitnesses() bool {
	if o != nil && !IsNil(o.Witnesses) {
		return true
	}

	return false
}

// SetWitnesses gets a reference to the given []Witness and assigns it to the Witnesses field.
func (o *EnvelopeRecipients) SetWitnesses(v []Witness) {
	o.Witnesses = v
}

func (o EnvelopeRecipients) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeRecipients) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	if !IsNil(o.CarbonCopies) {
		toSerialize["carbonCopies"] = o.CarbonCopies
	}
	if !IsNil(o.CertifiedDeliveries) {
		toSerialize["certifiedDeliveries"] = o.CertifiedDeliveries
	}
	if !IsNil(o.CurrentRoutingOrder) {
		toSerialize["currentRoutingOrder"] = o.CurrentRoutingOrder
	}
	if !IsNil(o.Editors) {
		toSerialize["editors"] = o.Editors
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.InPersonSigners) {
		toSerialize["inPersonSigners"] = o.InPersonSigners
	}
	if !IsNil(o.Intermediaries) {
		toSerialize["intermediaries"] = o.Intermediaries
	}
	if !IsNil(o.Notaries) {
		toSerialize["notaries"] = o.Notaries
	}
	if !IsNil(o.Participants) {
		toSerialize["participants"] = o.Participants
	}
	if !IsNil(o.RecipientCount) {
		toSerialize["recipientCount"] = o.RecipientCount
	}
	if !IsNil(o.Seals) {
		toSerialize["seals"] = o.Seals
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	if !IsNil(o.Witnesses) {
		toSerialize["witnesses"] = o.Witnesses
	}
	return toSerialize, nil
}

type NullableEnvelopeRecipients struct {
	value *EnvelopeRecipients
	isSet bool
}

func (v NullableEnvelopeRecipients) Get() *EnvelopeRecipients {
	return v.value
}

func (v *NullableEnvelopeRecipients) Set(val *EnvelopeRecipients) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeRecipients) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeRecipients) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeRecipients(val *EnvelopeRecipients) *NullableEnvelopeRecipients {
	return &NullableEnvelopeRecipients{value: val, isSet: true}
}

func (v NullableEnvelopeRecipients) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeRecipients) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


