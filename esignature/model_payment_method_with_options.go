/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaymentMethodWithOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethodWithOptions{}

// PaymentMethodWithOptions This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
type PaymentMethodWithOptions struct {
	// A list of ISO 4217 currency codes for the currencies that the payment gateway account supports.  Examples:   - `USD` - `CAD` - `EUR` - `HKD`
	SupportedCurrencies []string `json:"supportedCurrencies,omitempty"`
	// The payment options that are compatible with the payment method in the `type` property.  Possible values are:  - `save`  - `save_and_authorize` - `authorize`
	SupportedOptions []string `json:"supportedOptions,omitempty"`
	// The name of a payment method that the gateway accepts.  Possible values are:  - `CreditCard` - `ApplePay` - `AndroidPay` - `BankAccount` - `PayPal`
	Type *string `json:"type,omitempty"`
}

// NewPaymentMethodWithOptions instantiates a new PaymentMethodWithOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodWithOptions() *PaymentMethodWithOptions {
	this := PaymentMethodWithOptions{}
	return &this
}

// NewPaymentMethodWithOptionsWithDefaults instantiates a new PaymentMethodWithOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodWithOptionsWithDefaults() *PaymentMethodWithOptions {
	this := PaymentMethodWithOptions{}
	return &this
}

// GetSupportedCurrencies returns the SupportedCurrencies field value if set, zero value otherwise.
func (o *PaymentMethodWithOptions) GetSupportedCurrencies() []string {
	if o == nil || IsNil(o.SupportedCurrencies) {
		var ret []string
		return ret
	}
	return o.SupportedCurrencies
}

// GetSupportedCurrenciesOk returns a tuple with the SupportedCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodWithOptions) GetSupportedCurrenciesOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedCurrencies) {
		return nil, false
	}
	return o.SupportedCurrencies, true
}

// HasSupportedCurrencies returns a boolean if a field has been set.
func (o *PaymentMethodWithOptions) HasSupportedCurrencies() bool {
	if o != nil && !IsNil(o.SupportedCurrencies) {
		return true
	}

	return false
}

// SetSupportedCurrencies gets a reference to the given []string and assigns it to the SupportedCurrencies field.
func (o *PaymentMethodWithOptions) SetSupportedCurrencies(v []string) {
	o.SupportedCurrencies = v
}

// GetSupportedOptions returns the SupportedOptions field value if set, zero value otherwise.
func (o *PaymentMethodWithOptions) GetSupportedOptions() []string {
	if o == nil || IsNil(o.SupportedOptions) {
		var ret []string
		return ret
	}
	return o.SupportedOptions
}

// GetSupportedOptionsOk returns a tuple with the SupportedOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodWithOptions) GetSupportedOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedOptions) {
		return nil, false
	}
	return o.SupportedOptions, true
}

// HasSupportedOptions returns a boolean if a field has been set.
func (o *PaymentMethodWithOptions) HasSupportedOptions() bool {
	if o != nil && !IsNil(o.SupportedOptions) {
		return true
	}

	return false
}

// SetSupportedOptions gets a reference to the given []string and assigns it to the SupportedOptions field.
func (o *PaymentMethodWithOptions) SetSupportedOptions(v []string) {
	o.SupportedOptions = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentMethodWithOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodWithOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentMethodWithOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentMethodWithOptions) SetType(v string) {
	o.Type = &v
}

func (o PaymentMethodWithOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodWithOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SupportedCurrencies) {
		toSerialize["supportedCurrencies"] = o.SupportedCurrencies
	}
	if !IsNil(o.SupportedOptions) {
		toSerialize["supportedOptions"] = o.SupportedOptions
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePaymentMethodWithOptions struct {
	value *PaymentMethodWithOptions
	isSet bool
}

func (v NullablePaymentMethodWithOptions) Get() *PaymentMethodWithOptions {
	return v.value
}

func (v *NullablePaymentMethodWithOptions) Set(val *PaymentMethodWithOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodWithOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodWithOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodWithOptions(val *PaymentMethodWithOptions) *NullablePaymentMethodWithOptions {
	return &NullablePaymentMethodWithOptions{value: val, isSet: true}
}

func (v NullablePaymentMethodWithOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodWithOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


