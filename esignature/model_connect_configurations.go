/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectConfigurations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectConfigurations{}

// ConnectConfigurations Contains information about a DocuSign Connect configuration.
type ConnectConfigurations struct {
	// When **true,** data is sent to the `urlToPublishTo` web address. The default value for this property is **false,** which will stop sending data while maintaining the Connect configuration information.
	AllowEnvelopePublish *string `json:"allowEnvelopePublish,omitempty"`
	// When **true,** DocuSign sends data to the designated Salesforce account through Connect. The default value is **true.**
	AllowSalesforcePublish *string `json:"allowSalesforcePublish,omitempty"`
	// When **true,** the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect. The default value is **false.**  **Note:** If this property is **false,** make sure you set the `userIds` property to a non-empty array of user IDs.
	AllUsers *string `json:"allUsers,omitempty"`
	// This flag allows you to toggle between including and excluding specified users from the configuration. When **false,** the users corresponding to the IDs in `userIds` will be included in the configuration. Conversely, when **true,** the users will be excluded from the configuration. The default value is **false.**
	AllUsersExcept *string `json:"allUsersExcept,omitempty"`
	// If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
	ConfigurationType *string `json:"configurationType,omitempty"`
	// The DocuSign-generated ID for the Connect configuration. This property is read-only.
	ConnectId *string `json:"connectId,omitempty"`
	// 
	DeliveryMode *string `json:"deliveryMode,omitempty"`
	// 
	DisabledBy *string `json:"disabledBy,omitempty"`
	// When **true,** Connect logging is turned on. DocuSign recommends that you enable this functionality to help troubleshoot any issues.   You can have a maximum of 100 active logs in your account. You can view the entries in active logs in the **Logs** tab in the Connect console.
	EnableLog *string `json:"enableLog,omitempty"`
	// An array of strings that lists envelope-related events to track through Connect. The possible event values are:   - `sent`: An envelope has the status `sent` in the following scenarios:    - When the envelope has been sent to recipients.    - When using remote signing, this event is triggered when the email notification with a link to the documents is sent to at least one recipient.    - When using embedded signing, this event is triggered when the link is ready for the recipient to sign the envelope.     An envelope remains in this state until all recipients have viewed or taken action on the envelope.  - `delivered`: This status is triggered when all recipients have opened the envelope, selected the **Continue** button in the interface, and viewed the documents. - `completed`: This status is triggered when all recipients have completed their assigned actions on an envelope. - `declined`: This status is triggered when a recipient has declined to sign the envelope. - `voided`: The voided status indicates that the sender has voided the envelope.  **Note:** In previous versions of the API, this value was a single comma-separated string. 
	EnvelopeEvents []string `json:"envelopeEvents,omitempty"`
	EventData *ConnectEventData `json:"eventData,omitempty"`
	// A comma-separated list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `urlToPublishTo` property.  Set this property when you are using the [JSON SIM event model](/platform/webhooks/connect/improved-json-sim-event-model/). If you are instead using any of [the legacy event message formats](/platform/webhooks/connect/legacy-message-formats/), set either the `envelopeEvents` property or the `recipientEvents` property.  The [possible event statuses](/platform/webhooks/connect/improved-json-sim-event-model/#eventreference) are:  * `envelope-created` * `envelope-sent` * `envelope-resent` * `envelope-delivered` * `envelope-completed` * `envelope-declined` * `envelope-voided` * `recipient-authenticationfailed` * `recipient-autoresponded` * `recipient-declined` * `recipient-delivered` * `recipient-completed` * `recipient-sent` * `recipient-resent` * `template-created` * `template-modified` * `template-deleted` * `envelope-corrected` * `envelope-purge` * `envelope-deleted` * `envelope-discard` * `recipient-reassign` * `recipient-delegate` * `recipient-finish-later` * `click-agreed` * `click-declined` 
	Events []string `json:"events,omitempty"`
	// The ID of an external folder.
	ExternalFolderId *string `json:"externalFolderId,omitempty"`
	// The label for an external folder.
	ExternalFolderLabel *string `json:"externalFolderLabel,omitempty"`
	// 
	GroupIds []string `json:"groupIds,omitempty"`
	// When **true,** the Connect Service includes the Certificate of Completion with completed envelopes. 
	IncludeCertificateOfCompletion *string `json:"includeCertificateOfCompletion,omitempty"`
	// When **true,** a certificate for a SOAP header is included in messages sent through Connect.
	IncludeCertSoapHeader *string `json:"includeCertSoapHeader,omitempty"`
	// When **true,** the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. 
	IncludeDocumentFields *string `json:"includeDocumentFields,omitempty"`
	// When **true,** Connect attaches the envelope documents to the payloads of your event notification messages.  **Note:** Consider resources and scaling when adding documents to your event payloads. Documents attached to these messages are sent as base64 strings, which are larger than binary document data. This can significantly increase your payload size, opening up windows for failure. If you include documents, you must build your application to scale in these situations.
	IncludeDocuments *string `json:"includeDocuments,omitempty"`
	// When **true,** Connect will include the voidedReason for voided envelopes.
	IncludeEnvelopeVoidReason *string `json:"includeEnvelopeVoidReason,omitempty"`
	// When **true,** a Hash-based Message Authentication Code (HMAC) signature is included in messages sent through Connect. For more information, see [Using HMAC Security with DocuSign Connect](/platform/webhooks/connect/hmac/).
	IncludeHMAC *string `json:"includeHMAC,omitempty"`
	// 
	IncludeOAuth *string `json:"includeOAuth,omitempty"`
	// When **true,** Connect will include the sender account as Custom Field in the data.
	IncludeSenderAccountasCustomField *string `json:"includeSenderAccountasCustomField,omitempty"`
	// When **true,** Connect will include the envelope time zone information.
	IncludeTimeZoneInformation *string `json:"includeTimeZoneInformation,omitempty"`
	// 
	IntegratorManaged *string `json:"integratorManaged,omitempty"`
	// The name of the Connect configuration. The name helps identify the configuration in the list.
	Name *string `json:"name,omitempty"`
	// The user's encrypted password hash.
	Password *string `json:"password,omitempty"`
	// An array of strings that lists of recipient-related events that trigger a notification to your webhook Connect listener. The possible event values are:  - `sent`: If a recipient type is set to receive an email notification to take action on an envelope, the recipient status is set to `sent` upon delivery of the email. - `delivered`: The recipient has viewed the documents in the envelope. This recipient status does not indicate email delivery of the documents in the envelope. - `completed`: The recipient has completed their assigned actions on an envelope. - `declined`: The recipient has declined to sign a document in the envelope. - `authenticationfailed`: At least one signer has failed the authentication check on the document. If this occurs, you have two options:    - Send a reminder to the recipients, which provides the signer with another chance to access and pass the authentication.    - Correct the document and modify the authentication setting. - `autoresponded`: The recipient's email system sent back an automatic response. This status is only used when **Send-on-behalf-of** is turned off for the account.  **Note:** In previous versions of the API, this value was a single comma-separated string. 
	RecipientEvents []string `json:"recipientEvents,omitempty"`
	// When **true,** [Mutual TLS](/platform/webhooks/mutual-tls/) authentication is enabled.
	RequireMutualTls *string `json:"requireMutualTls,omitempty"`
	// When **true,** event delivery acknowledgements are enabled for your Connect configuration.  DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.  #### When **true** and Send Individual Messages (SIM) mode is activated  If the HTTP status response to a notification message is not in the range of 200-299, then the message delivery failed, and the configuration is marked as down.  The message will be queued and retried once per day. While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`. When a message succeeds, all queued messages for the configuration will be tried immediately, in order.  There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.  #### When **true** and SIM mode is not activated  If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.  The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).  Subsequent notifications will be tried when they occur. There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.  #### When **false**  When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message, and you must handle the failure manually.  
	RequiresAcknowledgement *string `json:"requiresAcknowledgement,omitempty"`
	// The version of the Salesforce API that you are using.
	SalesforceApiVersion *string `json:"salesforceApiVersion,omitempty"`
	// 
	SalesforceAuthcode *string `json:"salesforceAuthcode,omitempty"`
	// 
	SalesforceCallBackUrl *string `json:"salesforceCallBackUrl,omitempty"`
	// When **true,** DocuSign can use documents in your Salesforce account for sending and signing.
	SalesforceDocumentsAsContentFiles *string `json:"salesforceDocumentsAsContentFiles,omitempty"`
	// 
	SenderOverride *string `json:"senderOverride,omitempty"`
	// This property sets the items that are available for selection when adding or editing Connect objects. 
	SenderSelectableItems []string `json:"senderSelectableItems,omitempty"`
	// An array of Salesforce objects.
	SfObjects []ConnectSalesforceObject `json:"sfObjects,omitempty"`
	// When **true,** Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. 
	SignMessageWithX509Certificate *string `json:"signMessageWithX509Certificate,omitempty"`
	// The namespace of the SOAP interface.  **Note:** If `useSoapInterface` is set to **true,** you must set this value.
	SoapNamespace *string `json:"soapNamespace,omitempty"`
	// The endpoint to which Connect should send webhook notification messages via an HTTPS POST request. The URL must start with `https`. The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not acceptable, but you can use free certificates from Let's Encrypt.  The maximum length of this property is 4096 bytes.
	UrlToPublishTo *string `json:"urlToPublishTo,omitempty"`
	// A comma-separated list of user IDs. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.  By default, the users will be included in the configuration. If you want to exclude the users, set the `allUsersExcept` property to **true.**  **Note:** If `allUsers` is set to `false`, then you must provide a list of user IDs.
	UserIds []string `json:"userIds,omitempty"`
	// The name of the user.
	UserName *string `json:"userName,omitempty"`
	// When **true,** indicates that the `urlToPublishTo` property contains a SOAP endpoint.
	UseSoapInterface *string `json:"useSoapInterface,omitempty"`
}

// NewConnectConfigurations instantiates a new ConnectConfigurations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectConfigurations() *ConnectConfigurations {
	this := ConnectConfigurations{}
	return &this
}

// NewConnectConfigurationsWithDefaults instantiates a new ConnectConfigurations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectConfigurationsWithDefaults() *ConnectConfigurations {
	this := ConnectConfigurations{}
	return &this
}

// GetAllowEnvelopePublish returns the AllowEnvelopePublish field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetAllowEnvelopePublish() string {
	if o == nil || IsNil(o.AllowEnvelopePublish) {
		var ret string
		return ret
	}
	return *o.AllowEnvelopePublish
}

// GetAllowEnvelopePublishOk returns a tuple with the AllowEnvelopePublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetAllowEnvelopePublishOk() (*string, bool) {
	if o == nil || IsNil(o.AllowEnvelopePublish) {
		return nil, false
	}
	return o.AllowEnvelopePublish, true
}

// HasAllowEnvelopePublish returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasAllowEnvelopePublish() bool {
	if o != nil && !IsNil(o.AllowEnvelopePublish) {
		return true
	}

	return false
}

// SetAllowEnvelopePublish gets a reference to the given string and assigns it to the AllowEnvelopePublish field.
func (o *ConnectConfigurations) SetAllowEnvelopePublish(v string) {
	o.AllowEnvelopePublish = &v
}

// GetAllowSalesforcePublish returns the AllowSalesforcePublish field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetAllowSalesforcePublish() string {
	if o == nil || IsNil(o.AllowSalesforcePublish) {
		var ret string
		return ret
	}
	return *o.AllowSalesforcePublish
}

// GetAllowSalesforcePublishOk returns a tuple with the AllowSalesforcePublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetAllowSalesforcePublishOk() (*string, bool) {
	if o == nil || IsNil(o.AllowSalesforcePublish) {
		return nil, false
	}
	return o.AllowSalesforcePublish, true
}

// HasAllowSalesforcePublish returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasAllowSalesforcePublish() bool {
	if o != nil && !IsNil(o.AllowSalesforcePublish) {
		return true
	}

	return false
}

// SetAllowSalesforcePublish gets a reference to the given string and assigns it to the AllowSalesforcePublish field.
func (o *ConnectConfigurations) SetAllowSalesforcePublish(v string) {
	o.AllowSalesforcePublish = &v
}

// GetAllUsers returns the AllUsers field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetAllUsers() string {
	if o == nil || IsNil(o.AllUsers) {
		var ret string
		return ret
	}
	return *o.AllUsers
}

// GetAllUsersOk returns a tuple with the AllUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetAllUsersOk() (*string, bool) {
	if o == nil || IsNil(o.AllUsers) {
		return nil, false
	}
	return o.AllUsers, true
}

// HasAllUsers returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasAllUsers() bool {
	if o != nil && !IsNil(o.AllUsers) {
		return true
	}

	return false
}

// SetAllUsers gets a reference to the given string and assigns it to the AllUsers field.
func (o *ConnectConfigurations) SetAllUsers(v string) {
	o.AllUsers = &v
}

// GetAllUsersExcept returns the AllUsersExcept field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetAllUsersExcept() string {
	if o == nil || IsNil(o.AllUsersExcept) {
		var ret string
		return ret
	}
	return *o.AllUsersExcept
}

// GetAllUsersExceptOk returns a tuple with the AllUsersExcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetAllUsersExceptOk() (*string, bool) {
	if o == nil || IsNil(o.AllUsersExcept) {
		return nil, false
	}
	return o.AllUsersExcept, true
}

// HasAllUsersExcept returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasAllUsersExcept() bool {
	if o != nil && !IsNil(o.AllUsersExcept) {
		return true
	}

	return false
}

// SetAllUsersExcept gets a reference to the given string and assigns it to the AllUsersExcept field.
func (o *ConnectConfigurations) SetAllUsersExcept(v string) {
	o.AllUsersExcept = &v
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetConfigurationType() string {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret string
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetConfigurationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given string and assigns it to the ConfigurationType field.
func (o *ConnectConfigurations) SetConfigurationType(v string) {
	o.ConfigurationType = &v
}

// GetConnectId returns the ConnectId field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetConnectId() string {
	if o == nil || IsNil(o.ConnectId) {
		var ret string
		return ret
	}
	return *o.ConnectId
}

// GetConnectIdOk returns a tuple with the ConnectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetConnectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectId) {
		return nil, false
	}
	return o.ConnectId, true
}

// HasConnectId returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasConnectId() bool {
	if o != nil && !IsNil(o.ConnectId) {
		return true
	}

	return false
}

// SetConnectId gets a reference to the given string and assigns it to the ConnectId field.
func (o *ConnectConfigurations) SetConnectId(v string) {
	o.ConnectId = &v
}

// GetDeliveryMode returns the DeliveryMode field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetDeliveryMode() string {
	if o == nil || IsNil(o.DeliveryMode) {
		var ret string
		return ret
	}
	return *o.DeliveryMode
}

// GetDeliveryModeOk returns a tuple with the DeliveryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetDeliveryModeOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryMode) {
		return nil, false
	}
	return o.DeliveryMode, true
}

// HasDeliveryMode returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasDeliveryMode() bool {
	if o != nil && !IsNil(o.DeliveryMode) {
		return true
	}

	return false
}

// SetDeliveryMode gets a reference to the given string and assigns it to the DeliveryMode field.
func (o *ConnectConfigurations) SetDeliveryMode(v string) {
	o.DeliveryMode = &v
}

// GetDisabledBy returns the DisabledBy field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetDisabledBy() string {
	if o == nil || IsNil(o.DisabledBy) {
		var ret string
		return ret
	}
	return *o.DisabledBy
}

// GetDisabledByOk returns a tuple with the DisabledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetDisabledByOk() (*string, bool) {
	if o == nil || IsNil(o.DisabledBy) {
		return nil, false
	}
	return o.DisabledBy, true
}

// HasDisabledBy returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasDisabledBy() bool {
	if o != nil && !IsNil(o.DisabledBy) {
		return true
	}

	return false
}

// SetDisabledBy gets a reference to the given string and assigns it to the DisabledBy field.
func (o *ConnectConfigurations) SetDisabledBy(v string) {
	o.DisabledBy = &v
}

// GetEnableLog returns the EnableLog field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetEnableLog() string {
	if o == nil || IsNil(o.EnableLog) {
		var ret string
		return ret
	}
	return *o.EnableLog
}

// GetEnableLogOk returns a tuple with the EnableLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetEnableLogOk() (*string, bool) {
	if o == nil || IsNil(o.EnableLog) {
		return nil, false
	}
	return o.EnableLog, true
}

// HasEnableLog returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasEnableLog() bool {
	if o != nil && !IsNil(o.EnableLog) {
		return true
	}

	return false
}

// SetEnableLog gets a reference to the given string and assigns it to the EnableLog field.
func (o *ConnectConfigurations) SetEnableLog(v string) {
	o.EnableLog = &v
}

// GetEnvelopeEvents returns the EnvelopeEvents field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetEnvelopeEvents() []string {
	if o == nil || IsNil(o.EnvelopeEvents) {
		var ret []string
		return ret
	}
	return o.EnvelopeEvents
}

// GetEnvelopeEventsOk returns a tuple with the EnvelopeEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetEnvelopeEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnvelopeEvents) {
		return nil, false
	}
	return o.EnvelopeEvents, true
}

// HasEnvelopeEvents returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasEnvelopeEvents() bool {
	if o != nil && !IsNil(o.EnvelopeEvents) {
		return true
	}

	return false
}

// SetEnvelopeEvents gets a reference to the given []string and assigns it to the EnvelopeEvents field.
func (o *ConnectConfigurations) SetEnvelopeEvents(v []string) {
	o.EnvelopeEvents = v
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetEventData() ConnectEventData {
	if o == nil || IsNil(o.EventData) {
		var ret ConnectEventData
		return ret
	}
	return *o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetEventDataOk() (*ConnectEventData, bool) {
	if o == nil || IsNil(o.EventData) {
		return nil, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasEventData() bool {
	if o != nil && !IsNil(o.EventData) {
		return true
	}

	return false
}

// SetEventData gets a reference to the given ConnectEventData and assigns it to the EventData field.
func (o *ConnectConfigurations) SetEventData(v ConnectEventData) {
	o.EventData = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *ConnectConfigurations) SetEvents(v []string) {
	o.Events = v
}

// GetExternalFolderId returns the ExternalFolderId field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetExternalFolderId() string {
	if o == nil || IsNil(o.ExternalFolderId) {
		var ret string
		return ret
	}
	return *o.ExternalFolderId
}

// GetExternalFolderIdOk returns a tuple with the ExternalFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetExternalFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFolderId) {
		return nil, false
	}
	return o.ExternalFolderId, true
}

// HasExternalFolderId returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasExternalFolderId() bool {
	if o != nil && !IsNil(o.ExternalFolderId) {
		return true
	}

	return false
}

// SetExternalFolderId gets a reference to the given string and assigns it to the ExternalFolderId field.
func (o *ConnectConfigurations) SetExternalFolderId(v string) {
	o.ExternalFolderId = &v
}

// GetExternalFolderLabel returns the ExternalFolderLabel field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetExternalFolderLabel() string {
	if o == nil || IsNil(o.ExternalFolderLabel) {
		var ret string
		return ret
	}
	return *o.ExternalFolderLabel
}

// GetExternalFolderLabelOk returns a tuple with the ExternalFolderLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetExternalFolderLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFolderLabel) {
		return nil, false
	}
	return o.ExternalFolderLabel, true
}

// HasExternalFolderLabel returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasExternalFolderLabel() bool {
	if o != nil && !IsNil(o.ExternalFolderLabel) {
		return true
	}

	return false
}

// SetExternalFolderLabel gets a reference to the given string and assigns it to the ExternalFolderLabel field.
func (o *ConnectConfigurations) SetExternalFolderLabel(v string) {
	o.ExternalFolderLabel = &v
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetGroupIds() []string {
	if o == nil || IsNil(o.GroupIds) {
		var ret []string
		return ret
	}
	return o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupIds) {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasGroupIds() bool {
	if o != nil && !IsNil(o.GroupIds) {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given []string and assigns it to the GroupIds field.
func (o *ConnectConfigurations) SetGroupIds(v []string) {
	o.GroupIds = v
}

// GetIncludeCertificateOfCompletion returns the IncludeCertificateOfCompletion field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeCertificateOfCompletion() string {
	if o == nil || IsNil(o.IncludeCertificateOfCompletion) {
		var ret string
		return ret
	}
	return *o.IncludeCertificateOfCompletion
}

// GetIncludeCertificateOfCompletionOk returns a tuple with the IncludeCertificateOfCompletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeCertificateOfCompletionOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeCertificateOfCompletion) {
		return nil, false
	}
	return o.IncludeCertificateOfCompletion, true
}

// HasIncludeCertificateOfCompletion returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeCertificateOfCompletion() bool {
	if o != nil && !IsNil(o.IncludeCertificateOfCompletion) {
		return true
	}

	return false
}

// SetIncludeCertificateOfCompletion gets a reference to the given string and assigns it to the IncludeCertificateOfCompletion field.
func (o *ConnectConfigurations) SetIncludeCertificateOfCompletion(v string) {
	o.IncludeCertificateOfCompletion = &v
}

// GetIncludeCertSoapHeader returns the IncludeCertSoapHeader field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeCertSoapHeader() string {
	if o == nil || IsNil(o.IncludeCertSoapHeader) {
		var ret string
		return ret
	}
	return *o.IncludeCertSoapHeader
}

// GetIncludeCertSoapHeaderOk returns a tuple with the IncludeCertSoapHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeCertSoapHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeCertSoapHeader) {
		return nil, false
	}
	return o.IncludeCertSoapHeader, true
}

// HasIncludeCertSoapHeader returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeCertSoapHeader() bool {
	if o != nil && !IsNil(o.IncludeCertSoapHeader) {
		return true
	}

	return false
}

// SetIncludeCertSoapHeader gets a reference to the given string and assigns it to the IncludeCertSoapHeader field.
func (o *ConnectConfigurations) SetIncludeCertSoapHeader(v string) {
	o.IncludeCertSoapHeader = &v
}

// GetIncludeDocumentFields returns the IncludeDocumentFields field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeDocumentFields() string {
	if o == nil || IsNil(o.IncludeDocumentFields) {
		var ret string
		return ret
	}
	return *o.IncludeDocumentFields
}

// GetIncludeDocumentFieldsOk returns a tuple with the IncludeDocumentFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeDocumentFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeDocumentFields) {
		return nil, false
	}
	return o.IncludeDocumentFields, true
}

// HasIncludeDocumentFields returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeDocumentFields() bool {
	if o != nil && !IsNil(o.IncludeDocumentFields) {
		return true
	}

	return false
}

// SetIncludeDocumentFields gets a reference to the given string and assigns it to the IncludeDocumentFields field.
func (o *ConnectConfigurations) SetIncludeDocumentFields(v string) {
	o.IncludeDocumentFields = &v
}

// GetIncludeDocuments returns the IncludeDocuments field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeDocuments() string {
	if o == nil || IsNil(o.IncludeDocuments) {
		var ret string
		return ret
	}
	return *o.IncludeDocuments
}

// GetIncludeDocumentsOk returns a tuple with the IncludeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeDocumentsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeDocuments) {
		return nil, false
	}
	return o.IncludeDocuments, true
}

// HasIncludeDocuments returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeDocuments() bool {
	if o != nil && !IsNil(o.IncludeDocuments) {
		return true
	}

	return false
}

// SetIncludeDocuments gets a reference to the given string and assigns it to the IncludeDocuments field.
func (o *ConnectConfigurations) SetIncludeDocuments(v string) {
	o.IncludeDocuments = &v
}

// GetIncludeEnvelopeVoidReason returns the IncludeEnvelopeVoidReason field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeEnvelopeVoidReason() string {
	if o == nil || IsNil(o.IncludeEnvelopeVoidReason) {
		var ret string
		return ret
	}
	return *o.IncludeEnvelopeVoidReason
}

// GetIncludeEnvelopeVoidReasonOk returns a tuple with the IncludeEnvelopeVoidReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeEnvelopeVoidReasonOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeEnvelopeVoidReason) {
		return nil, false
	}
	return o.IncludeEnvelopeVoidReason, true
}

// HasIncludeEnvelopeVoidReason returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeEnvelopeVoidReason() bool {
	if o != nil && !IsNil(o.IncludeEnvelopeVoidReason) {
		return true
	}

	return false
}

// SetIncludeEnvelopeVoidReason gets a reference to the given string and assigns it to the IncludeEnvelopeVoidReason field.
func (o *ConnectConfigurations) SetIncludeEnvelopeVoidReason(v string) {
	o.IncludeEnvelopeVoidReason = &v
}

// GetIncludeHMAC returns the IncludeHMAC field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeHMAC() string {
	if o == nil || IsNil(o.IncludeHMAC) {
		var ret string
		return ret
	}
	return *o.IncludeHMAC
}

// GetIncludeHMACOk returns a tuple with the IncludeHMAC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeHMACOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeHMAC) {
		return nil, false
	}
	return o.IncludeHMAC, true
}

// HasIncludeHMAC returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeHMAC() bool {
	if o != nil && !IsNil(o.IncludeHMAC) {
		return true
	}

	return false
}

// SetIncludeHMAC gets a reference to the given string and assigns it to the IncludeHMAC field.
func (o *ConnectConfigurations) SetIncludeHMAC(v string) {
	o.IncludeHMAC = &v
}

// GetIncludeOAuth returns the IncludeOAuth field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeOAuth() string {
	if o == nil || IsNil(o.IncludeOAuth) {
		var ret string
		return ret
	}
	return *o.IncludeOAuth
}

// GetIncludeOAuthOk returns a tuple with the IncludeOAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeOAuthOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeOAuth) {
		return nil, false
	}
	return o.IncludeOAuth, true
}

// HasIncludeOAuth returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeOAuth() bool {
	if o != nil && !IsNil(o.IncludeOAuth) {
		return true
	}

	return false
}

// SetIncludeOAuth gets a reference to the given string and assigns it to the IncludeOAuth field.
func (o *ConnectConfigurations) SetIncludeOAuth(v string) {
	o.IncludeOAuth = &v
}

// GetIncludeSenderAccountasCustomField returns the IncludeSenderAccountasCustomField field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeSenderAccountasCustomField() string {
	if o == nil || IsNil(o.IncludeSenderAccountasCustomField) {
		var ret string
		return ret
	}
	return *o.IncludeSenderAccountasCustomField
}

// GetIncludeSenderAccountasCustomFieldOk returns a tuple with the IncludeSenderAccountasCustomField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeSenderAccountasCustomFieldOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeSenderAccountasCustomField) {
		return nil, false
	}
	return o.IncludeSenderAccountasCustomField, true
}

// HasIncludeSenderAccountasCustomField returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeSenderAccountasCustomField() bool {
	if o != nil && !IsNil(o.IncludeSenderAccountasCustomField) {
		return true
	}

	return false
}

// SetIncludeSenderAccountasCustomField gets a reference to the given string and assigns it to the IncludeSenderAccountasCustomField field.
func (o *ConnectConfigurations) SetIncludeSenderAccountasCustomField(v string) {
	o.IncludeSenderAccountasCustomField = &v
}

// GetIncludeTimeZoneInformation returns the IncludeTimeZoneInformation field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIncludeTimeZoneInformation() string {
	if o == nil || IsNil(o.IncludeTimeZoneInformation) {
		var ret string
		return ret
	}
	return *o.IncludeTimeZoneInformation
}

// GetIncludeTimeZoneInformationOk returns a tuple with the IncludeTimeZoneInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIncludeTimeZoneInformationOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeTimeZoneInformation) {
		return nil, false
	}
	return o.IncludeTimeZoneInformation, true
}

// HasIncludeTimeZoneInformation returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIncludeTimeZoneInformation() bool {
	if o != nil && !IsNil(o.IncludeTimeZoneInformation) {
		return true
	}

	return false
}

// SetIncludeTimeZoneInformation gets a reference to the given string and assigns it to the IncludeTimeZoneInformation field.
func (o *ConnectConfigurations) SetIncludeTimeZoneInformation(v string) {
	o.IncludeTimeZoneInformation = &v
}

// GetIntegratorManaged returns the IntegratorManaged field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetIntegratorManaged() string {
	if o == nil || IsNil(o.IntegratorManaged) {
		var ret string
		return ret
	}
	return *o.IntegratorManaged
}

// GetIntegratorManagedOk returns a tuple with the IntegratorManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetIntegratorManagedOk() (*string, bool) {
	if o == nil || IsNil(o.IntegratorManaged) {
		return nil, false
	}
	return o.IntegratorManaged, true
}

// HasIntegratorManaged returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasIntegratorManaged() bool {
	if o != nil && !IsNil(o.IntegratorManaged) {
		return true
	}

	return false
}

// SetIntegratorManaged gets a reference to the given string and assigns it to the IntegratorManaged field.
func (o *ConnectConfigurations) SetIntegratorManaged(v string) {
	o.IntegratorManaged = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectConfigurations) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ConnectConfigurations) SetPassword(v string) {
	o.Password = &v
}

// GetRecipientEvents returns the RecipientEvents field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetRecipientEvents() []string {
	if o == nil || IsNil(o.RecipientEvents) {
		var ret []string
		return ret
	}
	return o.RecipientEvents
}

// GetRecipientEventsOk returns a tuple with the RecipientEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetRecipientEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.RecipientEvents) {
		return nil, false
	}
	return o.RecipientEvents, true
}

// HasRecipientEvents returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasRecipientEvents() bool {
	if o != nil && !IsNil(o.RecipientEvents) {
		return true
	}

	return false
}

// SetRecipientEvents gets a reference to the given []string and assigns it to the RecipientEvents field.
func (o *ConnectConfigurations) SetRecipientEvents(v []string) {
	o.RecipientEvents = v
}

// GetRequireMutualTls returns the RequireMutualTls field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetRequireMutualTls() string {
	if o == nil || IsNil(o.RequireMutualTls) {
		var ret string
		return ret
	}
	return *o.RequireMutualTls
}

// GetRequireMutualTlsOk returns a tuple with the RequireMutualTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetRequireMutualTlsOk() (*string, bool) {
	if o == nil || IsNil(o.RequireMutualTls) {
		return nil, false
	}
	return o.RequireMutualTls, true
}

// HasRequireMutualTls returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasRequireMutualTls() bool {
	if o != nil && !IsNil(o.RequireMutualTls) {
		return true
	}

	return false
}

// SetRequireMutualTls gets a reference to the given string and assigns it to the RequireMutualTls field.
func (o *ConnectConfigurations) SetRequireMutualTls(v string) {
	o.RequireMutualTls = &v
}

// GetRequiresAcknowledgement returns the RequiresAcknowledgement field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetRequiresAcknowledgement() string {
	if o == nil || IsNil(o.RequiresAcknowledgement) {
		var ret string
		return ret
	}
	return *o.RequiresAcknowledgement
}

// GetRequiresAcknowledgementOk returns a tuple with the RequiresAcknowledgement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetRequiresAcknowledgementOk() (*string, bool) {
	if o == nil || IsNil(o.RequiresAcknowledgement) {
		return nil, false
	}
	return o.RequiresAcknowledgement, true
}

// HasRequiresAcknowledgement returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasRequiresAcknowledgement() bool {
	if o != nil && !IsNil(o.RequiresAcknowledgement) {
		return true
	}

	return false
}

// SetRequiresAcknowledgement gets a reference to the given string and assigns it to the RequiresAcknowledgement field.
func (o *ConnectConfigurations) SetRequiresAcknowledgement(v string) {
	o.RequiresAcknowledgement = &v
}

// GetSalesforceApiVersion returns the SalesforceApiVersion field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSalesforceApiVersion() string {
	if o == nil || IsNil(o.SalesforceApiVersion) {
		var ret string
		return ret
	}
	return *o.SalesforceApiVersion
}

// GetSalesforceApiVersionOk returns a tuple with the SalesforceApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSalesforceApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesforceApiVersion) {
		return nil, false
	}
	return o.SalesforceApiVersion, true
}

// HasSalesforceApiVersion returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSalesforceApiVersion() bool {
	if o != nil && !IsNil(o.SalesforceApiVersion) {
		return true
	}

	return false
}

// SetSalesforceApiVersion gets a reference to the given string and assigns it to the SalesforceApiVersion field.
func (o *ConnectConfigurations) SetSalesforceApiVersion(v string) {
	o.SalesforceApiVersion = &v
}

// GetSalesforceAuthcode returns the SalesforceAuthcode field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSalesforceAuthcode() string {
	if o == nil || IsNil(o.SalesforceAuthcode) {
		var ret string
		return ret
	}
	return *o.SalesforceAuthcode
}

// GetSalesforceAuthcodeOk returns a tuple with the SalesforceAuthcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSalesforceAuthcodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalesforceAuthcode) {
		return nil, false
	}
	return o.SalesforceAuthcode, true
}

// HasSalesforceAuthcode returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSalesforceAuthcode() bool {
	if o != nil && !IsNil(o.SalesforceAuthcode) {
		return true
	}

	return false
}

// SetSalesforceAuthcode gets a reference to the given string and assigns it to the SalesforceAuthcode field.
func (o *ConnectConfigurations) SetSalesforceAuthcode(v string) {
	o.SalesforceAuthcode = &v
}

// GetSalesforceCallBackUrl returns the SalesforceCallBackUrl field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSalesforceCallBackUrl() string {
	if o == nil || IsNil(o.SalesforceCallBackUrl) {
		var ret string
		return ret
	}
	return *o.SalesforceCallBackUrl
}

// GetSalesforceCallBackUrlOk returns a tuple with the SalesforceCallBackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSalesforceCallBackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SalesforceCallBackUrl) {
		return nil, false
	}
	return o.SalesforceCallBackUrl, true
}

// HasSalesforceCallBackUrl returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSalesforceCallBackUrl() bool {
	if o != nil && !IsNil(o.SalesforceCallBackUrl) {
		return true
	}

	return false
}

// SetSalesforceCallBackUrl gets a reference to the given string and assigns it to the SalesforceCallBackUrl field.
func (o *ConnectConfigurations) SetSalesforceCallBackUrl(v string) {
	o.SalesforceCallBackUrl = &v
}

// GetSalesforceDocumentsAsContentFiles returns the SalesforceDocumentsAsContentFiles field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSalesforceDocumentsAsContentFiles() string {
	if o == nil || IsNil(o.SalesforceDocumentsAsContentFiles) {
		var ret string
		return ret
	}
	return *o.SalesforceDocumentsAsContentFiles
}

// GetSalesforceDocumentsAsContentFilesOk returns a tuple with the SalesforceDocumentsAsContentFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSalesforceDocumentsAsContentFilesOk() (*string, bool) {
	if o == nil || IsNil(o.SalesforceDocumentsAsContentFiles) {
		return nil, false
	}
	return o.SalesforceDocumentsAsContentFiles, true
}

// HasSalesforceDocumentsAsContentFiles returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSalesforceDocumentsAsContentFiles() bool {
	if o != nil && !IsNil(o.SalesforceDocumentsAsContentFiles) {
		return true
	}

	return false
}

// SetSalesforceDocumentsAsContentFiles gets a reference to the given string and assigns it to the SalesforceDocumentsAsContentFiles field.
func (o *ConnectConfigurations) SetSalesforceDocumentsAsContentFiles(v string) {
	o.SalesforceDocumentsAsContentFiles = &v
}

// GetSenderOverride returns the SenderOverride field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSenderOverride() string {
	if o == nil || IsNil(o.SenderOverride) {
		var ret string
		return ret
	}
	return *o.SenderOverride
}

// GetSenderOverrideOk returns a tuple with the SenderOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSenderOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.SenderOverride) {
		return nil, false
	}
	return o.SenderOverride, true
}

// HasSenderOverride returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSenderOverride() bool {
	if o != nil && !IsNil(o.SenderOverride) {
		return true
	}

	return false
}

// SetSenderOverride gets a reference to the given string and assigns it to the SenderOverride field.
func (o *ConnectConfigurations) SetSenderOverride(v string) {
	o.SenderOverride = &v
}

// GetSenderSelectableItems returns the SenderSelectableItems field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSenderSelectableItems() []string {
	if o == nil || IsNil(o.SenderSelectableItems) {
		var ret []string
		return ret
	}
	return o.SenderSelectableItems
}

// GetSenderSelectableItemsOk returns a tuple with the SenderSelectableItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSenderSelectableItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.SenderSelectableItems) {
		return nil, false
	}
	return o.SenderSelectableItems, true
}

// HasSenderSelectableItems returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSenderSelectableItems() bool {
	if o != nil && !IsNil(o.SenderSelectableItems) {
		return true
	}

	return false
}

// SetSenderSelectableItems gets a reference to the given []string and assigns it to the SenderSelectableItems field.
func (o *ConnectConfigurations) SetSenderSelectableItems(v []string) {
	o.SenderSelectableItems = v
}

// GetSfObjects returns the SfObjects field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSfObjects() []ConnectSalesforceObject {
	if o == nil || IsNil(o.SfObjects) {
		var ret []ConnectSalesforceObject
		return ret
	}
	return o.SfObjects
}

// GetSfObjectsOk returns a tuple with the SfObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSfObjectsOk() ([]ConnectSalesforceObject, bool) {
	if o == nil || IsNil(o.SfObjects) {
		return nil, false
	}
	return o.SfObjects, true
}

// HasSfObjects returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSfObjects() bool {
	if o != nil && !IsNil(o.SfObjects) {
		return true
	}

	return false
}

// SetSfObjects gets a reference to the given []ConnectSalesforceObject and assigns it to the SfObjects field.
func (o *ConnectConfigurations) SetSfObjects(v []ConnectSalesforceObject) {
	o.SfObjects = v
}

// GetSignMessageWithX509Certificate returns the SignMessageWithX509Certificate field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSignMessageWithX509Certificate() string {
	if o == nil || IsNil(o.SignMessageWithX509Certificate) {
		var ret string
		return ret
	}
	return *o.SignMessageWithX509Certificate
}

// GetSignMessageWithX509CertificateOk returns a tuple with the SignMessageWithX509Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSignMessageWithX509CertificateOk() (*string, bool) {
	if o == nil || IsNil(o.SignMessageWithX509Certificate) {
		return nil, false
	}
	return o.SignMessageWithX509Certificate, true
}

// HasSignMessageWithX509Certificate returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSignMessageWithX509Certificate() bool {
	if o != nil && !IsNil(o.SignMessageWithX509Certificate) {
		return true
	}

	return false
}

// SetSignMessageWithX509Certificate gets a reference to the given string and assigns it to the SignMessageWithX509Certificate field.
func (o *ConnectConfigurations) SetSignMessageWithX509Certificate(v string) {
	o.SignMessageWithX509Certificate = &v
}

// GetSoapNamespace returns the SoapNamespace field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetSoapNamespace() string {
	if o == nil || IsNil(o.SoapNamespace) {
		var ret string
		return ret
	}
	return *o.SoapNamespace
}

// GetSoapNamespaceOk returns a tuple with the SoapNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetSoapNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.SoapNamespace) {
		return nil, false
	}
	return o.SoapNamespace, true
}

// HasSoapNamespace returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasSoapNamespace() bool {
	if o != nil && !IsNil(o.SoapNamespace) {
		return true
	}

	return false
}

// SetSoapNamespace gets a reference to the given string and assigns it to the SoapNamespace field.
func (o *ConnectConfigurations) SetSoapNamespace(v string) {
	o.SoapNamespace = &v
}

// GetUrlToPublishTo returns the UrlToPublishTo field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetUrlToPublishTo() string {
	if o == nil || IsNil(o.UrlToPublishTo) {
		var ret string
		return ret
	}
	return *o.UrlToPublishTo
}

// GetUrlToPublishToOk returns a tuple with the UrlToPublishTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetUrlToPublishToOk() (*string, bool) {
	if o == nil || IsNil(o.UrlToPublishTo) {
		return nil, false
	}
	return o.UrlToPublishTo, true
}

// HasUrlToPublishTo returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasUrlToPublishTo() bool {
	if o != nil && !IsNil(o.UrlToPublishTo) {
		return true
	}

	return false
}

// SetUrlToPublishTo gets a reference to the given string and assigns it to the UrlToPublishTo field.
func (o *ConnectConfigurations) SetUrlToPublishTo(v string) {
	o.UrlToPublishTo = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *ConnectConfigurations) SetUserIds(v []string) {
	o.UserIds = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ConnectConfigurations) SetUserName(v string) {
	o.UserName = &v
}

// GetUseSoapInterface returns the UseSoapInterface field value if set, zero value otherwise.
func (o *ConnectConfigurations) GetUseSoapInterface() string {
	if o == nil || IsNil(o.UseSoapInterface) {
		var ret string
		return ret
	}
	return *o.UseSoapInterface
}

// GetUseSoapInterfaceOk returns a tuple with the UseSoapInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectConfigurations) GetUseSoapInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.UseSoapInterface) {
		return nil, false
	}
	return o.UseSoapInterface, true
}

// HasUseSoapInterface returns a boolean if a field has been set.
func (o *ConnectConfigurations) HasUseSoapInterface() bool {
	if o != nil && !IsNil(o.UseSoapInterface) {
		return true
	}

	return false
}

// SetUseSoapInterface gets a reference to the given string and assigns it to the UseSoapInterface field.
func (o *ConnectConfigurations) SetUseSoapInterface(v string) {
	o.UseSoapInterface = &v
}

func (o ConnectConfigurations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectConfigurations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowEnvelopePublish) {
		toSerialize["allowEnvelopePublish"] = o.AllowEnvelopePublish
	}
	if !IsNil(o.AllowSalesforcePublish) {
		toSerialize["allowSalesforcePublish"] = o.AllowSalesforcePublish
	}
	if !IsNil(o.AllUsers) {
		toSerialize["allUsers"] = o.AllUsers
	}
	if !IsNil(o.AllUsersExcept) {
		toSerialize["allUsersExcept"] = o.AllUsersExcept
	}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	if !IsNil(o.ConnectId) {
		toSerialize["connectId"] = o.ConnectId
	}
	if !IsNil(o.DeliveryMode) {
		toSerialize["deliveryMode"] = o.DeliveryMode
	}
	if !IsNil(o.DisabledBy) {
		toSerialize["disabledBy"] = o.DisabledBy
	}
	if !IsNil(o.EnableLog) {
		toSerialize["enableLog"] = o.EnableLog
	}
	if !IsNil(o.EnvelopeEvents) {
		toSerialize["envelopeEvents"] = o.EnvelopeEvents
	}
	if !IsNil(o.EventData) {
		toSerialize["eventData"] = o.EventData
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.ExternalFolderId) {
		toSerialize["externalFolderId"] = o.ExternalFolderId
	}
	if !IsNil(o.ExternalFolderLabel) {
		toSerialize["externalFolderLabel"] = o.ExternalFolderLabel
	}
	if !IsNil(o.GroupIds) {
		toSerialize["groupIds"] = o.GroupIds
	}
	if !IsNil(o.IncludeCertificateOfCompletion) {
		toSerialize["includeCertificateOfCompletion"] = o.IncludeCertificateOfCompletion
	}
	if !IsNil(o.IncludeCertSoapHeader) {
		toSerialize["includeCertSoapHeader"] = o.IncludeCertSoapHeader
	}
	if !IsNil(o.IncludeDocumentFields) {
		toSerialize["includeDocumentFields"] = o.IncludeDocumentFields
	}
	if !IsNil(o.IncludeDocuments) {
		toSerialize["includeDocuments"] = o.IncludeDocuments
	}
	if !IsNil(o.IncludeEnvelopeVoidReason) {
		toSerialize["includeEnvelopeVoidReason"] = o.IncludeEnvelopeVoidReason
	}
	if !IsNil(o.IncludeHMAC) {
		toSerialize["includeHMAC"] = o.IncludeHMAC
	}
	if !IsNil(o.IncludeOAuth) {
		toSerialize["includeOAuth"] = o.IncludeOAuth
	}
	if !IsNil(o.IncludeSenderAccountasCustomField) {
		toSerialize["includeSenderAccountasCustomField"] = o.IncludeSenderAccountasCustomField
	}
	if !IsNil(o.IncludeTimeZoneInformation) {
		toSerialize["includeTimeZoneInformation"] = o.IncludeTimeZoneInformation
	}
	if !IsNil(o.IntegratorManaged) {
		toSerialize["integratorManaged"] = o.IntegratorManaged
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RecipientEvents) {
		toSerialize["recipientEvents"] = o.RecipientEvents
	}
	if !IsNil(o.RequireMutualTls) {
		toSerialize["requireMutualTls"] = o.RequireMutualTls
	}
	if !IsNil(o.RequiresAcknowledgement) {
		toSerialize["requiresAcknowledgement"] = o.RequiresAcknowledgement
	}
	if !IsNil(o.SalesforceApiVersion) {
		toSerialize["salesforceApiVersion"] = o.SalesforceApiVersion
	}
	if !IsNil(o.SalesforceAuthcode) {
		toSerialize["salesforceAuthcode"] = o.SalesforceAuthcode
	}
	if !IsNil(o.SalesforceCallBackUrl) {
		toSerialize["salesforceCallBackUrl"] = o.SalesforceCallBackUrl
	}
	if !IsNil(o.SalesforceDocumentsAsContentFiles) {
		toSerialize["salesforceDocumentsAsContentFiles"] = o.SalesforceDocumentsAsContentFiles
	}
	if !IsNil(o.SenderOverride) {
		toSerialize["senderOverride"] = o.SenderOverride
	}
	if !IsNil(o.SenderSelectableItems) {
		toSerialize["senderSelectableItems"] = o.SenderSelectableItems
	}
	if !IsNil(o.SfObjects) {
		toSerialize["sfObjects"] = o.SfObjects
	}
	if !IsNil(o.SignMessageWithX509Certificate) {
		toSerialize["signMessageWithX509Certificate"] = o.SignMessageWithX509Certificate
	}
	if !IsNil(o.SoapNamespace) {
		toSerialize["soapNamespace"] = o.SoapNamespace
	}
	if !IsNil(o.UrlToPublishTo) {
		toSerialize["urlToPublishTo"] = o.UrlToPublishTo
	}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.UseSoapInterface) {
		toSerialize["useSoapInterface"] = o.UseSoapInterface
	}
	return toSerialize, nil
}

type NullableConnectConfigurations struct {
	value *ConnectConfigurations
	isSet bool
}

func (v NullableConnectConfigurations) Get() *ConnectConfigurations {
	return v.value
}

func (v *NullableConnectConfigurations) Set(val *ConnectConfigurations) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectConfigurations) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectConfigurations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectConfigurations(val *ConnectConfigurations) *NullableConnectConfigurations {
	return &NullableConnectConfigurations{value: val, isSet: true}
}

func (v NullableConnectConfigurations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectConfigurations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


