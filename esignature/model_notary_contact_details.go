/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotaryContactDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotaryContactDetails{}

// NotaryContactDetails 
type NotaryContactDetails struct {
	// 
	HasDocusignCertificate *string `json:"hasDocusignCertificate,omitempty"`
	// 
	Jurisdictions []JurisdictionSummary `json:"jurisdictions,omitempty"`
}

// NewNotaryContactDetails instantiates a new NotaryContactDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotaryContactDetails() *NotaryContactDetails {
	this := NotaryContactDetails{}
	return &this
}

// NewNotaryContactDetailsWithDefaults instantiates a new NotaryContactDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotaryContactDetailsWithDefaults() *NotaryContactDetails {
	this := NotaryContactDetails{}
	return &this
}

// GetHasDocusignCertificate returns the HasDocusignCertificate field value if set, zero value otherwise.
func (o *NotaryContactDetails) GetHasDocusignCertificate() string {
	if o == nil || IsNil(o.HasDocusignCertificate) {
		var ret string
		return ret
	}
	return *o.HasDocusignCertificate
}

// GetHasDocusignCertificateOk returns a tuple with the HasDocusignCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryContactDetails) GetHasDocusignCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.HasDocusignCertificate) {
		return nil, false
	}
	return o.HasDocusignCertificate, true
}

// HasHasDocusignCertificate returns a boolean if a field has been set.
func (o *NotaryContactDetails) HasHasDocusignCertificate() bool {
	if o != nil && !IsNil(o.HasDocusignCertificate) {
		return true
	}

	return false
}

// SetHasDocusignCertificate gets a reference to the given string and assigns it to the HasDocusignCertificate field.
func (o *NotaryContactDetails) SetHasDocusignCertificate(v string) {
	o.HasDocusignCertificate = &v
}

// GetJurisdictions returns the Jurisdictions field value if set, zero value otherwise.
func (o *NotaryContactDetails) GetJurisdictions() []JurisdictionSummary {
	if o == nil || IsNil(o.Jurisdictions) {
		var ret []JurisdictionSummary
		return ret
	}
	return o.Jurisdictions
}

// GetJurisdictionsOk returns a tuple with the Jurisdictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryContactDetails) GetJurisdictionsOk() ([]JurisdictionSummary, bool) {
	if o == nil || IsNil(o.Jurisdictions) {
		return nil, false
	}
	return o.Jurisdictions, true
}

// HasJurisdictions returns a boolean if a field has been set.
func (o *NotaryContactDetails) HasJurisdictions() bool {
	if o != nil && !IsNil(o.Jurisdictions) {
		return true
	}

	return false
}

// SetJurisdictions gets a reference to the given []JurisdictionSummary and assigns it to the Jurisdictions field.
func (o *NotaryContactDetails) SetJurisdictions(v []JurisdictionSummary) {
	o.Jurisdictions = v
}

func (o NotaryContactDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotaryContactDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasDocusignCertificate) {
		toSerialize["hasDocusignCertificate"] = o.HasDocusignCertificate
	}
	if !IsNil(o.Jurisdictions) {
		toSerialize["jurisdictions"] = o.Jurisdictions
	}
	return toSerialize, nil
}

type NullableNotaryContactDetails struct {
	value *NotaryContactDetails
	isSet bool
}

func (v NullableNotaryContactDetails) Get() *NotaryContactDetails {
	return v.value
}

func (v *NullableNotaryContactDetails) Set(val *NotaryContactDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableNotaryContactDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableNotaryContactDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotaryContactDetails(val *NotaryContactDetails) *NullableNotaryContactDetails {
	return &NullableNotaryContactDetails{value: val, isSet: true}
}

func (v NullableNotaryContactDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotaryContactDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


