/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContactPhoneNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactPhoneNumber{}

// ContactPhoneNumber Details about the phone numbers associated with a specific contact.
type ContactPhoneNumber struct {
	// The contact's phone number.  Example: `+12223334444`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The type of phone number. Valid values are:  - `home` - `mobile` - `work` - `other` - `fax`
	PhoneType *string `json:"phoneType,omitempty"`
}

// NewContactPhoneNumber instantiates a new ContactPhoneNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactPhoneNumber() *ContactPhoneNumber {
	this := ContactPhoneNumber{}
	return &this
}

// NewContactPhoneNumberWithDefaults instantiates a new ContactPhoneNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactPhoneNumberWithDefaults() *ContactPhoneNumber {
	this := ContactPhoneNumber{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *ContactPhoneNumber) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactPhoneNumber) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ContactPhoneNumber) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *ContactPhoneNumber) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhoneType returns the PhoneType field value if set, zero value otherwise.
func (o *ContactPhoneNumber) GetPhoneType() string {
	if o == nil || IsNil(o.PhoneType) {
		var ret string
		return ret
	}
	return *o.PhoneType
}

// GetPhoneTypeOk returns a tuple with the PhoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactPhoneNumber) GetPhoneTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneType) {
		return nil, false
	}
	return o.PhoneType, true
}

// HasPhoneType returns a boolean if a field has been set.
func (o *ContactPhoneNumber) HasPhoneType() bool {
	if o != nil && !IsNil(o.PhoneType) {
		return true
	}

	return false
}

// SetPhoneType gets a reference to the given string and assigns it to the PhoneType field.
func (o *ContactPhoneNumber) SetPhoneType(v string) {
	o.PhoneType = &v
}

func (o ContactPhoneNumber) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactPhoneNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.PhoneType) {
		toSerialize["phoneType"] = o.PhoneType
	}
	return toSerialize, nil
}

type NullableContactPhoneNumber struct {
	value *ContactPhoneNumber
	isSet bool
}

func (v NullableContactPhoneNumber) Get() *ContactPhoneNumber {
	return v.value
}

func (v *NullableContactPhoneNumber) Set(val *ContactPhoneNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableContactPhoneNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableContactPhoneNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactPhoneNumber(val *ContactPhoneNumber) *NullableContactPhoneNumber {
	return &NullableContactPhoneNumber{value: val, isSet: true}
}

func (v NullableContactPhoneNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactPhoneNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


