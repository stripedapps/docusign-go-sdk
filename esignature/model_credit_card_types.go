/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreditCardTypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditCardTypes{}

// CreditCardTypes 
type CreditCardTypes struct {
	// An array containing supported credit card types.
	CardTypes []string `json:"cardTypes,omitempty"`
}

// NewCreditCardTypes instantiates a new CreditCardTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditCardTypes() *CreditCardTypes {
	this := CreditCardTypes{}
	return &this
}

// NewCreditCardTypesWithDefaults instantiates a new CreditCardTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditCardTypesWithDefaults() *CreditCardTypes {
	this := CreditCardTypes{}
	return &this
}

// GetCardTypes returns the CardTypes field value if set, zero value otherwise.
func (o *CreditCardTypes) GetCardTypes() []string {
	if o == nil || IsNil(o.CardTypes) {
		var ret []string
		return ret
	}
	return o.CardTypes
}

// GetCardTypesOk returns a tuple with the CardTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardTypes) GetCardTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.CardTypes) {
		return nil, false
	}
	return o.CardTypes, true
}

// HasCardTypes returns a boolean if a field has been set.
func (o *CreditCardTypes) HasCardTypes() bool {
	if o != nil && !IsNil(o.CardTypes) {
		return true
	}

	return false
}

// SetCardTypes gets a reference to the given []string and assigns it to the CardTypes field.
func (o *CreditCardTypes) SetCardTypes(v []string) {
	o.CardTypes = v
}

func (o CreditCardTypes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditCardTypes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardTypes) {
		toSerialize["cardTypes"] = o.CardTypes
	}
	return toSerialize, nil
}

type NullableCreditCardTypes struct {
	value *CreditCardTypes
	isSet bool
}

func (v NullableCreditCardTypes) Get() *CreditCardTypes {
	return v.value
}

func (v *NullableCreditCardTypes) Set(val *CreditCardTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardTypes(val *CreditCardTypes) *NullableCreditCardTypes {
	return &NullableCreditCardTypes{value: val, isSet: true}
}

func (v NullableCreditCardTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


