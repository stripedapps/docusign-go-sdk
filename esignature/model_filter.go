/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Filter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filter{}

// Filter Use this object to create a filtered view of the items in a folder.
type Filter struct {
	// When **true,** the current user needs to take action on the item.
	ActionRequired *string `json:"actionRequired,omitempty"`
	// The number of days a sent envelope remains active before it expires.
	Expires *string `json:"expires,omitempty"`
	// Filters for any combination of folder IDs and folder types. The possible folder types are:  - `awaiting_my_signature` - `completed` - `draft` - `drafts` - `expiring_soon` - `inbox` - `out_for_signature` - `recyclebin` - `sentitems` - `waiting_for_others`
	FolderIds *string `json:"folderIds,omitempty"`
	// The UTC DateTime of the beginning of a date range. If no value is provided, the default search is the previous 30 days.
	FromDateTime *string `json:"fromDateTime,omitempty"`
	// When **true,** the item is a template.
	IsTemplate *string `json:"isTemplate,omitempty"`
	// The order in which to sort the results.  Valid values are:    * `asc`: Ascending order. * `desc`: Descending order. 
	Order *string `json:"order,omitempty"`
	// The field used to sort the results.  Example: `Created`
	OrderBy *string `json:"orderBy,omitempty"`
	// Reserved for DocuSign.
	SearchTarget *string `json:"searchTarget,omitempty"`
	// A free text search field for searching across the items in a folder. The search looks for the text that you enter in the recipient names and emails, envelope custom fields, sender name, and subject.
	SearchText *string `json:"searchText,omitempty"`
	// The status of the envelope. By default, all statuses are returned.  For details, see [Envelope Status Code Descriptions](/docs/esign-rest-api/esign101/rules-and-limits/responses/).
	Status *string `json:"status,omitempty"`
	// The UTC DateTime of the end of a date range. If no value is provided, the default search is to the current date.
	ToDateTime *string `json:"toDateTime,omitempty"`
}

// NewFilter instantiates a new Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilter() *Filter {
	this := Filter{}
	return &this
}

// NewFilterWithDefaults instantiates a new Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterWithDefaults() *Filter {
	this := Filter{}
	return &this
}

// GetActionRequired returns the ActionRequired field value if set, zero value otherwise.
func (o *Filter) GetActionRequired() string {
	if o == nil || IsNil(o.ActionRequired) {
		var ret string
		return ret
	}
	return *o.ActionRequired
}

// GetActionRequiredOk returns a tuple with the ActionRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetActionRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.ActionRequired) {
		return nil, false
	}
	return o.ActionRequired, true
}

// HasActionRequired returns a boolean if a field has been set.
func (o *Filter) HasActionRequired() bool {
	if o != nil && !IsNil(o.ActionRequired) {
		return true
	}

	return false
}

// SetActionRequired gets a reference to the given string and assigns it to the ActionRequired field.
func (o *Filter) SetActionRequired(v string) {
	o.ActionRequired = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *Filter) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *Filter) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *Filter) SetExpires(v string) {
	o.Expires = &v
}

// GetFolderIds returns the FolderIds field value if set, zero value otherwise.
func (o *Filter) GetFolderIds() string {
	if o == nil || IsNil(o.FolderIds) {
		var ret string
		return ret
	}
	return *o.FolderIds
}

// GetFolderIdsOk returns a tuple with the FolderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetFolderIdsOk() (*string, bool) {
	if o == nil || IsNil(o.FolderIds) {
		return nil, false
	}
	return o.FolderIds, true
}

// HasFolderIds returns a boolean if a field has been set.
func (o *Filter) HasFolderIds() bool {
	if o != nil && !IsNil(o.FolderIds) {
		return true
	}

	return false
}

// SetFolderIds gets a reference to the given string and assigns it to the FolderIds field.
func (o *Filter) SetFolderIds(v string) {
	o.FolderIds = &v
}

// GetFromDateTime returns the FromDateTime field value if set, zero value otherwise.
func (o *Filter) GetFromDateTime() string {
	if o == nil || IsNil(o.FromDateTime) {
		var ret string
		return ret
	}
	return *o.FromDateTime
}

// GetFromDateTimeOk returns a tuple with the FromDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetFromDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FromDateTime) {
		return nil, false
	}
	return o.FromDateTime, true
}

// HasFromDateTime returns a boolean if a field has been set.
func (o *Filter) HasFromDateTime() bool {
	if o != nil && !IsNil(o.FromDateTime) {
		return true
	}

	return false
}

// SetFromDateTime gets a reference to the given string and assigns it to the FromDateTime field.
func (o *Filter) SetFromDateTime(v string) {
	o.FromDateTime = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *Filter) GetIsTemplate() string {
	if o == nil || IsNil(o.IsTemplate) {
		var ret string
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetIsTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.IsTemplate) {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *Filter) HasIsTemplate() bool {
	if o != nil && !IsNil(o.IsTemplate) {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given string and assigns it to the IsTemplate field.
func (o *Filter) SetIsTemplate(v string) {
	o.IsTemplate = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Filter) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Filter) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *Filter) SetOrder(v string) {
	o.Order = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *Filter) GetOrderBy() string {
	if o == nil || IsNil(o.OrderBy) {
		var ret string
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetOrderByOk() (*string, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *Filter) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given string and assigns it to the OrderBy field.
func (o *Filter) SetOrderBy(v string) {
	o.OrderBy = &v
}

// GetSearchTarget returns the SearchTarget field value if set, zero value otherwise.
func (o *Filter) GetSearchTarget() string {
	if o == nil || IsNil(o.SearchTarget) {
		var ret string
		return ret
	}
	return *o.SearchTarget
}

// GetSearchTargetOk returns a tuple with the SearchTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetSearchTargetOk() (*string, bool) {
	if o == nil || IsNil(o.SearchTarget) {
		return nil, false
	}
	return o.SearchTarget, true
}

// HasSearchTarget returns a boolean if a field has been set.
func (o *Filter) HasSearchTarget() bool {
	if o != nil && !IsNil(o.SearchTarget) {
		return true
	}

	return false
}

// SetSearchTarget gets a reference to the given string and assigns it to the SearchTarget field.
func (o *Filter) SetSearchTarget(v string) {
	o.SearchTarget = &v
}

// GetSearchText returns the SearchText field value if set, zero value otherwise.
func (o *Filter) GetSearchText() string {
	if o == nil || IsNil(o.SearchText) {
		var ret string
		return ret
	}
	return *o.SearchText
}

// GetSearchTextOk returns a tuple with the SearchText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetSearchTextOk() (*string, bool) {
	if o == nil || IsNil(o.SearchText) {
		return nil, false
	}
	return o.SearchText, true
}

// HasSearchText returns a boolean if a field has been set.
func (o *Filter) HasSearchText() bool {
	if o != nil && !IsNil(o.SearchText) {
		return true
	}

	return false
}

// SetSearchText gets a reference to the given string and assigns it to the SearchText field.
func (o *Filter) SetSearchText(v string) {
	o.SearchText = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Filter) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Filter) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Filter) SetStatus(v string) {
	o.Status = &v
}

// GetToDateTime returns the ToDateTime field value if set, zero value otherwise.
func (o *Filter) GetToDateTime() string {
	if o == nil || IsNil(o.ToDateTime) {
		var ret string
		return ret
	}
	return *o.ToDateTime
}

// GetToDateTimeOk returns a tuple with the ToDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetToDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ToDateTime) {
		return nil, false
	}
	return o.ToDateTime, true
}

// HasToDateTime returns a boolean if a field has been set.
func (o *Filter) HasToDateTime() bool {
	if o != nil && !IsNil(o.ToDateTime) {
		return true
	}

	return false
}

// SetToDateTime gets a reference to the given string and assigns it to the ToDateTime field.
func (o *Filter) SetToDateTime(v string) {
	o.ToDateTime = &v
}

func (o Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionRequired) {
		toSerialize["actionRequired"] = o.ActionRequired
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.FolderIds) {
		toSerialize["folderIds"] = o.FolderIds
	}
	if !IsNil(o.FromDateTime) {
		toSerialize["fromDateTime"] = o.FromDateTime
	}
	if !IsNil(o.IsTemplate) {
		toSerialize["isTemplate"] = o.IsTemplate
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.SearchTarget) {
		toSerialize["searchTarget"] = o.SearchTarget
	}
	if !IsNil(o.SearchText) {
		toSerialize["searchText"] = o.SearchText
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ToDateTime) {
		toSerialize["toDateTime"] = o.ToDateTime
	}
	return toSerialize, nil
}

type NullableFilter struct {
	value *Filter
	isSet bool
}

func (v NullableFilter) Get() *Filter {
	return v.value
}

func (v *NullableFilter) Set(val *Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilter(val *Filter) *NullableFilter {
	return &NullableFilter{value: val, isSet: true}
}

func (v NullableFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


