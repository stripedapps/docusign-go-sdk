/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomField{}

// CustomField This object provides details about a custom field.
type CustomField struct {
	// The type of custom field. Valid values are:  - `text` (default) - `list`
	CustomFieldType *string `json:"customFieldType,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The ID of the custom field.
	FieldId *string `json:"fieldId,omitempty"`
	// For a list custom field, this is an array of strings that represent the items in a list.   Maximum Length: 2,000 characters.
	ListItems []string `json:"listItems,omitempty"`
	// The name of the custom field.
	Name *string `json:"name,omitempty"`
	// When **true,** the signer must complete the custom field.
	Required *string `json:"required,omitempty"`
	// When **true,** the custom field displays at the top of the Certificate of Completion.
	Show *string `json:"show,omitempty"`
	// Specifies the value of the custom field.   Maximum Length: 2,000 characters.
	Value *string `json:"value,omitempty"`
}

// NewCustomField instantiates a new CustomField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomField() *CustomField {
	this := CustomField{}
	return &this
}

// NewCustomFieldWithDefaults instantiates a new CustomField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldWithDefaults() *CustomField {
	this := CustomField{}
	return &this
}

// GetCustomFieldType returns the CustomFieldType field value if set, zero value otherwise.
func (o *CustomField) GetCustomFieldType() string {
	if o == nil || IsNil(o.CustomFieldType) {
		var ret string
		return ret
	}
	return *o.CustomFieldType
}

// GetCustomFieldTypeOk returns a tuple with the CustomFieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetCustomFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFieldType) {
		return nil, false
	}
	return o.CustomFieldType, true
}

// HasCustomFieldType returns a boolean if a field has been set.
func (o *CustomField) HasCustomFieldType() bool {
	if o != nil && !IsNil(o.CustomFieldType) {
		return true
	}

	return false
}

// SetCustomFieldType gets a reference to the given string and assigns it to the CustomFieldType field.
func (o *CustomField) SetCustomFieldType(v string) {
	o.CustomFieldType = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *CustomField) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *CustomField) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *CustomField) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetFieldId returns the FieldId field value if set, zero value otherwise.
func (o *CustomField) GetFieldId() string {
	if o == nil || IsNil(o.FieldId) {
		var ret string
		return ret
	}
	return *o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetFieldIdOk() (*string, bool) {
	if o == nil || IsNil(o.FieldId) {
		return nil, false
	}
	return o.FieldId, true
}

// HasFieldId returns a boolean if a field has been set.
func (o *CustomField) HasFieldId() bool {
	if o != nil && !IsNil(o.FieldId) {
		return true
	}

	return false
}

// SetFieldId gets a reference to the given string and assigns it to the FieldId field.
func (o *CustomField) SetFieldId(v string) {
	o.FieldId = &v
}

// GetListItems returns the ListItems field value if set, zero value otherwise.
func (o *CustomField) GetListItems() []string {
	if o == nil || IsNil(o.ListItems) {
		var ret []string
		return ret
	}
	return o.ListItems
}

// GetListItemsOk returns a tuple with the ListItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetListItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.ListItems) {
		return nil, false
	}
	return o.ListItems, true
}

// HasListItems returns a boolean if a field has been set.
func (o *CustomField) HasListItems() bool {
	if o != nil && !IsNil(o.ListItems) {
		return true
	}

	return false
}

// SetListItems gets a reference to the given []string and assigns it to the ListItems field.
func (o *CustomField) SetListItems(v []string) {
	o.ListItems = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomField) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomField) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *CustomField) GetRequired() string {
	if o == nil || IsNil(o.Required) {
		var ret string
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *CustomField) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given string and assigns it to the Required field.
func (o *CustomField) SetRequired(v string) {
	o.Required = &v
}

// GetShow returns the Show field value if set, zero value otherwise.
func (o *CustomField) GetShow() string {
	if o == nil || IsNil(o.Show) {
		var ret string
		return ret
	}
	return *o.Show
}

// GetShowOk returns a tuple with the Show field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetShowOk() (*string, bool) {
	if o == nil || IsNil(o.Show) {
		return nil, false
	}
	return o.Show, true
}

// HasShow returns a boolean if a field has been set.
func (o *CustomField) HasShow() bool {
	if o != nil && !IsNil(o.Show) {
		return true
	}

	return false
}

// SetShow gets a reference to the given string and assigns it to the Show field.
func (o *CustomField) SetShow(v string) {
	o.Show = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CustomField) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CustomField) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *CustomField) SetValue(v string) {
	o.Value = &v
}

func (o CustomField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomFieldType) {
		toSerialize["customFieldType"] = o.CustomFieldType
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.FieldId) {
		toSerialize["fieldId"] = o.FieldId
	}
	if !IsNil(o.ListItems) {
		toSerialize["listItems"] = o.ListItems
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Show) {
		toSerialize["show"] = o.Show
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableCustomField struct {
	value *CustomField
	isSet bool
}

func (v NullableCustomField) Get() *CustomField {
	return v.value
}

func (v *NullableCustomField) Set(val *CustomField) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomField) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomField(val *CustomField) *NullableCustomField {
	return &NullableCustomField{value: val, isSet: true}
}

func (v NullableCustomField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


