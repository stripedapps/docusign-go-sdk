/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ENoteConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ENoteConfiguration{}

// ENoteConfiguration This object contains information used to configure [eNote][eNote] functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.  [eNote]: https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=tsn1583277394951.html 
type ENoteConfiguration struct {
	// 
	ApiKey *string `json:"apiKey,omitempty"`
	// When **false,** the user must configure Connect and eOriginal for the integration to work.
	ConnectConfigured *string `json:"connectConfigured,omitempty"`
	// When **false,** the user must configure eNote for the feature to work.  **Note:** In the account settings, `allowENoteEOriginal` must be **true** to make changes to the configuration.
	ENoteConfigured *string `json:"eNoteConfigured,omitempty"`
	// The name of the organization.
	Organization *string `json:"organization,omitempty"`
	// The user's encrypted password hash.
	Password *string `json:"password,omitempty"`
	// The user's username.
	UserName *string `json:"userName,omitempty"`
}

// NewENoteConfiguration instantiates a new ENoteConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewENoteConfiguration() *ENoteConfiguration {
	this := ENoteConfiguration{}
	return &this
}

// NewENoteConfigurationWithDefaults instantiates a new ENoteConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewENoteConfigurationWithDefaults() *ENoteConfiguration {
	this := ENoteConfiguration{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *ENoteConfiguration) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ENoteConfiguration) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *ENoteConfiguration) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *ENoteConfiguration) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetConnectConfigured returns the ConnectConfigured field value if set, zero value otherwise.
func (o *ENoteConfiguration) GetConnectConfigured() string {
	if o == nil || IsNil(o.ConnectConfigured) {
		var ret string
		return ret
	}
	return *o.ConnectConfigured
}

// GetConnectConfiguredOk returns a tuple with the ConnectConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ENoteConfiguration) GetConnectConfiguredOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectConfigured) {
		return nil, false
	}
	return o.ConnectConfigured, true
}

// HasConnectConfigured returns a boolean if a field has been set.
func (o *ENoteConfiguration) HasConnectConfigured() bool {
	if o != nil && !IsNil(o.ConnectConfigured) {
		return true
	}

	return false
}

// SetConnectConfigured gets a reference to the given string and assigns it to the ConnectConfigured field.
func (o *ENoteConfiguration) SetConnectConfigured(v string) {
	o.ConnectConfigured = &v
}

// GetENoteConfigured returns the ENoteConfigured field value if set, zero value otherwise.
func (o *ENoteConfiguration) GetENoteConfigured() string {
	if o == nil || IsNil(o.ENoteConfigured) {
		var ret string
		return ret
	}
	return *o.ENoteConfigured
}

// GetENoteConfiguredOk returns a tuple with the ENoteConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ENoteConfiguration) GetENoteConfiguredOk() (*string, bool) {
	if o == nil || IsNil(o.ENoteConfigured) {
		return nil, false
	}
	return o.ENoteConfigured, true
}

// HasENoteConfigured returns a boolean if a field has been set.
func (o *ENoteConfiguration) HasENoteConfigured() bool {
	if o != nil && !IsNil(o.ENoteConfigured) {
		return true
	}

	return false
}

// SetENoteConfigured gets a reference to the given string and assigns it to the ENoteConfigured field.
func (o *ENoteConfiguration) SetENoteConfigured(v string) {
	o.ENoteConfigured = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *ENoteConfiguration) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ENoteConfiguration) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *ENoteConfiguration) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *ENoteConfiguration) SetOrganization(v string) {
	o.Organization = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ENoteConfiguration) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ENoteConfiguration) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ENoteConfiguration) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ENoteConfiguration) SetPassword(v string) {
	o.Password = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ENoteConfiguration) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ENoteConfiguration) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ENoteConfiguration) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ENoteConfiguration) SetUserName(v string) {
	o.UserName = &v
}

func (o ENoteConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ENoteConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKey) {
		toSerialize["apiKey"] = o.ApiKey
	}
	if !IsNil(o.ConnectConfigured) {
		toSerialize["connectConfigured"] = o.ConnectConfigured
	}
	if !IsNil(o.ENoteConfigured) {
		toSerialize["eNoteConfigured"] = o.ENoteConfigured
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableENoteConfiguration struct {
	value *ENoteConfiguration
	isSet bool
}

func (v NullableENoteConfiguration) Get() *ENoteConfiguration {
	return v.value
}

func (v *NullableENoteConfiguration) Set(val *ENoteConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableENoteConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableENoteConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENoteConfiguration(val *ENoteConfiguration) *NullableENoteConfiguration {
	return &NullableENoteConfiguration{value: val, isSet: true}
}

func (v NullableENoteConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENoteConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


