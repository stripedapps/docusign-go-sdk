/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TemplateDocumentVisibilityList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateDocumentVisibilityList{}

// TemplateDocumentVisibilityList A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients.
type TemplateDocumentVisibilityList struct {
	// An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
	DocumentVisibility []DocumentVisibility `json:"documentVisibility,omitempty"`
}

// NewTemplateDocumentVisibilityList instantiates a new TemplateDocumentVisibilityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateDocumentVisibilityList() *TemplateDocumentVisibilityList {
	this := TemplateDocumentVisibilityList{}
	return &this
}

// NewTemplateDocumentVisibilityListWithDefaults instantiates a new TemplateDocumentVisibilityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateDocumentVisibilityListWithDefaults() *TemplateDocumentVisibilityList {
	this := TemplateDocumentVisibilityList{}
	return &this
}

// GetDocumentVisibility returns the DocumentVisibility field value if set, zero value otherwise.
func (o *TemplateDocumentVisibilityList) GetDocumentVisibility() []DocumentVisibility {
	if o == nil || IsNil(o.DocumentVisibility) {
		var ret []DocumentVisibility
		return ret
	}
	return o.DocumentVisibility
}

// GetDocumentVisibilityOk returns a tuple with the DocumentVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDocumentVisibilityList) GetDocumentVisibilityOk() ([]DocumentVisibility, bool) {
	if o == nil || IsNil(o.DocumentVisibility) {
		return nil, false
	}
	return o.DocumentVisibility, true
}

// HasDocumentVisibility returns a boolean if a field has been set.
func (o *TemplateDocumentVisibilityList) HasDocumentVisibility() bool {
	if o != nil && !IsNil(o.DocumentVisibility) {
		return true
	}

	return false
}

// SetDocumentVisibility gets a reference to the given []DocumentVisibility and assigns it to the DocumentVisibility field.
func (o *TemplateDocumentVisibilityList) SetDocumentVisibility(v []DocumentVisibility) {
	o.DocumentVisibility = v
}

func (o TemplateDocumentVisibilityList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateDocumentVisibilityList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentVisibility) {
		toSerialize["documentVisibility"] = o.DocumentVisibility
	}
	return toSerialize, nil
}

type NullableTemplateDocumentVisibilityList struct {
	value *TemplateDocumentVisibilityList
	isSet bool
}

func (v NullableTemplateDocumentVisibilityList) Get() *TemplateDocumentVisibilityList {
	return v.value
}

func (v *NullableTemplateDocumentVisibilityList) Set(val *TemplateDocumentVisibilityList) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateDocumentVisibilityList) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateDocumentVisibilityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateDocumentVisibilityList(val *TemplateDocumentVisibilityList) *NullableTemplateDocumentVisibilityList {
	return &NullableTemplateDocumentVisibilityList{value: val, isSet: true}
}

func (v NullableTemplateDocumentVisibilityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateDocumentVisibilityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


