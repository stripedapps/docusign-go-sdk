/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FavoriteTemplatesAPIService FavoriteTemplatesAPI service
type FavoriteTemplatesAPIService service

type ApiFavoriteTemplatesGetFavoriteTemplatesRequest struct {
	ctx context.Context
	ApiService *FavoriteTemplatesAPIService
	accountId string
}

func (r ApiFavoriteTemplatesGetFavoriteTemplatesRequest) Execute() (*FavoriteTemplatesInfo, *http.Response, error) {
	return r.ApiService.FavoriteTemplatesGetFavoriteTemplatesExecute(r)
}

/*
FavoriteTemplatesGetFavoriteTemplates Retrieves the list of favorite templates for the account.

Retrieves the list of favorite templates for the account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiFavoriteTemplatesGetFavoriteTemplatesRequest
*/
func (a *FavoriteTemplatesAPIService) FavoriteTemplatesGetFavoriteTemplates(ctx context.Context, accountId string) ApiFavoriteTemplatesGetFavoriteTemplatesRequest {
	return ApiFavoriteTemplatesGetFavoriteTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return FavoriteTemplatesInfo
func (a *FavoriteTemplatesAPIService) FavoriteTemplatesGetFavoriteTemplatesExecute(r ApiFavoriteTemplatesGetFavoriteTemplatesRequest) (*FavoriteTemplatesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FavoriteTemplatesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FavoriteTemplatesAPIService.FavoriteTemplatesGetFavoriteTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/favorite_templates"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFavoriteTemplatesPutFavoriteTemplateRequest struct {
	ctx context.Context
	ApiService *FavoriteTemplatesAPIService
	accountId string
	favoriteTemplatesInfo *FavoriteTemplatesInfo
}

func (r ApiFavoriteTemplatesPutFavoriteTemplateRequest) FavoriteTemplatesInfo(favoriteTemplatesInfo FavoriteTemplatesInfo) ApiFavoriteTemplatesPutFavoriteTemplateRequest {
	r.favoriteTemplatesInfo = &favoriteTemplatesInfo
	return r
}

func (r ApiFavoriteTemplatesPutFavoriteTemplateRequest) Execute() (*FavoriteTemplatesInfo, *http.Response, error) {
	return r.ApiService.FavoriteTemplatesPutFavoriteTemplateExecute(r)
}

/*
FavoriteTemplatesPutFavoriteTemplate Set one or more templates as account favorites.

Set one or more templates as account favorites.

Your request should include each template as a separate `favoriteTemplatesContentItem` JSON object, like this:
```
{
    "favoriteTemplates": [
        {
            "templateId": "6bc0584f-xxxx-xxxx-xxxx-35ab28cc44e1"
        },
        {
            "templateId": "8ae9b3452-xxxx-xxxx-xxx-ac0de23fa57f"
        }
    ]
}
```


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiFavoriteTemplatesPutFavoriteTemplateRequest
*/
func (a *FavoriteTemplatesAPIService) FavoriteTemplatesPutFavoriteTemplate(ctx context.Context, accountId string) ApiFavoriteTemplatesPutFavoriteTemplateRequest {
	return ApiFavoriteTemplatesPutFavoriteTemplateRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return FavoriteTemplatesInfo
func (a *FavoriteTemplatesAPIService) FavoriteTemplatesPutFavoriteTemplateExecute(r ApiFavoriteTemplatesPutFavoriteTemplateRequest) (*FavoriteTemplatesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FavoriteTemplatesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FavoriteTemplatesAPIService.FavoriteTemplatesPutFavoriteTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/favorite_templates"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.favoriteTemplatesInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFavoriteTemplatesUnFavoriteTemplateRequest struct {
	ctx context.Context
	ApiService *FavoriteTemplatesAPIService
	accountId string
	favoriteTemplatesInfo *FavoriteTemplatesInfo
}

func (r ApiFavoriteTemplatesUnFavoriteTemplateRequest) FavoriteTemplatesInfo(favoriteTemplatesInfo FavoriteTemplatesInfo) ApiFavoriteTemplatesUnFavoriteTemplateRequest {
	r.favoriteTemplatesInfo = &favoriteTemplatesInfo
	return r
}

func (r ApiFavoriteTemplatesUnFavoriteTemplateRequest) Execute() (*FavoriteTemplatesInfo, *http.Response, error) {
	return r.ApiService.FavoriteTemplatesUnFavoriteTemplateExecute(r)
}

/*
FavoriteTemplatesUnFavoriteTemplate Remove one or more templates from the account favorites.

Remove one or more templates from the account favorites. 

Your request should include each template to remove as a separate `favoriteTemplatesContentItem` JSON object, like this:
```
{
    "favoriteTemplates": [
        {
            "templateId": "6bc0584f-xxxx-xxxx-xxxx-35ab28cc44e1"
        },
        {
            "templateId": "8ae9b3452-xxxx-xxxx-xxx-ac0de23fa57f"
        }
    ]
}
```

The response includes the IDs of the templates that were successfully removed from your favorites. To get the account's remaining favorite templates, use the [getFavoriteTemplates](/docs/esign-rest-api/reference/accounts/favoritetemplates/getfavoritetemplates/) endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiFavoriteTemplatesUnFavoriteTemplateRequest
*/
func (a *FavoriteTemplatesAPIService) FavoriteTemplatesUnFavoriteTemplate(ctx context.Context, accountId string) ApiFavoriteTemplatesUnFavoriteTemplateRequest {
	return ApiFavoriteTemplatesUnFavoriteTemplateRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return FavoriteTemplatesInfo
func (a *FavoriteTemplatesAPIService) FavoriteTemplatesUnFavoriteTemplateExecute(r ApiFavoriteTemplatesUnFavoriteTemplateRequest) (*FavoriteTemplatesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FavoriteTemplatesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FavoriteTemplatesAPIService.FavoriteTemplatesUnFavoriteTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/favorite_templates"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.favoriteTemplatesInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
