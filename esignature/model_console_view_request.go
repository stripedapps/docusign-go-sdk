/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConsoleViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsoleViewRequest{}

// ConsoleViewRequest The request object for the [EnvelopeViews: createConsole](/docs/esign-rest-api/reference/envelopes/envelopeviews/createconsole/) method.
type ConsoleViewRequest struct {
	// The ID of an envelope. If the envelope has been sent, the endpoint returns a URL for a view of the documents. If the envelope has not yet been sent, the endpoint returns a URL for the sender view.  This property is optional. If no value is provided, the endpoint returns a URL for the front page of the demo UI.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// The URL to which the user should be redirected. This is only used when the `envelopeId` is specified as a draft envelope. In this case, the endpoint returns a URL for the sender view. When the user exits the sender view, they will be redirected to the `returnUrl` value. If no value is provided, there is no option to leave the sender view.  In other cases, the user is not redirected out of the console view.
	ReturnUrl *string `json:"returnUrl,omitempty"`
}

// NewConsoleViewRequest instantiates a new ConsoleViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsoleViewRequest() *ConsoleViewRequest {
	this := ConsoleViewRequest{}
	return &this
}

// NewConsoleViewRequestWithDefaults instantiates a new ConsoleViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsoleViewRequestWithDefaults() *ConsoleViewRequest {
	this := ConsoleViewRequest{}
	return &this
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *ConsoleViewRequest) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleViewRequest) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *ConsoleViewRequest) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *ConsoleViewRequest) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetReturnUrl returns the ReturnUrl field value if set, zero value otherwise.
func (o *ConsoleViewRequest) GetReturnUrl() string {
	if o == nil || IsNil(o.ReturnUrl) {
		var ret string
		return ret
	}
	return *o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleViewRequest) GetReturnUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnUrl) {
		return nil, false
	}
	return o.ReturnUrl, true
}

// HasReturnUrl returns a boolean if a field has been set.
func (o *ConsoleViewRequest) HasReturnUrl() bool {
	if o != nil && !IsNil(o.ReturnUrl) {
		return true
	}

	return false
}

// SetReturnUrl gets a reference to the given string and assigns it to the ReturnUrl field.
func (o *ConsoleViewRequest) SetReturnUrl(v string) {
	o.ReturnUrl = &v
}

func (o ConsoleViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsoleViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.ReturnUrl) {
		toSerialize["returnUrl"] = o.ReturnUrl
	}
	return toSerialize, nil
}

type NullableConsoleViewRequest struct {
	value *ConsoleViewRequest
	isSet bool
}

func (v NullableConsoleViewRequest) Get() *ConsoleViewRequest {
	return v.value
}

func (v *NullableConsoleViewRequest) Set(val *ConsoleViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConsoleViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConsoleViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsoleViewRequest(val *ConsoleViewRequest) *NullableConsoleViewRequest {
	return &NullableConsoleViewRequest{value: val, isSet: true}
}

func (v NullableConsoleViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsoleViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


