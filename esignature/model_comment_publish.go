/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentPublish type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentPublish{}

// CommentPublish 
type CommentPublish struct {
	// A unique ID for the Salesforce object.
	Id *string `json:"id,omitempty"`
	// An array of userIds that are mentioned directly in the body of a comment.
	Mentions []string `json:"mentions,omitempty"`
	// Specifies the text that is shown in the dropdown list. 
	Text *string `json:"text,omitempty"`
	// 
	ThreadAnchorKeys *map[string]string `json:"threadAnchorKeys,omitempty"`
	// The unique identifier for the comment thread.
	ThreadId *string `json:"threadId,omitempty"`
	// 
	VisibleTo []string `json:"visibleTo,omitempty"`
}

// NewCommentPublish instantiates a new CommentPublish object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentPublish() *CommentPublish {
	this := CommentPublish{}
	return &this
}

// NewCommentPublishWithDefaults instantiates a new CommentPublish object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentPublishWithDefaults() *CommentPublish {
	this := CommentPublish{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommentPublish) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentPublish) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommentPublish) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommentPublish) SetId(v string) {
	o.Id = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *CommentPublish) GetMentions() []string {
	if o == nil || IsNil(o.Mentions) {
		var ret []string
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentPublish) GetMentionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *CommentPublish) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []string and assigns it to the Mentions field.
func (o *CommentPublish) SetMentions(v []string) {
	o.Mentions = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CommentPublish) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentPublish) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CommentPublish) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CommentPublish) SetText(v string) {
	o.Text = &v
}

// GetThreadAnchorKeys returns the ThreadAnchorKeys field value if set, zero value otherwise.
func (o *CommentPublish) GetThreadAnchorKeys() map[string]string {
	if o == nil || IsNil(o.ThreadAnchorKeys) {
		var ret map[string]string
		return ret
	}
	return *o.ThreadAnchorKeys
}

// GetThreadAnchorKeysOk returns a tuple with the ThreadAnchorKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentPublish) GetThreadAnchorKeysOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ThreadAnchorKeys) {
		return nil, false
	}
	return o.ThreadAnchorKeys, true
}

// HasThreadAnchorKeys returns a boolean if a field has been set.
func (o *CommentPublish) HasThreadAnchorKeys() bool {
	if o != nil && !IsNil(o.ThreadAnchorKeys) {
		return true
	}

	return false
}

// SetThreadAnchorKeys gets a reference to the given map[string]string and assigns it to the ThreadAnchorKeys field.
func (o *CommentPublish) SetThreadAnchorKeys(v map[string]string) {
	o.ThreadAnchorKeys = &v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *CommentPublish) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentPublish) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *CommentPublish) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *CommentPublish) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *CommentPublish) GetVisibleTo() []string {
	if o == nil || IsNil(o.VisibleTo) {
		var ret []string
		return ret
	}
	return o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentPublish) GetVisibleToOk() ([]string, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *CommentPublish) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given []string and assigns it to the VisibleTo field.
func (o *CommentPublish) SetVisibleTo(v []string) {
	o.VisibleTo = v
}

func (o CommentPublish) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentPublish) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.ThreadAnchorKeys) {
		toSerialize["threadAnchorKeys"] = o.ThreadAnchorKeys
	}
	if !IsNil(o.ThreadId) {
		toSerialize["threadId"] = o.ThreadId
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visibleTo"] = o.VisibleTo
	}
	return toSerialize, nil
}

type NullableCommentPublish struct {
	value *CommentPublish
	isSet bool
}

func (v NullableCommentPublish) Get() *CommentPublish {
	return v.value
}

func (v *NullableCommentPublish) Set(val *CommentPublish) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentPublish) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentPublish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentPublish(val *CommentPublish) *NullableCommentPublish {
	return &NullableCommentPublish{value: val, isSet: true}
}

func (v NullableCommentPublish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentPublish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


