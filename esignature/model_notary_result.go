/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotaryResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotaryResult{}

// NotaryResult Describes a single notary jurisdiction.
type NotaryResult struct {
	// 
	Jurisdictions []Jurisdiction `json:"jurisdictions,omitempty"`
	Notary *Notary `json:"notary,omitempty"`
}

// NewNotaryResult instantiates a new NotaryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotaryResult() *NotaryResult {
	this := NotaryResult{}
	return &this
}

// NewNotaryResultWithDefaults instantiates a new NotaryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotaryResultWithDefaults() *NotaryResult {
	this := NotaryResult{}
	return &this
}

// GetJurisdictions returns the Jurisdictions field value if set, zero value otherwise.
func (o *NotaryResult) GetJurisdictions() []Jurisdiction {
	if o == nil || IsNil(o.Jurisdictions) {
		var ret []Jurisdiction
		return ret
	}
	return o.Jurisdictions
}

// GetJurisdictionsOk returns a tuple with the Jurisdictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryResult) GetJurisdictionsOk() ([]Jurisdiction, bool) {
	if o == nil || IsNil(o.Jurisdictions) {
		return nil, false
	}
	return o.Jurisdictions, true
}

// HasJurisdictions returns a boolean if a field has been set.
func (o *NotaryResult) HasJurisdictions() bool {
	if o != nil && !IsNil(o.Jurisdictions) {
		return true
	}

	return false
}

// SetJurisdictions gets a reference to the given []Jurisdiction and assigns it to the Jurisdictions field.
func (o *NotaryResult) SetJurisdictions(v []Jurisdiction) {
	o.Jurisdictions = v
}

// GetNotary returns the Notary field value if set, zero value otherwise.
func (o *NotaryResult) GetNotary() Notary {
	if o == nil || IsNil(o.Notary) {
		var ret Notary
		return ret
	}
	return *o.Notary
}

// GetNotaryOk returns a tuple with the Notary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotaryResult) GetNotaryOk() (*Notary, bool) {
	if o == nil || IsNil(o.Notary) {
		return nil, false
	}
	return o.Notary, true
}

// HasNotary returns a boolean if a field has been set.
func (o *NotaryResult) HasNotary() bool {
	if o != nil && !IsNil(o.Notary) {
		return true
	}

	return false
}

// SetNotary gets a reference to the given Notary and assigns it to the Notary field.
func (o *NotaryResult) SetNotary(v Notary) {
	o.Notary = &v
}

func (o NotaryResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotaryResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jurisdictions) {
		toSerialize["jurisdictions"] = o.Jurisdictions
	}
	if !IsNil(o.Notary) {
		toSerialize["notary"] = o.Notary
	}
	return toSerialize, nil
}

type NullableNotaryResult struct {
	value *NotaryResult
	isSet bool
}

func (v NullableNotaryResult) Get() *NotaryResult {
	return v.value
}

func (v *NullableNotaryResult) Set(val *NotaryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableNotaryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableNotaryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotaryResult(val *NotaryResult) *NullableNotaryResult {
	return &NullableNotaryResult{value: val, isSet: true}
}

func (v NullableNotaryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotaryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


