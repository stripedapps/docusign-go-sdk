/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountSignatureProviders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSignatureProviders{}

// AccountSignatureProviders This resource provides information on the Standards Based Signature providers that have been provisioned for an account. 
type AccountSignatureProviders struct {
	// Names of electronic or digital signature providers that can be used.
	SignatureProviders []AccountSignatureProvider `json:"signatureProviders,omitempty"`
}

// NewAccountSignatureProviders instantiates a new AccountSignatureProviders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSignatureProviders() *AccountSignatureProviders {
	this := AccountSignatureProviders{}
	return &this
}

// NewAccountSignatureProvidersWithDefaults instantiates a new AccountSignatureProviders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSignatureProvidersWithDefaults() *AccountSignatureProviders {
	this := AccountSignatureProviders{}
	return &this
}

// GetSignatureProviders returns the SignatureProviders field value if set, zero value otherwise.
func (o *AccountSignatureProviders) GetSignatureProviders() []AccountSignatureProvider {
	if o == nil || IsNil(o.SignatureProviders) {
		var ret []AccountSignatureProvider
		return ret
	}
	return o.SignatureProviders
}

// GetSignatureProvidersOk returns a tuple with the SignatureProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSignatureProviders) GetSignatureProvidersOk() ([]AccountSignatureProvider, bool) {
	if o == nil || IsNil(o.SignatureProviders) {
		return nil, false
	}
	return o.SignatureProviders, true
}

// HasSignatureProviders returns a boolean if a field has been set.
func (o *AccountSignatureProviders) HasSignatureProviders() bool {
	if o != nil && !IsNil(o.SignatureProviders) {
		return true
	}

	return false
}

// SetSignatureProviders gets a reference to the given []AccountSignatureProvider and assigns it to the SignatureProviders field.
func (o *AccountSignatureProviders) SetSignatureProviders(v []AccountSignatureProvider) {
	o.SignatureProviders = v
}

func (o AccountSignatureProviders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSignatureProviders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignatureProviders) {
		toSerialize["signatureProviders"] = o.SignatureProviders
	}
	return toSerialize, nil
}

type NullableAccountSignatureProviders struct {
	value *AccountSignatureProviders
	isSet bool
}

func (v NullableAccountSignatureProviders) Get() *AccountSignatureProviders {
	return v.value
}

func (v *NullableAccountSignatureProviders) Set(val *AccountSignatureProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSignatureProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSignatureProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSignatureProviders(val *AccountSignatureProviders) *NullableAccountSignatureProviders {
	return &NullableAccountSignatureProviders{value: val, isSet: true}
}

func (v NullableAccountSignatureProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSignatureProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


