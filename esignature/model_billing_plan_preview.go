/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BillingPlanPreview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingPlanPreview{}

// BillingPlanPreview Information used to provide a preview of a billing plan.
type BillingPlanPreview struct {
	// Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the account.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	Invoice *BillingInvoice `json:"invoice,omitempty"`
	// When **true,** the billing plan is prorated.
	IsProrated *string `json:"isProrated,omitempty"`
	// 
	SubtotalAmount *string `json:"subtotalAmount,omitempty"`
	// 
	TaxAmount *string `json:"taxAmount,omitempty"`
	// 
	TotalAmount *string `json:"totalAmount,omitempty"`
}

// NewBillingPlanPreview instantiates a new BillingPlanPreview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingPlanPreview() *BillingPlanPreview {
	this := BillingPlanPreview{}
	return &this
}

// NewBillingPlanPreviewWithDefaults instantiates a new BillingPlanPreview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPlanPreviewWithDefaults() *BillingPlanPreview {
	this := BillingPlanPreview{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *BillingPlanPreview) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanPreview) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *BillingPlanPreview) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *BillingPlanPreview) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *BillingPlanPreview) GetInvoice() BillingInvoice {
	if o == nil || IsNil(o.Invoice) {
		var ret BillingInvoice
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanPreview) GetInvoiceOk() (*BillingInvoice, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *BillingPlanPreview) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given BillingInvoice and assigns it to the Invoice field.
func (o *BillingPlanPreview) SetInvoice(v BillingInvoice) {
	o.Invoice = &v
}

// GetIsProrated returns the IsProrated field value if set, zero value otherwise.
func (o *BillingPlanPreview) GetIsProrated() string {
	if o == nil || IsNil(o.IsProrated) {
		var ret string
		return ret
	}
	return *o.IsProrated
}

// GetIsProratedOk returns a tuple with the IsProrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanPreview) GetIsProratedOk() (*string, bool) {
	if o == nil || IsNil(o.IsProrated) {
		return nil, false
	}
	return o.IsProrated, true
}

// HasIsProrated returns a boolean if a field has been set.
func (o *BillingPlanPreview) HasIsProrated() bool {
	if o != nil && !IsNil(o.IsProrated) {
		return true
	}

	return false
}

// SetIsProrated gets a reference to the given string and assigns it to the IsProrated field.
func (o *BillingPlanPreview) SetIsProrated(v string) {
	o.IsProrated = &v
}

// GetSubtotalAmount returns the SubtotalAmount field value if set, zero value otherwise.
func (o *BillingPlanPreview) GetSubtotalAmount() string {
	if o == nil || IsNil(o.SubtotalAmount) {
		var ret string
		return ret
	}
	return *o.SubtotalAmount
}

// GetSubtotalAmountOk returns a tuple with the SubtotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanPreview) GetSubtotalAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SubtotalAmount) {
		return nil, false
	}
	return o.SubtotalAmount, true
}

// HasSubtotalAmount returns a boolean if a field has been set.
func (o *BillingPlanPreview) HasSubtotalAmount() bool {
	if o != nil && !IsNil(o.SubtotalAmount) {
		return true
	}

	return false
}

// SetSubtotalAmount gets a reference to the given string and assigns it to the SubtotalAmount field.
func (o *BillingPlanPreview) SetSubtotalAmount(v string) {
	o.SubtotalAmount = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *BillingPlanPreview) GetTaxAmount() string {
	if o == nil || IsNil(o.TaxAmount) {
		var ret string
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanPreview) GetTaxAmountOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *BillingPlanPreview) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given string and assigns it to the TaxAmount field.
func (o *BillingPlanPreview) SetTaxAmount(v string) {
	o.TaxAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *BillingPlanPreview) GetTotalAmount() string {
	if o == nil || IsNil(o.TotalAmount) {
		var ret string
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingPlanPreview) GetTotalAmountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *BillingPlanPreview) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given string and assigns it to the TotalAmount field.
func (o *BillingPlanPreview) SetTotalAmount(v string) {
	o.TotalAmount = &v
}

func (o BillingPlanPreview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingPlanPreview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if !IsNil(o.IsProrated) {
		toSerialize["isProrated"] = o.IsProrated
	}
	if !IsNil(o.SubtotalAmount) {
		toSerialize["subtotalAmount"] = o.SubtotalAmount
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	return toSerialize, nil
}

type NullableBillingPlanPreview struct {
	value *BillingPlanPreview
	isSet bool
}

func (v NullableBillingPlanPreview) Get() *BillingPlanPreview {
	return v.value
}

func (v *NullableBillingPlanPreview) Set(val *BillingPlanPreview) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPlanPreview) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPlanPreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPlanPreview(val *BillingPlanPreview) *NullableBillingPlanPreview {
	return &NullableBillingPlanPreview{value: val, isSet: true}
}

func (v NullableBillingPlanPreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPlanPreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


