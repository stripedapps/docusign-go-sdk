/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountPasswordStrengthType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPasswordStrengthType{}

// AccountPasswordStrengthType 
type AccountPasswordStrengthType struct {
	// An array of option strings supported by this setting.
	Options []AccountPasswordStrengthTypeOption `json:"options,omitempty"`
}

// NewAccountPasswordStrengthType instantiates a new AccountPasswordStrengthType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPasswordStrengthType() *AccountPasswordStrengthType {
	this := AccountPasswordStrengthType{}
	return &this
}

// NewAccountPasswordStrengthTypeWithDefaults instantiates a new AccountPasswordStrengthType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPasswordStrengthTypeWithDefaults() *AccountPasswordStrengthType {
	this := AccountPasswordStrengthType{}
	return &this
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *AccountPasswordStrengthType) GetOptions() []AccountPasswordStrengthTypeOption {
	if o == nil || IsNil(o.Options) {
		var ret []AccountPasswordStrengthTypeOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordStrengthType) GetOptionsOk() ([]AccountPasswordStrengthTypeOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *AccountPasswordStrengthType) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []AccountPasswordStrengthTypeOption and assigns it to the Options field.
func (o *AccountPasswordStrengthType) SetOptions(v []AccountPasswordStrengthTypeOption) {
	o.Options = v
}

func (o AccountPasswordStrengthType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPasswordStrengthType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableAccountPasswordStrengthType struct {
	value *AccountPasswordStrengthType
	isSet bool
}

func (v NullableAccountPasswordStrengthType) Get() *AccountPasswordStrengthType {
	return v.value
}

func (v *NullableAccountPasswordStrengthType) Set(val *AccountPasswordStrengthType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPasswordStrengthType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPasswordStrengthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPasswordStrengthType(val *AccountPasswordStrengthType) *NullableAccountPasswordStrengthType {
	return &NullableAccountPasswordStrengthType{value: val, isSet: true}
}

func (v NullableAccountPasswordStrengthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPasswordStrengthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


