/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BccEmailArchiveHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BccEmailArchiveHistory{}

// BccEmailArchiveHistory Contains details about the history of the BCC email archive configuration.
type BccEmailArchiveHistory struct {
	// The ID of the account that owns the BCC email archive configuration.
	AccountId *string `json:"accountId,omitempty"`
	// The action taken on the BCC email archive configuration.  Examples:   - `CREATED`: The BCC email archive configuration has been created. - `UPDATED`: The BCC email address has been activated by clicking on the activation link in the activation email message. - `CLOSED`: The BCC email address has been marked as closed is no longer used for archiving.
	Action *string `json:"action,omitempty"`
	// The BCC email address used to archive the emails that DocuSign generates.   Example: customer_bcc@example.com
	Email *string `json:"email,omitempty"`
	// The UTC DateTime when the BCC email address was last modified.
	Modified *string `json:"modified,omitempty"`
	ModifiedBy *UserInfo `json:"modifiedBy,omitempty"`
	// The status of the BCC email address. Possible values are:  - `activation_sent`: An activation link has been sent to the BCC email address. - `active`: The BCC email address is actively used for archiving. - `closed`: The BCC email address is no longer used for archiving.
	Status *string `json:"status,omitempty"`
}

// NewBccEmailArchiveHistory instantiates a new BccEmailArchiveHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBccEmailArchiveHistory() *BccEmailArchiveHistory {
	this := BccEmailArchiveHistory{}
	return &this
}

// NewBccEmailArchiveHistoryWithDefaults instantiates a new BccEmailArchiveHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBccEmailArchiveHistoryWithDefaults() *BccEmailArchiveHistory {
	this := BccEmailArchiveHistory{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *BccEmailArchiveHistory) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchiveHistory) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *BccEmailArchiveHistory) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *BccEmailArchiveHistory) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *BccEmailArchiveHistory) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchiveHistory) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *BccEmailArchiveHistory) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *BccEmailArchiveHistory) SetAction(v string) {
	o.Action = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *BccEmailArchiveHistory) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchiveHistory) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *BccEmailArchiveHistory) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *BccEmailArchiveHistory) SetEmail(v string) {
	o.Email = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *BccEmailArchiveHistory) GetModified() string {
	if o == nil || IsNil(o.Modified) {
		var ret string
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchiveHistory) GetModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *BccEmailArchiveHistory) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given string and assigns it to the Modified field.
func (o *BccEmailArchiveHistory) SetModified(v string) {
	o.Modified = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *BccEmailArchiveHistory) GetModifiedBy() UserInfo {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret UserInfo
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchiveHistory) GetModifiedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *BccEmailArchiveHistory) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given UserInfo and assigns it to the ModifiedBy field.
func (o *BccEmailArchiveHistory) SetModifiedBy(v UserInfo) {
	o.ModifiedBy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BccEmailArchiveHistory) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchiveHistory) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BccEmailArchiveHistory) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BccEmailArchiveHistory) SetStatus(v string) {
	o.Status = &v
}

func (o BccEmailArchiveHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BccEmailArchiveHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableBccEmailArchiveHistory struct {
	value *BccEmailArchiveHistory
	isSet bool
}

func (v NullableBccEmailArchiveHistory) Get() *BccEmailArchiveHistory {
	return v.value
}

func (v *NullableBccEmailArchiveHistory) Set(val *BccEmailArchiveHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableBccEmailArchiveHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableBccEmailArchiveHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBccEmailArchiveHistory(val *BccEmailArchiveHistory) *NullableBccEmailArchiveHistory {
	return &NullableBccEmailArchiveHistory{value: val, isSet: true}
}

func (v NullableBccEmailArchiveHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBccEmailArchiveHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


