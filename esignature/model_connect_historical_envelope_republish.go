/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectHistoricalEnvelopeRepublish type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectHistoricalEnvelopeRepublish{}

// ConnectHistoricalEnvelopeRepublish The request body for the `createHistoricalEnvelopePublishTransaction` endpoint.
type ConnectHistoricalEnvelopeRepublish struct {
	Config *ConnectCustomConfiguration `json:"config,omitempty"`
	// An array of envelope IDs as comma-separated strings. This property is required.  For example: `[\"4280f274-xxxx-xxxx-xxxx-b218b7eeda08\",\"9586h293-xxxx-xxxx-xxxx-m923b8opre71\",\"2347w948-xxxx-xxxx-xxxx-t096b8krno89\"]`
	Envelopes []string `json:"envelopes,omitempty"`
}

// NewConnectHistoricalEnvelopeRepublish instantiates a new ConnectHistoricalEnvelopeRepublish object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectHistoricalEnvelopeRepublish() *ConnectHistoricalEnvelopeRepublish {
	this := ConnectHistoricalEnvelopeRepublish{}
	return &this
}

// NewConnectHistoricalEnvelopeRepublishWithDefaults instantiates a new ConnectHistoricalEnvelopeRepublish object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectHistoricalEnvelopeRepublishWithDefaults() *ConnectHistoricalEnvelopeRepublish {
	this := ConnectHistoricalEnvelopeRepublish{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ConnectHistoricalEnvelopeRepublish) GetConfig() ConnectCustomConfiguration {
	if o == nil || IsNil(o.Config) {
		var ret ConnectCustomConfiguration
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectHistoricalEnvelopeRepublish) GetConfigOk() (*ConnectCustomConfiguration, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ConnectHistoricalEnvelopeRepublish) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ConnectCustomConfiguration and assigns it to the Config field.
func (o *ConnectHistoricalEnvelopeRepublish) SetConfig(v ConnectCustomConfiguration) {
	o.Config = &v
}

// GetEnvelopes returns the Envelopes field value if set, zero value otherwise.
func (o *ConnectHistoricalEnvelopeRepublish) GetEnvelopes() []string {
	if o == nil || IsNil(o.Envelopes) {
		var ret []string
		return ret
	}
	return o.Envelopes
}

// GetEnvelopesOk returns a tuple with the Envelopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectHistoricalEnvelopeRepublish) GetEnvelopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Envelopes) {
		return nil, false
	}
	return o.Envelopes, true
}

// HasEnvelopes returns a boolean if a field has been set.
func (o *ConnectHistoricalEnvelopeRepublish) HasEnvelopes() bool {
	if o != nil && !IsNil(o.Envelopes) {
		return true
	}

	return false
}

// SetEnvelopes gets a reference to the given []string and assigns it to the Envelopes field.
func (o *ConnectHistoricalEnvelopeRepublish) SetEnvelopes(v []string) {
	o.Envelopes = v
}

func (o ConnectHistoricalEnvelopeRepublish) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectHistoricalEnvelopeRepublish) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Envelopes) {
		toSerialize["envelopes"] = o.Envelopes
	}
	return toSerialize, nil
}

type NullableConnectHistoricalEnvelopeRepublish struct {
	value *ConnectHistoricalEnvelopeRepublish
	isSet bool
}

func (v NullableConnectHistoricalEnvelopeRepublish) Get() *ConnectHistoricalEnvelopeRepublish {
	return v.value
}

func (v *NullableConnectHistoricalEnvelopeRepublish) Set(val *ConnectHistoricalEnvelopeRepublish) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectHistoricalEnvelopeRepublish) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectHistoricalEnvelopeRepublish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectHistoricalEnvelopeRepublish(val *ConnectHistoricalEnvelopeRepublish) *NullableConnectHistoricalEnvelopeRepublish {
	return &NullableConnectHistoricalEnvelopeRepublish{value: val, isSet: true}
}

func (v NullableConnectHistoricalEnvelopeRepublish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectHistoricalEnvelopeRepublish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


