/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PurchasedEnvelopesInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchasedEnvelopesInformation{}

// PurchasedEnvelopesInformation 
type PurchasedEnvelopesInformation struct {
	// The total amount of the purchase.
	Amount *string `json:"amount,omitempty"`
	// The AppName of the client application.
	AppName *string `json:"appName,omitempty"`
	// Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the purchase. 
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// The Platform of the client application
	Platform *string `json:"platform,omitempty"`
	// The Product ID from the AppStore.
	ProductId *string `json:"productId,omitempty"`
	// The quantity of envelopes to add to the account.
	Quantity *string `json:"quantity,omitempty"`
	// The encrypted Base64 encoded receipt data.
	ReceiptData *string `json:"receiptData,omitempty"`
	// The name of the AppStore.
	StoreName *string `json:"storeName,omitempty"`
	// Specifies the Transaction ID from the AppStore.
	TransactionId *string `json:"transactionId,omitempty"`
}

// NewPurchasedEnvelopesInformation instantiates a new PurchasedEnvelopesInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchasedEnvelopesInformation() *PurchasedEnvelopesInformation {
	this := PurchasedEnvelopesInformation{}
	return &this
}

// NewPurchasedEnvelopesInformationWithDefaults instantiates a new PurchasedEnvelopesInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchasedEnvelopesInformationWithDefaults() *PurchasedEnvelopesInformation {
	this := PurchasedEnvelopesInformation{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *PurchasedEnvelopesInformation) SetAmount(v string) {
	o.Amount = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *PurchasedEnvelopesInformation) SetAppName(v string) {
	o.AppName = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *PurchasedEnvelopesInformation) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *PurchasedEnvelopesInformation) SetPlatform(v string) {
	o.Platform = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *PurchasedEnvelopesInformation) SetProductId(v string) {
	o.ProductId = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *PurchasedEnvelopesInformation) SetQuantity(v string) {
	o.Quantity = &v
}

// GetReceiptData returns the ReceiptData field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetReceiptData() string {
	if o == nil || IsNil(o.ReceiptData) {
		var ret string
		return ret
	}
	return *o.ReceiptData
}

// GetReceiptDataOk returns a tuple with the ReceiptData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetReceiptDataOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiptData) {
		return nil, false
	}
	return o.ReceiptData, true
}

// HasReceiptData returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasReceiptData() bool {
	if o != nil && !IsNil(o.ReceiptData) {
		return true
	}

	return false
}

// SetReceiptData gets a reference to the given string and assigns it to the ReceiptData field.
func (o *PurchasedEnvelopesInformation) SetReceiptData(v string) {
	o.ReceiptData = &v
}

// GetStoreName returns the StoreName field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetStoreName() string {
	if o == nil || IsNil(o.StoreName) {
		var ret string
		return ret
	}
	return *o.StoreName
}

// GetStoreNameOk returns a tuple with the StoreName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetStoreNameOk() (*string, bool) {
	if o == nil || IsNil(o.StoreName) {
		return nil, false
	}
	return o.StoreName, true
}

// HasStoreName returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasStoreName() bool {
	if o != nil && !IsNil(o.StoreName) {
		return true
	}

	return false
}

// SetStoreName gets a reference to the given string and assigns it to the StoreName field.
func (o *PurchasedEnvelopesInformation) SetStoreName(v string) {
	o.StoreName = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *PurchasedEnvelopesInformation) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedEnvelopesInformation) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *PurchasedEnvelopesInformation) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *PurchasedEnvelopesInformation) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o PurchasedEnvelopesInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchasedEnvelopesInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.ReceiptData) {
		toSerialize["receiptData"] = o.ReceiptData
	}
	if !IsNil(o.StoreName) {
		toSerialize["storeName"] = o.StoreName
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	return toSerialize, nil
}

type NullablePurchasedEnvelopesInformation struct {
	value *PurchasedEnvelopesInformation
	isSet bool
}

func (v NullablePurchasedEnvelopesInformation) Get() *PurchasedEnvelopesInformation {
	return v.value
}

func (v *NullablePurchasedEnvelopesInformation) Set(val *PurchasedEnvelopesInformation) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasedEnvelopesInformation) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasedEnvelopesInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasedEnvelopesInformation(val *PurchasedEnvelopesInformation) *NullablePurchasedEnvelopesInformation {
	return &NullablePurchasedEnvelopesInformation{value: val, isSet: true}
}

func (v NullablePurchasedEnvelopesInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchasedEnvelopesInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


