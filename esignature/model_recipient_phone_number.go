/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecipientPhoneNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientPhoneNumber{}

// RecipientPhoneNumber Describes the recipient phone number.
type RecipientPhoneNumber struct {
	// The numeric country calling code for `number`. For example, the country calling code for the US and Canada is `1`, for the UK: `44`,  Do not include the `+` symbol.
	CountryCode *string `json:"countryCode,omitempty"`
	CountryCodeMetadata *PropertyMetadata `json:"countryCodeMetadata,omitempty"`
	// The telephone number. Use only the digits `0`-`9`. Remove any non-numeric characters.  Do not include the `countryCode`. For US, Canada, and other [North American Numbering Plan](https://en.wikipedia.org/wiki/North_American_Numbering_Plan) countries, do not include a leading `1` or `0`.
	Number *string `json:"number,omitempty"`
	NumberMetadata *PropertyMetadata `json:"numberMetadata,omitempty"`
}

// NewRecipientPhoneNumber instantiates a new RecipientPhoneNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientPhoneNumber() *RecipientPhoneNumber {
	this := RecipientPhoneNumber{}
	return &this
}

// NewRecipientPhoneNumberWithDefaults instantiates a new RecipientPhoneNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientPhoneNumberWithDefaults() *RecipientPhoneNumber {
	this := RecipientPhoneNumber{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *RecipientPhoneNumber) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientPhoneNumber) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *RecipientPhoneNumber) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *RecipientPhoneNumber) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryCodeMetadata returns the CountryCodeMetadata field value if set, zero value otherwise.
func (o *RecipientPhoneNumber) GetCountryCodeMetadata() PropertyMetadata {
	if o == nil || IsNil(o.CountryCodeMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.CountryCodeMetadata
}

// GetCountryCodeMetadataOk returns a tuple with the CountryCodeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientPhoneNumber) GetCountryCodeMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.CountryCodeMetadata) {
		return nil, false
	}
	return o.CountryCodeMetadata, true
}

// HasCountryCodeMetadata returns a boolean if a field has been set.
func (o *RecipientPhoneNumber) HasCountryCodeMetadata() bool {
	if o != nil && !IsNil(o.CountryCodeMetadata) {
		return true
	}

	return false
}

// SetCountryCodeMetadata gets a reference to the given PropertyMetadata and assigns it to the CountryCodeMetadata field.
func (o *RecipientPhoneNumber) SetCountryCodeMetadata(v PropertyMetadata) {
	o.CountryCodeMetadata = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *RecipientPhoneNumber) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientPhoneNumber) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *RecipientPhoneNumber) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *RecipientPhoneNumber) SetNumber(v string) {
	o.Number = &v
}

// GetNumberMetadata returns the NumberMetadata field value if set, zero value otherwise.
func (o *RecipientPhoneNumber) GetNumberMetadata() PropertyMetadata {
	if o == nil || IsNil(o.NumberMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.NumberMetadata
}

// GetNumberMetadataOk returns a tuple with the NumberMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientPhoneNumber) GetNumberMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.NumberMetadata) {
		return nil, false
	}
	return o.NumberMetadata, true
}

// HasNumberMetadata returns a boolean if a field has been set.
func (o *RecipientPhoneNumber) HasNumberMetadata() bool {
	if o != nil && !IsNil(o.NumberMetadata) {
		return true
	}

	return false
}

// SetNumberMetadata gets a reference to the given PropertyMetadata and assigns it to the NumberMetadata field.
func (o *RecipientPhoneNumber) SetNumberMetadata(v PropertyMetadata) {
	o.NumberMetadata = &v
}

func (o RecipientPhoneNumber) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientPhoneNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.CountryCodeMetadata) {
		toSerialize["countryCodeMetadata"] = o.CountryCodeMetadata
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.NumberMetadata) {
		toSerialize["numberMetadata"] = o.NumberMetadata
	}
	return toSerialize, nil
}

type NullableRecipientPhoneNumber struct {
	value *RecipientPhoneNumber
	isSet bool
}

func (v NullableRecipientPhoneNumber) Get() *RecipientPhoneNumber {
	return v.value
}

func (v *NullableRecipientPhoneNumber) Set(val *RecipientPhoneNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientPhoneNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientPhoneNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientPhoneNumber(val *RecipientPhoneNumber) *NullableRecipientPhoneNumber {
	return &NullableRecipientPhoneNumber{value: val, isSet: true}
}

func (v NullableRecipientPhoneNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientPhoneNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


