/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExternalFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalFile{}

// ExternalFile This object contains information about a file or folder in cloud storage.
type ExternalFile struct {
	// The UTC date and time that the file or folder was last modified.
	Date *string `json:"date,omitempty"`
	// 
	HasCompositeTemplate *string `json:"hasCompositeTemplate,omitempty"`
	// The storage provider's ID for the file or folder.
	Id *string `json:"id,omitempty"`
	// The file extension for a file.  **Note:** If the item is a folder, this value is null.
	Img *string `json:"img,omitempty"`
	// The full name of a file.
	Name *string `json:"name,omitempty"`
	// 
	OwnerName *string `json:"ownerName,omitempty"`
	// The size of the file. The file size limit varies based on the cloud storage provider.
	Size *string `json:"size,omitempty"`
	// When **true,** DocuSign supports the file type for upload.
	Supported *string `json:"supported,omitempty"`
	// The type of cloud storage item. Valid values are:  - `file` - `folder`
	Type *string `json:"type,omitempty"`
	// The URI for the file or folder.
	Uri *string `json:"uri,omitempty"`
}

// NewExternalFile instantiates a new ExternalFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalFile() *ExternalFile {
	this := ExternalFile{}
	return &this
}

// NewExternalFileWithDefaults instantiates a new ExternalFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalFileWithDefaults() *ExternalFile {
	this := ExternalFile{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ExternalFile) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ExternalFile) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ExternalFile) SetDate(v string) {
	o.Date = &v
}

// GetHasCompositeTemplate returns the HasCompositeTemplate field value if set, zero value otherwise.
func (o *ExternalFile) GetHasCompositeTemplate() string {
	if o == nil || IsNil(o.HasCompositeTemplate) {
		var ret string
		return ret
	}
	return *o.HasCompositeTemplate
}

// GetHasCompositeTemplateOk returns a tuple with the HasCompositeTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetHasCompositeTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.HasCompositeTemplate) {
		return nil, false
	}
	return o.HasCompositeTemplate, true
}

// HasHasCompositeTemplate returns a boolean if a field has been set.
func (o *ExternalFile) HasHasCompositeTemplate() bool {
	if o != nil && !IsNil(o.HasCompositeTemplate) {
		return true
	}

	return false
}

// SetHasCompositeTemplate gets a reference to the given string and assigns it to the HasCompositeTemplate field.
func (o *ExternalFile) SetHasCompositeTemplate(v string) {
	o.HasCompositeTemplate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExternalFile) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExternalFile) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExternalFile) SetId(v string) {
	o.Id = &v
}

// GetImg returns the Img field value if set, zero value otherwise.
func (o *ExternalFile) GetImg() string {
	if o == nil || IsNil(o.Img) {
		var ret string
		return ret
	}
	return *o.Img
}

// GetImgOk returns a tuple with the Img field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetImgOk() (*string, bool) {
	if o == nil || IsNil(o.Img) {
		return nil, false
	}
	return o.Img, true
}

// HasImg returns a boolean if a field has been set.
func (o *ExternalFile) HasImg() bool {
	if o != nil && !IsNil(o.Img) {
		return true
	}

	return false
}

// SetImg gets a reference to the given string and assigns it to the Img field.
func (o *ExternalFile) SetImg(v string) {
	o.Img = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExternalFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExternalFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExternalFile) SetName(v string) {
	o.Name = &v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *ExternalFile) GetOwnerName() string {
	if o == nil || IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *ExternalFile) HasOwnerName() bool {
	if o != nil && !IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *ExternalFile) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ExternalFile) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ExternalFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *ExternalFile) SetSize(v string) {
	o.Size = &v
}

// GetSupported returns the Supported field value if set, zero value otherwise.
func (o *ExternalFile) GetSupported() string {
	if o == nil || IsNil(o.Supported) {
		var ret string
		return ret
	}
	return *o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetSupportedOk() (*string, bool) {
	if o == nil || IsNil(o.Supported) {
		return nil, false
	}
	return o.Supported, true
}

// HasSupported returns a boolean if a field has been set.
func (o *ExternalFile) HasSupported() bool {
	if o != nil && !IsNil(o.Supported) {
		return true
	}

	return false
}

// SetSupported gets a reference to the given string and assigns it to the Supported field.
func (o *ExternalFile) SetSupported(v string) {
	o.Supported = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExternalFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExternalFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExternalFile) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ExternalFile) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFile) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ExternalFile) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ExternalFile) SetUri(v string) {
	o.Uri = &v
}

func (o ExternalFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.HasCompositeTemplate) {
		toSerialize["hasCompositeTemplate"] = o.HasCompositeTemplate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Img) {
		toSerialize["img"] = o.Img
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OwnerName) {
		toSerialize["ownerName"] = o.OwnerName
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Supported) {
		toSerialize["supported"] = o.Supported
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableExternalFile struct {
	value *ExternalFile
	isSet bool
}

func (v NullableExternalFile) Get() *ExternalFile {
	return v.value
}

func (v *NullableExternalFile) Set(val *ExternalFile) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalFile) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalFile(val *ExternalFile) *NullableExternalFile {
	return &NullableExternalFile{value: val, isSet: true}
}

func (v NullableExternalFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


