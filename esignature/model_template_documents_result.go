/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TemplateDocumentsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateDocumentsResult{}

// TemplateDocumentsResult The results of this method.
type TemplateDocumentsResult struct {
	// An array of document objects that contain information about the documents associated with the template.
	TemplateDocuments []EnvelopeDocument `json:"templateDocuments,omitempty"`
	// The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
	TemplateId *string `json:"templateId,omitempty"`
}

// NewTemplateDocumentsResult instantiates a new TemplateDocumentsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateDocumentsResult() *TemplateDocumentsResult {
	this := TemplateDocumentsResult{}
	return &this
}

// NewTemplateDocumentsResultWithDefaults instantiates a new TemplateDocumentsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateDocumentsResultWithDefaults() *TemplateDocumentsResult {
	this := TemplateDocumentsResult{}
	return &this
}

// GetTemplateDocuments returns the TemplateDocuments field value if set, zero value otherwise.
func (o *TemplateDocumentsResult) GetTemplateDocuments() []EnvelopeDocument {
	if o == nil || IsNil(o.TemplateDocuments) {
		var ret []EnvelopeDocument
		return ret
	}
	return o.TemplateDocuments
}

// GetTemplateDocumentsOk returns a tuple with the TemplateDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDocumentsResult) GetTemplateDocumentsOk() ([]EnvelopeDocument, bool) {
	if o == nil || IsNil(o.TemplateDocuments) {
		return nil, false
	}
	return o.TemplateDocuments, true
}

// HasTemplateDocuments returns a boolean if a field has been set.
func (o *TemplateDocumentsResult) HasTemplateDocuments() bool {
	if o != nil && !IsNil(o.TemplateDocuments) {
		return true
	}

	return false
}

// SetTemplateDocuments gets a reference to the given []EnvelopeDocument and assigns it to the TemplateDocuments field.
func (o *TemplateDocumentsResult) SetTemplateDocuments(v []EnvelopeDocument) {
	o.TemplateDocuments = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *TemplateDocumentsResult) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId) {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDocumentsResult) GetTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *TemplateDocumentsResult) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *TemplateDocumentsResult) SetTemplateId(v string) {
	o.TemplateId = &v
}

func (o TemplateDocumentsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateDocumentsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TemplateDocuments) {
		toSerialize["templateDocuments"] = o.TemplateDocuments
	}
	if !IsNil(o.TemplateId) {
		toSerialize["templateId"] = o.TemplateId
	}
	return toSerialize, nil
}

type NullableTemplateDocumentsResult struct {
	value *TemplateDocumentsResult
	isSet bool
}

func (v NullableTemplateDocumentsResult) Get() *TemplateDocumentsResult {
	return v.value
}

func (v *NullableTemplateDocumentsResult) Set(val *TemplateDocumentsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateDocumentsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateDocumentsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateDocumentsResult(val *TemplateDocumentsResult) *NullableTemplateDocumentsResult {
	return &NullableTemplateDocumentsResult{value: val, isSet: true}
}

func (v NullableTemplateDocumentsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateDocumentsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


