/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserPasswordRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPasswordRules{}

// UserPasswordRules Contains details about the password rules for a user.
type UserPasswordRules struct {
	PasswordRules *AccountPasswordRules `json:"passwordRules,omitempty"`
	// The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
	UserId *string `json:"userId,omitempty"`
}

// NewUserPasswordRules instantiates a new UserPasswordRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordRules() *UserPasswordRules {
	this := UserPasswordRules{}
	return &this
}

// NewUserPasswordRulesWithDefaults instantiates a new UserPasswordRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordRulesWithDefaults() *UserPasswordRules {
	this := UserPasswordRules{}
	return &this
}

// GetPasswordRules returns the PasswordRules field value if set, zero value otherwise.
func (o *UserPasswordRules) GetPasswordRules() AccountPasswordRules {
	if o == nil || IsNil(o.PasswordRules) {
		var ret AccountPasswordRules
		return ret
	}
	return *o.PasswordRules
}

// GetPasswordRulesOk returns a tuple with the PasswordRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordRules) GetPasswordRulesOk() (*AccountPasswordRules, bool) {
	if o == nil || IsNil(o.PasswordRules) {
		return nil, false
	}
	return o.PasswordRules, true
}

// HasPasswordRules returns a boolean if a field has been set.
func (o *UserPasswordRules) HasPasswordRules() bool {
	if o != nil && !IsNil(o.PasswordRules) {
		return true
	}

	return false
}

// SetPasswordRules gets a reference to the given AccountPasswordRules and assigns it to the PasswordRules field.
func (o *UserPasswordRules) SetPasswordRules(v AccountPasswordRules) {
	o.PasswordRules = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserPasswordRules) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordRules) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserPasswordRules) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserPasswordRules) SetUserId(v string) {
	o.UserId = &v
}

func (o UserPasswordRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPasswordRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PasswordRules) {
		toSerialize["passwordRules"] = o.PasswordRules
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableUserPasswordRules struct {
	value *UserPasswordRules
	isSet bool
}

func (v NullableUserPasswordRules) Get() *UserPasswordRules {
	return v.value
}

func (v *NullableUserPasswordRules) Set(val *UserPasswordRules) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordRules) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordRules(val *UserPasswordRules) *NullableUserPasswordRules {
	return &NullableUserPasswordRules{value: val, isSet: true}
}

func (v NullableUserPasswordRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


