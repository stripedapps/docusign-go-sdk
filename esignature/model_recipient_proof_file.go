/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecipientProofFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientProofFile{}

// RecipientProofFile The proof file of the recipient. [ID Evidence](/docs/idevidence-api/) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](/docs/esign-rest-api/esign101/concepts/documents/)
type RecipientProofFile struct {
	// 
	HasIdentityAttempts *string `json:"hasIdentityAttempts,omitempty"`
	// Indicates whether a proof file is available for this recipient.
	IsInProofFile *string `json:"isInProofFile,omitempty"`
}

// NewRecipientProofFile instantiates a new RecipientProofFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientProofFile() *RecipientProofFile {
	this := RecipientProofFile{}
	return &this
}

// NewRecipientProofFileWithDefaults instantiates a new RecipientProofFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientProofFileWithDefaults() *RecipientProofFile {
	this := RecipientProofFile{}
	return &this
}

// GetHasIdentityAttempts returns the HasIdentityAttempts field value if set, zero value otherwise.
func (o *RecipientProofFile) GetHasIdentityAttempts() string {
	if o == nil || IsNil(o.HasIdentityAttempts) {
		var ret string
		return ret
	}
	return *o.HasIdentityAttempts
}

// GetHasIdentityAttemptsOk returns a tuple with the HasIdentityAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientProofFile) GetHasIdentityAttemptsOk() (*string, bool) {
	if o == nil || IsNil(o.HasIdentityAttempts) {
		return nil, false
	}
	return o.HasIdentityAttempts, true
}

// HasHasIdentityAttempts returns a boolean if a field has been set.
func (o *RecipientProofFile) HasHasIdentityAttempts() bool {
	if o != nil && !IsNil(o.HasIdentityAttempts) {
		return true
	}

	return false
}

// SetHasIdentityAttempts gets a reference to the given string and assigns it to the HasIdentityAttempts field.
func (o *RecipientProofFile) SetHasIdentityAttempts(v string) {
	o.HasIdentityAttempts = &v
}

// GetIsInProofFile returns the IsInProofFile field value if set, zero value otherwise.
func (o *RecipientProofFile) GetIsInProofFile() string {
	if o == nil || IsNil(o.IsInProofFile) {
		var ret string
		return ret
	}
	return *o.IsInProofFile
}

// GetIsInProofFileOk returns a tuple with the IsInProofFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientProofFile) GetIsInProofFileOk() (*string, bool) {
	if o == nil || IsNil(o.IsInProofFile) {
		return nil, false
	}
	return o.IsInProofFile, true
}

// HasIsInProofFile returns a boolean if a field has been set.
func (o *RecipientProofFile) HasIsInProofFile() bool {
	if o != nil && !IsNil(o.IsInProofFile) {
		return true
	}

	return false
}

// SetIsInProofFile gets a reference to the given string and assigns it to the IsInProofFile field.
func (o *RecipientProofFile) SetIsInProofFile(v string) {
	o.IsInProofFile = &v
}

func (o RecipientProofFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientProofFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasIdentityAttempts) {
		toSerialize["hasIdentityAttempts"] = o.HasIdentityAttempts
	}
	if !IsNil(o.IsInProofFile) {
		toSerialize["isInProofFile"] = o.IsInProofFile
	}
	return toSerialize, nil
}

type NullableRecipientProofFile struct {
	value *RecipientProofFile
	isSet bool
}

func (v NullableRecipientProofFile) Get() *RecipientProofFile {
	return v.value
}

func (v *NullableRecipientProofFile) Set(val *RecipientProofFile) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientProofFile) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientProofFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientProofFile(val *RecipientProofFile) *NullableRecipientProofFile {
	return &NullableRecipientProofFile{value: val, isSet: true}
}

func (v NullableRecipientProofFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientProofFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


