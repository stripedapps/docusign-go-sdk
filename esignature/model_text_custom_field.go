/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TextCustomField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextCustomField{}

// TextCustomField This object represents a free text custom field where envelope creators and senders can enter custom data.
type TextCustomField struct {
	// If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
	ConfigurationType *string `json:"configurationType,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The ID of the custom field.
	FieldId *string `json:"fieldId,omitempty"`
	// The name of the custom field.
	Name *string `json:"name,omitempty"`
	// When **true,** senders are required to enter or select information for the field before they can send the envelope.
	Required *string `json:"required,omitempty"`
	// When **true,** the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.
	Show *string `json:"show,omitempty"`
	// The value of the custom field. The user who creates or sends the envelope provides this value. Maximum length: 100 characters.
	Value *string `json:"value,omitempty"`
}

// NewTextCustomField instantiates a new TextCustomField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextCustomField() *TextCustomField {
	this := TextCustomField{}
	return &this
}

// NewTextCustomFieldWithDefaults instantiates a new TextCustomField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextCustomFieldWithDefaults() *TextCustomField {
	this := TextCustomField{}
	return &this
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *TextCustomField) GetConfigurationType() string {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret string
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetConfigurationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *TextCustomField) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given string and assigns it to the ConfigurationType field.
func (o *TextCustomField) SetConfigurationType(v string) {
	o.ConfigurationType = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *TextCustomField) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *TextCustomField) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *TextCustomField) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetFieldId returns the FieldId field value if set, zero value otherwise.
func (o *TextCustomField) GetFieldId() string {
	if o == nil || IsNil(o.FieldId) {
		var ret string
		return ret
	}
	return *o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetFieldIdOk() (*string, bool) {
	if o == nil || IsNil(o.FieldId) {
		return nil, false
	}
	return o.FieldId, true
}

// HasFieldId returns a boolean if a field has been set.
func (o *TextCustomField) HasFieldId() bool {
	if o != nil && !IsNil(o.FieldId) {
		return true
	}

	return false
}

// SetFieldId gets a reference to the given string and assigns it to the FieldId field.
func (o *TextCustomField) SetFieldId(v string) {
	o.FieldId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TextCustomField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TextCustomField) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TextCustomField) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *TextCustomField) GetRequired() string {
	if o == nil || IsNil(o.Required) {
		var ret string
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *TextCustomField) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given string and assigns it to the Required field.
func (o *TextCustomField) SetRequired(v string) {
	o.Required = &v
}

// GetShow returns the Show field value if set, zero value otherwise.
func (o *TextCustomField) GetShow() string {
	if o == nil || IsNil(o.Show) {
		var ret string
		return ret
	}
	return *o.Show
}

// GetShowOk returns a tuple with the Show field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetShowOk() (*string, bool) {
	if o == nil || IsNil(o.Show) {
		return nil, false
	}
	return o.Show, true
}

// HasShow returns a boolean if a field has been set.
func (o *TextCustomField) HasShow() bool {
	if o != nil && !IsNil(o.Show) {
		return true
	}

	return false
}

// SetShow gets a reference to the given string and assigns it to the Show field.
func (o *TextCustomField) SetShow(v string) {
	o.Show = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TextCustomField) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextCustomField) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TextCustomField) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TextCustomField) SetValue(v string) {
	o.Value = &v
}

func (o TextCustomField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextCustomField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.FieldId) {
		toSerialize["fieldId"] = o.FieldId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Show) {
		toSerialize["show"] = o.Show
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTextCustomField struct {
	value *TextCustomField
	isSet bool
}

func (v NullableTextCustomField) Get() *TextCustomField {
	return v.value
}

func (v *NullableTextCustomField) Set(val *TextCustomField) {
	v.value = val
	v.isSet = true
}

func (v NullableTextCustomField) IsSet() bool {
	return v.isSet
}

func (v *NullableTextCustomField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextCustomField(val *TextCustomField) *NullableTextCustomField {
	return &NullableTextCustomField{value: val, isSet: true}
}

func (v NullableTextCustomField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextCustomField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


