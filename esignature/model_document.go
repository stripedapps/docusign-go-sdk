/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Document type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Document{}

// Document A document object.
type Document struct {
	// Reserved for DocuSign.
	ApplyAnchorTabs *string `json:"applyAnchorTabs,omitempty"`
	// 
	AssignTabsToRecipientId *string `json:"assignTabsToRecipientId,omitempty"`
	// This string sets the display and behavior properties of the document during signing. Valid values:  * `modal`<br>   The document is shown as a supplement action strip   and can be viewed, downloaded, or printed in a modal window.   This is the recommended value for supplemental documents.   * `inline`<br>   The document is shown in the normal signing window.   This value is not used with supplemental documents,   but is the default value for all other documents. 
	Display *string `json:"display,omitempty"`
	// 
	DocGenFormFields []DocGenFormField `json:"docGenFormFields,omitempty"`
	// The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.
	DocumentBase64 *string `json:"documentBase64,omitempty"`
	// The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements:   * `name`: A string that can be a maximum of 50 characters.  * `value`: A string that can be a maximum of 200 characters.  If you are using XML, the name/value pair is contained in a `nameValue` element.  
	DocumentFields []NameValue `json:"documentFields,omitempty"`
	// Specifies the document ID of this document. This value is used by tabs to determine which document they appear in.
	DocumentId *string `json:"documentId,omitempty"`
	// When **true,** the document has been encrypted by the sender for use with the DocuSign Key Manager Security Appliance.  
	EncryptedWithKeyManager *string `json:"encryptedWithKeyManager,omitempty"`
	// The file extension type of the document. Non-PDF documents are converted to PDF.  If the document is not a PDF, `fileExtension` is required.  If you try to upload a non-PDF document without a `fileExtension`, you will receive an \"unable to load document\" error message.    
	FileExtension *string `json:"fileExtension,omitempty"`
	// 
	FileFormatHint *string `json:"fileFormatHint,omitempty"`
	HtmlDefinition *DocumentHtmlDefinition `json:"htmlDefinition,omitempty"`
	// When **true,** the document is included in the combined document download (`documentsCombinedUri`).  The default value is **true.** 
	IncludeInDownload *string `json:"includeInDownload,omitempty"`
	// 
	IsDocGenDocument *string `json:"isDocGenDocument,omitempty"`
	// Matchboxes define areas in a document for document matching when you are creating envelopes. They are only used when you upload and edit a template.  
	MatchBoxes []MatchBox `json:"matchBoxes,omitempty"`
	// The name of the document.
	Name *string `json:"name,omitempty"`
	// The order in which to sort the results.  Valid values are:    * `asc`: Ascending order. * `desc`: Descending order. 
	Order *string `json:"order,omitempty"`
	// The number of pages in the document. This property is read-only.
	Pages *string `json:"pages,omitempty"`
	// The user's encrypted password hash.
	Password *string `json:"password,omitempty"`
	// 
	PdfFormFieldOption *string `json:"pdfFormFieldOption,omitempty"`
	// The file ID from the cloud storage service where the document is located. This information is returned using [CloudStorage: listFolders](/docs/esign-rest-api/reference/cloudstorage/cloudstorage/listfolders/) or [CloudStorage: list](/docs/esign-rest-api/reference/cloudstorage/cloudstorage/list/). 
	RemoteUrl *string `json:"remoteUrl,omitempty"`
	// Sets how the signer interacts with the supplemental document. Valid values:   * `no_interaction`<br>   No recipient action is required.   * `view`<br>   The recipient is required to view the document.   * `accept`<br>   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.   * `view_accept`<br>   The recipient is required to view and accept the document.    
	SignerMustAcknowledge *string `json:"signerMustAcknowledge,omitempty"`
	// When **true,** the account default setting for the required recipient option is used. If this property is set, `signerMustAcknowledge` cannot be set (and vice versa).
	SignerMustAcknowledgeUseAccountDefault *bool `json:"signerMustAcknowledgeUseAccountDefault,omitempty"`
	Tabs *EnvelopeRecipientTabs `json:"tabs,omitempty"`
	// When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
	TemplateLocked *string `json:"templateLocked,omitempty"`
	// When **true,** the sender may not remove the recipient. Used only when working with template recipients.
	TemplateRequired *string `json:"templateRequired,omitempty"`
	// When **true,** PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF. 
	TransformPdfFields *string `json:"transformPdfFields,omitempty"`
	// A URI containing the user ID.
	Uri *string `json:"uri,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument() *Document {
	this := Document{}
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetApplyAnchorTabs returns the ApplyAnchorTabs field value if set, zero value otherwise.
func (o *Document) GetApplyAnchorTabs() string {
	if o == nil || IsNil(o.ApplyAnchorTabs) {
		var ret string
		return ret
	}
	return *o.ApplyAnchorTabs
}

// GetApplyAnchorTabsOk returns a tuple with the ApplyAnchorTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetApplyAnchorTabsOk() (*string, bool) {
	if o == nil || IsNil(o.ApplyAnchorTabs) {
		return nil, false
	}
	return o.ApplyAnchorTabs, true
}

// HasApplyAnchorTabs returns a boolean if a field has been set.
func (o *Document) HasApplyAnchorTabs() bool {
	if o != nil && !IsNil(o.ApplyAnchorTabs) {
		return true
	}

	return false
}

// SetApplyAnchorTabs gets a reference to the given string and assigns it to the ApplyAnchorTabs field.
func (o *Document) SetApplyAnchorTabs(v string) {
	o.ApplyAnchorTabs = &v
}

// GetAssignTabsToRecipientId returns the AssignTabsToRecipientId field value if set, zero value otherwise.
func (o *Document) GetAssignTabsToRecipientId() string {
	if o == nil || IsNil(o.AssignTabsToRecipientId) {
		var ret string
		return ret
	}
	return *o.AssignTabsToRecipientId
}

// GetAssignTabsToRecipientIdOk returns a tuple with the AssignTabsToRecipientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetAssignTabsToRecipientIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssignTabsToRecipientId) {
		return nil, false
	}
	return o.AssignTabsToRecipientId, true
}

// HasAssignTabsToRecipientId returns a boolean if a field has been set.
func (o *Document) HasAssignTabsToRecipientId() bool {
	if o != nil && !IsNil(o.AssignTabsToRecipientId) {
		return true
	}

	return false
}

// SetAssignTabsToRecipientId gets a reference to the given string and assigns it to the AssignTabsToRecipientId field.
func (o *Document) SetAssignTabsToRecipientId(v string) {
	o.AssignTabsToRecipientId = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *Document) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *Document) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *Document) SetDisplay(v string) {
	o.Display = &v
}

// GetDocGenFormFields returns the DocGenFormFields field value if set, zero value otherwise.
func (o *Document) GetDocGenFormFields() []DocGenFormField {
	if o == nil || IsNil(o.DocGenFormFields) {
		var ret []DocGenFormField
		return ret
	}
	return o.DocGenFormFields
}

// GetDocGenFormFieldsOk returns a tuple with the DocGenFormFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocGenFormFieldsOk() ([]DocGenFormField, bool) {
	if o == nil || IsNil(o.DocGenFormFields) {
		return nil, false
	}
	return o.DocGenFormFields, true
}

// HasDocGenFormFields returns a boolean if a field has been set.
func (o *Document) HasDocGenFormFields() bool {
	if o != nil && !IsNil(o.DocGenFormFields) {
		return true
	}

	return false
}

// SetDocGenFormFields gets a reference to the given []DocGenFormField and assigns it to the DocGenFormFields field.
func (o *Document) SetDocGenFormFields(v []DocGenFormField) {
	o.DocGenFormFields = v
}

// GetDocumentBase64 returns the DocumentBase64 field value if set, zero value otherwise.
func (o *Document) GetDocumentBase64() string {
	if o == nil || IsNil(o.DocumentBase64) {
		var ret string
		return ret
	}
	return *o.DocumentBase64
}

// GetDocumentBase64Ok returns a tuple with the DocumentBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.DocumentBase64) {
		return nil, false
	}
	return o.DocumentBase64, true
}

// HasDocumentBase64 returns a boolean if a field has been set.
func (o *Document) HasDocumentBase64() bool {
	if o != nil && !IsNil(o.DocumentBase64) {
		return true
	}

	return false
}

// SetDocumentBase64 gets a reference to the given string and assigns it to the DocumentBase64 field.
func (o *Document) SetDocumentBase64(v string) {
	o.DocumentBase64 = &v
}

// GetDocumentFields returns the DocumentFields field value if set, zero value otherwise.
func (o *Document) GetDocumentFields() []NameValue {
	if o == nil || IsNil(o.DocumentFields) {
		var ret []NameValue
		return ret
	}
	return o.DocumentFields
}

// GetDocumentFieldsOk returns a tuple with the DocumentFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentFieldsOk() ([]NameValue, bool) {
	if o == nil || IsNil(o.DocumentFields) {
		return nil, false
	}
	return o.DocumentFields, true
}

// HasDocumentFields returns a boolean if a field has been set.
func (o *Document) HasDocumentFields() bool {
	if o != nil && !IsNil(o.DocumentFields) {
		return true
	}

	return false
}

// SetDocumentFields gets a reference to the given []NameValue and assigns it to the DocumentFields field.
func (o *Document) SetDocumentFields(v []NameValue) {
	o.DocumentFields = v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *Document) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *Document) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *Document) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetEncryptedWithKeyManager returns the EncryptedWithKeyManager field value if set, zero value otherwise.
func (o *Document) GetEncryptedWithKeyManager() string {
	if o == nil || IsNil(o.EncryptedWithKeyManager) {
		var ret string
		return ret
	}
	return *o.EncryptedWithKeyManager
}

// GetEncryptedWithKeyManagerOk returns a tuple with the EncryptedWithKeyManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetEncryptedWithKeyManagerOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedWithKeyManager) {
		return nil, false
	}
	return o.EncryptedWithKeyManager, true
}

// HasEncryptedWithKeyManager returns a boolean if a field has been set.
func (o *Document) HasEncryptedWithKeyManager() bool {
	if o != nil && !IsNil(o.EncryptedWithKeyManager) {
		return true
	}

	return false
}

// SetEncryptedWithKeyManager gets a reference to the given string and assigns it to the EncryptedWithKeyManager field.
func (o *Document) SetEncryptedWithKeyManager(v string) {
	o.EncryptedWithKeyManager = &v
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *Document) GetFileExtension() string {
	if o == nil || IsNil(o.FileExtension) {
		var ret string
		return ret
	}
	return *o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetFileExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.FileExtension) {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *Document) HasFileExtension() bool {
	if o != nil && !IsNil(o.FileExtension) {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given string and assigns it to the FileExtension field.
func (o *Document) SetFileExtension(v string) {
	o.FileExtension = &v
}

// GetFileFormatHint returns the FileFormatHint field value if set, zero value otherwise.
func (o *Document) GetFileFormatHint() string {
	if o == nil || IsNil(o.FileFormatHint) {
		var ret string
		return ret
	}
	return *o.FileFormatHint
}

// GetFileFormatHintOk returns a tuple with the FileFormatHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetFileFormatHintOk() (*string, bool) {
	if o == nil || IsNil(o.FileFormatHint) {
		return nil, false
	}
	return o.FileFormatHint, true
}

// HasFileFormatHint returns a boolean if a field has been set.
func (o *Document) HasFileFormatHint() bool {
	if o != nil && !IsNil(o.FileFormatHint) {
		return true
	}

	return false
}

// SetFileFormatHint gets a reference to the given string and assigns it to the FileFormatHint field.
func (o *Document) SetFileFormatHint(v string) {
	o.FileFormatHint = &v
}

// GetHtmlDefinition returns the HtmlDefinition field value if set, zero value otherwise.
func (o *Document) GetHtmlDefinition() DocumentHtmlDefinition {
	if o == nil || IsNil(o.HtmlDefinition) {
		var ret DocumentHtmlDefinition
		return ret
	}
	return *o.HtmlDefinition
}

// GetHtmlDefinitionOk returns a tuple with the HtmlDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetHtmlDefinitionOk() (*DocumentHtmlDefinition, bool) {
	if o == nil || IsNil(o.HtmlDefinition) {
		return nil, false
	}
	return o.HtmlDefinition, true
}

// HasHtmlDefinition returns a boolean if a field has been set.
func (o *Document) HasHtmlDefinition() bool {
	if o != nil && !IsNil(o.HtmlDefinition) {
		return true
	}

	return false
}

// SetHtmlDefinition gets a reference to the given DocumentHtmlDefinition and assigns it to the HtmlDefinition field.
func (o *Document) SetHtmlDefinition(v DocumentHtmlDefinition) {
	o.HtmlDefinition = &v
}

// GetIncludeInDownload returns the IncludeInDownload field value if set, zero value otherwise.
func (o *Document) GetIncludeInDownload() string {
	if o == nil || IsNil(o.IncludeInDownload) {
		var ret string
		return ret
	}
	return *o.IncludeInDownload
}

// GetIncludeInDownloadOk returns a tuple with the IncludeInDownload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetIncludeInDownloadOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeInDownload) {
		return nil, false
	}
	return o.IncludeInDownload, true
}

// HasIncludeInDownload returns a boolean if a field has been set.
func (o *Document) HasIncludeInDownload() bool {
	if o != nil && !IsNil(o.IncludeInDownload) {
		return true
	}

	return false
}

// SetIncludeInDownload gets a reference to the given string and assigns it to the IncludeInDownload field.
func (o *Document) SetIncludeInDownload(v string) {
	o.IncludeInDownload = &v
}

// GetIsDocGenDocument returns the IsDocGenDocument field value if set, zero value otherwise.
func (o *Document) GetIsDocGenDocument() string {
	if o == nil || IsNil(o.IsDocGenDocument) {
		var ret string
		return ret
	}
	return *o.IsDocGenDocument
}

// GetIsDocGenDocumentOk returns a tuple with the IsDocGenDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetIsDocGenDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.IsDocGenDocument) {
		return nil, false
	}
	return o.IsDocGenDocument, true
}

// HasIsDocGenDocument returns a boolean if a field has been set.
func (o *Document) HasIsDocGenDocument() bool {
	if o != nil && !IsNil(o.IsDocGenDocument) {
		return true
	}

	return false
}

// SetIsDocGenDocument gets a reference to the given string and assigns it to the IsDocGenDocument field.
func (o *Document) SetIsDocGenDocument(v string) {
	o.IsDocGenDocument = &v
}

// GetMatchBoxes returns the MatchBoxes field value if set, zero value otherwise.
func (o *Document) GetMatchBoxes() []MatchBox {
	if o == nil || IsNil(o.MatchBoxes) {
		var ret []MatchBox
		return ret
	}
	return o.MatchBoxes
}

// GetMatchBoxesOk returns a tuple with the MatchBoxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetMatchBoxesOk() ([]MatchBox, bool) {
	if o == nil || IsNil(o.MatchBoxes) {
		return nil, false
	}
	return o.MatchBoxes, true
}

// HasMatchBoxes returns a boolean if a field has been set.
func (o *Document) HasMatchBoxes() bool {
	if o != nil && !IsNil(o.MatchBoxes) {
		return true
	}

	return false
}

// SetMatchBoxes gets a reference to the given []MatchBox and assigns it to the MatchBoxes field.
func (o *Document) SetMatchBoxes(v []MatchBox) {
	o.MatchBoxes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Document) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Document) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Document) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Document) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Document) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *Document) SetOrder(v string) {
	o.Order = &v
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *Document) GetPages() string {
	if o == nil || IsNil(o.Pages) {
		var ret string
		return ret
	}
	return *o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetPagesOk() (*string, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *Document) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given string and assigns it to the Pages field.
func (o *Document) SetPages(v string) {
	o.Pages = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Document) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Document) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Document) SetPassword(v string) {
	o.Password = &v
}

// GetPdfFormFieldOption returns the PdfFormFieldOption field value if set, zero value otherwise.
func (o *Document) GetPdfFormFieldOption() string {
	if o == nil || IsNil(o.PdfFormFieldOption) {
		var ret string
		return ret
	}
	return *o.PdfFormFieldOption
}

// GetPdfFormFieldOptionOk returns a tuple with the PdfFormFieldOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetPdfFormFieldOptionOk() (*string, bool) {
	if o == nil || IsNil(o.PdfFormFieldOption) {
		return nil, false
	}
	return o.PdfFormFieldOption, true
}

// HasPdfFormFieldOption returns a boolean if a field has been set.
func (o *Document) HasPdfFormFieldOption() bool {
	if o != nil && !IsNil(o.PdfFormFieldOption) {
		return true
	}

	return false
}

// SetPdfFormFieldOption gets a reference to the given string and assigns it to the PdfFormFieldOption field.
func (o *Document) SetPdfFormFieldOption(v string) {
	o.PdfFormFieldOption = &v
}

// GetRemoteUrl returns the RemoteUrl field value if set, zero value otherwise.
func (o *Document) GetRemoteUrl() string {
	if o == nil || IsNil(o.RemoteUrl) {
		var ret string
		return ret
	}
	return *o.RemoteUrl
}

// GetRemoteUrlOk returns a tuple with the RemoteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetRemoteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteUrl) {
		return nil, false
	}
	return o.RemoteUrl, true
}

// HasRemoteUrl returns a boolean if a field has been set.
func (o *Document) HasRemoteUrl() bool {
	if o != nil && !IsNil(o.RemoteUrl) {
		return true
	}

	return false
}

// SetRemoteUrl gets a reference to the given string and assigns it to the RemoteUrl field.
func (o *Document) SetRemoteUrl(v string) {
	o.RemoteUrl = &v
}

// GetSignerMustAcknowledge returns the SignerMustAcknowledge field value if set, zero value otherwise.
func (o *Document) GetSignerMustAcknowledge() string {
	if o == nil || IsNil(o.SignerMustAcknowledge) {
		var ret string
		return ret
	}
	return *o.SignerMustAcknowledge
}

// GetSignerMustAcknowledgeOk returns a tuple with the SignerMustAcknowledge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetSignerMustAcknowledgeOk() (*string, bool) {
	if o == nil || IsNil(o.SignerMustAcknowledge) {
		return nil, false
	}
	return o.SignerMustAcknowledge, true
}

// HasSignerMustAcknowledge returns a boolean if a field has been set.
func (o *Document) HasSignerMustAcknowledge() bool {
	if o != nil && !IsNil(o.SignerMustAcknowledge) {
		return true
	}

	return false
}

// SetSignerMustAcknowledge gets a reference to the given string and assigns it to the SignerMustAcknowledge field.
func (o *Document) SetSignerMustAcknowledge(v string) {
	o.SignerMustAcknowledge = &v
}

// GetSignerMustAcknowledgeUseAccountDefault returns the SignerMustAcknowledgeUseAccountDefault field value if set, zero value otherwise.
func (o *Document) GetSignerMustAcknowledgeUseAccountDefault() bool {
	if o == nil || IsNil(o.SignerMustAcknowledgeUseAccountDefault) {
		var ret bool
		return ret
	}
	return *o.SignerMustAcknowledgeUseAccountDefault
}

// GetSignerMustAcknowledgeUseAccountDefaultOk returns a tuple with the SignerMustAcknowledgeUseAccountDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetSignerMustAcknowledgeUseAccountDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.SignerMustAcknowledgeUseAccountDefault) {
		return nil, false
	}
	return o.SignerMustAcknowledgeUseAccountDefault, true
}

// HasSignerMustAcknowledgeUseAccountDefault returns a boolean if a field has been set.
func (o *Document) HasSignerMustAcknowledgeUseAccountDefault() bool {
	if o != nil && !IsNil(o.SignerMustAcknowledgeUseAccountDefault) {
		return true
	}

	return false
}

// SetSignerMustAcknowledgeUseAccountDefault gets a reference to the given bool and assigns it to the SignerMustAcknowledgeUseAccountDefault field.
func (o *Document) SetSignerMustAcknowledgeUseAccountDefault(v bool) {
	o.SignerMustAcknowledgeUseAccountDefault = &v
}

// GetTabs returns the Tabs field value if set, zero value otherwise.
func (o *Document) GetTabs() EnvelopeRecipientTabs {
	if o == nil || IsNil(o.Tabs) {
		var ret EnvelopeRecipientTabs
		return ret
	}
	return *o.Tabs
}

// GetTabsOk returns a tuple with the Tabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTabsOk() (*EnvelopeRecipientTabs, bool) {
	if o == nil || IsNil(o.Tabs) {
		return nil, false
	}
	return o.Tabs, true
}

// HasTabs returns a boolean if a field has been set.
func (o *Document) HasTabs() bool {
	if o != nil && !IsNil(o.Tabs) {
		return true
	}

	return false
}

// SetTabs gets a reference to the given EnvelopeRecipientTabs and assigns it to the Tabs field.
func (o *Document) SetTabs(v EnvelopeRecipientTabs) {
	o.Tabs = &v
}

// GetTemplateLocked returns the TemplateLocked field value if set, zero value otherwise.
func (o *Document) GetTemplateLocked() string {
	if o == nil || IsNil(o.TemplateLocked) {
		var ret string
		return ret
	}
	return *o.TemplateLocked
}

// GetTemplateLockedOk returns a tuple with the TemplateLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTemplateLockedOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateLocked) {
		return nil, false
	}
	return o.TemplateLocked, true
}

// HasTemplateLocked returns a boolean if a field has been set.
func (o *Document) HasTemplateLocked() bool {
	if o != nil && !IsNil(o.TemplateLocked) {
		return true
	}

	return false
}

// SetTemplateLocked gets a reference to the given string and assigns it to the TemplateLocked field.
func (o *Document) SetTemplateLocked(v string) {
	o.TemplateLocked = &v
}

// GetTemplateRequired returns the TemplateRequired field value if set, zero value otherwise.
func (o *Document) GetTemplateRequired() string {
	if o == nil || IsNil(o.TemplateRequired) {
		var ret string
		return ret
	}
	return *o.TemplateRequired
}

// GetTemplateRequiredOk returns a tuple with the TemplateRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTemplateRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateRequired) {
		return nil, false
	}
	return o.TemplateRequired, true
}

// HasTemplateRequired returns a boolean if a field has been set.
func (o *Document) HasTemplateRequired() bool {
	if o != nil && !IsNil(o.TemplateRequired) {
		return true
	}

	return false
}

// SetTemplateRequired gets a reference to the given string and assigns it to the TemplateRequired field.
func (o *Document) SetTemplateRequired(v string) {
	o.TemplateRequired = &v
}

// GetTransformPdfFields returns the TransformPdfFields field value if set, zero value otherwise.
func (o *Document) GetTransformPdfFields() string {
	if o == nil || IsNil(o.TransformPdfFields) {
		var ret string
		return ret
	}
	return *o.TransformPdfFields
}

// GetTransformPdfFieldsOk returns a tuple with the TransformPdfFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTransformPdfFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.TransformPdfFields) {
		return nil, false
	}
	return o.TransformPdfFields, true
}

// HasTransformPdfFields returns a boolean if a field has been set.
func (o *Document) HasTransformPdfFields() bool {
	if o != nil && !IsNil(o.TransformPdfFields) {
		return true
	}

	return false
}

// SetTransformPdfFields gets a reference to the given string and assigns it to the TransformPdfFields field.
func (o *Document) SetTransformPdfFields(v string) {
	o.TransformPdfFields = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Document) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Document) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Document) SetUri(v string) {
	o.Uri = &v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Document) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplyAnchorTabs) {
		toSerialize["applyAnchorTabs"] = o.ApplyAnchorTabs
	}
	if !IsNil(o.AssignTabsToRecipientId) {
		toSerialize["assignTabsToRecipientId"] = o.AssignTabsToRecipientId
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.DocGenFormFields) {
		toSerialize["docGenFormFields"] = o.DocGenFormFields
	}
	if !IsNil(o.DocumentBase64) {
		toSerialize["documentBase64"] = o.DocumentBase64
	}
	if !IsNil(o.DocumentFields) {
		toSerialize["documentFields"] = o.DocumentFields
	}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.EncryptedWithKeyManager) {
		toSerialize["encryptedWithKeyManager"] = o.EncryptedWithKeyManager
	}
	if !IsNil(o.FileExtension) {
		toSerialize["fileExtension"] = o.FileExtension
	}
	if !IsNil(o.FileFormatHint) {
		toSerialize["fileFormatHint"] = o.FileFormatHint
	}
	if !IsNil(o.HtmlDefinition) {
		toSerialize["htmlDefinition"] = o.HtmlDefinition
	}
	if !IsNil(o.IncludeInDownload) {
		toSerialize["includeInDownload"] = o.IncludeInDownload
	}
	if !IsNil(o.IsDocGenDocument) {
		toSerialize["isDocGenDocument"] = o.IsDocGenDocument
	}
	if !IsNil(o.MatchBoxes) {
		toSerialize["matchBoxes"] = o.MatchBoxes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Pages) {
		toSerialize["pages"] = o.Pages
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PdfFormFieldOption) {
		toSerialize["pdfFormFieldOption"] = o.PdfFormFieldOption
	}
	if !IsNil(o.RemoteUrl) {
		toSerialize["remoteUrl"] = o.RemoteUrl
	}
	if !IsNil(o.SignerMustAcknowledge) {
		toSerialize["signerMustAcknowledge"] = o.SignerMustAcknowledge
	}
	if !IsNil(o.SignerMustAcknowledgeUseAccountDefault) {
		toSerialize["signerMustAcknowledgeUseAccountDefault"] = o.SignerMustAcknowledgeUseAccountDefault
	}
	if !IsNil(o.Tabs) {
		toSerialize["tabs"] = o.Tabs
	}
	if !IsNil(o.TemplateLocked) {
		toSerialize["templateLocked"] = o.TemplateLocked
	}
	if !IsNil(o.TemplateRequired) {
		toSerialize["templateRequired"] = o.TemplateRequired
	}
	if !IsNil(o.TransformPdfFields) {
		toSerialize["transformPdfFields"] = o.TransformPdfFields
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


