/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventResult{}

// EventResult Information about the result of an event.
type EventResult struct {
	// Date/time of the event.
	EventTimestamp *string `json:"eventTimestamp,omitempty"`
	// Reason for failure, if the event failed.
	FailureDescription *string `json:"failureDescription,omitempty"`
	// Event status.
	Status *string `json:"status,omitempty"`
	// Failure status code, if the event failed.
	VendorFailureStatusCode *string `json:"vendorFailureStatusCode,omitempty"`
}

// NewEventResult instantiates a new EventResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventResult() *EventResult {
	this := EventResult{}
	return &this
}

// NewEventResultWithDefaults instantiates a new EventResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventResultWithDefaults() *EventResult {
	this := EventResult{}
	return &this
}

// GetEventTimestamp returns the EventTimestamp field value if set, zero value otherwise.
func (o *EventResult) GetEventTimestamp() string {
	if o == nil || IsNil(o.EventTimestamp) {
		var ret string
		return ret
	}
	return *o.EventTimestamp
}

// GetEventTimestampOk returns a tuple with the EventTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResult) GetEventTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.EventTimestamp) {
		return nil, false
	}
	return o.EventTimestamp, true
}

// HasEventTimestamp returns a boolean if a field has been set.
func (o *EventResult) HasEventTimestamp() bool {
	if o != nil && !IsNil(o.EventTimestamp) {
		return true
	}

	return false
}

// SetEventTimestamp gets a reference to the given string and assigns it to the EventTimestamp field.
func (o *EventResult) SetEventTimestamp(v string) {
	o.EventTimestamp = &v
}

// GetFailureDescription returns the FailureDescription field value if set, zero value otherwise.
func (o *EventResult) GetFailureDescription() string {
	if o == nil || IsNil(o.FailureDescription) {
		var ret string
		return ret
	}
	return *o.FailureDescription
}

// GetFailureDescriptionOk returns a tuple with the FailureDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResult) GetFailureDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.FailureDescription) {
		return nil, false
	}
	return o.FailureDescription, true
}

// HasFailureDescription returns a boolean if a field has been set.
func (o *EventResult) HasFailureDescription() bool {
	if o != nil && !IsNil(o.FailureDescription) {
		return true
	}

	return false
}

// SetFailureDescription gets a reference to the given string and assigns it to the FailureDescription field.
func (o *EventResult) SetFailureDescription(v string) {
	o.FailureDescription = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EventResult) SetStatus(v string) {
	o.Status = &v
}

// GetVendorFailureStatusCode returns the VendorFailureStatusCode field value if set, zero value otherwise.
func (o *EventResult) GetVendorFailureStatusCode() string {
	if o == nil || IsNil(o.VendorFailureStatusCode) {
		var ret string
		return ret
	}
	return *o.VendorFailureStatusCode
}

// GetVendorFailureStatusCodeOk returns a tuple with the VendorFailureStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResult) GetVendorFailureStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorFailureStatusCode) {
		return nil, false
	}
	return o.VendorFailureStatusCode, true
}

// HasVendorFailureStatusCode returns a boolean if a field has been set.
func (o *EventResult) HasVendorFailureStatusCode() bool {
	if o != nil && !IsNil(o.VendorFailureStatusCode) {
		return true
	}

	return false
}

// SetVendorFailureStatusCode gets a reference to the given string and assigns it to the VendorFailureStatusCode field.
func (o *EventResult) SetVendorFailureStatusCode(v string) {
	o.VendorFailureStatusCode = &v
}

func (o EventResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTimestamp) {
		toSerialize["eventTimestamp"] = o.EventTimestamp
	}
	if !IsNil(o.FailureDescription) {
		toSerialize["failureDescription"] = o.FailureDescription
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VendorFailureStatusCode) {
		toSerialize["vendorFailureStatusCode"] = o.VendorFailureStatusCode
	}
	return toSerialize, nil
}

type NullableEventResult struct {
	value *EventResult
	isSet bool
}

func (v NullableEventResult) Get() *EventResult {
	return v.value
}

func (v *NullableEventResult) Set(val *EventResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEventResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEventResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventResult(val *EventResult) *NullableEventResult {
	return &NullableEventResult{value: val, isSet: true}
}

func (v NullableEventResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


