/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountPermissionProfilesAPIService AccountPermissionProfilesAPI service
type AccountPermissionProfilesAPIService service

type ApiPermissionProfilesDeletePermissionProfilesRequest struct {
	ctx context.Context
	ApiService *AccountPermissionProfilesAPIService
	accountId string
	permissionProfileId string
	moveUsersTo *string
}

func (r ApiPermissionProfilesDeletePermissionProfilesRequest) MoveUsersTo(moveUsersTo string) ApiPermissionProfilesDeletePermissionProfilesRequest {
	r.moveUsersTo = &moveUsersTo
	return r
}

func (r ApiPermissionProfilesDeletePermissionProfilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PermissionProfilesDeletePermissionProfilesExecute(r)
}

/*
PermissionProfilesDeletePermissionProfiles Deletes a permission profile from an account.

This method deletes a permission profile from an account.

To delete a permission profile, it must not have any users associated with it. When you use this method to delete a permission profile, you can reassign the users associated with it to a new permission profile at the same time by using the `move_users_to` query parameter.


### Related topics

- [How to delete a permission profile](/docs/esign-rest-api/how-to/permission-profile-deleting/)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param permissionProfileId The ID of the permission profile.  Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/) to get a list of permission profiles and their IDs.  You can also download a CSV file of all permission profiles and their IDs from the **Settings > Permission Profiles** page of your eSignature account page. 
 @return ApiPermissionProfilesDeletePermissionProfilesRequest
*/
func (a *AccountPermissionProfilesAPIService) PermissionProfilesDeletePermissionProfiles(ctx context.Context, accountId string, permissionProfileId string) ApiPermissionProfilesDeletePermissionProfilesRequest {
	return ApiPermissionProfilesDeletePermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		permissionProfileId: permissionProfileId,
	}
}

// Execute executes the request
func (a *AccountPermissionProfilesAPIService) PermissionProfilesDeletePermissionProfilesExecute(r ApiPermissionProfilesDeletePermissionProfilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountPermissionProfilesAPIService.PermissionProfilesDeletePermissionProfiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/permission_profiles/{permissionProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"permissionProfileId"+"}", url.PathEscape(parameterValueToString(r.permissionProfileId, "permissionProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.moveUsersTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "move_users_to", r.moveUsersTo, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPermissionProfilesGetPermissionProfileRequest struct {
	ctx context.Context
	ApiService *AccountPermissionProfilesAPIService
	accountId string
	permissionProfileId string
	include *string
}

// A comma-separated list of additional properties to return in the response. The only valid value for this request is &#x60;metadata&#x60;, which returns metadata indicating whether the properties associated with the account permission profile are editable.
func (r ApiPermissionProfilesGetPermissionProfileRequest) Include(include string) ApiPermissionProfilesGetPermissionProfileRequest {
	r.include = &include
	return r
}

func (r ApiPermissionProfilesGetPermissionProfileRequest) Execute() (*PermissionProfile, *http.Response, error) {
	return r.ApiService.PermissionProfilesGetPermissionProfileExecute(r)
}

/*
PermissionProfilesGetPermissionProfile Returns a permission profile for an account.

This method returns information about a specific permission profile that is associated with an account.

### Related topics

- [How to set a permission profile](/docs/esign-rest-api/how-to/permission-profile-setting/)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param permissionProfileId The ID of the permission profile.  Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/) to get a list of permission profiles and their IDs.  You can also download a CSV file of all permission profiles and their IDs from the **Settings > Permission Profiles** page of your eSignature account page. 
 @return ApiPermissionProfilesGetPermissionProfileRequest
*/
func (a *AccountPermissionProfilesAPIService) PermissionProfilesGetPermissionProfile(ctx context.Context, accountId string, permissionProfileId string) ApiPermissionProfilesGetPermissionProfileRequest {
	return ApiPermissionProfilesGetPermissionProfileRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		permissionProfileId: permissionProfileId,
	}
}

// Execute executes the request
//  @return PermissionProfile
func (a *AccountPermissionProfilesAPIService) PermissionProfilesGetPermissionProfileExecute(r ApiPermissionProfilesGetPermissionProfileRequest) (*PermissionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountPermissionProfilesAPIService.PermissionProfilesGetPermissionProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/permission_profiles/{permissionProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"permissionProfileId"+"}", url.PathEscape(parameterValueToString(r.permissionProfileId, "permissionProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionProfilesGetPermissionProfilesRequest struct {
	ctx context.Context
	ApiService *AccountPermissionProfilesAPIService
	accountId string
	include *string
}

// A comma-separated list of additional properties to return in the response. Valid values are:  - &#x60;user_count&#x60;: The total number of users associated with the permission profile. - &#x60;closed_users&#x60;: Includes closed users in the &#x60;user_count&#x60;. - &#x60;account_management&#x60;: The account management settings. - &#x60;metadata&#x60;: Metadata indicating whether the properties associated with the account permission profile are editable.  Example: &#x60;user_count,closed_users&#x60; 
func (r ApiPermissionProfilesGetPermissionProfilesRequest) Include(include string) ApiPermissionProfilesGetPermissionProfilesRequest {
	r.include = &include
	return r
}

func (r ApiPermissionProfilesGetPermissionProfilesRequest) Execute() (*PermissionProfileInformation, *http.Response, error) {
	return r.ApiService.PermissionProfilesGetPermissionProfilesExecute(r)
}

/*
PermissionProfilesGetPermissionProfiles Gets a list of permission profiles.

This method returns a list of permission profiles that are associated with an account.

Example:

```json
{
  "permissionProfiles": [
    {
      "permissionProfileId": "1665536",
      "permissionProfileName": "Account Administrator",
      "modifiedDateTime": "2018-03-26T03:54:40.4470000Z",
      "modifiedByUsername": ""
    },
    {
      "permissionProfileId": "1665537",
      "permissionProfileName": "DocuSign Sender",
      "modifiedDateTime": "2018-03-26T03:54:40.4470000Z",
      "modifiedByUsername": ""
    },
    {
      "permissionProfileId": "1665538",
      "permissionProfileName": "DocuSign Viewer",
      "modifiedDateTime": "2016-06-02T01:53:15.6830000Z",
      "modifiedByUsername": ""
    },
    {
      "permissionProfileId": "10325926",
      "permissionProfileName": "DS Manage Company Member Accounts",
      "modifiedDateTime": "2020-05-15T00:28:36.8230000Z",
      "modifiedByUsername": "Nat Irving"
    }
  ]
}
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiPermissionProfilesGetPermissionProfilesRequest
*/
func (a *AccountPermissionProfilesAPIService) PermissionProfilesGetPermissionProfiles(ctx context.Context, accountId string) ApiPermissionProfilesGetPermissionProfilesRequest {
	return ApiPermissionProfilesGetPermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return PermissionProfileInformation
func (a *AccountPermissionProfilesAPIService) PermissionProfilesGetPermissionProfilesExecute(r ApiPermissionProfilesGetPermissionProfilesRequest) (*PermissionProfileInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionProfileInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountPermissionProfilesAPIService.PermissionProfilesGetPermissionProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/permission_profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionProfilesPostPermissionProfilesRequest struct {
	ctx context.Context
	ApiService *AccountPermissionProfilesAPIService
	accountId string
	include *string
	permissionProfile *PermissionProfile
}

// A comma-separated list of additional properties to return in the response. The only valid value for this request is &#x60;metadata&#x60;, which returns metadata indicating whether the properties associated with the account permission profile are editable.
func (r ApiPermissionProfilesPostPermissionProfilesRequest) Include(include string) ApiPermissionProfilesPostPermissionProfilesRequest {
	r.include = &include
	return r
}

func (r ApiPermissionProfilesPostPermissionProfilesRequest) PermissionProfile(permissionProfile PermissionProfile) ApiPermissionProfilesPostPermissionProfilesRequest {
	r.permissionProfile = &permissionProfile
	return r
}

func (r ApiPermissionProfilesPostPermissionProfilesRequest) Execute() (*PermissionProfile, *http.Response, error) {
	return r.ApiService.PermissionProfilesPostPermissionProfilesExecute(r)
}

/*
PermissionProfilesPostPermissionProfiles Creates a new permission profile for an account.

This method creates a new permission profile for an account.

### Related topics

- [How to create a permission profile](/docs/esign-rest-api/how-to/permission-profile-creating/)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiPermissionProfilesPostPermissionProfilesRequest
*/
func (a *AccountPermissionProfilesAPIService) PermissionProfilesPostPermissionProfiles(ctx context.Context, accountId string) ApiPermissionProfilesPostPermissionProfilesRequest {
	return ApiPermissionProfilesPostPermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return PermissionProfile
func (a *AccountPermissionProfilesAPIService) PermissionProfilesPostPermissionProfilesExecute(r ApiPermissionProfilesPostPermissionProfilesRequest) (*PermissionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountPermissionProfilesAPIService.PermissionProfilesPostPermissionProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/permission_profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.permissionProfile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionProfilesPutPermissionProfilesRequest struct {
	ctx context.Context
	ApiService *AccountPermissionProfilesAPIService
	accountId string
	permissionProfileId string
	include *string
	permissionProfile *PermissionProfile
}

// A comma-separated list of additional properties to return in the response. The only valid value for this request is &#x60;metadata&#x60;, which returns metadata indicating whether the properties associated with the account permission profile are editable.
func (r ApiPermissionProfilesPutPermissionProfilesRequest) Include(include string) ApiPermissionProfilesPutPermissionProfilesRequest {
	r.include = &include
	return r
}

func (r ApiPermissionProfilesPutPermissionProfilesRequest) PermissionProfile(permissionProfile PermissionProfile) ApiPermissionProfilesPutPermissionProfilesRequest {
	r.permissionProfile = &permissionProfile
	return r
}

func (r ApiPermissionProfilesPutPermissionProfilesRequest) Execute() (*PermissionProfile, *http.Response, error) {
	return r.ApiService.PermissionProfilesPutPermissionProfilesExecute(r)
}

/*
PermissionProfilesPutPermissionProfiles Updates a permission profile.

This method updates an account permission profile.

### Related topics

- [How to update individual permission settings](/docs/esign-rest-api/how-to/permission-profile-updating/)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param permissionProfileId The ID of the permission profile.  Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/) to get a list of permission profiles and their IDs.  You can also download a CSV file of all permission profiles and their IDs from the **Settings > Permission Profiles** page of your eSignature account page. 
 @return ApiPermissionProfilesPutPermissionProfilesRequest
*/
func (a *AccountPermissionProfilesAPIService) PermissionProfilesPutPermissionProfiles(ctx context.Context, accountId string, permissionProfileId string) ApiPermissionProfilesPutPermissionProfilesRequest {
	return ApiPermissionProfilesPutPermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		permissionProfileId: permissionProfileId,
	}
}

// Execute executes the request
//  @return PermissionProfile
func (a *AccountPermissionProfilesAPIService) PermissionProfilesPutPermissionProfilesExecute(r ApiPermissionProfilesPutPermissionProfilesRequest) (*PermissionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountPermissionProfilesAPIService.PermissionProfilesPutPermissionProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/permission_profiles/{permissionProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"permissionProfileId"+"}", url.PathEscape(parameterValueToString(r.permissionProfileId, "permissionProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.permissionProfile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
