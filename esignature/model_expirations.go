/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Expirations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Expirations{}

// Expirations A complex element that specifies the expiration settings for the envelope. When an envelope expires, it is voided and no longer available for signing. **Note:** there is a short delay between when the envelope expires and when it is voided. 
type Expirations struct {
	// An integer that sets the number of days the envelope is active. For this value to be used, `expireEnabled` must be explicitly set to **true.**
	ExpireAfter *string `json:"expireAfter,omitempty"`
	// When **true,** the envelope expires in the number of days set by `expireAfter`. When **false** or not set, the envelope expires in the number of days specified by the [default expiration account setting](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=rra1583277381176.html).
	ExpireEnabled *string `json:"expireEnabled,omitempty"`
	// An integer that specifying the number of days before the envelope expires that an expiration warning email is sent to the recipient. When 0 (zero), no warning email is sent.
	ExpireWarn *string `json:"expireWarn,omitempty"`
}

// NewExpirations instantiates a new Expirations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpirations() *Expirations {
	this := Expirations{}
	return &this
}

// NewExpirationsWithDefaults instantiates a new Expirations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpirationsWithDefaults() *Expirations {
	this := Expirations{}
	return &this
}

// GetExpireAfter returns the ExpireAfter field value if set, zero value otherwise.
func (o *Expirations) GetExpireAfter() string {
	if o == nil || IsNil(o.ExpireAfter) {
		var ret string
		return ret
	}
	return *o.ExpireAfter
}

// GetExpireAfterOk returns a tuple with the ExpireAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expirations) GetExpireAfterOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireAfter) {
		return nil, false
	}
	return o.ExpireAfter, true
}

// HasExpireAfter returns a boolean if a field has been set.
func (o *Expirations) HasExpireAfter() bool {
	if o != nil && !IsNil(o.ExpireAfter) {
		return true
	}

	return false
}

// SetExpireAfter gets a reference to the given string and assigns it to the ExpireAfter field.
func (o *Expirations) SetExpireAfter(v string) {
	o.ExpireAfter = &v
}

// GetExpireEnabled returns the ExpireEnabled field value if set, zero value otherwise.
func (o *Expirations) GetExpireEnabled() string {
	if o == nil || IsNil(o.ExpireEnabled) {
		var ret string
		return ret
	}
	return *o.ExpireEnabled
}

// GetExpireEnabledOk returns a tuple with the ExpireEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expirations) GetExpireEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireEnabled) {
		return nil, false
	}
	return o.ExpireEnabled, true
}

// HasExpireEnabled returns a boolean if a field has been set.
func (o *Expirations) HasExpireEnabled() bool {
	if o != nil && !IsNil(o.ExpireEnabled) {
		return true
	}

	return false
}

// SetExpireEnabled gets a reference to the given string and assigns it to the ExpireEnabled field.
func (o *Expirations) SetExpireEnabled(v string) {
	o.ExpireEnabled = &v
}

// GetExpireWarn returns the ExpireWarn field value if set, zero value otherwise.
func (o *Expirations) GetExpireWarn() string {
	if o == nil || IsNil(o.ExpireWarn) {
		var ret string
		return ret
	}
	return *o.ExpireWarn
}

// GetExpireWarnOk returns a tuple with the ExpireWarn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expirations) GetExpireWarnOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireWarn) {
		return nil, false
	}
	return o.ExpireWarn, true
}

// HasExpireWarn returns a boolean if a field has been set.
func (o *Expirations) HasExpireWarn() bool {
	if o != nil && !IsNil(o.ExpireWarn) {
		return true
	}

	return false
}

// SetExpireWarn gets a reference to the given string and assigns it to the ExpireWarn field.
func (o *Expirations) SetExpireWarn(v string) {
	o.ExpireWarn = &v
}

func (o Expirations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Expirations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpireAfter) {
		toSerialize["expireAfter"] = o.ExpireAfter
	}
	if !IsNil(o.ExpireEnabled) {
		toSerialize["expireEnabled"] = o.ExpireEnabled
	}
	if !IsNil(o.ExpireWarn) {
		toSerialize["expireWarn"] = o.ExpireWarn
	}
	return toSerialize, nil
}

type NullableExpirations struct {
	value *Expirations
	isSet bool
}

func (v NullableExpirations) Get() *Expirations {
	return v.value
}

func (v *NullableExpirations) Set(val *Expirations) {
	v.value = val
	v.isSet = true
}

func (v NullableExpirations) IsSet() bool {
	return v.isSet
}

func (v *NullableExpirations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpirations(val *Expirations) *NullableExpirations {
	return &NullableExpirations{value: val, isSet: true}
}

func (v NullableExpirations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpirations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


