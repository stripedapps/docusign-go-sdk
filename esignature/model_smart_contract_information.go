/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SmartContractInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartContractInformation{}

// SmartContractInformation 
type SmartContractInformation struct {
	// Reserved for DocuSign.
	Code *string `json:"code,omitempty"`
	// Reserved for DocuSign.
	Uri *string `json:"uri,omitempty"`
}

// NewSmartContractInformation instantiates a new SmartContractInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractInformation() *SmartContractInformation {
	this := SmartContractInformation{}
	return &this
}

// NewSmartContractInformationWithDefaults instantiates a new SmartContractInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractInformationWithDefaults() *SmartContractInformation {
	this := SmartContractInformation{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SmartContractInformation) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractInformation) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SmartContractInformation) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SmartContractInformation) SetCode(v string) {
	o.Code = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *SmartContractInformation) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractInformation) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *SmartContractInformation) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *SmartContractInformation) SetUri(v string) {
	o.Uri = &v
}

func (o SmartContractInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartContractInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableSmartContractInformation struct {
	value *SmartContractInformation
	isSet bool
}

func (v NullableSmartContractInformation) Get() *SmartContractInformation {
	return v.value
}

func (v *NullableSmartContractInformation) Set(val *SmartContractInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractInformation(val *SmartContractInformation) *NullableSmartContractInformation {
	return &NullableSmartContractInformation{value: val, isSet: true}
}

func (v NullableSmartContractInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


