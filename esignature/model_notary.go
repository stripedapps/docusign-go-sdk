/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Notary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notary{}

// Notary Use DocuSign eNotary to notarize documents digitally. Check the [DocuSign eNotary support documentation](https://support.docusign.com/s/document-item?bundleId=gko1642535666104&topicId=jiv1635359045452.html) to see which jurisdictions are supported. 
type Notary struct {
	// The creation date of the account in UTC timedate format.
	CreatedDate *string `json:"createdDate,omitempty"`
	// 
	Enabled *string `json:"enabled,omitempty"`
	// 
	Searchable *string `json:"searchable,omitempty"`
	UserInfo *UserInformation `json:"userInfo,omitempty"`
}

// NewNotary instantiates a new Notary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotary() *Notary {
	this := Notary{}
	return &this
}

// NewNotaryWithDefaults instantiates a new Notary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotaryWithDefaults() *Notary {
	this := Notary{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *Notary) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notary) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *Notary) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *Notary) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Notary) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notary) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Notary) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *Notary) SetEnabled(v string) {
	o.Enabled = &v
}

// GetSearchable returns the Searchable field value if set, zero value otherwise.
func (o *Notary) GetSearchable() string {
	if o == nil || IsNil(o.Searchable) {
		var ret string
		return ret
	}
	return *o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notary) GetSearchableOk() (*string, bool) {
	if o == nil || IsNil(o.Searchable) {
		return nil, false
	}
	return o.Searchable, true
}

// HasSearchable returns a boolean if a field has been set.
func (o *Notary) HasSearchable() bool {
	if o != nil && !IsNil(o.Searchable) {
		return true
	}

	return false
}

// SetSearchable gets a reference to the given string and assigns it to the Searchable field.
func (o *Notary) SetSearchable(v string) {
	o.Searchable = &v
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *Notary) GetUserInfo() UserInformation {
	if o == nil || IsNil(o.UserInfo) {
		var ret UserInformation
		return ret
	}
	return *o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notary) GetUserInfoOk() (*UserInformation, bool) {
	if o == nil || IsNil(o.UserInfo) {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *Notary) HasUserInfo() bool {
	if o != nil && !IsNil(o.UserInfo) {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given UserInformation and assigns it to the UserInfo field.
func (o *Notary) SetUserInfo(v UserInformation) {
	o.UserInfo = &v
}

func (o Notary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Searchable) {
		toSerialize["searchable"] = o.Searchable
	}
	if !IsNil(o.UserInfo) {
		toSerialize["userInfo"] = o.UserInfo
	}
	return toSerialize, nil
}

type NullableNotary struct {
	value *Notary
	isSet bool
}

func (v NullableNotary) Get() *Notary {
	return v.value
}

func (v *NullableNotary) Set(val *Notary) {
	v.value = val
	v.isSet = true
}

func (v NullableNotary) IsSet() bool {
	return v.isSet
}

func (v *NullableNotary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotary(val *Notary) *NullableNotary {
	return &NullableNotary{value: val, isSet: true}
}

func (v NullableNotary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


