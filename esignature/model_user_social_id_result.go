/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSocialIdResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSocialIdResult{}

// UserSocialIdResult 
type UserSocialIdResult struct {
	// Contains properties that map a DocuSign user to a social account such as Facebook or Yahoo.
	SocialAccountInformation []SocialAccountInformation `json:"socialAccountInformation,omitempty"`
	// The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
	UserId *string `json:"userId,omitempty"`
}

// NewUserSocialIdResult instantiates a new UserSocialIdResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSocialIdResult() *UserSocialIdResult {
	this := UserSocialIdResult{}
	return &this
}

// NewUserSocialIdResultWithDefaults instantiates a new UserSocialIdResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSocialIdResultWithDefaults() *UserSocialIdResult {
	this := UserSocialIdResult{}
	return &this
}

// GetSocialAccountInformation returns the SocialAccountInformation field value if set, zero value otherwise.
func (o *UserSocialIdResult) GetSocialAccountInformation() []SocialAccountInformation {
	if o == nil || IsNil(o.SocialAccountInformation) {
		var ret []SocialAccountInformation
		return ret
	}
	return o.SocialAccountInformation
}

// GetSocialAccountInformationOk returns a tuple with the SocialAccountInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSocialIdResult) GetSocialAccountInformationOk() ([]SocialAccountInformation, bool) {
	if o == nil || IsNil(o.SocialAccountInformation) {
		return nil, false
	}
	return o.SocialAccountInformation, true
}

// HasSocialAccountInformation returns a boolean if a field has been set.
func (o *UserSocialIdResult) HasSocialAccountInformation() bool {
	if o != nil && !IsNil(o.SocialAccountInformation) {
		return true
	}

	return false
}

// SetSocialAccountInformation gets a reference to the given []SocialAccountInformation and assigns it to the SocialAccountInformation field.
func (o *UserSocialIdResult) SetSocialAccountInformation(v []SocialAccountInformation) {
	o.SocialAccountInformation = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserSocialIdResult) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSocialIdResult) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserSocialIdResult) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserSocialIdResult) SetUserId(v string) {
	o.UserId = &v
}

func (o UserSocialIdResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSocialIdResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SocialAccountInformation) {
		toSerialize["socialAccountInformation"] = o.SocialAccountInformation
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableUserSocialIdResult struct {
	value *UserSocialIdResult
	isSet bool
}

func (v NullableUserSocialIdResult) Get() *UserSocialIdResult {
	return v.value
}

func (v *NullableUserSocialIdResult) Set(val *UserSocialIdResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSocialIdResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSocialIdResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSocialIdResult(val *UserSocialIdResult) *NullableUserSocialIdResult {
	return &NullableUserSocialIdResult{value: val, isSet: true}
}

func (v NullableUserSocialIdResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSocialIdResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


