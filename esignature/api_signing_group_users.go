/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SigningGroupUsersAPIService SigningGroupUsersAPI service
type SigningGroupUsersAPIService service

type ApiSigningGroupsDeleteSigningGroupUsersRequest struct {
	ctx context.Context
	ApiService *SigningGroupUsersAPIService
	accountId string
	signingGroupId string
	signingGroupUsers *SigningGroupUsers
}

// A complex type that contains information about users in the signing group.
func (r ApiSigningGroupsDeleteSigningGroupUsersRequest) SigningGroupUsers(signingGroupUsers SigningGroupUsers) ApiSigningGroupsDeleteSigningGroupUsersRequest {
	r.signingGroupUsers = &signingGroupUsers
	return r
}

func (r ApiSigningGroupsDeleteSigningGroupUsersRequest) Execute() (*SigningGroupUsers, *http.Response, error) {
	return r.ApiService.SigningGroupsDeleteSigningGroupUsersExecute(r)
}

/*
SigningGroupsDeleteSigningGroupUsers Deletes  one or more members from a signing group.

Deletes  one or more members from the specified signing group. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param signingGroupId The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html).  **Note:** When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, DocuSign recommends that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change t he default action of Needs to Sign to a different value, such as Receives a Copy.
 @return ApiSigningGroupsDeleteSigningGroupUsersRequest
*/
func (a *SigningGroupUsersAPIService) SigningGroupsDeleteSigningGroupUsers(ctx context.Context, accountId string, signingGroupId string) ApiSigningGroupsDeleteSigningGroupUsersRequest {
	return ApiSigningGroupsDeleteSigningGroupUsersRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		signingGroupId: signingGroupId,
	}
}

// Execute executes the request
//  @return SigningGroupUsers
func (a *SigningGroupUsersAPIService) SigningGroupsDeleteSigningGroupUsersExecute(r ApiSigningGroupsDeleteSigningGroupUsersRequest) (*SigningGroupUsers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SigningGroupUsers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigningGroupUsersAPIService.SigningGroupsDeleteSigningGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signingGroupId"+"}", url.PathEscape(parameterValueToString(r.signingGroupId, "signingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signingGroupUsers
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSigningGroupsGetSigningGroupUsersRequest struct {
	ctx context.Context
	ApiService *SigningGroupUsersAPIService
	accountId string
	signingGroupId string
}

func (r ApiSigningGroupsGetSigningGroupUsersRequest) Execute() (*SigningGroupUsers, *http.Response, error) {
	return r.ApiService.SigningGroupsGetSigningGroupUsersExecute(r)
}

/*
SigningGroupsGetSigningGroupUsers Gets a list of members in a Signing Group.

Retrieves the list of members in the specified Signing Group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param signingGroupId The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html).  **Note:** When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, DocuSign recommends that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change t he default action of Needs to Sign to a different value, such as Receives a Copy.
 @return ApiSigningGroupsGetSigningGroupUsersRequest
*/
func (a *SigningGroupUsersAPIService) SigningGroupsGetSigningGroupUsers(ctx context.Context, accountId string, signingGroupId string) ApiSigningGroupsGetSigningGroupUsersRequest {
	return ApiSigningGroupsGetSigningGroupUsersRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		signingGroupId: signingGroupId,
	}
}

// Execute executes the request
//  @return SigningGroupUsers
func (a *SigningGroupUsersAPIService) SigningGroupsGetSigningGroupUsersExecute(r ApiSigningGroupsGetSigningGroupUsersRequest) (*SigningGroupUsers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SigningGroupUsers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigningGroupUsersAPIService.SigningGroupsGetSigningGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signingGroupId"+"}", url.PathEscape(parameterValueToString(r.signingGroupId, "signingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSigningGroupsPutSigningGroupUsersRequest struct {
	ctx context.Context
	ApiService *SigningGroupUsersAPIService
	accountId string
	signingGroupId string
	signingGroupUsers *SigningGroupUsers
}

// A complex type that contains information about users in the signing group.
func (r ApiSigningGroupsPutSigningGroupUsersRequest) SigningGroupUsers(signingGroupUsers SigningGroupUsers) ApiSigningGroupsPutSigningGroupUsersRequest {
	r.signingGroupUsers = &signingGroupUsers
	return r
}

func (r ApiSigningGroupsPutSigningGroupUsersRequest) Execute() (*SigningGroupUsers, *http.Response, error) {
	return r.ApiService.SigningGroupsPutSigningGroupUsersExecute(r)
}

/*
SigningGroupsPutSigningGroupUsers Adds members to a signing group. 

Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param signingGroupId The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html).  **Note:** When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, DocuSign recommends that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change t he default action of Needs to Sign to a different value, such as Receives a Copy.
 @return ApiSigningGroupsPutSigningGroupUsersRequest
*/
func (a *SigningGroupUsersAPIService) SigningGroupsPutSigningGroupUsers(ctx context.Context, accountId string, signingGroupId string) ApiSigningGroupsPutSigningGroupUsersRequest {
	return ApiSigningGroupsPutSigningGroupUsersRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		signingGroupId: signingGroupId,
	}
}

// Execute executes the request
//  @return SigningGroupUsers
func (a *SigningGroupUsersAPIService) SigningGroupsPutSigningGroupUsersExecute(r ApiSigningGroupsPutSigningGroupUsersRequest) (*SigningGroupUsers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SigningGroupUsers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigningGroupUsersAPIService.SigningGroupsPutSigningGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"signingGroupId"+"}", url.PathEscape(parameterValueToString(r.signingGroupId, "signingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signingGroupUsers
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
