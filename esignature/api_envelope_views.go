/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EnvelopeViewsAPIService EnvelopeViewsAPI service
type EnvelopeViewsAPIService service

type ApiViewsDeleteEnvelopeCorrectViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	envelopeId string
	correctViewRequest *CorrectViewRequest
}

func (r ApiViewsDeleteEnvelopeCorrectViewRequest) CorrectViewRequest(correctViewRequest CorrectViewRequest) ApiViewsDeleteEnvelopeCorrectViewRequest {
	r.correctViewRequest = &correctViewRequest
	return r
}

func (r ApiViewsDeleteEnvelopeCorrectViewRequest) Execute() (*http.Response, error) {
	return r.ApiService.ViewsDeleteEnvelopeCorrectViewExecute(r)
}

/*
ViewsDeleteEnvelopeCorrectView Revokes the correction view URL to the Envelope UI.

Revokes the correction view URL to the Envelope UI.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiViewsDeleteEnvelopeCorrectViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsDeleteEnvelopeCorrectView(ctx context.Context, accountId string, envelopeId string) ApiViewsDeleteEnvelopeCorrectViewRequest {
	return ApiViewsDeleteEnvelopeCorrectViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
func (a *EnvelopeViewsAPIService) ViewsDeleteEnvelopeCorrectViewExecute(r ApiViewsDeleteEnvelopeCorrectViewRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsDeleteEnvelopeCorrectView")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/correct"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.correctViewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiViewsPostAccountConsoleViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	consoleViewRequest *ConsoleViewRequest
}

func (r ApiViewsPostAccountConsoleViewRequest) ConsoleViewRequest(consoleViewRequest ConsoleViewRequest) ApiViewsPostAccountConsoleViewRequest {
	r.consoleViewRequest = &consoleViewRequest
	return r
}

func (r ApiViewsPostAccountConsoleViewRequest) Execute() (*EnvelopeViews, *http.Response, error) {
	return r.ApiService.ViewsPostAccountConsoleViewExecute(r)
}

/*
ViewsPostAccountConsoleView Returns a URL to the DocuSign UI.

Returns a URL that enables you to embed the DocuSign UI in your applications. To view a specific envelope, set the `envelopeId` property in the request body.

### Revoking the URL

You can revoke this URL by making a HTTP DELETE request to the URL with no request body.

## Information security notice

This method provides full access to the sending account.

### Related topics

- [How to embed the DocuSign UI in your app](/docs/esign-rest-api/how-to/embed-ui/)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiViewsPostAccountConsoleViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsPostAccountConsoleView(ctx context.Context, accountId string) ApiViewsPostAccountConsoleViewRequest {
	return ApiViewsPostAccountConsoleViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return EnvelopeViews
func (a *EnvelopeViewsAPIService) ViewsPostAccountConsoleViewExecute(r ApiViewsPostAccountConsoleViewRequest) (*EnvelopeViews, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeViews
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsPostAccountConsoleView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/views/console"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleViewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsPostEnvelopeCorrectViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	envelopeId string
	correctViewRequest *CorrectViewRequest
}

func (r ApiViewsPostEnvelopeCorrectViewRequest) CorrectViewRequest(correctViewRequest CorrectViewRequest) ApiViewsPostEnvelopeCorrectViewRequest {
	r.correctViewRequest = &correctViewRequest
	return r
}

func (r ApiViewsPostEnvelopeCorrectViewRequest) Execute() (*EnvelopeViews, *http.Response, error) {
	return r.ApiService.ViewsPostEnvelopeCorrectViewExecute(r)
}

/*
ViewsPostEnvelopeCorrectView Returns a URL to the envelope correction UI.

Returns a URL that allows you to embed the envelope correction view of the DocuSign UI. To customize the appearance of the correction view, you can add special query parameters to the returned URL when you use it in your application.

You can revoke this URL by calling the [deleteEnvelopeCorrectView](/docs/esign-rest-api/reference/envelopes/envelopeviews/deleteenvelopecorrectview/) endpoint.

## Best practices

The returned URL expires after 10 minutes and can only be used once. Therefore, request the URL immediately before you redirect your user to it.

Due to screen space issues, do not use an `<iframe>` for embedded operations on mobile devices. For iOS devices, DocuSign recommends using a WebView.

## Customizing the correction view

To customize the appearance of the correction view, you can add query parameters **to the URL that is returned by this endpoint and used in your application.** Do not add these query parameters to the URL of the endpoint itself.

For example, adding the following query parameters to the URL returned by this method causes the sending view to:

- start in the tagging screen
- hide the Edit Pages command
- hide all of the options under the Actions dropdown except Save, Close, and Discard

```
https://demo.docusign.net/Member/StartInSession.aspx?StartConsole=1&t=dd3b7c4c-xxxx-xxxx-xxxx-50cd195a3401&DocuEnvelope=f37489d3-xxxx-xxxx-xxxx-4de057063d0e&\
        advcorrect=1&\
        showEditPages=false&\
        showHeaderActions=false
```


The default value reflects what happens
if you omit the customization query parameter.
You can use the interactive
[Embedded Sending Demo tool](https://sign.agreementsdemo.com/Home/Sending)
to see the effect of using different query parameters.



| Query Parameter             | Default Value                                                                                                    | Alternate Value                                                                                                                                                                                                                                   |
| :-------------------------- | :--------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| sendButtonAction            | `send`<br><br>The Send button operates normally.                                                                 | `redirect`<br><br>The text of the button changes to Continue. Clicking it redirects to the `returnUrl` in the request object. If you intend to modify the envelope after redirection, see [this note](#modifying-the-envelope-after-redirection). |
| backButtonAction            | `previousPage`<br><br>The back arrow and back button operate normally.                                           | `redirect`<br><br>Clicking the back arrow and back button redirects to the `returnUrl` in the request object. If you intend to modify the envelope after redirection, see [this note](#modifying-the-envelope-after-redirection).                 |
| showBackButton              | `true` <br><br> Shows the back arrow and the back button.                                                        | `false`<br><br>Hides the back arrow and the back button.                                                                                                                                                                                          |
| showEditRecipients          | `true` <br><br> Shows the Edit Recipients command in the action menu and in the Conditional Recipients settings. | `false`<br><br>Hides the Edit Recipients command.                                                                                                                                                                                                 |
| showEditDocuments           | `true` <br><br> Shows the Edit Documents command in the action menu and removes the Documents Gear icon.         | `false`<br><br>Hides the Edit Documents command.                                                                                                                                                                                                  |
| showEditDocumentVisibility  | `true` <br><br> Shows the Documents Gear icon where the sender can edit document visibility.                     | `false`<br><br>Hides the Documents Gear icon.                                                                                                                                                                                                     |
| showEditPages               | `true` <br><br> Shows the Edit Pages command under the document thumbnail.                                       | `false`<br><br>Hides the Edit Pages command.                                                                                                                                                                                                      |
| showMatchingTemplatesPrompt | `true` <br><br> Shows the matching template prompt.                                                              | `false`<br><br>Hides the matching template prompt.                                                                                                                                                                                                |
| showHeaderActions           | `true` <br><br> Shows all options under the Actions dropdown.                                                    | `false`<br><br>Hides all options under the Actions dropdown except Save, Close, and Discard.                                                                                                                                                      |
| showDiscardAction           | `true` <br><br> Shows the Discard command under the Actions dropdown.                                            | `false`<br><br>Hides the Discard command.                                                                                                                                                                                                         |
| advcorrect                  | `1`    <br><br> Starts the signer in the tagging screen.                                                         | `0`<br><br>Starts the signer in the prepare screen.                                                                                                                                                                                               |
| showTabPalette              | `true` <br><br>Shows the tab palette.                                                                            | `false` <br><br>Hides the tab palette.                                                                                                                                                                                                            |
| tabPaletteType              | `standard` <br><br> Displays the standard tab palette.                                                           | `custom`<br>`merge`<br>`notary`<br>`seals`<br>`smartcontracts`<br>`annotations`<br>`smartSections`<br><br>Displays the specified tab palette before the standard palette.                                                                         |


##  Modifying the envelope after redirection

If you use `sendButtonAction=redirect` or `backButtonAction=redirect`, and you intend to modify the envelope after redirection, you will need to lock the envelope and add an extra query parameter:

1.  [Create a lock token][createLock] for the envelope.
2.  Add the new lock token to the URL with the `lockToken` query parameter.<br>
    `...&sendButtonAction=redirect&lockToken=MDgxZxabUVBiMWUzZWYz`<br>
    **Note:** The `lockToken` query parameter is case-sensitive.


After clicking Continue,
your user is redirected back to your integration.
You can then [delete the lock token][deleteLock].

[createLock]: /docs/esign-rest-api/reference/envelopes/envelopelocks/create/
[deleteLock]: /docs/esign-rest-api/reference/envelopes/envelopelocks/delete/


## Information security notice

This method provides full access to the sending account. When you
use this view, the current user has full access to the account.
If the account has administrative privileges, then this method
also provides administrator access.

If your use case needs to enable a sender to update a draft
envelope before it is sent or make other changes, take one of the
following steps:

- Configure each sender to have their own individual user account
  to use this API method.
- Enhance your API integration so that this method is not needed.
  Your integration can create the tabs, recipients,
  and other envelope settings as needed.


### Related topics

- [Embedded signing and sending](/docs/esign-rest-api/esign101/concepts/embedding/)
- [How to send an envelope via your app](/docs/esign-rest-api/how-to/embedded-sending/)
- [How to embed the DocuSign UI in your app](/docs/esign-rest-api/how-to/embed-ui/)
- [Introducing customizable embedded sending](https://www.docusign.com/blog/developers/introducing-customizable-embedded-sending)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiViewsPostEnvelopeCorrectViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeCorrectView(ctx context.Context, accountId string, envelopeId string) ApiViewsPostEnvelopeCorrectViewRequest {
	return ApiViewsPostEnvelopeCorrectViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return EnvelopeViews
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeCorrectViewExecute(r ApiViewsPostEnvelopeCorrectViewRequest) (*EnvelopeViews, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeViews
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsPostEnvelopeCorrectView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/correct"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.correctViewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsPostEnvelopeEditViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	envelopeId string
	returnUrlRequest *ReturnUrlRequest
}

func (r ApiViewsPostEnvelopeEditViewRequest) ReturnUrlRequest(returnUrlRequest ReturnUrlRequest) ApiViewsPostEnvelopeEditViewRequest {
	r.returnUrlRequest = &returnUrlRequest
	return r
}

func (r ApiViewsPostEnvelopeEditViewRequest) Execute() (*EnvelopeViews, *http.Response, error) {
	return r.ApiService.ViewsPostEnvelopeEditViewExecute(r)
}

/*
ViewsPostEnvelopeEditView Returns a URL to the edit view UI.

Returns a URL that enables you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.  Upon sending completion, the user is returned to the return URL provided by the API application.

See [Embedded signing and sending](/docs/esign-rest-api/esign101/concepts/embedding/)
to learn more about embedding.

Due to screen space issues,
do not use an `<iframe>` for embedded operations on mobile devices.
For iOS devices, DocuSign recommends using a WebView.

### Revoking the URL

You can revoke this URL by making
a DELETE HTTP request to the URL
with no request body.

## Information security notice

This method provides full access to the sending account. When you
use this view, the current user has full access to the account.
If the account has administrative privileges, then this method
also provides administrator access.

If your use case needs to enable a sender to update a draft envelope before it is sent or make other changes, take one of the following steps:

- Configure each sender to have their own individual user account to use this API method.</li>
- Enhance your API integration so that this method is not needed. Your integration can create the tabs, recipients, and other envelope settings as needed.</li>

### Related topics

- [Embedded signing and sending](/docs/esign-rest-api/esign101/concepts/embedding/)
- [How to send an envelope via your app](/docs/esign-rest-api/how-to/embedded-sending/)
- [How to embed the DocuSign UI in your app](/docs/esign-rest-api/how-to/embed-ui/)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiViewsPostEnvelopeEditViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeEditView(ctx context.Context, accountId string, envelopeId string) ApiViewsPostEnvelopeEditViewRequest {
	return ApiViewsPostEnvelopeEditViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return EnvelopeViews
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeEditViewExecute(r ApiViewsPostEnvelopeEditViewRequest) (*EnvelopeViews, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeViews
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsPostEnvelopeEditView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/edit"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.returnUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsPostEnvelopeRecipientSharedViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	envelopeId string
	recipientViewRequest *RecipientViewRequest
}

func (r ApiViewsPostEnvelopeRecipientSharedViewRequest) RecipientViewRequest(recipientViewRequest RecipientViewRequest) ApiViewsPostEnvelopeRecipientSharedViewRequest {
	r.recipientViewRequest = &recipientViewRequest
	return r
}

func (r ApiViewsPostEnvelopeRecipientSharedViewRequest) Execute() (*ViewUrl, *http.Response, error) {
	return r.ApiService.ViewsPostEnvelopeRecipientSharedViewExecute(r)
}

/*
ViewsPostEnvelopeRecipientSharedView Returns a URL to the shared recipient view UI for an envelope.

Returns a URL that enables you to embed the DocuSign UI recipient view of a [shared envelope](https://support.docusign.com/s/document-item?bundleId=pik1583277475390&topicId=uzg1583277438725.html) in your applications. This is the view that a user sees of an envelope that a recipient on the same account has shared with them.

Due to screen space issues,
do not use an `<iframe>` for embedded operations on mobile devices.
For iOS devices, DocuSign recommends using a WebView.

### Revoking the URL

You can revoke this URL by making
a DELETE HTTP request to the URL
with no request body.

### Related topics

- [Embedded signing and sending](/docs/esign-rest-api/esign101/concepts/embedding/)
- [How to send an envelope via your app](/docs/esign-rest-api/how-to/embedded-sending/)
- [How to embed the DocuSign UI in your app](/docs/esign-rest-api/how-to/embed-ui/)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiViewsPostEnvelopeRecipientSharedViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeRecipientSharedView(ctx context.Context, accountId string, envelopeId string) ApiViewsPostEnvelopeRecipientSharedViewRequest {
	return ApiViewsPostEnvelopeRecipientSharedViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return ViewUrl
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeRecipientSharedViewExecute(r ApiViewsPostEnvelopeRecipientSharedViewRequest) (*ViewUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsPostEnvelopeRecipientSharedView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/shared"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recipientViewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsPostEnvelopeRecipientViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	envelopeId string
	recipientViewRequest *RecipientViewRequest
}

func (r ApiViewsPostEnvelopeRecipientViewRequest) RecipientViewRequest(recipientViewRequest RecipientViewRequest) ApiViewsPostEnvelopeRecipientViewRequest {
	r.recipientViewRequest = &recipientViewRequest
	return r
}

func (r ApiViewsPostEnvelopeRecipientViewRequest) Execute() (*EnvelopeViews, *http.Response, error) {
	return r.ApiService.ViewsPostEnvelopeRecipientViewExecute(r)
}

/*
ViewsPostEnvelopeRecipientView Returns a URL to the recipient view UI.

Returns a URL that enables you to
[embed the recipient view](/docs/esign-rest-api/esign101/concepts/embedding/)
of the
DocuSign UI in your applications. If the recipient is a signer,
then the view will provide the signing ceremony.

This method is only used with envelopes in the `sent` status.

Due to screen space issues,
do not use an `<iframe>` for embedded operations on mobile devices.
For iOS devices, DocuSign recommends using a WebView.

### Revoking the URL

You can revoke this URL by making
a DELETE HTTP request to the URL
with no request body.


## Authentication

Your application is responsible for authenticating the identity
of the recipient or signer when you use this method. Use the
following parameters to record how the recipient
was authenticated.

- `assertionId`
- `authenticationInstant`
- `authenticationMethod`
- `clientUserId`
- `securityDomain`

At a minimum, `authenticationMethod` and `clientUserId` are
required. The information that you provide is included in the
envelope's certificate of completion.

## Redirects
After the signer completes or ends the signing ceremony, DocuSign
redirects the user's browser back to your app via the
`returnUrl` that you supply.

**Note:** The user may be redirected through various DocuSign
subdomains, depending on the region of the account sending the
envelope. Please consult [Allowlists for DocuSign eSignature service](https://www.docusign.com/trust/security/esignature#allowlists-for-docusign-esignature-service)
in **Security for DocuSign eSignature**
when setting up your allowlists.



### The event status parameter
DocuSign appends an `event` query parameter to the `returnUrl` with the
outcome of the signing ceremony. Your app can use this event
parameter to determine the next step for the envelope.
Do not fetch the envelope status by using
[Envelopes: get](/docs/esign-rest-api/reference/envelopes/envelopes/get/)
or a similar method because doing so could break
the DocuSign rule against polling.

| event query parameter | Meaning                                                                                  |
| :------------------- | :--------------------------------------------------------------------------------------- |
| signing_complete     | The recipient has signed the document.                                                   |
| cancel               | The recipient decided to finish later.                                                   |
| decline              | The recipient declined to sign the document.                                             |
| exception            | An exception has occurred on the server during the signing session.                      |
| fax_pending          | Recipient has a fax pending.                                                             |
| session_timeout      | The recipient did not sign the document in time. The timeout is set to 20 minutes.       |
| ttl_expired          | The token was not used within the timeout period or the token has already been accessed. |
| viewing_complete     | The recipient did not need to sign but has completed the viewing ceremony.               |


**Note:** Because a user can cancel redirection, close their
browser after signing, or spoof the landing URL, the
`returnUrl` should not be the single source of truth for envelope
status for your integration.

## The URL is time-limited

The URL returned in this method's response is valid for one use,
and you must use or display it within a couple of minutes after
it is generated. After the recipient is redirected to the
recipient view, they must interact with the DocuSign system
periodically or their session will time out.

Because the URL is time-limited, it should not be stored or sent
through email. After you receive it, immediately redirect the
user's browser to the URL.

If you want to invite someone to an embedded signing session via
email, the email invitation's URL must be to your application.
When invoked, your app should request a `recipientView` URL from
DocuSign and then redirect the signer to that URL.

## Maintaining State
After the recipient completes the recipient view (or signing
ceremony), they are redirected to your application. Your
application can recover state information about the transaction
by storing information in a cookie, or by including query
parameters in the `returnUrl` field. For example.
`https://myapp.example.com/docusign_return?myState=12345` When the
user is redirected to your app, the `event` query parameter will
be appended. In this example, prevent spoofing by not using a
guessable value as the state value.


## How to specify the default language

The language for the recipient view
follows this order or precedence:

- The language specified by the sender for the recipient.
- The `locale` parameter appended to the URL.
- The account language if the signer has a DocuSign account.
- The language used in a previous signing if the signer is return signer.
- The browser language.

You can append the `locale`
query parameter
to the URL returned by this method
to specify a language.
For example, to set the default language
to Canadian French, you would set
it like this:

```
...?locale=fr_CA
```

## Sending to a remote signer

You can request a signing session for a remote recipient
who has a DocuSign account.

Authenticate the request using the recipient's
credentials, and do not specify a  `clientUserId`.
This differs from the typical behavior where the
request is authenticated using the sender's credentials,
and the recipient has a `clientUserId` defined.




### Related topics

- [How to request a signature by email](/docs/esign-rest-api/how-to/request-signature-email-remote/)
- [How to request a signature through your app](/docs/esign-rest-api/how-to/request-signature-in-app-embedded/)
- [How to request a signature using a composite template](/docs/esign-rest-api/how-to/request-signature-composite-template-embedded/)
- [How to send an envelope via your app](/docs/esign-rest-api/how-to/embedded-sending/)
- [How to set envelope tab values](/docs/esign-rest-api/how-to/set-envelope-tab-values/)
- [How to set tab values in a template](/docs/esign-rest-api/how-to/set-template-tab-values/)



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The ID of the draft envelope or template to preview.
 @return ApiViewsPostEnvelopeRecipientViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeRecipientView(ctx context.Context, accountId string, envelopeId string) ApiViewsPostEnvelopeRecipientViewRequest {
	return ApiViewsPostEnvelopeRecipientViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return EnvelopeViews
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeRecipientViewExecute(r ApiViewsPostEnvelopeRecipientViewRequest) (*EnvelopeViews, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeViews
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsPostEnvelopeRecipientView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recipientViewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewsPostEnvelopeSenderViewRequest struct {
	ctx context.Context
	ApiService *EnvelopeViewsAPIService
	accountId string
	envelopeId string
	returnUrlRequest *ReturnUrlRequest
}

func (r ApiViewsPostEnvelopeSenderViewRequest) ReturnUrlRequest(returnUrlRequest ReturnUrlRequest) ApiViewsPostEnvelopeSenderViewRequest {
	r.returnUrlRequest = &returnUrlRequest
	return r
}

func (r ApiViewsPostEnvelopeSenderViewRequest) Execute() (*EnvelopeViews, *http.Response, error) {
	return r.ApiService.ViewsPostEnvelopeSenderViewExecute(r)
}

/*
ViewsPostEnvelopeSenderView Returns a URL to the sender view UI.

Returns a URL that enables you to embed the sender view
of the DocuSign UI in your applications. To customize the appearance of the sender view, you can append special query parameters to the returned URL. 


## Best Practices

The returned URL can only be redirected to immediately after it
is generated. It can only be used once. Therefore, request the
URL immediately before you redirect your user to it.

Due to screen space issues,
do not use an `<iframe>` for embedded operations on mobile devices.
For iOS devices, DocuSign recommends using a WebView.

## Customizing the sending view

You can add query parameters
to customize the appearance of the sending view.
For example, adding the following query parameters
to the URL returned by this method
causes the sending view to:

- start in the tagging screen
- hide the Edit Pages command
- hide all of the options under the Actions dropdown except Save, Close, and Discard

```
https://demo.docusign.net/Member/StartInSession.aspx?StartConsole=1&t=dd3b7c4c-xxxx-xxxx-xxxx-50cd195a3401&DocuEnvelope=f37489d3-xxxx-xxxx-xxxx-4de057063d0e&\
        send=1&\
        showEditPages=false&\
        showHeaderActions=false
```

The default value reflects what happens
if you omit the customization query parameter.
You can use the interactive
[Embedded Sending Demo tool](https://sign.agreementsdemo.com/Home/Sending)
to see the effect of using different query parameters.

| Query Parameter             | Default Value                                                                                                    | Alternate Value                                                                                                                                                                                                                                   |
| :-------------------------- | :--------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| sendButtonAction            | `send`<br><br>The Send button operates normally.                                                                 | `redirect`<br><br>The text of the button changes to Continue. Clicking it redirects to the `returnUrl` in the request object. If you intend to modify the envelope after redirection, see [this note](#modifying-the-envelope-after-redirection). |
| backButtonAction            | `previousPage`<br><br>The back arrow and back button operate normally.                                           | `redirect`<br><br>Clicking the back arrow and back button redirects to the `returnUrl` in the request object. If you intend to modify the envelope after redirection, see [this note](#modifying-the-envelope-after-redirection).                 |
| showBackButton              | `true` <br><br> Shows the back arrow and the back button.                                                        | `false`<br><br>Hides the back arrow and the back button.                                                                                                                                                                                          |
| showEditRecipients          | `true` <br><br> Shows the Edit Recipients command in the action menu and in the Conditional Recipients settings. | `false`<br><br>Hides the Edit Recipients command.                                                                                                                                                                                                 |
| showEditDocuments           | `true` <br><br> Shows the Edit Documents command in the action menu and removes the Documents Gear icon.         | `false`<br><br>Hides the Edit Documents command.                                                                                                                                                                                                  |
| showEditDocumentVisibility  | `true` <br><br> Shows the Documents Gear icon where the sender can edit document visibility.                     | `false`<br><br>Hides the Documents Gear icon.                                                                                                                                                                                                     |
| showEditPages               | `true` <br><br> Shows the Edit Pages command under the document thumbnail.                                       | `false`<br><br>Hides the Edit Pages command.                                                                                                                                                                                                      |
| showMatchingTemplatesPrompt | `true` <br><br> Shows the matching template prompt.                                                              | `false`<br><br>Hides the matching template prompt.                                                                                                                                                                                                |
| showHeaderActions           | `true` <br><br> Shows all options under the Actions dropdown.                                                    | `false`<br><br>Hides all options under the Actions dropdown except Save, Close, and Discard.                                                                                                                                                      |
| showDiscardAction           | `true` <br><br> Shows the Discard command under the Actions dropdown.                                            | `false`<br><br>Hides the Discard command.                                                                                                                                                                                                         |
| send                        | `1`    <br><br> Starts the signer in the tagging screen.                                                         | `0`<br><br>Starts the signer in the prepare screen.                                                                                                                                                                                               |
| showTabPalette              | `true` <br><br>Shows the tab palette.                                                                            | `false` <br><br>Hides the tab palette.                                                                                                                                                                                                            |
| tabPaletteType              | `standard` <br><br> Displays the standard tab palette.                                                           | `custom`<br>`merge`<br>`notary`<br>`seals`<br>`smartcontracts`<br>`annotations`<br>`smartSections`<br><br>Displays the specified tab palette before the standard palette.                                                                         |

##  Modifying the envelope after redirection

If you use `sendButtonAction=redirect`
or
`backButtonAction=redirect`,
and
you intend to modify the envelope after redirection,
you will need to lock the envelope
and
add an extra query parameter:

1.  [Create a lock token][createLock] for the envelope.
2.  Add the new lock token to the URL with the `lockToken` query parameter.<br>
    `...&sendButtonAction=redirect&lockToken=MDgxZxabUVBiMWUzZWYz`<br>
    **Note:** The `lockToken` query parameter is case-sensitive.


After clicking Continue,
your user is redirected back to your integration.
You can then [delete the lock token][deleteLock].

[createLock]: /docs/esign-rest-api/reference/envelopes/envelopelocks/create/
[deleteLock]: /docs/esign-rest-api/reference/envelopes/envelopelocks/delete/


## Information security notice

This method provides full access to the sending account. When you
use this view, the current user has full access to the account.
If the account has administrative privileges, then this method
also provides administrator access.

If your use case needs to enable a sender to update a draft
envelope before it is sent or make other changes, take one of the
following steps:

- Configure each sender to have their own individual user account
  to use this API method.
- Enhance your API integration so that this method is not needed.
  Your integration can create the tabs, recipients,
  and other envelope settings as needed.


## Related topics

- [Embedded signing and sending](/docs/esign-rest-api/esign101/concepts/embedding/)
- [How to send an envelope via your app](/docs/esign-rest-api/how-to/embedded-sending/)
- [How to embed the DocuSign UI in your app](/docs/esign-rest-api/how-to/embed-ui/)
- [Introducing customizable embedded sending](https://www.docusign.com/blog/developers/introducing-customizable-embedded-sending)


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiViewsPostEnvelopeSenderViewRequest
*/
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeSenderView(ctx context.Context, accountId string, envelopeId string) ApiViewsPostEnvelopeSenderViewRequest {
	return ApiViewsPostEnvelopeSenderViewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return EnvelopeViews
func (a *EnvelopeViewsAPIService) ViewsPostEnvelopeSenderViewExecute(r ApiViewsPostEnvelopeSenderViewRequest) (*EnvelopeViews, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeViews
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeViewsAPIService.ViewsPostEnvelopeSenderView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/sender"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.returnUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
