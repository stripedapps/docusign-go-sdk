/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageRequest{}

// PageRequest 
type PageRequest struct {
	// The user's encrypted password hash.
	Password *string `json:"password,omitempty"`
	// Sets the direction the page image is rotated. The possible settings are: left or right
	Rotate *string `json:"rotate,omitempty"`
}

// NewPageRequest instantiates a new PageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageRequest() *PageRequest {
	this := PageRequest{}
	return &this
}

// NewPageRequestWithDefaults instantiates a new PageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageRequestWithDefaults() *PageRequest {
	this := PageRequest{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PageRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PageRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PageRequest) SetPassword(v string) {
	o.Password = &v
}

// GetRotate returns the Rotate field value if set, zero value otherwise.
func (o *PageRequest) GetRotate() string {
	if o == nil || IsNil(o.Rotate) {
		var ret string
		return ret
	}
	return *o.Rotate
}

// GetRotateOk returns a tuple with the Rotate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRequest) GetRotateOk() (*string, bool) {
	if o == nil || IsNil(o.Rotate) {
		return nil, false
	}
	return o.Rotate, true
}

// HasRotate returns a boolean if a field has been set.
func (o *PageRequest) HasRotate() bool {
	if o != nil && !IsNil(o.Rotate) {
		return true
	}

	return false
}

// SetRotate gets a reference to the given string and assigns it to the Rotate field.
func (o *PageRequest) SetRotate(v string) {
	o.Rotate = &v
}

func (o PageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Rotate) {
		toSerialize["rotate"] = o.Rotate
	}
	return toSerialize, nil
}

type NullablePageRequest struct {
	value *PageRequest
	isSet bool
}

func (v NullablePageRequest) Get() *PageRequest {
	return v.value
}

func (v *NullablePageRequest) Set(val *PageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageRequest(val *PageRequest) *NullablePageRequest {
	return &NullablePageRequest{value: val, isSet: true}
}

func (v NullablePageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


