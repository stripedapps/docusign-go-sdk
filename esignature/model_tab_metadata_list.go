/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TabMetadataList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TabMetadataList{}

// TabMetadataList 
type TabMetadataList struct {
	// A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.
	Tabs []TabMetadata `json:"tabs,omitempty"`
}

// NewTabMetadataList instantiates a new TabMetadataList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTabMetadataList() *TabMetadataList {
	this := TabMetadataList{}
	return &this
}

// NewTabMetadataListWithDefaults instantiates a new TabMetadataList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTabMetadataListWithDefaults() *TabMetadataList {
	this := TabMetadataList{}
	return &this
}

// GetTabs returns the Tabs field value if set, zero value otherwise.
func (o *TabMetadataList) GetTabs() []TabMetadata {
	if o == nil || IsNil(o.Tabs) {
		var ret []TabMetadata
		return ret
	}
	return o.Tabs
}

// GetTabsOk returns a tuple with the Tabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TabMetadataList) GetTabsOk() ([]TabMetadata, bool) {
	if o == nil || IsNil(o.Tabs) {
		return nil, false
	}
	return o.Tabs, true
}

// HasTabs returns a boolean if a field has been set.
func (o *TabMetadataList) HasTabs() bool {
	if o != nil && !IsNil(o.Tabs) {
		return true
	}

	return false
}

// SetTabs gets a reference to the given []TabMetadata and assigns it to the Tabs field.
func (o *TabMetadataList) SetTabs(v []TabMetadata) {
	o.Tabs = v
}

func (o TabMetadataList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TabMetadataList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tabs) {
		toSerialize["tabs"] = o.Tabs
	}
	return toSerialize, nil
}

type NullableTabMetadataList struct {
	value *TabMetadataList
	isSet bool
}

func (v NullableTabMetadataList) Get() *TabMetadataList {
	return v.value
}

func (v *NullableTabMetadataList) Set(val *TabMetadataList) {
	v.value = val
	v.isSet = true
}

func (v NullableTabMetadataList) IsSet() bool {
	return v.isSet
}

func (v *NullableTabMetadataList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTabMetadataList(val *TabMetadataList) *NullableTabMetadataList {
	return &NullableTabMetadataList{value: val, isSet: true}
}

func (v NullableTabMetadataList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTabMetadataList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


