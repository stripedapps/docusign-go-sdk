/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccessCodeFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessCodeFormat{}

// AccessCodeFormat Object specifying the format of the string provided to a recipient in order to access an envelope.
type AccessCodeFormat struct {
	// Boolean specifying whether this format configuration is required.
	FormatRequired *string `json:"formatRequired,omitempty"`
	FormatRequiredMetadata *SettingsMetadata `json:"formatRequiredMetadata,omitempty"`
	// Boolean specifying whether alphabetical characters are required in the access code string.
	LetterRequired *string `json:"letterRequired,omitempty"`
	LetterRequiredMetadata *SettingsMetadata `json:"letterRequiredMetadata,omitempty"`
	// Minimum length of the access code string.
	MinimumLength *string `json:"minimumLength,omitempty"`
	MinimumLengthMetadata *SettingsMetadata `json:"minimumLengthMetadata,omitempty"`
	// Boolean specifying whether numerical characters (0-9) are required in the access code string.
	NumberRequired *string `json:"numberRequired,omitempty"`
	NumberRequiredMetadata *SettingsMetadata `json:"numberRequiredMetadata,omitempty"`
	// Boolean specifying whether special characters are required in the access code string. The string cannot contain the special characters '<', '>', '&', or '#'.
	SpecialCharacterRequired *string `json:"specialCharacterRequired,omitempty"`
	SpecialCharacterRequiredMetadata *SettingsMetadata `json:"specialCharacterRequiredMetadata,omitempty"`
}

// NewAccessCodeFormat instantiates a new AccessCodeFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessCodeFormat() *AccessCodeFormat {
	this := AccessCodeFormat{}
	return &this
}

// NewAccessCodeFormatWithDefaults instantiates a new AccessCodeFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessCodeFormatWithDefaults() *AccessCodeFormat {
	this := AccessCodeFormat{}
	return &this
}

// GetFormatRequired returns the FormatRequired field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetFormatRequired() string {
	if o == nil || IsNil(o.FormatRequired) {
		var ret string
		return ret
	}
	return *o.FormatRequired
}

// GetFormatRequiredOk returns a tuple with the FormatRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetFormatRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.FormatRequired) {
		return nil, false
	}
	return o.FormatRequired, true
}

// HasFormatRequired returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasFormatRequired() bool {
	if o != nil && !IsNil(o.FormatRequired) {
		return true
	}

	return false
}

// SetFormatRequired gets a reference to the given string and assigns it to the FormatRequired field.
func (o *AccessCodeFormat) SetFormatRequired(v string) {
	o.FormatRequired = &v
}

// GetFormatRequiredMetadata returns the FormatRequiredMetadata field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetFormatRequiredMetadata() SettingsMetadata {
	if o == nil || IsNil(o.FormatRequiredMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.FormatRequiredMetadata
}

// GetFormatRequiredMetadataOk returns a tuple with the FormatRequiredMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetFormatRequiredMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.FormatRequiredMetadata) {
		return nil, false
	}
	return o.FormatRequiredMetadata, true
}

// HasFormatRequiredMetadata returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasFormatRequiredMetadata() bool {
	if o != nil && !IsNil(o.FormatRequiredMetadata) {
		return true
	}

	return false
}

// SetFormatRequiredMetadata gets a reference to the given SettingsMetadata and assigns it to the FormatRequiredMetadata field.
func (o *AccessCodeFormat) SetFormatRequiredMetadata(v SettingsMetadata) {
	o.FormatRequiredMetadata = &v
}

// GetLetterRequired returns the LetterRequired field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetLetterRequired() string {
	if o == nil || IsNil(o.LetterRequired) {
		var ret string
		return ret
	}
	return *o.LetterRequired
}

// GetLetterRequiredOk returns a tuple with the LetterRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetLetterRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.LetterRequired) {
		return nil, false
	}
	return o.LetterRequired, true
}

// HasLetterRequired returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasLetterRequired() bool {
	if o != nil && !IsNil(o.LetterRequired) {
		return true
	}

	return false
}

// SetLetterRequired gets a reference to the given string and assigns it to the LetterRequired field.
func (o *AccessCodeFormat) SetLetterRequired(v string) {
	o.LetterRequired = &v
}

// GetLetterRequiredMetadata returns the LetterRequiredMetadata field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetLetterRequiredMetadata() SettingsMetadata {
	if o == nil || IsNil(o.LetterRequiredMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.LetterRequiredMetadata
}

// GetLetterRequiredMetadataOk returns a tuple with the LetterRequiredMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetLetterRequiredMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.LetterRequiredMetadata) {
		return nil, false
	}
	return o.LetterRequiredMetadata, true
}

// HasLetterRequiredMetadata returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasLetterRequiredMetadata() bool {
	if o != nil && !IsNil(o.LetterRequiredMetadata) {
		return true
	}

	return false
}

// SetLetterRequiredMetadata gets a reference to the given SettingsMetadata and assigns it to the LetterRequiredMetadata field.
func (o *AccessCodeFormat) SetLetterRequiredMetadata(v SettingsMetadata) {
	o.LetterRequiredMetadata = &v
}

// GetMinimumLength returns the MinimumLength field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetMinimumLength() string {
	if o == nil || IsNil(o.MinimumLength) {
		var ret string
		return ret
	}
	return *o.MinimumLength
}

// GetMinimumLengthOk returns a tuple with the MinimumLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetMinimumLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumLength) {
		return nil, false
	}
	return o.MinimumLength, true
}

// HasMinimumLength returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasMinimumLength() bool {
	if o != nil && !IsNil(o.MinimumLength) {
		return true
	}

	return false
}

// SetMinimumLength gets a reference to the given string and assigns it to the MinimumLength field.
func (o *AccessCodeFormat) SetMinimumLength(v string) {
	o.MinimumLength = &v
}

// GetMinimumLengthMetadata returns the MinimumLengthMetadata field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetMinimumLengthMetadata() SettingsMetadata {
	if o == nil || IsNil(o.MinimumLengthMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.MinimumLengthMetadata
}

// GetMinimumLengthMetadataOk returns a tuple with the MinimumLengthMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetMinimumLengthMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.MinimumLengthMetadata) {
		return nil, false
	}
	return o.MinimumLengthMetadata, true
}

// HasMinimumLengthMetadata returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasMinimumLengthMetadata() bool {
	if o != nil && !IsNil(o.MinimumLengthMetadata) {
		return true
	}

	return false
}

// SetMinimumLengthMetadata gets a reference to the given SettingsMetadata and assigns it to the MinimumLengthMetadata field.
func (o *AccessCodeFormat) SetMinimumLengthMetadata(v SettingsMetadata) {
	o.MinimumLengthMetadata = &v
}

// GetNumberRequired returns the NumberRequired field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetNumberRequired() string {
	if o == nil || IsNil(o.NumberRequired) {
		var ret string
		return ret
	}
	return *o.NumberRequired
}

// GetNumberRequiredOk returns a tuple with the NumberRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetNumberRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.NumberRequired) {
		return nil, false
	}
	return o.NumberRequired, true
}

// HasNumberRequired returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasNumberRequired() bool {
	if o != nil && !IsNil(o.NumberRequired) {
		return true
	}

	return false
}

// SetNumberRequired gets a reference to the given string and assigns it to the NumberRequired field.
func (o *AccessCodeFormat) SetNumberRequired(v string) {
	o.NumberRequired = &v
}

// GetNumberRequiredMetadata returns the NumberRequiredMetadata field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetNumberRequiredMetadata() SettingsMetadata {
	if o == nil || IsNil(o.NumberRequiredMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.NumberRequiredMetadata
}

// GetNumberRequiredMetadataOk returns a tuple with the NumberRequiredMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetNumberRequiredMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.NumberRequiredMetadata) {
		return nil, false
	}
	return o.NumberRequiredMetadata, true
}

// HasNumberRequiredMetadata returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasNumberRequiredMetadata() bool {
	if o != nil && !IsNil(o.NumberRequiredMetadata) {
		return true
	}

	return false
}

// SetNumberRequiredMetadata gets a reference to the given SettingsMetadata and assigns it to the NumberRequiredMetadata field.
func (o *AccessCodeFormat) SetNumberRequiredMetadata(v SettingsMetadata) {
	o.NumberRequiredMetadata = &v
}

// GetSpecialCharacterRequired returns the SpecialCharacterRequired field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetSpecialCharacterRequired() string {
	if o == nil || IsNil(o.SpecialCharacterRequired) {
		var ret string
		return ret
	}
	return *o.SpecialCharacterRequired
}

// GetSpecialCharacterRequiredOk returns a tuple with the SpecialCharacterRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetSpecialCharacterRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialCharacterRequired) {
		return nil, false
	}
	return o.SpecialCharacterRequired, true
}

// HasSpecialCharacterRequired returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasSpecialCharacterRequired() bool {
	if o != nil && !IsNil(o.SpecialCharacterRequired) {
		return true
	}

	return false
}

// SetSpecialCharacterRequired gets a reference to the given string and assigns it to the SpecialCharacterRequired field.
func (o *AccessCodeFormat) SetSpecialCharacterRequired(v string) {
	o.SpecialCharacterRequired = &v
}

// GetSpecialCharacterRequiredMetadata returns the SpecialCharacterRequiredMetadata field value if set, zero value otherwise.
func (o *AccessCodeFormat) GetSpecialCharacterRequiredMetadata() SettingsMetadata {
	if o == nil || IsNil(o.SpecialCharacterRequiredMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.SpecialCharacterRequiredMetadata
}

// GetSpecialCharacterRequiredMetadataOk returns a tuple with the SpecialCharacterRequiredMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessCodeFormat) GetSpecialCharacterRequiredMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.SpecialCharacterRequiredMetadata) {
		return nil, false
	}
	return o.SpecialCharacterRequiredMetadata, true
}

// HasSpecialCharacterRequiredMetadata returns a boolean if a field has been set.
func (o *AccessCodeFormat) HasSpecialCharacterRequiredMetadata() bool {
	if o != nil && !IsNil(o.SpecialCharacterRequiredMetadata) {
		return true
	}

	return false
}

// SetSpecialCharacterRequiredMetadata gets a reference to the given SettingsMetadata and assigns it to the SpecialCharacterRequiredMetadata field.
func (o *AccessCodeFormat) SetSpecialCharacterRequiredMetadata(v SettingsMetadata) {
	o.SpecialCharacterRequiredMetadata = &v
}

func (o AccessCodeFormat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessCodeFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FormatRequired) {
		toSerialize["formatRequired"] = o.FormatRequired
	}
	if !IsNil(o.FormatRequiredMetadata) {
		toSerialize["formatRequiredMetadata"] = o.FormatRequiredMetadata
	}
	if !IsNil(o.LetterRequired) {
		toSerialize["letterRequired"] = o.LetterRequired
	}
	if !IsNil(o.LetterRequiredMetadata) {
		toSerialize["letterRequiredMetadata"] = o.LetterRequiredMetadata
	}
	if !IsNil(o.MinimumLength) {
		toSerialize["minimumLength"] = o.MinimumLength
	}
	if !IsNil(o.MinimumLengthMetadata) {
		toSerialize["minimumLengthMetadata"] = o.MinimumLengthMetadata
	}
	if !IsNil(o.NumberRequired) {
		toSerialize["numberRequired"] = o.NumberRequired
	}
	if !IsNil(o.NumberRequiredMetadata) {
		toSerialize["numberRequiredMetadata"] = o.NumberRequiredMetadata
	}
	if !IsNil(o.SpecialCharacterRequired) {
		toSerialize["specialCharacterRequired"] = o.SpecialCharacterRequired
	}
	if !IsNil(o.SpecialCharacterRequiredMetadata) {
		toSerialize["specialCharacterRequiredMetadata"] = o.SpecialCharacterRequiredMetadata
	}
	return toSerialize, nil
}

type NullableAccessCodeFormat struct {
	value *AccessCodeFormat
	isSet bool
}

func (v NullableAccessCodeFormat) Get() *AccessCodeFormat {
	return v.value
}

func (v *NullableAccessCodeFormat) Set(val *AccessCodeFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessCodeFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessCodeFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessCodeFormat(val *AccessCodeFormat) *NullableAccessCodeFormat {
	return &NullableAccessCodeFormat{value: val, isSet: true}
}

func (v NullableAccessCodeFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessCodeFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


