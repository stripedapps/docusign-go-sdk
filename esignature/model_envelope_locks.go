/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeLocks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeLocks{}

// EnvelopeLocks Envelope locks let you lock an envelope to prevent any changes while you are updating an envelope. 
type EnvelopeLocks struct {
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	//  The number of seconds until the lock expires when there is no activity on the envelope.  The default value is 300 seconds. The maximum value is 1,800 seconds.  The lock duration can be extended. 
	LockDurationInSeconds *string `json:"lockDurationInSeconds,omitempty"`
	// The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
	LockedByApp *string `json:"lockedByApp,omitempty"`
	LockedByUser *UserInfo `json:"lockedByUser,omitempty"`
	// The date and time that the lock expires.
	LockedUntilDateTime *string `json:"lockedUntilDateTime,omitempty"`
	// A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
	LockToken *string `json:"lockToken,omitempty"`
	// The type of lock.  Currently `edit` is the only supported type.
	LockType *string `json:"lockType,omitempty"`
	// When **true,** a scratchpad is used to edit information.  
	UseScratchPad *string `json:"useScratchPad,omitempty"`
}

// NewEnvelopeLocks instantiates a new EnvelopeLocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeLocks() *EnvelopeLocks {
	this := EnvelopeLocks{}
	return &this
}

// NewEnvelopeLocksWithDefaults instantiates a new EnvelopeLocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeLocksWithDefaults() *EnvelopeLocks {
	this := EnvelopeLocks{}
	return &this
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *EnvelopeLocks) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetLockDurationInSeconds returns the LockDurationInSeconds field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetLockDurationInSeconds() string {
	if o == nil || IsNil(o.LockDurationInSeconds) {
		var ret string
		return ret
	}
	return *o.LockDurationInSeconds
}

// GetLockDurationInSecondsOk returns a tuple with the LockDurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetLockDurationInSecondsOk() (*string, bool) {
	if o == nil || IsNil(o.LockDurationInSeconds) {
		return nil, false
	}
	return o.LockDurationInSeconds, true
}

// HasLockDurationInSeconds returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasLockDurationInSeconds() bool {
	if o != nil && !IsNil(o.LockDurationInSeconds) {
		return true
	}

	return false
}

// SetLockDurationInSeconds gets a reference to the given string and assigns it to the LockDurationInSeconds field.
func (o *EnvelopeLocks) SetLockDurationInSeconds(v string) {
	o.LockDurationInSeconds = &v
}

// GetLockedByApp returns the LockedByApp field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetLockedByApp() string {
	if o == nil || IsNil(o.LockedByApp) {
		var ret string
		return ret
	}
	return *o.LockedByApp
}

// GetLockedByAppOk returns a tuple with the LockedByApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetLockedByAppOk() (*string, bool) {
	if o == nil || IsNil(o.LockedByApp) {
		return nil, false
	}
	return o.LockedByApp, true
}

// HasLockedByApp returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasLockedByApp() bool {
	if o != nil && !IsNil(o.LockedByApp) {
		return true
	}

	return false
}

// SetLockedByApp gets a reference to the given string and assigns it to the LockedByApp field.
func (o *EnvelopeLocks) SetLockedByApp(v string) {
	o.LockedByApp = &v
}

// GetLockedByUser returns the LockedByUser field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetLockedByUser() UserInfo {
	if o == nil || IsNil(o.LockedByUser) {
		var ret UserInfo
		return ret
	}
	return *o.LockedByUser
}

// GetLockedByUserOk returns a tuple with the LockedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetLockedByUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.LockedByUser) {
		return nil, false
	}
	return o.LockedByUser, true
}

// HasLockedByUser returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasLockedByUser() bool {
	if o != nil && !IsNil(o.LockedByUser) {
		return true
	}

	return false
}

// SetLockedByUser gets a reference to the given UserInfo and assigns it to the LockedByUser field.
func (o *EnvelopeLocks) SetLockedByUser(v UserInfo) {
	o.LockedByUser = &v
}

// GetLockedUntilDateTime returns the LockedUntilDateTime field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetLockedUntilDateTime() string {
	if o == nil || IsNil(o.LockedUntilDateTime) {
		var ret string
		return ret
	}
	return *o.LockedUntilDateTime
}

// GetLockedUntilDateTimeOk returns a tuple with the LockedUntilDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetLockedUntilDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LockedUntilDateTime) {
		return nil, false
	}
	return o.LockedUntilDateTime, true
}

// HasLockedUntilDateTime returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasLockedUntilDateTime() bool {
	if o != nil && !IsNil(o.LockedUntilDateTime) {
		return true
	}

	return false
}

// SetLockedUntilDateTime gets a reference to the given string and assigns it to the LockedUntilDateTime field.
func (o *EnvelopeLocks) SetLockedUntilDateTime(v string) {
	o.LockedUntilDateTime = &v
}

// GetLockToken returns the LockToken field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetLockToken() string {
	if o == nil || IsNil(o.LockToken) {
		var ret string
		return ret
	}
	return *o.LockToken
}

// GetLockTokenOk returns a tuple with the LockToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetLockTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LockToken) {
		return nil, false
	}
	return o.LockToken, true
}

// HasLockToken returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasLockToken() bool {
	if o != nil && !IsNil(o.LockToken) {
		return true
	}

	return false
}

// SetLockToken gets a reference to the given string and assigns it to the LockToken field.
func (o *EnvelopeLocks) SetLockToken(v string) {
	o.LockToken = &v
}

// GetLockType returns the LockType field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetLockType() string {
	if o == nil || IsNil(o.LockType) {
		var ret string
		return ret
	}
	return *o.LockType
}

// GetLockTypeOk returns a tuple with the LockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetLockTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LockType) {
		return nil, false
	}
	return o.LockType, true
}

// HasLockType returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasLockType() bool {
	if o != nil && !IsNil(o.LockType) {
		return true
	}

	return false
}

// SetLockType gets a reference to the given string and assigns it to the LockType field.
func (o *EnvelopeLocks) SetLockType(v string) {
	o.LockType = &v
}

// GetUseScratchPad returns the UseScratchPad field value if set, zero value otherwise.
func (o *EnvelopeLocks) GetUseScratchPad() string {
	if o == nil || IsNil(o.UseScratchPad) {
		var ret string
		return ret
	}
	return *o.UseScratchPad
}

// GetUseScratchPadOk returns a tuple with the UseScratchPad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeLocks) GetUseScratchPadOk() (*string, bool) {
	if o == nil || IsNil(o.UseScratchPad) {
		return nil, false
	}
	return o.UseScratchPad, true
}

// HasUseScratchPad returns a boolean if a field has been set.
func (o *EnvelopeLocks) HasUseScratchPad() bool {
	if o != nil && !IsNil(o.UseScratchPad) {
		return true
	}

	return false
}

// SetUseScratchPad gets a reference to the given string and assigns it to the UseScratchPad field.
func (o *EnvelopeLocks) SetUseScratchPad(v string) {
	o.UseScratchPad = &v
}

func (o EnvelopeLocks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeLocks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.LockDurationInSeconds) {
		toSerialize["lockDurationInSeconds"] = o.LockDurationInSeconds
	}
	if !IsNil(o.LockedByApp) {
		toSerialize["lockedByApp"] = o.LockedByApp
	}
	if !IsNil(o.LockedByUser) {
		toSerialize["lockedByUser"] = o.LockedByUser
	}
	if !IsNil(o.LockedUntilDateTime) {
		toSerialize["lockedUntilDateTime"] = o.LockedUntilDateTime
	}
	if !IsNil(o.LockToken) {
		toSerialize["lockToken"] = o.LockToken
	}
	if !IsNil(o.LockType) {
		toSerialize["lockType"] = o.LockType
	}
	if !IsNil(o.UseScratchPad) {
		toSerialize["useScratchPad"] = o.UseScratchPad
	}
	return toSerialize, nil
}

type NullableEnvelopeLocks struct {
	value *EnvelopeLocks
	isSet bool
}

func (v NullableEnvelopeLocks) Get() *EnvelopeLocks {
	return v.value
}

func (v *NullableEnvelopeLocks) Set(val *EnvelopeLocks) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeLocks) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeLocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeLocks(val *EnvelopeLocks) *NullableEnvelopeLocks {
	return &NullableEnvelopeLocks{value: val, isSet: true}
}

func (v NullableEnvelopeLocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeLocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


