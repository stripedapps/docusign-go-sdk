/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConditionalRecipientRuleCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalRecipientRuleCondition{}

// ConditionalRecipientRuleCondition 
type ConditionalRecipientRuleCondition struct {
	// 
	Filters []ConditionalRecipientRuleFilter `json:"filters,omitempty"`
	// An integer that specifies the order in which rules are processed. Lower values are processed before higher values.
	Order *string `json:"order,omitempty"`
	// An identifier for the recipient. After assigning this value in a `recipient` object, you can reference it in the `conditions` object to set the recipient as a conditional recipient. For an example, see [How to use conditional recipients](/docs/esign-rest-api/how-to/use-conditional-recipients/). 
	RecipientLabel *string `json:"recipientLabel,omitempty"`
}

// NewConditionalRecipientRuleCondition instantiates a new ConditionalRecipientRuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalRecipientRuleCondition() *ConditionalRecipientRuleCondition {
	this := ConditionalRecipientRuleCondition{}
	return &this
}

// NewConditionalRecipientRuleConditionWithDefaults instantiates a new ConditionalRecipientRuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalRecipientRuleConditionWithDefaults() *ConditionalRecipientRuleCondition {
	this := ConditionalRecipientRuleCondition{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ConditionalRecipientRuleCondition) GetFilters() []ConditionalRecipientRuleFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []ConditionalRecipientRuleFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalRecipientRuleCondition) GetFiltersOk() ([]ConditionalRecipientRuleFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ConditionalRecipientRuleCondition) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []ConditionalRecipientRuleFilter and assigns it to the Filters field.
func (o *ConditionalRecipientRuleCondition) SetFilters(v []ConditionalRecipientRuleFilter) {
	o.Filters = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ConditionalRecipientRuleCondition) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalRecipientRuleCondition) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ConditionalRecipientRuleCondition) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *ConditionalRecipientRuleCondition) SetOrder(v string) {
	o.Order = &v
}

// GetRecipientLabel returns the RecipientLabel field value if set, zero value otherwise.
func (o *ConditionalRecipientRuleCondition) GetRecipientLabel() string {
	if o == nil || IsNil(o.RecipientLabel) {
		var ret string
		return ret
	}
	return *o.RecipientLabel
}

// GetRecipientLabelOk returns a tuple with the RecipientLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalRecipientRuleCondition) GetRecipientLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientLabel) {
		return nil, false
	}
	return o.RecipientLabel, true
}

// HasRecipientLabel returns a boolean if a field has been set.
func (o *ConditionalRecipientRuleCondition) HasRecipientLabel() bool {
	if o != nil && !IsNil(o.RecipientLabel) {
		return true
	}

	return false
}

// SetRecipientLabel gets a reference to the given string and assigns it to the RecipientLabel field.
func (o *ConditionalRecipientRuleCondition) SetRecipientLabel(v string) {
	o.RecipientLabel = &v
}

func (o ConditionalRecipientRuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalRecipientRuleCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.RecipientLabel) {
		toSerialize["recipientLabel"] = o.RecipientLabel
	}
	return toSerialize, nil
}

type NullableConditionalRecipientRuleCondition struct {
	value *ConditionalRecipientRuleCondition
	isSet bool
}

func (v NullableConditionalRecipientRuleCondition) Get() *ConditionalRecipientRuleCondition {
	return v.value
}

func (v *NullableConditionalRecipientRuleCondition) Set(val *ConditionalRecipientRuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalRecipientRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalRecipientRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalRecipientRuleCondition(val *ConditionalRecipientRuleCondition) *NullableConditionalRecipientRuleCondition {
	return &NullableConditionalRecipientRuleCondition{value: val, isSet: true}
}

func (v NullableConditionalRecipientRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalRecipientRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


