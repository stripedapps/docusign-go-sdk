/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CorrectViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorrectViewRequest{}

// CorrectViewRequest The request body for the [EnvelopeViews: createCorrect](/docs/esign-rest-api/reference/envelopes/envelopeviews/createcorrect/) method.
type CorrectViewRequest struct {
	// 
	BeginOnTagger *string `json:"beginOnTagger,omitempty"`
	// (Required) The URL to which the user should be redirected after the view session has ended.  Maximum Length: 470 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL Be sure to include `https://` in the URL or redirecting might fail on some browsers.  When DocuSign redirects to this URL, it will include an `event` query parameter that your app can use:  * `send`: User corrected and sent the envelope. * `save`: User saved the envelope. * `cancel`: User canceled the transaction. * `error`: There was an error when performing the correct or send. * `sessionEnd`: The session ended before the user completed a different action. 
	ReturnUrl *string `json:"returnUrl,omitempty"`
	// Specifies whether the window is displayed with or without dressing.
	SuppressNavigation *string `json:"suppressNavigation,omitempty"`
	// 
	ViewUrl *string `json:"viewUrl,omitempty"`
}

// NewCorrectViewRequest instantiates a new CorrectViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorrectViewRequest() *CorrectViewRequest {
	this := CorrectViewRequest{}
	return &this
}

// NewCorrectViewRequestWithDefaults instantiates a new CorrectViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorrectViewRequestWithDefaults() *CorrectViewRequest {
	this := CorrectViewRequest{}
	return &this
}

// GetBeginOnTagger returns the BeginOnTagger field value if set, zero value otherwise.
func (o *CorrectViewRequest) GetBeginOnTagger() string {
	if o == nil || IsNil(o.BeginOnTagger) {
		var ret string
		return ret
	}
	return *o.BeginOnTagger
}

// GetBeginOnTaggerOk returns a tuple with the BeginOnTagger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorrectViewRequest) GetBeginOnTaggerOk() (*string, bool) {
	if o == nil || IsNil(o.BeginOnTagger) {
		return nil, false
	}
	return o.BeginOnTagger, true
}

// HasBeginOnTagger returns a boolean if a field has been set.
func (o *CorrectViewRequest) HasBeginOnTagger() bool {
	if o != nil && !IsNil(o.BeginOnTagger) {
		return true
	}

	return false
}

// SetBeginOnTagger gets a reference to the given string and assigns it to the BeginOnTagger field.
func (o *CorrectViewRequest) SetBeginOnTagger(v string) {
	o.BeginOnTagger = &v
}

// GetReturnUrl returns the ReturnUrl field value if set, zero value otherwise.
func (o *CorrectViewRequest) GetReturnUrl() string {
	if o == nil || IsNil(o.ReturnUrl) {
		var ret string
		return ret
	}
	return *o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorrectViewRequest) GetReturnUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnUrl) {
		return nil, false
	}
	return o.ReturnUrl, true
}

// HasReturnUrl returns a boolean if a field has been set.
func (o *CorrectViewRequest) HasReturnUrl() bool {
	if o != nil && !IsNil(o.ReturnUrl) {
		return true
	}

	return false
}

// SetReturnUrl gets a reference to the given string and assigns it to the ReturnUrl field.
func (o *CorrectViewRequest) SetReturnUrl(v string) {
	o.ReturnUrl = &v
}

// GetSuppressNavigation returns the SuppressNavigation field value if set, zero value otherwise.
func (o *CorrectViewRequest) GetSuppressNavigation() string {
	if o == nil || IsNil(o.SuppressNavigation) {
		var ret string
		return ret
	}
	return *o.SuppressNavigation
}

// GetSuppressNavigationOk returns a tuple with the SuppressNavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorrectViewRequest) GetSuppressNavigationOk() (*string, bool) {
	if o == nil || IsNil(o.SuppressNavigation) {
		return nil, false
	}
	return o.SuppressNavigation, true
}

// HasSuppressNavigation returns a boolean if a field has been set.
func (o *CorrectViewRequest) HasSuppressNavigation() bool {
	if o != nil && !IsNil(o.SuppressNavigation) {
		return true
	}

	return false
}

// SetSuppressNavigation gets a reference to the given string and assigns it to the SuppressNavigation field.
func (o *CorrectViewRequest) SetSuppressNavigation(v string) {
	o.SuppressNavigation = &v
}

// GetViewUrl returns the ViewUrl field value if set, zero value otherwise.
func (o *CorrectViewRequest) GetViewUrl() string {
	if o == nil || IsNil(o.ViewUrl) {
		var ret string
		return ret
	}
	return *o.ViewUrl
}

// GetViewUrlOk returns a tuple with the ViewUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorrectViewRequest) GetViewUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ViewUrl) {
		return nil, false
	}
	return o.ViewUrl, true
}

// HasViewUrl returns a boolean if a field has been set.
func (o *CorrectViewRequest) HasViewUrl() bool {
	if o != nil && !IsNil(o.ViewUrl) {
		return true
	}

	return false
}

// SetViewUrl gets a reference to the given string and assigns it to the ViewUrl field.
func (o *CorrectViewRequest) SetViewUrl(v string) {
	o.ViewUrl = &v
}

func (o CorrectViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorrectViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeginOnTagger) {
		toSerialize["beginOnTagger"] = o.BeginOnTagger
	}
	if !IsNil(o.ReturnUrl) {
		toSerialize["returnUrl"] = o.ReturnUrl
	}
	if !IsNil(o.SuppressNavigation) {
		toSerialize["suppressNavigation"] = o.SuppressNavigation
	}
	if !IsNil(o.ViewUrl) {
		toSerialize["viewUrl"] = o.ViewUrl
	}
	return toSerialize, nil
}

type NullableCorrectViewRequest struct {
	value *CorrectViewRequest
	isSet bool
}

func (v NullableCorrectViewRequest) Get() *CorrectViewRequest {
	return v.value
}

func (v *NullableCorrectViewRequest) Set(val *CorrectViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCorrectViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCorrectViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorrectViewRequest(val *CorrectViewRequest) *NullableCorrectViewRequest {
	return &NullableCorrectViewRequest{value: val, isSet: true}
}

func (v NullableCorrectViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorrectViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


