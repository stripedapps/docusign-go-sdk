/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CompositeTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeTemplate{}

// CompositeTemplate This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.  [composite]: /docs/esign-rest-api/esign101/concepts/templates/composite/
type CompositeTemplate struct {
	// The ID of this composite template. This ID is used as a reference when adding document object information. If used, the document's `content-disposition` must include the composite template ID to which the document should be added. If a composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.
	CompositeTemplateId *string `json:"compositeTemplateId,omitempty"`
	Document *Document `json:"document,omitempty"`
	//  Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value.
	InlineTemplates []InlineTemplate `json:"inlineTemplates,omitempty"`
	// A number representing the sequence in which to apply the template that contains the PDF metadata.  Example: `4`
	PdfMetaDataTemplateSequence *string `json:"pdfMetaDataTemplateSequence,omitempty"`
	// Zero or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value.
	ServerTemplates []ServerTemplate `json:"serverTemplates,omitempty"`
}

// NewCompositeTemplate instantiates a new CompositeTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeTemplate() *CompositeTemplate {
	this := CompositeTemplate{}
	return &this
}

// NewCompositeTemplateWithDefaults instantiates a new CompositeTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeTemplateWithDefaults() *CompositeTemplate {
	this := CompositeTemplate{}
	return &this
}

// GetCompositeTemplateId returns the CompositeTemplateId field value if set, zero value otherwise.
func (o *CompositeTemplate) GetCompositeTemplateId() string {
	if o == nil || IsNil(o.CompositeTemplateId) {
		var ret string
		return ret
	}
	return *o.CompositeTemplateId
}

// GetCompositeTemplateIdOk returns a tuple with the CompositeTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeTemplate) GetCompositeTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeTemplateId) {
		return nil, false
	}
	return o.CompositeTemplateId, true
}

// HasCompositeTemplateId returns a boolean if a field has been set.
func (o *CompositeTemplate) HasCompositeTemplateId() bool {
	if o != nil && !IsNil(o.CompositeTemplateId) {
		return true
	}

	return false
}

// SetCompositeTemplateId gets a reference to the given string and assigns it to the CompositeTemplateId field.
func (o *CompositeTemplate) SetCompositeTemplateId(v string) {
	o.CompositeTemplateId = &v
}

// GetDocument returns the Document field value if set, zero value otherwise.
func (o *CompositeTemplate) GetDocument() Document {
	if o == nil || IsNil(o.Document) {
		var ret Document
		return ret
	}
	return *o.Document
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeTemplate) GetDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.Document) {
		return nil, false
	}
	return o.Document, true
}

// HasDocument returns a boolean if a field has been set.
func (o *CompositeTemplate) HasDocument() bool {
	if o != nil && !IsNil(o.Document) {
		return true
	}

	return false
}

// SetDocument gets a reference to the given Document and assigns it to the Document field.
func (o *CompositeTemplate) SetDocument(v Document) {
	o.Document = &v
}

// GetInlineTemplates returns the InlineTemplates field value if set, zero value otherwise.
func (o *CompositeTemplate) GetInlineTemplates() []InlineTemplate {
	if o == nil || IsNil(o.InlineTemplates) {
		var ret []InlineTemplate
		return ret
	}
	return o.InlineTemplates
}

// GetInlineTemplatesOk returns a tuple with the InlineTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeTemplate) GetInlineTemplatesOk() ([]InlineTemplate, bool) {
	if o == nil || IsNil(o.InlineTemplates) {
		return nil, false
	}
	return o.InlineTemplates, true
}

// HasInlineTemplates returns a boolean if a field has been set.
func (o *CompositeTemplate) HasInlineTemplates() bool {
	if o != nil && !IsNil(o.InlineTemplates) {
		return true
	}

	return false
}

// SetInlineTemplates gets a reference to the given []InlineTemplate and assigns it to the InlineTemplates field.
func (o *CompositeTemplate) SetInlineTemplates(v []InlineTemplate) {
	o.InlineTemplates = v
}

// GetPdfMetaDataTemplateSequence returns the PdfMetaDataTemplateSequence field value if set, zero value otherwise.
func (o *CompositeTemplate) GetPdfMetaDataTemplateSequence() string {
	if o == nil || IsNil(o.PdfMetaDataTemplateSequence) {
		var ret string
		return ret
	}
	return *o.PdfMetaDataTemplateSequence
}

// GetPdfMetaDataTemplateSequenceOk returns a tuple with the PdfMetaDataTemplateSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeTemplate) GetPdfMetaDataTemplateSequenceOk() (*string, bool) {
	if o == nil || IsNil(o.PdfMetaDataTemplateSequence) {
		return nil, false
	}
	return o.PdfMetaDataTemplateSequence, true
}

// HasPdfMetaDataTemplateSequence returns a boolean if a field has been set.
func (o *CompositeTemplate) HasPdfMetaDataTemplateSequence() bool {
	if o != nil && !IsNil(o.PdfMetaDataTemplateSequence) {
		return true
	}

	return false
}

// SetPdfMetaDataTemplateSequence gets a reference to the given string and assigns it to the PdfMetaDataTemplateSequence field.
func (o *CompositeTemplate) SetPdfMetaDataTemplateSequence(v string) {
	o.PdfMetaDataTemplateSequence = &v
}

// GetServerTemplates returns the ServerTemplates field value if set, zero value otherwise.
func (o *CompositeTemplate) GetServerTemplates() []ServerTemplate {
	if o == nil || IsNil(o.ServerTemplates) {
		var ret []ServerTemplate
		return ret
	}
	return o.ServerTemplates
}

// GetServerTemplatesOk returns a tuple with the ServerTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeTemplate) GetServerTemplatesOk() ([]ServerTemplate, bool) {
	if o == nil || IsNil(o.ServerTemplates) {
		return nil, false
	}
	return o.ServerTemplates, true
}

// HasServerTemplates returns a boolean if a field has been set.
func (o *CompositeTemplate) HasServerTemplates() bool {
	if o != nil && !IsNil(o.ServerTemplates) {
		return true
	}

	return false
}

// SetServerTemplates gets a reference to the given []ServerTemplate and assigns it to the ServerTemplates field.
func (o *CompositeTemplate) SetServerTemplates(v []ServerTemplate) {
	o.ServerTemplates = v
}

func (o CompositeTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompositeTemplateId) {
		toSerialize["compositeTemplateId"] = o.CompositeTemplateId
	}
	if !IsNil(o.Document) {
		toSerialize["document"] = o.Document
	}
	if !IsNil(o.InlineTemplates) {
		toSerialize["inlineTemplates"] = o.InlineTemplates
	}
	if !IsNil(o.PdfMetaDataTemplateSequence) {
		toSerialize["pdfMetaDataTemplateSequence"] = o.PdfMetaDataTemplateSequence
	}
	if !IsNil(o.ServerTemplates) {
		toSerialize["serverTemplates"] = o.ServerTemplates
	}
	return toSerialize, nil
}

type NullableCompositeTemplate struct {
	value *CompositeTemplate
	isSet bool
}

func (v NullableCompositeTemplate) Get() *CompositeTemplate {
	return v.value
}

func (v *NullableCompositeTemplate) Set(val *CompositeTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeTemplate(val *CompositeTemplate) *NullableCompositeTemplate {
	return &NullableCompositeTemplate{value: val, isSet: true}
}

func (v NullableCompositeTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


