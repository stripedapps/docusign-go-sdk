/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotification{}

// EventNotification Use this object to configure a [DocuSign Connect webhook](/platform/webhooks/connect/).
type EventNotification struct {
	// 
	DeliveryMode *string `json:"deliveryMode,omitempty"`
	// A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property.   To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
	EnvelopeEvents []EnvelopeEvent `json:"envelopeEvents,omitempty"`
	EventData *ConnectEventData `json:"eventData,omitempty"`
	// A comma-separated list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `urlToPublishTo` property.  Set this property when you are using the [JSON SIM event model](/platform/webhooks/connect/improved-json-sim-event-model/). If you are instead using any of [the legacy event message formats](/platform/webhooks/connect/legacy-message-formats/), set either the `envelopeEvents` property or the `recipientEvents` property.  The [possible event statuses](/platform/webhooks/connect/improved-json-sim-event-model/#eventreference) are:  * `envelope-created` * `envelope-sent` * `envelope-resent` * `envelope-delivered` * `envelope-completed` * `envelope-declined` * `envelope-voided` * `recipient-authenticationfailed` * `recipient-autoresponded` * `recipient-declined` * `recipient-delivered` * `recipient-completed` * `recipient-sent` * `recipient-resent` * `template-created` * `template-modified` * `template-deleted` * `envelope-corrected` * `envelope-purge` * `envelope-deleted` * `envelope-discard` * `recipient-reassign` * `recipient-delegate` * `recipient-finish-later` * `click-agreed` * `click-declined` 
	Events []string `json:"events,omitempty"`
	// When **true,** the Connect Service includes the Certificate of Completion with completed envelopes. 
	IncludeCertificateOfCompletion *string `json:"includeCertificateOfCompletion,omitempty"`
	// When **true,** the Connect service will digitally sign the data. The signature will be included in the message.
	IncludeCertificateWithSoap *string `json:"includeCertificateWithSoap,omitempty"`
	// When **true,** the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. 
	IncludeDocumentFields *string `json:"includeDocumentFields,omitempty"`
	// When **true,** the Connect webhook messages will include the envelope's PDF documents. Including the PDF documents greatly increases the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger.
	IncludeDocuments *string `json:"includeDocuments,omitempty"`
	// When **true,** this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message. 
	IncludeEnvelopeVoidReason *string `json:"includeEnvelopeVoidReason,omitempty"`
	// When **true,** HMAC headers will be included with the webhook notifications.  **Note:** [HMAC must enabled](/platform/webhooks/connect/hmac/) at the account level with [one or more HMAC secrets](/platform/webhooks/connect/setting-up-hmac/).
	IncludeHMAC *string `json:"includeHMAC,omitempty"`
	// 
	IncludeOAuth *string `json:"includeOAuth,omitempty"`
	// When **true,** Connect will include the sender account as Custom Field in the data.
	IncludeSenderAccountAsCustomField *string `json:"includeSenderAccountAsCustomField,omitempty"`
	// When **true,** the envelope's time zone information is included in the webhook messages. 
	IncludeTimeZone *string `json:"includeTimeZone,omitempty"`
	// 
	IntegratorManaged *string `json:"integratorManaged,omitempty"`
	// When **true,** the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](/docs/esign-rest-api/reference/connect/connectevents/).
	LoggingEnabled *string `json:"loggingEnabled,omitempty"`
	// A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the URL property.  To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
	RecipientEvents []RecipientEvent `json:"recipientEvents,omitempty"`
	// When **true,** the DocuSign Connect service checks that the message was received and retries on failures. 
	RequireAcknowledgment *string `json:"requireAcknowledgment,omitempty"`
	// When **true,** Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. 
	SignMessageWithX509Cert *string `json:"signMessageWithX509Cert,omitempty"`
	// The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true.
	SoapNameSpace *string `json:"soapNameSpace,omitempty"`
	// The endpoint to which Connect should send webhook notification messages via an HTTPS POST request. The URL must start with `https`. The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not acceptable, but you can use free certificates from Let's Encrypt.  The maximum length of this property is 4096 bytes. 
	Url *string `json:"url,omitempty"`
	// When **true,** this tells the Connect service that the user's endpoint has implemented a SOAP interface. 
	UseSoapInterface *string `json:"useSoapInterface,omitempty"`
}

// NewEventNotification instantiates a new EventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotification() *EventNotification {
	this := EventNotification{}
	return &this
}

// NewEventNotificationWithDefaults instantiates a new EventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationWithDefaults() *EventNotification {
	this := EventNotification{}
	return &this
}

// GetDeliveryMode returns the DeliveryMode field value if set, zero value otherwise.
func (o *EventNotification) GetDeliveryMode() string {
	if o == nil || IsNil(o.DeliveryMode) {
		var ret string
		return ret
	}
	return *o.DeliveryMode
}

// GetDeliveryModeOk returns a tuple with the DeliveryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetDeliveryModeOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryMode) {
		return nil, false
	}
	return o.DeliveryMode, true
}

// HasDeliveryMode returns a boolean if a field has been set.
func (o *EventNotification) HasDeliveryMode() bool {
	if o != nil && !IsNil(o.DeliveryMode) {
		return true
	}

	return false
}

// SetDeliveryMode gets a reference to the given string and assigns it to the DeliveryMode field.
func (o *EventNotification) SetDeliveryMode(v string) {
	o.DeliveryMode = &v
}

// GetEnvelopeEvents returns the EnvelopeEvents field value if set, zero value otherwise.
func (o *EventNotification) GetEnvelopeEvents() []EnvelopeEvent {
	if o == nil || IsNil(o.EnvelopeEvents) {
		var ret []EnvelopeEvent
		return ret
	}
	return o.EnvelopeEvents
}

// GetEnvelopeEventsOk returns a tuple with the EnvelopeEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetEnvelopeEventsOk() ([]EnvelopeEvent, bool) {
	if o == nil || IsNil(o.EnvelopeEvents) {
		return nil, false
	}
	return o.EnvelopeEvents, true
}

// HasEnvelopeEvents returns a boolean if a field has been set.
func (o *EventNotification) HasEnvelopeEvents() bool {
	if o != nil && !IsNil(o.EnvelopeEvents) {
		return true
	}

	return false
}

// SetEnvelopeEvents gets a reference to the given []EnvelopeEvent and assigns it to the EnvelopeEvents field.
func (o *EventNotification) SetEnvelopeEvents(v []EnvelopeEvent) {
	o.EnvelopeEvents = v
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *EventNotification) GetEventData() ConnectEventData {
	if o == nil || IsNil(o.EventData) {
		var ret ConnectEventData
		return ret
	}
	return *o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetEventDataOk() (*ConnectEventData, bool) {
	if o == nil || IsNil(o.EventData) {
		return nil, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *EventNotification) HasEventData() bool {
	if o != nil && !IsNil(o.EventData) {
		return true
	}

	return false
}

// SetEventData gets a reference to the given ConnectEventData and assigns it to the EventData field.
func (o *EventNotification) SetEventData(v ConnectEventData) {
	o.EventData = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *EventNotification) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *EventNotification) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *EventNotification) SetEvents(v []string) {
	o.Events = v
}

// GetIncludeCertificateOfCompletion returns the IncludeCertificateOfCompletion field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeCertificateOfCompletion() string {
	if o == nil || IsNil(o.IncludeCertificateOfCompletion) {
		var ret string
		return ret
	}
	return *o.IncludeCertificateOfCompletion
}

// GetIncludeCertificateOfCompletionOk returns a tuple with the IncludeCertificateOfCompletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeCertificateOfCompletionOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeCertificateOfCompletion) {
		return nil, false
	}
	return o.IncludeCertificateOfCompletion, true
}

// HasIncludeCertificateOfCompletion returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeCertificateOfCompletion() bool {
	if o != nil && !IsNil(o.IncludeCertificateOfCompletion) {
		return true
	}

	return false
}

// SetIncludeCertificateOfCompletion gets a reference to the given string and assigns it to the IncludeCertificateOfCompletion field.
func (o *EventNotification) SetIncludeCertificateOfCompletion(v string) {
	o.IncludeCertificateOfCompletion = &v
}

// GetIncludeCertificateWithSoap returns the IncludeCertificateWithSoap field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeCertificateWithSoap() string {
	if o == nil || IsNil(o.IncludeCertificateWithSoap) {
		var ret string
		return ret
	}
	return *o.IncludeCertificateWithSoap
}

// GetIncludeCertificateWithSoapOk returns a tuple with the IncludeCertificateWithSoap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeCertificateWithSoapOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeCertificateWithSoap) {
		return nil, false
	}
	return o.IncludeCertificateWithSoap, true
}

// HasIncludeCertificateWithSoap returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeCertificateWithSoap() bool {
	if o != nil && !IsNil(o.IncludeCertificateWithSoap) {
		return true
	}

	return false
}

// SetIncludeCertificateWithSoap gets a reference to the given string and assigns it to the IncludeCertificateWithSoap field.
func (o *EventNotification) SetIncludeCertificateWithSoap(v string) {
	o.IncludeCertificateWithSoap = &v
}

// GetIncludeDocumentFields returns the IncludeDocumentFields field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeDocumentFields() string {
	if o == nil || IsNil(o.IncludeDocumentFields) {
		var ret string
		return ret
	}
	return *o.IncludeDocumentFields
}

// GetIncludeDocumentFieldsOk returns a tuple with the IncludeDocumentFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeDocumentFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeDocumentFields) {
		return nil, false
	}
	return o.IncludeDocumentFields, true
}

// HasIncludeDocumentFields returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeDocumentFields() bool {
	if o != nil && !IsNil(o.IncludeDocumentFields) {
		return true
	}

	return false
}

// SetIncludeDocumentFields gets a reference to the given string and assigns it to the IncludeDocumentFields field.
func (o *EventNotification) SetIncludeDocumentFields(v string) {
	o.IncludeDocumentFields = &v
}

// GetIncludeDocuments returns the IncludeDocuments field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeDocuments() string {
	if o == nil || IsNil(o.IncludeDocuments) {
		var ret string
		return ret
	}
	return *o.IncludeDocuments
}

// GetIncludeDocumentsOk returns a tuple with the IncludeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeDocumentsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeDocuments) {
		return nil, false
	}
	return o.IncludeDocuments, true
}

// HasIncludeDocuments returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeDocuments() bool {
	if o != nil && !IsNil(o.IncludeDocuments) {
		return true
	}

	return false
}

// SetIncludeDocuments gets a reference to the given string and assigns it to the IncludeDocuments field.
func (o *EventNotification) SetIncludeDocuments(v string) {
	o.IncludeDocuments = &v
}

// GetIncludeEnvelopeVoidReason returns the IncludeEnvelopeVoidReason field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeEnvelopeVoidReason() string {
	if o == nil || IsNil(o.IncludeEnvelopeVoidReason) {
		var ret string
		return ret
	}
	return *o.IncludeEnvelopeVoidReason
}

// GetIncludeEnvelopeVoidReasonOk returns a tuple with the IncludeEnvelopeVoidReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeEnvelopeVoidReasonOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeEnvelopeVoidReason) {
		return nil, false
	}
	return o.IncludeEnvelopeVoidReason, true
}

// HasIncludeEnvelopeVoidReason returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeEnvelopeVoidReason() bool {
	if o != nil && !IsNil(o.IncludeEnvelopeVoidReason) {
		return true
	}

	return false
}

// SetIncludeEnvelopeVoidReason gets a reference to the given string and assigns it to the IncludeEnvelopeVoidReason field.
func (o *EventNotification) SetIncludeEnvelopeVoidReason(v string) {
	o.IncludeEnvelopeVoidReason = &v
}

// GetIncludeHMAC returns the IncludeHMAC field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeHMAC() string {
	if o == nil || IsNil(o.IncludeHMAC) {
		var ret string
		return ret
	}
	return *o.IncludeHMAC
}

// GetIncludeHMACOk returns a tuple with the IncludeHMAC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeHMACOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeHMAC) {
		return nil, false
	}
	return o.IncludeHMAC, true
}

// HasIncludeHMAC returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeHMAC() bool {
	if o != nil && !IsNil(o.IncludeHMAC) {
		return true
	}

	return false
}

// SetIncludeHMAC gets a reference to the given string and assigns it to the IncludeHMAC field.
func (o *EventNotification) SetIncludeHMAC(v string) {
	o.IncludeHMAC = &v
}

// GetIncludeOAuth returns the IncludeOAuth field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeOAuth() string {
	if o == nil || IsNil(o.IncludeOAuth) {
		var ret string
		return ret
	}
	return *o.IncludeOAuth
}

// GetIncludeOAuthOk returns a tuple with the IncludeOAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeOAuthOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeOAuth) {
		return nil, false
	}
	return o.IncludeOAuth, true
}

// HasIncludeOAuth returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeOAuth() bool {
	if o != nil && !IsNil(o.IncludeOAuth) {
		return true
	}

	return false
}

// SetIncludeOAuth gets a reference to the given string and assigns it to the IncludeOAuth field.
func (o *EventNotification) SetIncludeOAuth(v string) {
	o.IncludeOAuth = &v
}

// GetIncludeSenderAccountAsCustomField returns the IncludeSenderAccountAsCustomField field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeSenderAccountAsCustomField() string {
	if o == nil || IsNil(o.IncludeSenderAccountAsCustomField) {
		var ret string
		return ret
	}
	return *o.IncludeSenderAccountAsCustomField
}

// GetIncludeSenderAccountAsCustomFieldOk returns a tuple with the IncludeSenderAccountAsCustomField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeSenderAccountAsCustomFieldOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeSenderAccountAsCustomField) {
		return nil, false
	}
	return o.IncludeSenderAccountAsCustomField, true
}

// HasIncludeSenderAccountAsCustomField returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeSenderAccountAsCustomField() bool {
	if o != nil && !IsNil(o.IncludeSenderAccountAsCustomField) {
		return true
	}

	return false
}

// SetIncludeSenderAccountAsCustomField gets a reference to the given string and assigns it to the IncludeSenderAccountAsCustomField field.
func (o *EventNotification) SetIncludeSenderAccountAsCustomField(v string) {
	o.IncludeSenderAccountAsCustomField = &v
}

// GetIncludeTimeZone returns the IncludeTimeZone field value if set, zero value otherwise.
func (o *EventNotification) GetIncludeTimeZone() string {
	if o == nil || IsNil(o.IncludeTimeZone) {
		var ret string
		return ret
	}
	return *o.IncludeTimeZone
}

// GetIncludeTimeZoneOk returns a tuple with the IncludeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIncludeTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeTimeZone) {
		return nil, false
	}
	return o.IncludeTimeZone, true
}

// HasIncludeTimeZone returns a boolean if a field has been set.
func (o *EventNotification) HasIncludeTimeZone() bool {
	if o != nil && !IsNil(o.IncludeTimeZone) {
		return true
	}

	return false
}

// SetIncludeTimeZone gets a reference to the given string and assigns it to the IncludeTimeZone field.
func (o *EventNotification) SetIncludeTimeZone(v string) {
	o.IncludeTimeZone = &v
}

// GetIntegratorManaged returns the IntegratorManaged field value if set, zero value otherwise.
func (o *EventNotification) GetIntegratorManaged() string {
	if o == nil || IsNil(o.IntegratorManaged) {
		var ret string
		return ret
	}
	return *o.IntegratorManaged
}

// GetIntegratorManagedOk returns a tuple with the IntegratorManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetIntegratorManagedOk() (*string, bool) {
	if o == nil || IsNil(o.IntegratorManaged) {
		return nil, false
	}
	return o.IntegratorManaged, true
}

// HasIntegratorManaged returns a boolean if a field has been set.
func (o *EventNotification) HasIntegratorManaged() bool {
	if o != nil && !IsNil(o.IntegratorManaged) {
		return true
	}

	return false
}

// SetIntegratorManaged gets a reference to the given string and assigns it to the IntegratorManaged field.
func (o *EventNotification) SetIntegratorManaged(v string) {
	o.IntegratorManaged = &v
}

// GetLoggingEnabled returns the LoggingEnabled field value if set, zero value otherwise.
func (o *EventNotification) GetLoggingEnabled() string {
	if o == nil || IsNil(o.LoggingEnabled) {
		var ret string
		return ret
	}
	return *o.LoggingEnabled
}

// GetLoggingEnabledOk returns a tuple with the LoggingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetLoggingEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.LoggingEnabled) {
		return nil, false
	}
	return o.LoggingEnabled, true
}

// HasLoggingEnabled returns a boolean if a field has been set.
func (o *EventNotification) HasLoggingEnabled() bool {
	if o != nil && !IsNil(o.LoggingEnabled) {
		return true
	}

	return false
}

// SetLoggingEnabled gets a reference to the given string and assigns it to the LoggingEnabled field.
func (o *EventNotification) SetLoggingEnabled(v string) {
	o.LoggingEnabled = &v
}

// GetRecipientEvents returns the RecipientEvents field value if set, zero value otherwise.
func (o *EventNotification) GetRecipientEvents() []RecipientEvent {
	if o == nil || IsNil(o.RecipientEvents) {
		var ret []RecipientEvent
		return ret
	}
	return o.RecipientEvents
}

// GetRecipientEventsOk returns a tuple with the RecipientEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetRecipientEventsOk() ([]RecipientEvent, bool) {
	if o == nil || IsNil(o.RecipientEvents) {
		return nil, false
	}
	return o.RecipientEvents, true
}

// HasRecipientEvents returns a boolean if a field has been set.
func (o *EventNotification) HasRecipientEvents() bool {
	if o != nil && !IsNil(o.RecipientEvents) {
		return true
	}

	return false
}

// SetRecipientEvents gets a reference to the given []RecipientEvent and assigns it to the RecipientEvents field.
func (o *EventNotification) SetRecipientEvents(v []RecipientEvent) {
	o.RecipientEvents = v
}

// GetRequireAcknowledgment returns the RequireAcknowledgment field value if set, zero value otherwise.
func (o *EventNotification) GetRequireAcknowledgment() string {
	if o == nil || IsNil(o.RequireAcknowledgment) {
		var ret string
		return ret
	}
	return *o.RequireAcknowledgment
}

// GetRequireAcknowledgmentOk returns a tuple with the RequireAcknowledgment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetRequireAcknowledgmentOk() (*string, bool) {
	if o == nil || IsNil(o.RequireAcknowledgment) {
		return nil, false
	}
	return o.RequireAcknowledgment, true
}

// HasRequireAcknowledgment returns a boolean if a field has been set.
func (o *EventNotification) HasRequireAcknowledgment() bool {
	if o != nil && !IsNil(o.RequireAcknowledgment) {
		return true
	}

	return false
}

// SetRequireAcknowledgment gets a reference to the given string and assigns it to the RequireAcknowledgment field.
func (o *EventNotification) SetRequireAcknowledgment(v string) {
	o.RequireAcknowledgment = &v
}

// GetSignMessageWithX509Cert returns the SignMessageWithX509Cert field value if set, zero value otherwise.
func (o *EventNotification) GetSignMessageWithX509Cert() string {
	if o == nil || IsNil(o.SignMessageWithX509Cert) {
		var ret string
		return ret
	}
	return *o.SignMessageWithX509Cert
}

// GetSignMessageWithX509CertOk returns a tuple with the SignMessageWithX509Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetSignMessageWithX509CertOk() (*string, bool) {
	if o == nil || IsNil(o.SignMessageWithX509Cert) {
		return nil, false
	}
	return o.SignMessageWithX509Cert, true
}

// HasSignMessageWithX509Cert returns a boolean if a field has been set.
func (o *EventNotification) HasSignMessageWithX509Cert() bool {
	if o != nil && !IsNil(o.SignMessageWithX509Cert) {
		return true
	}

	return false
}

// SetSignMessageWithX509Cert gets a reference to the given string and assigns it to the SignMessageWithX509Cert field.
func (o *EventNotification) SetSignMessageWithX509Cert(v string) {
	o.SignMessageWithX509Cert = &v
}

// GetSoapNameSpace returns the SoapNameSpace field value if set, zero value otherwise.
func (o *EventNotification) GetSoapNameSpace() string {
	if o == nil || IsNil(o.SoapNameSpace) {
		var ret string
		return ret
	}
	return *o.SoapNameSpace
}

// GetSoapNameSpaceOk returns a tuple with the SoapNameSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetSoapNameSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.SoapNameSpace) {
		return nil, false
	}
	return o.SoapNameSpace, true
}

// HasSoapNameSpace returns a boolean if a field has been set.
func (o *EventNotification) HasSoapNameSpace() bool {
	if o != nil && !IsNil(o.SoapNameSpace) {
		return true
	}

	return false
}

// SetSoapNameSpace gets a reference to the given string and assigns it to the SoapNameSpace field.
func (o *EventNotification) SetSoapNameSpace(v string) {
	o.SoapNameSpace = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *EventNotification) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EventNotification) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *EventNotification) SetUrl(v string) {
	o.Url = &v
}

// GetUseSoapInterface returns the UseSoapInterface field value if set, zero value otherwise.
func (o *EventNotification) GetUseSoapInterface() string {
	if o == nil || IsNil(o.UseSoapInterface) {
		var ret string
		return ret
	}
	return *o.UseSoapInterface
}

// GetUseSoapInterfaceOk returns a tuple with the UseSoapInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetUseSoapInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.UseSoapInterface) {
		return nil, false
	}
	return o.UseSoapInterface, true
}

// HasUseSoapInterface returns a boolean if a field has been set.
func (o *EventNotification) HasUseSoapInterface() bool {
	if o != nil && !IsNil(o.UseSoapInterface) {
		return true
	}

	return false
}

// SetUseSoapInterface gets a reference to the given string and assigns it to the UseSoapInterface field.
func (o *EventNotification) SetUseSoapInterface(v string) {
	o.UseSoapInterface = &v
}

func (o EventNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeliveryMode) {
		toSerialize["deliveryMode"] = o.DeliveryMode
	}
	if !IsNil(o.EnvelopeEvents) {
		toSerialize["envelopeEvents"] = o.EnvelopeEvents
	}
	if !IsNil(o.EventData) {
		toSerialize["eventData"] = o.EventData
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.IncludeCertificateOfCompletion) {
		toSerialize["includeCertificateOfCompletion"] = o.IncludeCertificateOfCompletion
	}
	if !IsNil(o.IncludeCertificateWithSoap) {
		toSerialize["includeCertificateWithSoap"] = o.IncludeCertificateWithSoap
	}
	if !IsNil(o.IncludeDocumentFields) {
		toSerialize["includeDocumentFields"] = o.IncludeDocumentFields
	}
	if !IsNil(o.IncludeDocuments) {
		toSerialize["includeDocuments"] = o.IncludeDocuments
	}
	if !IsNil(o.IncludeEnvelopeVoidReason) {
		toSerialize["includeEnvelopeVoidReason"] = o.IncludeEnvelopeVoidReason
	}
	if !IsNil(o.IncludeHMAC) {
		toSerialize["includeHMAC"] = o.IncludeHMAC
	}
	if !IsNil(o.IncludeOAuth) {
		toSerialize["includeOAuth"] = o.IncludeOAuth
	}
	if !IsNil(o.IncludeSenderAccountAsCustomField) {
		toSerialize["includeSenderAccountAsCustomField"] = o.IncludeSenderAccountAsCustomField
	}
	if !IsNil(o.IncludeTimeZone) {
		toSerialize["includeTimeZone"] = o.IncludeTimeZone
	}
	if !IsNil(o.IntegratorManaged) {
		toSerialize["integratorManaged"] = o.IntegratorManaged
	}
	if !IsNil(o.LoggingEnabled) {
		toSerialize["loggingEnabled"] = o.LoggingEnabled
	}
	if !IsNil(o.RecipientEvents) {
		toSerialize["recipientEvents"] = o.RecipientEvents
	}
	if !IsNil(o.RequireAcknowledgment) {
		toSerialize["requireAcknowledgment"] = o.RequireAcknowledgment
	}
	if !IsNil(o.SignMessageWithX509Cert) {
		toSerialize["signMessageWithX509Cert"] = o.SignMessageWithX509Cert
	}
	if !IsNil(o.SoapNameSpace) {
		toSerialize["soapNameSpace"] = o.SoapNameSpace
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UseSoapInterface) {
		toSerialize["useSoapInterface"] = o.UseSoapInterface
	}
	return toSerialize, nil
}

type NullableEventNotification struct {
	value *EventNotification
	isSet bool
}

func (v NullableEventNotification) Get() *EventNotification {
	return v.value
}

func (v *NullableEventNotification) Set(val *EventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotification(val *EventNotification) *NullableEventNotification {
	return &NullableEventNotification{value: val, isSet: true}
}

func (v NullableEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


