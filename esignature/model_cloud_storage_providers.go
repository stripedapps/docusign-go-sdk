/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CloudStorageProviders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudStorageProviders{}

// CloudStorageProviders The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account.
type CloudStorageProviders struct {
	// An Array containing the storage providers associated with the user.
	StorageProviders []CloudStorageProvider `json:"storageProviders,omitempty"`
}

// NewCloudStorageProviders instantiates a new CloudStorageProviders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudStorageProviders() *CloudStorageProviders {
	this := CloudStorageProviders{}
	return &this
}

// NewCloudStorageProvidersWithDefaults instantiates a new CloudStorageProviders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudStorageProvidersWithDefaults() *CloudStorageProviders {
	this := CloudStorageProviders{}
	return &this
}

// GetStorageProviders returns the StorageProviders field value if set, zero value otherwise.
func (o *CloudStorageProviders) GetStorageProviders() []CloudStorageProvider {
	if o == nil || IsNil(o.StorageProviders) {
		var ret []CloudStorageProvider
		return ret
	}
	return o.StorageProviders
}

// GetStorageProvidersOk returns a tuple with the StorageProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorageProviders) GetStorageProvidersOk() ([]CloudStorageProvider, bool) {
	if o == nil || IsNil(o.StorageProviders) {
		return nil, false
	}
	return o.StorageProviders, true
}

// HasStorageProviders returns a boolean if a field has been set.
func (o *CloudStorageProviders) HasStorageProviders() bool {
	if o != nil && !IsNil(o.StorageProviders) {
		return true
	}

	return false
}

// SetStorageProviders gets a reference to the given []CloudStorageProvider and assigns it to the StorageProviders field.
func (o *CloudStorageProviders) SetStorageProviders(v []CloudStorageProvider) {
	o.StorageProviders = v
}

func (o CloudStorageProviders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudStorageProviders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StorageProviders) {
		toSerialize["storageProviders"] = o.StorageProviders
	}
	return toSerialize, nil
}

type NullableCloudStorageProviders struct {
	value *CloudStorageProviders
	isSet bool
}

func (v NullableCloudStorageProviders) Get() *CloudStorageProviders {
	return v.value
}

func (v *NullableCloudStorageProviders) Set(val *CloudStorageProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudStorageProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudStorageProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudStorageProviders(val *CloudStorageProviders) *NullableCloudStorageProviders {
	return &NullableCloudStorageProviders{value: val, isSet: true}
}

func (v NullableCloudStorageProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudStorageProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


