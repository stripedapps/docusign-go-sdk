/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserCustomSettingsAPIService UserCustomSettingsAPI service
type UserCustomSettingsAPIService service

type ApiUserCustomSettingsDeleteCustomSettingsRequest struct {
	ctx context.Context
	ApiService *UserCustomSettingsAPIService
	accountId string
	userId string
	customSettingsInformation *CustomSettingsInformation
}

func (r ApiUserCustomSettingsDeleteCustomSettingsRequest) CustomSettingsInformation(customSettingsInformation CustomSettingsInformation) ApiUserCustomSettingsDeleteCustomSettingsRequest {
	r.customSettingsInformation = &customSettingsInformation
	return r
}

func (r ApiUserCustomSettingsDeleteCustomSettingsRequest) Execute() (*CustomSettingsInformation, *http.Response, error) {
	return r.ApiService.UserCustomSettingsDeleteCustomSettingsExecute(r)
}

/*
UserCustomSettingsDeleteCustomSettings Deletes custom user settings for a specified user.

Deletes the specified custom user settings for a single user.

If the custom user settings you want to delete are grouped, you
must include the `X-DocuSign-User-Settings-Key` header
in the request:

`X-DocuSign-User-Settings-Key:group_name`

Where the `group_name` is your designated name for the group of
customer user settings.

If the `X-DocuSign-User-Settings-Key` header is not included,
only the custom user settings that were added without
a group are deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param userId The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
 @return ApiUserCustomSettingsDeleteCustomSettingsRequest
*/
func (a *UserCustomSettingsAPIService) UserCustomSettingsDeleteCustomSettings(ctx context.Context, accountId string, userId string) ApiUserCustomSettingsDeleteCustomSettingsRequest {
	return ApiUserCustomSettingsDeleteCustomSettingsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		userId: userId,
	}
}

// Execute executes the request
//  @return CustomSettingsInformation
func (a *UserCustomSettingsAPIService) UserCustomSettingsDeleteCustomSettingsExecute(r ApiUserCustomSettingsDeleteCustomSettingsRequest) (*CustomSettingsInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomSettingsInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCustomSettingsAPIService.UserCustomSettingsDeleteCustomSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/users/{userId}/custom_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customSettingsInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCustomSettingsGetCustomSettingsRequest struct {
	ctx context.Context
	ApiService *UserCustomSettingsAPIService
	accountId string
	userId string
}

func (r ApiUserCustomSettingsGetCustomSettingsRequest) Execute() (*CustomSettingsInformation, *http.Response, error) {
	return r.ApiService.UserCustomSettingsGetCustomSettingsExecute(r)
}

/*
UserCustomSettingsGetCustomSettings Retrieves the custom user settings for a specified user.

Retrieves a list of custom user settings for a single user.

Custom settings provide a flexible way to store and retrieve
custom user information that can be used in your own system.

**Note:** Custom user settings are not the same as user account
settings.


If the custom user settings you want to retrieve are grouped, you
must include the `X-DocuSign-User-Settings-Key` header
in the request:

`X-DocuSign-User-Settings-Key:group_name`

Where the `group_name` is your designated name for the group of
customer user settings.

If the `X-DocuSign-User-Settings-Key` header is not included, only the custom
user settings that were added without a group are retrieved.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param userId The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
 @return ApiUserCustomSettingsGetCustomSettingsRequest
*/
func (a *UserCustomSettingsAPIService) UserCustomSettingsGetCustomSettings(ctx context.Context, accountId string, userId string) ApiUserCustomSettingsGetCustomSettingsRequest {
	return ApiUserCustomSettingsGetCustomSettingsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		userId: userId,
	}
}

// Execute executes the request
//  @return CustomSettingsInformation
func (a *UserCustomSettingsAPIService) UserCustomSettingsGetCustomSettingsExecute(r ApiUserCustomSettingsGetCustomSettingsRequest) (*CustomSettingsInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomSettingsInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCustomSettingsAPIService.UserCustomSettingsGetCustomSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/users/{userId}/custom_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCustomSettingsPutCustomSettingsRequest struct {
	ctx context.Context
	ApiService *UserCustomSettingsAPIService
	accountId string
	userId string
	customSettingsInformation *CustomSettingsInformation
}

func (r ApiUserCustomSettingsPutCustomSettingsRequest) CustomSettingsInformation(customSettingsInformation CustomSettingsInformation) ApiUserCustomSettingsPutCustomSettingsRequest {
	r.customSettingsInformation = &customSettingsInformation
	return r
}

func (r ApiUserCustomSettingsPutCustomSettingsRequest) Execute() (*CustomSettingsInformation, *http.Response, error) {
	return r.ApiService.UserCustomSettingsPutCustomSettingsExecute(r)
}

/*
UserCustomSettingsPutCustomSettings Adds or updates custom user settings for the specified user.

Adds or updates custom user settings for the specified user.

**Note:** Custom user settings are not the same as user account
settings.

Custom settings provide a flexible way to store and retrieve
custom user information that you can use in your own system.

**Important:** There is a limit on the size for all the custom
user settings for a single user. The limit is 4,000 characters,
which includes the XML and JSON structure for the settings.

You can group custom user settings when adding them. Grouping
allows you to retrieve settings that are in a specific group,
instead of retrieving all the user custom settings.

To group custom user settings, include the
`X-DocuSign-User-Settings-Key` header in the request:

`X-DocuSign-User-Settings-Key:group_name`

Where the `group_name` is your designated name for the group of
customer user settings.

When getting or deleting grouped custom user settings, you must
include the `X-DocuSign-User-Settings-Key` header information.

Grouping custom user settings is not required and if the `X-DocuSign-User-Settings-Key`
header information is not included, the custom user settings are
added normally and can be retrieved or deleted without including
the `X-DocuSign-User-Settings-Key` header.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param userId The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
 @return ApiUserCustomSettingsPutCustomSettingsRequest
*/
func (a *UserCustomSettingsAPIService) UserCustomSettingsPutCustomSettings(ctx context.Context, accountId string, userId string) ApiUserCustomSettingsPutCustomSettingsRequest {
	return ApiUserCustomSettingsPutCustomSettingsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		userId: userId,
	}
}

// Execute executes the request
//  @return CustomSettingsInformation
func (a *UserCustomSettingsAPIService) UserCustomSettingsPutCustomSettingsExecute(r ApiUserCustomSettingsPutCustomSettingsRequest) (*CustomSettingsInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomSettingsInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCustomSettingsAPIService.UserCustomSettingsPutCustomSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/users/{userId}/custom_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customSettingsInformation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
