/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SenderEmailNotifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SenderEmailNotifications{}

// SenderEmailNotifications Contains the settings for the email notifications that senders receive about the envelopes that they send.
type SenderEmailNotifications struct {
	// When **true,** the sender receives an email notification if the signer changes.
	ChangedSigner *string `json:"changedSigner,omitempty"`
	// 
	ClickwrapResponsesLimitNotificationEmail *string `json:"clickwrapResponsesLimitNotificationEmail,omitempty"`
	// When **true,** the user receives only comments that mention their own user name.
	CommentsOnlyPrivateAndMention *string `json:"commentsOnlyPrivateAndMention,omitempty"`
	// When **true,** the user receives all comments.
	CommentsReceiveAll *string `json:"commentsReceiveAll,omitempty"`
	// When **true,** the sender receives an email notification if envelope delivery fails.
	DeliveryFailed *string `json:"deliveryFailed,omitempty"`
	// When **true,** the user receives an email notification when the envelope has been completed.
	EnvelopeComplete *string `json:"envelopeComplete,omitempty"`
	// When **true,** the user receives an email notification if offline signing failed.
	OfflineSigningFailed *string `json:"offlineSigningFailed,omitempty"`
	// 
	PowerformResponsesLimitNotificationEmail *string `json:"powerformResponsesLimitNotificationEmail,omitempty"`
	// When **true,** the user receives an email notification when a document purge occurs.
	PurgeDocuments *string `json:"purgeDocuments,omitempty"`
	// When **true,** the sender receives notification that a recipient viewed the envelope.
	RecipientViewed *string `json:"recipientViewed,omitempty"`
	// When **true,** the sender receives notification that the envelope was declined.
	SenderEnvelopeDeclined *string `json:"senderEnvelopeDeclined,omitempty"`
	// When **true,** the user receives an email notification if consent is withdrawn.
	WithdrawnConsent *string `json:"withdrawnConsent,omitempty"`
}

// NewSenderEmailNotifications instantiates a new SenderEmailNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSenderEmailNotifications() *SenderEmailNotifications {
	this := SenderEmailNotifications{}
	return &this
}

// NewSenderEmailNotificationsWithDefaults instantiates a new SenderEmailNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenderEmailNotificationsWithDefaults() *SenderEmailNotifications {
	this := SenderEmailNotifications{}
	return &this
}

// GetChangedSigner returns the ChangedSigner field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetChangedSigner() string {
	if o == nil || IsNil(o.ChangedSigner) {
		var ret string
		return ret
	}
	return *o.ChangedSigner
}

// GetChangedSignerOk returns a tuple with the ChangedSigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetChangedSignerOk() (*string, bool) {
	if o == nil || IsNil(o.ChangedSigner) {
		return nil, false
	}
	return o.ChangedSigner, true
}

// HasChangedSigner returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasChangedSigner() bool {
	if o != nil && !IsNil(o.ChangedSigner) {
		return true
	}

	return false
}

// SetChangedSigner gets a reference to the given string and assigns it to the ChangedSigner field.
func (o *SenderEmailNotifications) SetChangedSigner(v string) {
	o.ChangedSigner = &v
}

// GetClickwrapResponsesLimitNotificationEmail returns the ClickwrapResponsesLimitNotificationEmail field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetClickwrapResponsesLimitNotificationEmail() string {
	if o == nil || IsNil(o.ClickwrapResponsesLimitNotificationEmail) {
		var ret string
		return ret
	}
	return *o.ClickwrapResponsesLimitNotificationEmail
}

// GetClickwrapResponsesLimitNotificationEmailOk returns a tuple with the ClickwrapResponsesLimitNotificationEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetClickwrapResponsesLimitNotificationEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ClickwrapResponsesLimitNotificationEmail) {
		return nil, false
	}
	return o.ClickwrapResponsesLimitNotificationEmail, true
}

// HasClickwrapResponsesLimitNotificationEmail returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasClickwrapResponsesLimitNotificationEmail() bool {
	if o != nil && !IsNil(o.ClickwrapResponsesLimitNotificationEmail) {
		return true
	}

	return false
}

// SetClickwrapResponsesLimitNotificationEmail gets a reference to the given string and assigns it to the ClickwrapResponsesLimitNotificationEmail field.
func (o *SenderEmailNotifications) SetClickwrapResponsesLimitNotificationEmail(v string) {
	o.ClickwrapResponsesLimitNotificationEmail = &v
}

// GetCommentsOnlyPrivateAndMention returns the CommentsOnlyPrivateAndMention field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetCommentsOnlyPrivateAndMention() string {
	if o == nil || IsNil(o.CommentsOnlyPrivateAndMention) {
		var ret string
		return ret
	}
	return *o.CommentsOnlyPrivateAndMention
}

// GetCommentsOnlyPrivateAndMentionOk returns a tuple with the CommentsOnlyPrivateAndMention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetCommentsOnlyPrivateAndMentionOk() (*string, bool) {
	if o == nil || IsNil(o.CommentsOnlyPrivateAndMention) {
		return nil, false
	}
	return o.CommentsOnlyPrivateAndMention, true
}

// HasCommentsOnlyPrivateAndMention returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasCommentsOnlyPrivateAndMention() bool {
	if o != nil && !IsNil(o.CommentsOnlyPrivateAndMention) {
		return true
	}

	return false
}

// SetCommentsOnlyPrivateAndMention gets a reference to the given string and assigns it to the CommentsOnlyPrivateAndMention field.
func (o *SenderEmailNotifications) SetCommentsOnlyPrivateAndMention(v string) {
	o.CommentsOnlyPrivateAndMention = &v
}

// GetCommentsReceiveAll returns the CommentsReceiveAll field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetCommentsReceiveAll() string {
	if o == nil || IsNil(o.CommentsReceiveAll) {
		var ret string
		return ret
	}
	return *o.CommentsReceiveAll
}

// GetCommentsReceiveAllOk returns a tuple with the CommentsReceiveAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetCommentsReceiveAllOk() (*string, bool) {
	if o == nil || IsNil(o.CommentsReceiveAll) {
		return nil, false
	}
	return o.CommentsReceiveAll, true
}

// HasCommentsReceiveAll returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasCommentsReceiveAll() bool {
	if o != nil && !IsNil(o.CommentsReceiveAll) {
		return true
	}

	return false
}

// SetCommentsReceiveAll gets a reference to the given string and assigns it to the CommentsReceiveAll field.
func (o *SenderEmailNotifications) SetCommentsReceiveAll(v string) {
	o.CommentsReceiveAll = &v
}

// GetDeliveryFailed returns the DeliveryFailed field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetDeliveryFailed() string {
	if o == nil || IsNil(o.DeliveryFailed) {
		var ret string
		return ret
	}
	return *o.DeliveryFailed
}

// GetDeliveryFailedOk returns a tuple with the DeliveryFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetDeliveryFailedOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryFailed) {
		return nil, false
	}
	return o.DeliveryFailed, true
}

// HasDeliveryFailed returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasDeliveryFailed() bool {
	if o != nil && !IsNil(o.DeliveryFailed) {
		return true
	}

	return false
}

// SetDeliveryFailed gets a reference to the given string and assigns it to the DeliveryFailed field.
func (o *SenderEmailNotifications) SetDeliveryFailed(v string) {
	o.DeliveryFailed = &v
}

// GetEnvelopeComplete returns the EnvelopeComplete field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetEnvelopeComplete() string {
	if o == nil || IsNil(o.EnvelopeComplete) {
		var ret string
		return ret
	}
	return *o.EnvelopeComplete
}

// GetEnvelopeCompleteOk returns a tuple with the EnvelopeComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetEnvelopeCompleteOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeComplete) {
		return nil, false
	}
	return o.EnvelopeComplete, true
}

// HasEnvelopeComplete returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasEnvelopeComplete() bool {
	if o != nil && !IsNil(o.EnvelopeComplete) {
		return true
	}

	return false
}

// SetEnvelopeComplete gets a reference to the given string and assigns it to the EnvelopeComplete field.
func (o *SenderEmailNotifications) SetEnvelopeComplete(v string) {
	o.EnvelopeComplete = &v
}

// GetOfflineSigningFailed returns the OfflineSigningFailed field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetOfflineSigningFailed() string {
	if o == nil || IsNil(o.OfflineSigningFailed) {
		var ret string
		return ret
	}
	return *o.OfflineSigningFailed
}

// GetOfflineSigningFailedOk returns a tuple with the OfflineSigningFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetOfflineSigningFailedOk() (*string, bool) {
	if o == nil || IsNil(o.OfflineSigningFailed) {
		return nil, false
	}
	return o.OfflineSigningFailed, true
}

// HasOfflineSigningFailed returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasOfflineSigningFailed() bool {
	if o != nil && !IsNil(o.OfflineSigningFailed) {
		return true
	}

	return false
}

// SetOfflineSigningFailed gets a reference to the given string and assigns it to the OfflineSigningFailed field.
func (o *SenderEmailNotifications) SetOfflineSigningFailed(v string) {
	o.OfflineSigningFailed = &v
}

// GetPowerformResponsesLimitNotificationEmail returns the PowerformResponsesLimitNotificationEmail field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetPowerformResponsesLimitNotificationEmail() string {
	if o == nil || IsNil(o.PowerformResponsesLimitNotificationEmail) {
		var ret string
		return ret
	}
	return *o.PowerformResponsesLimitNotificationEmail
}

// GetPowerformResponsesLimitNotificationEmailOk returns a tuple with the PowerformResponsesLimitNotificationEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetPowerformResponsesLimitNotificationEmailOk() (*string, bool) {
	if o == nil || IsNil(o.PowerformResponsesLimitNotificationEmail) {
		return nil, false
	}
	return o.PowerformResponsesLimitNotificationEmail, true
}

// HasPowerformResponsesLimitNotificationEmail returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasPowerformResponsesLimitNotificationEmail() bool {
	if o != nil && !IsNil(o.PowerformResponsesLimitNotificationEmail) {
		return true
	}

	return false
}

// SetPowerformResponsesLimitNotificationEmail gets a reference to the given string and assigns it to the PowerformResponsesLimitNotificationEmail field.
func (o *SenderEmailNotifications) SetPowerformResponsesLimitNotificationEmail(v string) {
	o.PowerformResponsesLimitNotificationEmail = &v
}

// GetPurgeDocuments returns the PurgeDocuments field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetPurgeDocuments() string {
	if o == nil || IsNil(o.PurgeDocuments) {
		var ret string
		return ret
	}
	return *o.PurgeDocuments
}

// GetPurgeDocumentsOk returns a tuple with the PurgeDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetPurgeDocumentsOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDocuments) {
		return nil, false
	}
	return o.PurgeDocuments, true
}

// HasPurgeDocuments returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasPurgeDocuments() bool {
	if o != nil && !IsNil(o.PurgeDocuments) {
		return true
	}

	return false
}

// SetPurgeDocuments gets a reference to the given string and assigns it to the PurgeDocuments field.
func (o *SenderEmailNotifications) SetPurgeDocuments(v string) {
	o.PurgeDocuments = &v
}

// GetRecipientViewed returns the RecipientViewed field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetRecipientViewed() string {
	if o == nil || IsNil(o.RecipientViewed) {
		var ret string
		return ret
	}
	return *o.RecipientViewed
}

// GetRecipientViewedOk returns a tuple with the RecipientViewed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetRecipientViewedOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientViewed) {
		return nil, false
	}
	return o.RecipientViewed, true
}

// HasRecipientViewed returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasRecipientViewed() bool {
	if o != nil && !IsNil(o.RecipientViewed) {
		return true
	}

	return false
}

// SetRecipientViewed gets a reference to the given string and assigns it to the RecipientViewed field.
func (o *SenderEmailNotifications) SetRecipientViewed(v string) {
	o.RecipientViewed = &v
}

// GetSenderEnvelopeDeclined returns the SenderEnvelopeDeclined field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetSenderEnvelopeDeclined() string {
	if o == nil || IsNil(o.SenderEnvelopeDeclined) {
		var ret string
		return ret
	}
	return *o.SenderEnvelopeDeclined
}

// GetSenderEnvelopeDeclinedOk returns a tuple with the SenderEnvelopeDeclined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetSenderEnvelopeDeclinedOk() (*string, bool) {
	if o == nil || IsNil(o.SenderEnvelopeDeclined) {
		return nil, false
	}
	return o.SenderEnvelopeDeclined, true
}

// HasSenderEnvelopeDeclined returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasSenderEnvelopeDeclined() bool {
	if o != nil && !IsNil(o.SenderEnvelopeDeclined) {
		return true
	}

	return false
}

// SetSenderEnvelopeDeclined gets a reference to the given string and assigns it to the SenderEnvelopeDeclined field.
func (o *SenderEmailNotifications) SetSenderEnvelopeDeclined(v string) {
	o.SenderEnvelopeDeclined = &v
}

// GetWithdrawnConsent returns the WithdrawnConsent field value if set, zero value otherwise.
func (o *SenderEmailNotifications) GetWithdrawnConsent() string {
	if o == nil || IsNil(o.WithdrawnConsent) {
		var ret string
		return ret
	}
	return *o.WithdrawnConsent
}

// GetWithdrawnConsentOk returns a tuple with the WithdrawnConsent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderEmailNotifications) GetWithdrawnConsentOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawnConsent) {
		return nil, false
	}
	return o.WithdrawnConsent, true
}

// HasWithdrawnConsent returns a boolean if a field has been set.
func (o *SenderEmailNotifications) HasWithdrawnConsent() bool {
	if o != nil && !IsNil(o.WithdrawnConsent) {
		return true
	}

	return false
}

// SetWithdrawnConsent gets a reference to the given string and assigns it to the WithdrawnConsent field.
func (o *SenderEmailNotifications) SetWithdrawnConsent(v string) {
	o.WithdrawnConsent = &v
}

func (o SenderEmailNotifications) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SenderEmailNotifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangedSigner) {
		toSerialize["changedSigner"] = o.ChangedSigner
	}
	if !IsNil(o.ClickwrapResponsesLimitNotificationEmail) {
		toSerialize["clickwrapResponsesLimitNotificationEmail"] = o.ClickwrapResponsesLimitNotificationEmail
	}
	if !IsNil(o.CommentsOnlyPrivateAndMention) {
		toSerialize["commentsOnlyPrivateAndMention"] = o.CommentsOnlyPrivateAndMention
	}
	if !IsNil(o.CommentsReceiveAll) {
		toSerialize["commentsReceiveAll"] = o.CommentsReceiveAll
	}
	if !IsNil(o.DeliveryFailed) {
		toSerialize["deliveryFailed"] = o.DeliveryFailed
	}
	if !IsNil(o.EnvelopeComplete) {
		toSerialize["envelopeComplete"] = o.EnvelopeComplete
	}
	if !IsNil(o.OfflineSigningFailed) {
		toSerialize["offlineSigningFailed"] = o.OfflineSigningFailed
	}
	if !IsNil(o.PowerformResponsesLimitNotificationEmail) {
		toSerialize["powerformResponsesLimitNotificationEmail"] = o.PowerformResponsesLimitNotificationEmail
	}
	if !IsNil(o.PurgeDocuments) {
		toSerialize["purgeDocuments"] = o.PurgeDocuments
	}
	if !IsNil(o.RecipientViewed) {
		toSerialize["recipientViewed"] = o.RecipientViewed
	}
	if !IsNil(o.SenderEnvelopeDeclined) {
		toSerialize["senderEnvelopeDeclined"] = o.SenderEnvelopeDeclined
	}
	if !IsNil(o.WithdrawnConsent) {
		toSerialize["withdrawnConsent"] = o.WithdrawnConsent
	}
	return toSerialize, nil
}

type NullableSenderEmailNotifications struct {
	value *SenderEmailNotifications
	isSet bool
}

func (v NullableSenderEmailNotifications) Get() *SenderEmailNotifications {
	return v.value
}

func (v *NullableSenderEmailNotifications) Set(val *SenderEmailNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableSenderEmailNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableSenderEmailNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSenderEmailNotifications(val *SenderEmailNotifications) *NullableSenderEmailNotifications {
	return &NullableSenderEmailNotifications{value: val, isSet: true}
}

func (v NullableSenderEmailNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSenderEmailNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


