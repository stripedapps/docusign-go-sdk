/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectUserInfo{}

// ConnectUserInfo 
type ConnectUserInfo struct {
	// 
	Email *string `json:"email,omitempty"`
	// 
	IsIncluded *string `json:"isIncluded,omitempty"`
	// The ID of the user to access.  **Note:** Users can only access their own information. A user, even one with Admin rights, cannot access another user's settings.
	UserId *string `json:"userId,omitempty"`
	// The name of the user.
	UserName *string `json:"userName,omitempty"`
}

// NewConnectUserInfo instantiates a new ConnectUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectUserInfo() *ConnectUserInfo {
	this := ConnectUserInfo{}
	return &this
}

// NewConnectUserInfoWithDefaults instantiates a new ConnectUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectUserInfoWithDefaults() *ConnectUserInfo {
	this := ConnectUserInfo{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ConnectUserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectUserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ConnectUserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ConnectUserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetIsIncluded returns the IsIncluded field value if set, zero value otherwise.
func (o *ConnectUserInfo) GetIsIncluded() string {
	if o == nil || IsNil(o.IsIncluded) {
		var ret string
		return ret
	}
	return *o.IsIncluded
}

// GetIsIncludedOk returns a tuple with the IsIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectUserInfo) GetIsIncludedOk() (*string, bool) {
	if o == nil || IsNil(o.IsIncluded) {
		return nil, false
	}
	return o.IsIncluded, true
}

// HasIsIncluded returns a boolean if a field has been set.
func (o *ConnectUserInfo) HasIsIncluded() bool {
	if o != nil && !IsNil(o.IsIncluded) {
		return true
	}

	return false
}

// SetIsIncluded gets a reference to the given string and assigns it to the IsIncluded field.
func (o *ConnectUserInfo) SetIsIncluded(v string) {
	o.IsIncluded = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ConnectUserInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectUserInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ConnectUserInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ConnectUserInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ConnectUserInfo) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectUserInfo) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ConnectUserInfo) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ConnectUserInfo) SetUserName(v string) {
	o.UserName = &v
}

func (o ConnectUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.IsIncluded) {
		toSerialize["isIncluded"] = o.IsIncluded
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableConnectUserInfo struct {
	value *ConnectUserInfo
	isSet bool
}

func (v NullableConnectUserInfo) Get() *ConnectUserInfo {
	return v.value
}

func (v *NullableConnectUserInfo) Set(val *ConnectUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectUserInfo(val *ConnectUserInfo) *NullableConnectUserInfo {
	return &NullableConnectUserInfo{value: val, isSet: true}
}

func (v NullableConnectUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


