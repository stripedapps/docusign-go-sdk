/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountConsumerDisclosuresAPIService AccountConsumerDisclosuresAPI service
type AccountConsumerDisclosuresAPIService service

type ApiConsumerDisclosureGetConsumerDisclosureRequest struct {
	ctx context.Context
	ApiService *AccountConsumerDisclosuresAPIService
	accountId string
	langCode *string
}

// The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:  - Arabic (&#x60;ar&#x60;) - Bulgarian (&#x60;bg&#x60;) - Czech (&#x60;cs&#x60;) - Chinese Simplified (&#x60;zh_CN&#x60;) - Chinese Traditional (&#x60;zh_TW&#x60;) - Croatian (&#x60;hr&#x60;) - Danish (&#x60;da&#x60;) - Dutch (&#x60;nl&#x60;) - English US (&#x60;en&#x60;) - English UK (&#x60;en_GB&#x60;) - Estonian (&#x60;et&#x60;) - Farsi (&#x60;fa&#x60;) - Finnish (&#x60;fi&#x60;) - French (&#x60;fr&#x60;) - French Canadian (&#x60;fr_CA&#x60;) - German (&#x60;de&#x60;) - Greek (&#x60;el&#x60;) - Hebrew (&#x60;he&#x60;) - Hindi (&#x60;hi&#x60;) - Hungarian (&#x60;hu&#x60;) - Bahasa Indonesian (&#x60;id&#x60;) - Italian (&#x60;it&#x60;) - Japanese (&#x60;ja&#x60;) - Korean (&#x60;ko&#x60;) - Latvian (&#x60;lv&#x60;) - Lithuanian (&#x60;lt&#x60;) - Bahasa Melayu (&#x60;ms&#x60;) - Norwegian (&#x60;no&#x60;) - Polish (&#x60;pl&#x60;) - Portuguese (&#x60;pt&#x60;) - Portuguese Brazil (&#x60;pt_BR&#x60;) - Romanian (&#x60;ro&#x60;) - Russian (&#x60;ru&#x60;) - Serbian (&#x60;sr&#x60;) - Slovak (&#x60;sk&#x60;) - Slovenian (&#x60;sl&#x60;) - Spanish (&#x60;es&#x60;) - Spanish Latin America (&#x60;es_MX&#x60;) - Swedish (&#x60;sv&#x60;) - Thai (&#x60;th&#x60;) - Turkish (&#x60;tr&#x60;) - Ukrainian (&#x60;uk&#x60;) - Vietnamese (&#x60;vi&#x60;)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to &#x60;browser&#x60;.
func (r ApiConsumerDisclosureGetConsumerDisclosureRequest) LangCode(langCode string) ApiConsumerDisclosureGetConsumerDisclosureRequest {
	r.langCode = &langCode
	return r
}

func (r ApiConsumerDisclosureGetConsumerDisclosureRequest) Execute() (*AccountConsumerDisclosures, *http.Response, error) {
	return r.ApiService.ConsumerDisclosureGetConsumerDisclosureExecute(r)
}

/*
ConsumerDisclosureGetConsumerDisclosure Gets the default Electronic Record and Signature Disclosure for an account.

Retrieves the default, HTML-formatted Electronic Record and Signature Disclosure (ERSD) associated with the account. 

This is the default ERSD disclosure that DocuSign provides for the convenience of U.S.-based customers only. This default disclosure is only valid for transactions between U.S.-based parties.

To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @return ApiConsumerDisclosureGetConsumerDisclosureRequest
*/
func (a *AccountConsumerDisclosuresAPIService) ConsumerDisclosureGetConsumerDisclosure(ctx context.Context, accountId string) ApiConsumerDisclosureGetConsumerDisclosureRequest {
	return ApiConsumerDisclosureGetConsumerDisclosureRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountConsumerDisclosures
func (a *AccountConsumerDisclosuresAPIService) ConsumerDisclosureGetConsumerDisclosureExecute(r ApiConsumerDisclosureGetConsumerDisclosureRequest) (*AccountConsumerDisclosures, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountConsumerDisclosures
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountConsumerDisclosuresAPIService.ConsumerDisclosureGetConsumerDisclosure")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/consumer_disclosure"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.langCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "langCode", r.langCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsumerDisclosureGetConsumerDisclosureLangCodeRequest struct {
	ctx context.Context
	ApiService *AccountConsumerDisclosuresAPIService
	accountId string
	langCode string
}

func (r ApiConsumerDisclosureGetConsumerDisclosureLangCodeRequest) Execute() (*AccountConsumerDisclosures, *http.Response, error) {
	return r.ApiService.ConsumerDisclosureGetConsumerDisclosureLangCodeExecute(r)
}

/*
ConsumerDisclosureGetConsumerDisclosureLangCode Gets the Electronic Record and Signature Disclosure for an account.

Retrieves the HTML-formatted Electronic Record and Signature Disclosure (ERSD) associated with the account. 

To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.

**Note:** The text of the default disclosure is always in English, but if you are using a custom disclosure and have created versions of it in different signer languages, you can use the `langCode` parameter to specify the signer language version that you want to retrieve.  

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param langCode The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:  - Arabic (`ar`) - Bulgarian (`bg`) - Czech (`cs`) - Chinese Simplified (`zh_CN`) - Chinese Traditional (`zh_TW`) - Croatian (`hr`) - Danish (`da`) - Dutch (`nl`) - English US (`en`) - English UK (`en_GB`) - Estonian (`et`) - Farsi (`fa`) - Finnish (`fi`) - French (`fr`) - French Canadian (`fr_CA`) - German (`de`) - Greek (`el`) - Hebrew (`he`) - Hindi (`hi`) - Hungarian (`hu`) - Bahasa Indonesian (`id`) - Italian (`it`) - Japanese (`ja`) - Korean (`ko`) - Latvian (`lv`) - Lithuanian (`lt`) - Bahasa Melayu (`ms`) - Norwegian (`no`) - Polish (`pl`) - Portuguese (`pt`) - Portuguese Brazil (`pt_BR`) - Romanian (`ro`) - Russian (`ru`) - Serbian (`sr`) - Slovak (`sk`) - Slovenian (`sl`) - Spanish (`es`) - Spanish Latin America (`es_MX`) - Swedish (`sv`) - Thai (`th`) - Turkish (`tr`) - Ukrainian (`uk`) - Vietnamese (`vi`)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
 @return ApiConsumerDisclosureGetConsumerDisclosureLangCodeRequest
*/
func (a *AccountConsumerDisclosuresAPIService) ConsumerDisclosureGetConsumerDisclosureLangCode(ctx context.Context, accountId string, langCode string) ApiConsumerDisclosureGetConsumerDisclosureLangCodeRequest {
	return ApiConsumerDisclosureGetConsumerDisclosureLangCodeRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		langCode: langCode,
	}
}

// Execute executes the request
//  @return AccountConsumerDisclosures
func (a *AccountConsumerDisclosuresAPIService) ConsumerDisclosureGetConsumerDisclosureLangCodeExecute(r ApiConsumerDisclosureGetConsumerDisclosureLangCodeRequest) (*AccountConsumerDisclosures, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountConsumerDisclosures
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountConsumerDisclosuresAPIService.ConsumerDisclosureGetConsumerDisclosureLangCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/consumer_disclosure/{langCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"langCode"+"}", url.PathEscape(parameterValueToString(r.langCode, "langCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsumerDisclosurePutConsumerDisclosureRequest struct {
	ctx context.Context
	ApiService *AccountConsumerDisclosuresAPIService
	accountId string
	langCode string
	includeMetadata *string
	consumerDisclosure *ConsumerDisclosure
}

// (Optional) When true, the response includes metadata indicating which properties are editable.
func (r ApiConsumerDisclosurePutConsumerDisclosureRequest) IncludeMetadata(includeMetadata string) ApiConsumerDisclosurePutConsumerDisclosureRequest {
	r.includeMetadata = &includeMetadata
	return r
}

func (r ApiConsumerDisclosurePutConsumerDisclosureRequest) ConsumerDisclosure(consumerDisclosure ConsumerDisclosure) ApiConsumerDisclosurePutConsumerDisclosureRequest {
	r.consumerDisclosure = &consumerDisclosure
	return r
}

func (r ApiConsumerDisclosurePutConsumerDisclosureRequest) Execute() (*ConsumerDisclosure, *http.Response, error) {
	return r.ApiService.ConsumerDisclosurePutConsumerDisclosureExecute(r)
}

/*
ConsumerDisclosurePutConsumerDisclosure Updates the Electronic Record and Signature Disclosure for an account.

Account administrators can use this method to perform the following tasks:

- Customize values in the default disclosure.
- Switch to a custom disclosure that uses your own text and HTML formatting.
- Change values in your existing consumer disclosure. 

To specify the signer language version of the disclosure that you are updating, use the optional `langCode` query parameter.

**Note:** Only account administrators can use this method. Each time you change the disclosure content, all unsigned recipients of outstanding documents will be required to accept a new version. 

## Updating the default disclosure

When you update the default disclosure, you can edit all properties except for the following ones:

- `accountEsignId`: This property is read-only.
- `custom`: The default value is **false.** Editing this property causes the default disclosure to switch to a custom disclosure.
- `esignAgreement`: This property is read-only.
- `esignText`: You cannot edit this property when `custom` is set to **false.** The API returns a 200 OK HTTP response, but does not update the `esignText`.
- Metadata properties: These properties are read-only.

**Note:** The text of the default disclosure is always in English.

## Switching to a custom disclosure

To switch to a custom disclosure, set the `custom` property to **true** and customize the value for the `eSignText` property. 

You can also edit all of the other properties except for the following ones:

- `accountEsignId`: This property is read-only.
- `esignAgreement`: This property is read-only.
- Metadata properties: These properties are read-only.

**Note:** When you use a custom disclosure, you can create versions of it in different signer languages and se the `langCode` parameter to specify the signer language version that you are updating.

**Important:**  When you switch from a default to a custom disclosure, note the following information:

- You will not be able to return to using the default disclosure.
- Only the disclosure for the currently selected signer language is saved. DocuSign will not automatically translate your custom disclosure. You must create a disclosure for each language that your signers use.

## Updating a custom disclosure

When you update a custom disclosure, you can update all of the properties except for the following ones:

- `accountEsignId`: This property is read-only. 
- `esignAgreement`: This property is read-only.
- Metadata properties: These properties are read-only.

**Important:** Only the disclosure for the currently selected signer language is saved. DocuSign will not automatically translate your custom disclosure. You must create a disclosure for each language that your signers use.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param langCode The code for the signer language version of the disclosure that you want to update. The following languages are supported:  - Arabic (`ar`) - Bulgarian (`bg`) - Czech (`cs`) - Chinese Simplified (`zh_CN`) - Chinese Traditional (`zh_TW`) - Croatian (`hr`) - Danish (`da`) - Dutch (`nl`) - English US (`en`) - English UK (`en_GB`) - Estonian (`et`) - Farsi (`fa`) - Finnish (`fi`) - French (`fr`) - French Canadian (`fr_CA`) - German (`de`) - Greek (`el`) - Hebrew (`he`) - Hindi (`hi`) - Hungarian (`hu`) - Bahasa Indonesian (`id`) - Italian (`it`) - Japanese (`ja`) - Korean (`ko`) - Latvian (`lv`) - Lithuanian (`lt`) - Bahasa Melayu (`ms`) - Norwegian (`no`) - Polish (`pl`) - Portuguese (`pt`) - Portuguese Brazil (`pt_BR`) - Romanian (`ro`) - Russian (`ru`) - Serbian (`sr`) - Slovak (`sk`) - Slovenian (`sl`) - Spanish (`es`) - Spanish Latin America (`es_MX`) - Swedish (`sv`) - Thai (`th`) - Turkish (`tr`) - Ukrainian (`uk`) - Vietnamese (`vi`)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
 @return ApiConsumerDisclosurePutConsumerDisclosureRequest
*/
func (a *AccountConsumerDisclosuresAPIService) ConsumerDisclosurePutConsumerDisclosure(ctx context.Context, accountId string, langCode string) ApiConsumerDisclosurePutConsumerDisclosureRequest {
	return ApiConsumerDisclosurePutConsumerDisclosureRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		langCode: langCode,
	}
}

// Execute executes the request
//  @return ConsumerDisclosure
func (a *AccountConsumerDisclosuresAPIService) ConsumerDisclosurePutConsumerDisclosureExecute(r ApiConsumerDisclosurePutConsumerDisclosureRequest) (*ConsumerDisclosure, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsumerDisclosure
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountConsumerDisclosuresAPIService.ConsumerDisclosurePutConsumerDisclosure")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/consumer_disclosure/{langCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"langCode"+"}", url.PathEscape(parameterValueToString(r.langCode, "langCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeMetadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_metadata", r.includeMetadata, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consumerDisclosure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
