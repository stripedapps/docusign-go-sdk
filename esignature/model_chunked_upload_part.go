/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChunkedUploadPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChunkedUploadPart{}

// ChunkedUploadPart An object that contains information about the chunked upload part.
type ChunkedUploadPart struct {
	// The order of the part in the chunked upload.
	Sequence *string `json:"sequence,omitempty"`
	// The size of the part in bytes.   DocuSign recommends that a chunked upload part is no larger than a few MB in size.
	Size *string `json:"size,omitempty"`
}

// NewChunkedUploadPart instantiates a new ChunkedUploadPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunkedUploadPart() *ChunkedUploadPart {
	this := ChunkedUploadPart{}
	return &this
}

// NewChunkedUploadPartWithDefaults instantiates a new ChunkedUploadPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunkedUploadPartWithDefaults() *ChunkedUploadPart {
	this := ChunkedUploadPart{}
	return &this
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ChunkedUploadPart) GetSequence() string {
	if o == nil || IsNil(o.Sequence) {
		var ret string
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkedUploadPart) GetSequenceOk() (*string, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ChunkedUploadPart) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given string and assigns it to the Sequence field.
func (o *ChunkedUploadPart) SetSequence(v string) {
	o.Sequence = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ChunkedUploadPart) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkedUploadPart) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ChunkedUploadPart) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *ChunkedUploadPart) SetSize(v string) {
	o.Size = &v
}

func (o ChunkedUploadPart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChunkedUploadPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableChunkedUploadPart struct {
	value *ChunkedUploadPart
	isSet bool
}

func (v NullableChunkedUploadPart) Get() *ChunkedUploadPart {
	return v.value
}

func (v *NullableChunkedUploadPart) Set(val *ChunkedUploadPart) {
	v.value = val
	v.isSet = true
}

func (v NullableChunkedUploadPart) IsSet() bool {
	return v.isSet
}

func (v *NullableChunkedUploadPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunkedUploadPart(val *ChunkedUploadPart) *NullableChunkedUploadPart {
	return &NullableChunkedUploadPart{value: val, isSet: true}
}

func (v NullableChunkedUploadPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunkedUploadPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


