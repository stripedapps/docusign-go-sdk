/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MemberSharedItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberSharedItems{}

// MemberSharedItems Information about shared items.
type MemberSharedItems struct {
	// List of information about shared envelopes.
	Envelopes []SharedItem `json:"envelopes,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// List of information about shared folders.
	Folders []FolderSharedItem `json:"folders,omitempty"`
	// List of information about shared templates.
	Templates []TemplateSharedItem `json:"templates,omitempty"`
	User *UserInfo `json:"user,omitempty"`
}

// NewMemberSharedItems instantiates a new MemberSharedItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberSharedItems() *MemberSharedItems {
	this := MemberSharedItems{}
	return &this
}

// NewMemberSharedItemsWithDefaults instantiates a new MemberSharedItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberSharedItemsWithDefaults() *MemberSharedItems {
	this := MemberSharedItems{}
	return &this
}

// GetEnvelopes returns the Envelopes field value if set, zero value otherwise.
func (o *MemberSharedItems) GetEnvelopes() []SharedItem {
	if o == nil || IsNil(o.Envelopes) {
		var ret []SharedItem
		return ret
	}
	return o.Envelopes
}

// GetEnvelopesOk returns a tuple with the Envelopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSharedItems) GetEnvelopesOk() ([]SharedItem, bool) {
	if o == nil || IsNil(o.Envelopes) {
		return nil, false
	}
	return o.Envelopes, true
}

// HasEnvelopes returns a boolean if a field has been set.
func (o *MemberSharedItems) HasEnvelopes() bool {
	if o != nil && !IsNil(o.Envelopes) {
		return true
	}

	return false
}

// SetEnvelopes gets a reference to the given []SharedItem and assigns it to the Envelopes field.
func (o *MemberSharedItems) SetEnvelopes(v []SharedItem) {
	o.Envelopes = v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *MemberSharedItems) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSharedItems) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *MemberSharedItems) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *MemberSharedItems) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *MemberSharedItems) GetFolders() []FolderSharedItem {
	if o == nil || IsNil(o.Folders) {
		var ret []FolderSharedItem
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSharedItems) GetFoldersOk() ([]FolderSharedItem, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *MemberSharedItems) HasFolders() bool {
	if o != nil && !IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []FolderSharedItem and assigns it to the Folders field.
func (o *MemberSharedItems) SetFolders(v []FolderSharedItem) {
	o.Folders = v
}

// GetTemplates returns the Templates field value if set, zero value otherwise.
func (o *MemberSharedItems) GetTemplates() []TemplateSharedItem {
	if o == nil || IsNil(o.Templates) {
		var ret []TemplateSharedItem
		return ret
	}
	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSharedItems) GetTemplatesOk() ([]TemplateSharedItem, bool) {
	if o == nil || IsNil(o.Templates) {
		return nil, false
	}
	return o.Templates, true
}

// HasTemplates returns a boolean if a field has been set.
func (o *MemberSharedItems) HasTemplates() bool {
	if o != nil && !IsNil(o.Templates) {
		return true
	}

	return false
}

// SetTemplates gets a reference to the given []TemplateSharedItem and assigns it to the Templates field.
func (o *MemberSharedItems) SetTemplates(v []TemplateSharedItem) {
	o.Templates = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *MemberSharedItems) GetUser() UserInfo {
	if o == nil || IsNil(o.User) {
		var ret UserInfo
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSharedItems) GetUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *MemberSharedItems) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserInfo and assigns it to the User field.
func (o *MemberSharedItems) SetUser(v UserInfo) {
	o.User = &v
}

func (o MemberSharedItems) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberSharedItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Envelopes) {
		toSerialize["envelopes"] = o.Envelopes
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.Folders) {
		toSerialize["folders"] = o.Folders
	}
	if !IsNil(o.Templates) {
		toSerialize["templates"] = o.Templates
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableMemberSharedItems struct {
	value *MemberSharedItems
	isSet bool
}

func (v NullableMemberSharedItems) Get() *MemberSharedItems {
	return v.value
}

func (v *NullableMemberSharedItems) Set(val *MemberSharedItems) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberSharedItems) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberSharedItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberSharedItems(val *MemberSharedItems) *NullableMemberSharedItems {
	return &NullableMemberSharedItems{value: val, isSet: true}
}

func (v NullableMemberSharedItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberSharedItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


