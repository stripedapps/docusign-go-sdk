/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Reminders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reminders{}

// Reminders A complex element that specifies reminder settings for the envelope.
type Reminders struct {
	// An integer specifying the number of days after the recipient receives the envelope that reminder emails are sent to the recipient. The default value is 0.
	ReminderDelay *string `json:"reminderDelay,omitempty"`
	// When **true,** reminders are enabled. The default value is **false.**
	ReminderEnabled *string `json:"reminderEnabled,omitempty"`
	// An integer specifying the interval in days between reminder emails. The default value is 0.
	ReminderFrequency *string `json:"reminderFrequency,omitempty"`
}

// NewReminders instantiates a new Reminders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReminders() *Reminders {
	this := Reminders{}
	return &this
}

// NewRemindersWithDefaults instantiates a new Reminders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemindersWithDefaults() *Reminders {
	this := Reminders{}
	return &this
}

// GetReminderDelay returns the ReminderDelay field value if set, zero value otherwise.
func (o *Reminders) GetReminderDelay() string {
	if o == nil || IsNil(o.ReminderDelay) {
		var ret string
		return ret
	}
	return *o.ReminderDelay
}

// GetReminderDelayOk returns a tuple with the ReminderDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reminders) GetReminderDelayOk() (*string, bool) {
	if o == nil || IsNil(o.ReminderDelay) {
		return nil, false
	}
	return o.ReminderDelay, true
}

// HasReminderDelay returns a boolean if a field has been set.
func (o *Reminders) HasReminderDelay() bool {
	if o != nil && !IsNil(o.ReminderDelay) {
		return true
	}

	return false
}

// SetReminderDelay gets a reference to the given string and assigns it to the ReminderDelay field.
func (o *Reminders) SetReminderDelay(v string) {
	o.ReminderDelay = &v
}

// GetReminderEnabled returns the ReminderEnabled field value if set, zero value otherwise.
func (o *Reminders) GetReminderEnabled() string {
	if o == nil || IsNil(o.ReminderEnabled) {
		var ret string
		return ret
	}
	return *o.ReminderEnabled
}

// GetReminderEnabledOk returns a tuple with the ReminderEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reminders) GetReminderEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.ReminderEnabled) {
		return nil, false
	}
	return o.ReminderEnabled, true
}

// HasReminderEnabled returns a boolean if a field has been set.
func (o *Reminders) HasReminderEnabled() bool {
	if o != nil && !IsNil(o.ReminderEnabled) {
		return true
	}

	return false
}

// SetReminderEnabled gets a reference to the given string and assigns it to the ReminderEnabled field.
func (o *Reminders) SetReminderEnabled(v string) {
	o.ReminderEnabled = &v
}

// GetReminderFrequency returns the ReminderFrequency field value if set, zero value otherwise.
func (o *Reminders) GetReminderFrequency() string {
	if o == nil || IsNil(o.ReminderFrequency) {
		var ret string
		return ret
	}
	return *o.ReminderFrequency
}

// GetReminderFrequencyOk returns a tuple with the ReminderFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reminders) GetReminderFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.ReminderFrequency) {
		return nil, false
	}
	return o.ReminderFrequency, true
}

// HasReminderFrequency returns a boolean if a field has been set.
func (o *Reminders) HasReminderFrequency() bool {
	if o != nil && !IsNil(o.ReminderFrequency) {
		return true
	}

	return false
}

// SetReminderFrequency gets a reference to the given string and assigns it to the ReminderFrequency field.
func (o *Reminders) SetReminderFrequency(v string) {
	o.ReminderFrequency = &v
}

func (o Reminders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reminders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReminderDelay) {
		toSerialize["reminderDelay"] = o.ReminderDelay
	}
	if !IsNil(o.ReminderEnabled) {
		toSerialize["reminderEnabled"] = o.ReminderEnabled
	}
	if !IsNil(o.ReminderFrequency) {
		toSerialize["reminderFrequency"] = o.ReminderFrequency
	}
	return toSerialize, nil
}

type NullableReminders struct {
	value *Reminders
	isSet bool
}

func (v NullableReminders) Get() *Reminders {
	return v.value
}

func (v *NullableReminders) Set(val *Reminders) {
	v.value = val
	v.isSet = true
}

func (v NullableReminders) IsSet() bool {
	return v.isSet
}

func (v *NullableReminders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReminders(val *Reminders) *NullableReminders {
	return &NullableReminders{value: val, isSet: true}
}

func (v NullableReminders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReminders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


