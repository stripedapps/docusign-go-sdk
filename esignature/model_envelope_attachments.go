/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeAttachments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeAttachments{}

// EnvelopeAttachments The EnvelopeAttachments resource provides methods that allow you to associate files with an envelope.
type EnvelopeAttachments struct {
	// Valid values are `sender` and `senderAndAllRecipients`.
	AccessControl *string `json:"accessControl,omitempty"`
	// The unique identifier for the attachment.
	AttachmentId *string `json:"attachmentId,omitempty"`
	// Specifies the type of the attachment for the recipient. Possible values are:  - `.htm` - `.xml`
	AttachmentType *string `json:"attachmentType,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// A label for the attachment. Potential values include:   - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms. - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property. 
	Label *string `json:"label,omitempty"`
	// The name of the attachment.
	Name *string `json:"name,omitempty"`
}

// NewEnvelopeAttachments instantiates a new EnvelopeAttachments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeAttachments() *EnvelopeAttachments {
	this := EnvelopeAttachments{}
	return &this
}

// NewEnvelopeAttachmentsWithDefaults instantiates a new EnvelopeAttachments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeAttachmentsWithDefaults() *EnvelopeAttachments {
	this := EnvelopeAttachments{}
	return &this
}

// GetAccessControl returns the AccessControl field value if set, zero value otherwise.
func (o *EnvelopeAttachments) GetAccessControl() string {
	if o == nil || IsNil(o.AccessControl) {
		var ret string
		return ret
	}
	return *o.AccessControl
}

// GetAccessControlOk returns a tuple with the AccessControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeAttachments) GetAccessControlOk() (*string, bool) {
	if o == nil || IsNil(o.AccessControl) {
		return nil, false
	}
	return o.AccessControl, true
}

// HasAccessControl returns a boolean if a field has been set.
func (o *EnvelopeAttachments) HasAccessControl() bool {
	if o != nil && !IsNil(o.AccessControl) {
		return true
	}

	return false
}

// SetAccessControl gets a reference to the given string and assigns it to the AccessControl field.
func (o *EnvelopeAttachments) SetAccessControl(v string) {
	o.AccessControl = &v
}

// GetAttachmentId returns the AttachmentId field value if set, zero value otherwise.
func (o *EnvelopeAttachments) GetAttachmentId() string {
	if o == nil || IsNil(o.AttachmentId) {
		var ret string
		return ret
	}
	return *o.AttachmentId
}

// GetAttachmentIdOk returns a tuple with the AttachmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeAttachments) GetAttachmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentId) {
		return nil, false
	}
	return o.AttachmentId, true
}

// HasAttachmentId returns a boolean if a field has been set.
func (o *EnvelopeAttachments) HasAttachmentId() bool {
	if o != nil && !IsNil(o.AttachmentId) {
		return true
	}

	return false
}

// SetAttachmentId gets a reference to the given string and assigns it to the AttachmentId field.
func (o *EnvelopeAttachments) SetAttachmentId(v string) {
	o.AttachmentId = &v
}

// GetAttachmentType returns the AttachmentType field value if set, zero value otherwise.
func (o *EnvelopeAttachments) GetAttachmentType() string {
	if o == nil || IsNil(o.AttachmentType) {
		var ret string
		return ret
	}
	return *o.AttachmentType
}

// GetAttachmentTypeOk returns a tuple with the AttachmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeAttachments) GetAttachmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentType) {
		return nil, false
	}
	return o.AttachmentType, true
}

// HasAttachmentType returns a boolean if a field has been set.
func (o *EnvelopeAttachments) HasAttachmentType() bool {
	if o != nil && !IsNil(o.AttachmentType) {
		return true
	}

	return false
}

// SetAttachmentType gets a reference to the given string and assigns it to the AttachmentType field.
func (o *EnvelopeAttachments) SetAttachmentType(v string) {
	o.AttachmentType = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *EnvelopeAttachments) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeAttachments) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *EnvelopeAttachments) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *EnvelopeAttachments) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *EnvelopeAttachments) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeAttachments) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *EnvelopeAttachments) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *EnvelopeAttachments) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvelopeAttachments) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeAttachments) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvelopeAttachments) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvelopeAttachments) SetName(v string) {
	o.Name = &v
}

func (o EnvelopeAttachments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeAttachments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessControl) {
		toSerialize["accessControl"] = o.AccessControl
	}
	if !IsNil(o.AttachmentId) {
		toSerialize["attachmentId"] = o.AttachmentId
	}
	if !IsNil(o.AttachmentType) {
		toSerialize["attachmentType"] = o.AttachmentType
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableEnvelopeAttachments struct {
	value *EnvelopeAttachments
	isSet bool
}

func (v NullableEnvelopeAttachments) Get() *EnvelopeAttachments {
	return v.value
}

func (v *NullableEnvelopeAttachments) Set(val *EnvelopeAttachments) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeAttachments) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeAttachments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeAttachments(val *EnvelopeAttachments) *NullableEnvelopeAttachments {
	return &NullableEnvelopeAttachments{value: val, isSet: true}
}

func (v NullableEnvelopeAttachments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeAttachments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


