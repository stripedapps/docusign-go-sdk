/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CloudStorageProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudStorageProvider{}

// CloudStorageProvider Contains details about a specific cloud storage provider.
type CloudStorageProvider struct {
	// The authentication URL used for the cloud storage provider. This information is only included in the response if the user has not passed authentication for the cloud storage provider. If the redirectUrl query string is provided, the returnUrl is appended to the authenticationUrl. 
	AuthenticationUrl *string `json:"authenticationUrl,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
	RedirectUrl *string `json:"redirectUrl,omitempty"`
	// The service name for the cloud storage provider.
	Service *string `json:"service,omitempty"`
	// The DocuSign-generated ID for the cloud storage provider.
	ServiceId *string `json:"serviceId,omitempty"`
}

// NewCloudStorageProvider instantiates a new CloudStorageProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudStorageProvider() *CloudStorageProvider {
	this := CloudStorageProvider{}
	return &this
}

// NewCloudStorageProviderWithDefaults instantiates a new CloudStorageProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudStorageProviderWithDefaults() *CloudStorageProvider {
	this := CloudStorageProvider{}
	return &this
}

// GetAuthenticationUrl returns the AuthenticationUrl field value if set, zero value otherwise.
func (o *CloudStorageProvider) GetAuthenticationUrl() string {
	if o == nil || IsNil(o.AuthenticationUrl) {
		var ret string
		return ret
	}
	return *o.AuthenticationUrl
}

// GetAuthenticationUrlOk returns a tuple with the AuthenticationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorageProvider) GetAuthenticationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationUrl) {
		return nil, false
	}
	return o.AuthenticationUrl, true
}

// HasAuthenticationUrl returns a boolean if a field has been set.
func (o *CloudStorageProvider) HasAuthenticationUrl() bool {
	if o != nil && !IsNil(o.AuthenticationUrl) {
		return true
	}

	return false
}

// SetAuthenticationUrl gets a reference to the given string and assigns it to the AuthenticationUrl field.
func (o *CloudStorageProvider) SetAuthenticationUrl(v string) {
	o.AuthenticationUrl = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *CloudStorageProvider) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorageProvider) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *CloudStorageProvider) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *CloudStorageProvider) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *CloudStorageProvider) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorageProvider) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *CloudStorageProvider) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *CloudStorageProvider) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *CloudStorageProvider) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorageProvider) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *CloudStorageProvider) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *CloudStorageProvider) SetService(v string) {
	o.Service = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *CloudStorageProvider) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorageProvider) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *CloudStorageProvider) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *CloudStorageProvider) SetServiceId(v string) {
	o.ServiceId = &v
}

func (o CloudStorageProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudStorageProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthenticationUrl) {
		toSerialize["authenticationUrl"] = o.AuthenticationUrl
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirectUrl"] = o.RedirectUrl
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	return toSerialize, nil
}

type NullableCloudStorageProvider struct {
	value *CloudStorageProvider
	isSet bool
}

func (v NullableCloudStorageProvider) Get() *CloudStorageProvider {
	return v.value
}

func (v *NullableCloudStorageProvider) Set(val *CloudStorageProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudStorageProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudStorageProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudStorageProvider(val *CloudStorageProvider) *NullableCloudStorageProvider {
	return &NullableCloudStorageProvider{value: val, isSet: true}
}

func (v NullableCloudStorageProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudStorageProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


