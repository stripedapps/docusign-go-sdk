/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TemplateRecipientTabs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateRecipientTabs{}

// TemplateRecipientTabs Template tabs
type TemplateRecipientTabs struct {
	// A list of [Approve tabs][approve].  An Approve tab enables the recipient to approve documents without placing a signature or initials on the document. If the recipient clicks the tab during the signing process, the recipient is considered to have signed the document. No information is shown on the document of the approval, but it is recorded as a signature in the envelope history. The value of an approve tab can't be set.  [approve]:        /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	ApproveTabs []Approve `json:"approveTabs,omitempty"`
	// A list of [Checkbox tabs][checkbox].   A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.   [checkbox]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	CheckboxTabs []Checkbox `json:"checkboxTabs,omitempty"`
	// An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
	CommentThreadTabs []CommentThread `json:"commentThreadTabs,omitempty"`
	// A list of [Commission County tabs][cc].   A Commission County tab displays the county of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.   [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ [notary]: /docs/notary-api/
	CommissionCountyTabs []CommissionCounty `json:"commissionCountyTabs,omitempty"`
	// A list of [Commission Expiration tabs][tabref].   A Commission Expiration tab displays the expiration date of a notary's commission. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.   [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ [notary]: /docs/notary-api/
	CommissionExpirationTabs []CommissionExpiration `json:"commissionExpirationTabs,omitempty"`
	// A list of [Commission Number tabs][tabref].   A Commission Number tab displays a notary's commission number. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.   [tabref]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ [notary]: /docs/notary-api/
	CommissionNumberTabs []CommissionNumber `json:"commissionNumberTabs,omitempty"`
	// A list of [Commission State tabs][cc].   A Commission County tab displays the state in which a notary's commission was granted. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary]. The tab's value can be edited by the recipient.   [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ [notary]: /docs/notary-api/
	CommissionStateTabs []CommissionState `json:"commissionStateTabs,omitempty"`
	// A list of [Company tabs][company].  A Company tab displays a field for the name of the recipient's company. This value can't be set.  [company]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_company 
	CompanyTabs []Company `json:"companyTabs,omitempty"`
	// A list of [Date Signed tabs][dateSigned].   A Date Signed tab displays the date that the recipient signed the document. This value can't be set.  [dateSigned]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	DateSignedTabs []DateSigned `json:"dateSignedTabs,omitempty"`
	// A list of [Date tabs][date].  A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but several other date formats are also accepted. The system retains the format that the recipient enters.  **Note:** If you need to enforce a specific date format, DocuSign recommends that you use a Text tab with a validation pattern and validation message.   [date]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	DateTabs []Date `json:"dateTabs,omitempty"`
	// A list of [Decline tabs][decline].  A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.   [decline]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	DeclineTabs []Decline `json:"declineTabs,omitempty"`
	// A list of Draw Tabs.  A Draw Tab allows the recipient to add a free-form drawing to the document.
	DrawTabs []Draw `json:"drawTabs,omitempty"`
	// A list of [Email Address tabs][emailAddress].  An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.   [emailAddress]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	EmailAddressTabs []EmailAddress `json:"emailAddressTabs,omitempty"`
	// A list of [Email tabs][email].  An Email tab enables the recipient to enter an email address. This is a one-line field that checks that a valid email address is entered. It uses the same parameters as a Text tab, with the validation message and pattern set for email information. This value can be set.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.  [email]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	EmailTabs []Email `json:"emailTabs,omitempty"`
	// A list of [Envelope ID tabs][envelopeId].  An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.   [envelopeId]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#response201_envelopeid 
	EnvelopeIdTabs []EnvelopeId `json:"envelopeIdTabs,omitempty"`
	// A list of [First Name tabs][firstName].  A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.   [firstName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/create/#parameters_firstname 
	FirstNameTabs []FirstName `json:"firstNameTabs,omitempty"`
	// A list of [Formula tabs][formulaTab].  The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.  The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].  If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].  [calculatedfields]: https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=crs1578456361259.html [paymentguide]:     https://support.docusign.com/s/document-item?bundleId=juu1573854950452&topicId=fyw1573854935374.html [formulaTab]:      /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	FormulaTabs []FormulaTab `json:"formulaTabs,omitempty"`
	// A list of [Full Name tabs][fullName].  A Full Name tab displays the recipient's full name. This value can't be set.   [fullName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	FullNameTabs []FullName `json:"fullNameTabs,omitempty"`
	// A list of [Initial Here tabs][initialHere].  This type of tab enables the recipient to initial the document. May be optional. This value can't be set.  [initialHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	InitialHereTabs []InitialHere `json:"initialHereTabs,omitempty"`
	// A list of [Last Name tabs][lastName].  A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.   [lastName]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	LastNameTabs []LastName `json:"lastNameTabs,omitempty"`
	// An array of List tabs.  A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.  Find descriptions of all tab types in the [EnvelopeRecipientTabs Resource][ert].  [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	ListTabs []List `json:"listTabs,omitempty"`
	// A list of  [Notarize tabs][notarize].  A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.  **Note:** Only one notarize tab can appear on a page.  [notarize]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	NotarizeTabs []Notarize `json:"notarizeTabs,omitempty"`
	// A list of Notary Seal tabs.  A Notary Seal tab enables the recipient to notarize a document. This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].  [notary]: /docs/notary-api/
	NotarySealTabs []NotarySeal `json:"notarySealTabs,omitempty"`
	// A list of [Note tabs][note].  A Note tab displays additional information to the recipient in the form of a note. This value can be set.  [note]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	NoteTabs []Note `json:"noteTabs,omitempty"`
	// A list of Number tabs.  Number tabs validate that the entered value is a number. They do not support advanced validation or display options.  To learn more about the different forms of number tabs, see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide. For specific information about number tabs see [Features of numberTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numbertabs).  [number]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	NumberTabs []Number `json:"numberTabs,omitempty"`
	// A list of numerical tabs.  Numerical  tabs provide robust display and validation features, including formatting for different regions and currencies, and minimum and maximum value validation.                                                                                                                                                                                                                                                                                                                                                                                                                                                               To learn more about the different forms of number tabs, see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide. For specific information about numerical tabs see [Features of numericalTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numericaltabs).
	NumericalTabs []Numerical `json:"numericalTabs,omitempty"`
	// A list of [Phone Number tabs][cc].   A Phone Number tab enables a recipient to enter a phone number.  **Note:** This tab can only be assigned to a remote notary recipient using [DocuSign Notary][notary].  [cc]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ [notary]: /docs/notary-api/
	PhoneNumberTabs []PhoneNumber `json:"phoneNumberTabs,omitempty"`
	// This type of tab enables the recipient to strike through document text. This value can't be set.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
	PolyLineOverlayTabs []PolyLineOverlay `json:"polyLineOverlayTabs,omitempty"`
	PrefillTabs *PrefillTabs `json:"prefillTabs,omitempty"`
	// A list of [Radio Group tabs][radioGroup].  A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio buttons associated with the group. Only one radio button can be selected in a group. This value can be set.   [radioGroup]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	RadioGroupTabs []RadioGroup `json:"radioGroupTabs,omitempty"`
	// A list of [Signer Attachment tabs][signerAttachment].  This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.   [signerAttachment]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	SignerAttachmentTabs []SignerAttachment `json:"signerAttachmentTabs,omitempty"`
	// A list of [Sign Here tabs][signHere].  This type of tab enables the recipient to sign a document. May be optional. This value can't be set.  [signHere]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	SignHereTabs []SignHere `json:"signHereTabs,omitempty"`
	// A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections) tabs.  Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.  **Note:** Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
	SmartSectionTabs []SmartSection `json:"smartSectionTabs,omitempty"`
	// A list of [SSN tabs][ssn].  An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.   [ssn]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	SsnTabs []Ssn `json:"ssnTabs,omitempty"`
	// An array of `tabGroup` items.  To associate a tab with a tab group, add the tab group's `groupLabel` to the tab's `tabGroupLabels` array. 
	TabGroups []TabGroup `json:"tabGroups,omitempty"`
	// A list of Text tabs.  A text tab enables the recipient to enter free text. This value can be set.  Find descriptions of all tab types in the [EnvelopeRecipientTabs Resource][ert].  [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	TextTabs []Text `json:"textTabs,omitempty"`
	// A list of [Title tabs][title].  A Title tab displays the recipient's title.  This value can't be set.   [title]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	TitleTabs []Title `json:"titleTabs,omitempty"`
	// A list of [View tabs][view].  A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.  [view]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	ViewTabs []View `json:"viewTabs,omitempty"`
	// A list of [Zip tabs][zip].  A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.   [zip]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	ZipTabs []Zip `json:"zipTabs,omitempty"`
}

// NewTemplateRecipientTabs instantiates a new TemplateRecipientTabs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateRecipientTabs() *TemplateRecipientTabs {
	this := TemplateRecipientTabs{}
	return &this
}

// NewTemplateRecipientTabsWithDefaults instantiates a new TemplateRecipientTabs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateRecipientTabsWithDefaults() *TemplateRecipientTabs {
	this := TemplateRecipientTabs{}
	return &this
}

// GetApproveTabs returns the ApproveTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetApproveTabs() []Approve {
	if o == nil || IsNil(o.ApproveTabs) {
		var ret []Approve
		return ret
	}
	return o.ApproveTabs
}

// GetApproveTabsOk returns a tuple with the ApproveTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetApproveTabsOk() ([]Approve, bool) {
	if o == nil || IsNil(o.ApproveTabs) {
		return nil, false
	}
	return o.ApproveTabs, true
}

// HasApproveTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasApproveTabs() bool {
	if o != nil && !IsNil(o.ApproveTabs) {
		return true
	}

	return false
}

// SetApproveTabs gets a reference to the given []Approve and assigns it to the ApproveTabs field.
func (o *TemplateRecipientTabs) SetApproveTabs(v []Approve) {
	o.ApproveTabs = v
}

// GetCheckboxTabs returns the CheckboxTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCheckboxTabs() []Checkbox {
	if o == nil || IsNil(o.CheckboxTabs) {
		var ret []Checkbox
		return ret
	}
	return o.CheckboxTabs
}

// GetCheckboxTabsOk returns a tuple with the CheckboxTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCheckboxTabsOk() ([]Checkbox, bool) {
	if o == nil || IsNil(o.CheckboxTabs) {
		return nil, false
	}
	return o.CheckboxTabs, true
}

// HasCheckboxTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCheckboxTabs() bool {
	if o != nil && !IsNil(o.CheckboxTabs) {
		return true
	}

	return false
}

// SetCheckboxTabs gets a reference to the given []Checkbox and assigns it to the CheckboxTabs field.
func (o *TemplateRecipientTabs) SetCheckboxTabs(v []Checkbox) {
	o.CheckboxTabs = v
}

// GetCommentThreadTabs returns the CommentThreadTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCommentThreadTabs() []CommentThread {
	if o == nil || IsNil(o.CommentThreadTabs) {
		var ret []CommentThread
		return ret
	}
	return o.CommentThreadTabs
}

// GetCommentThreadTabsOk returns a tuple with the CommentThreadTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCommentThreadTabsOk() ([]CommentThread, bool) {
	if o == nil || IsNil(o.CommentThreadTabs) {
		return nil, false
	}
	return o.CommentThreadTabs, true
}

// HasCommentThreadTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCommentThreadTabs() bool {
	if o != nil && !IsNil(o.CommentThreadTabs) {
		return true
	}

	return false
}

// SetCommentThreadTabs gets a reference to the given []CommentThread and assigns it to the CommentThreadTabs field.
func (o *TemplateRecipientTabs) SetCommentThreadTabs(v []CommentThread) {
	o.CommentThreadTabs = v
}

// GetCommissionCountyTabs returns the CommissionCountyTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCommissionCountyTabs() []CommissionCounty {
	if o == nil || IsNil(o.CommissionCountyTabs) {
		var ret []CommissionCounty
		return ret
	}
	return o.CommissionCountyTabs
}

// GetCommissionCountyTabsOk returns a tuple with the CommissionCountyTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCommissionCountyTabsOk() ([]CommissionCounty, bool) {
	if o == nil || IsNil(o.CommissionCountyTabs) {
		return nil, false
	}
	return o.CommissionCountyTabs, true
}

// HasCommissionCountyTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCommissionCountyTabs() bool {
	if o != nil && !IsNil(o.CommissionCountyTabs) {
		return true
	}

	return false
}

// SetCommissionCountyTabs gets a reference to the given []CommissionCounty and assigns it to the CommissionCountyTabs field.
func (o *TemplateRecipientTabs) SetCommissionCountyTabs(v []CommissionCounty) {
	o.CommissionCountyTabs = v
}

// GetCommissionExpirationTabs returns the CommissionExpirationTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCommissionExpirationTabs() []CommissionExpiration {
	if o == nil || IsNil(o.CommissionExpirationTabs) {
		var ret []CommissionExpiration
		return ret
	}
	return o.CommissionExpirationTabs
}

// GetCommissionExpirationTabsOk returns a tuple with the CommissionExpirationTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCommissionExpirationTabsOk() ([]CommissionExpiration, bool) {
	if o == nil || IsNil(o.CommissionExpirationTabs) {
		return nil, false
	}
	return o.CommissionExpirationTabs, true
}

// HasCommissionExpirationTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCommissionExpirationTabs() bool {
	if o != nil && !IsNil(o.CommissionExpirationTabs) {
		return true
	}

	return false
}

// SetCommissionExpirationTabs gets a reference to the given []CommissionExpiration and assigns it to the CommissionExpirationTabs field.
func (o *TemplateRecipientTabs) SetCommissionExpirationTabs(v []CommissionExpiration) {
	o.CommissionExpirationTabs = v
}

// GetCommissionNumberTabs returns the CommissionNumberTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCommissionNumberTabs() []CommissionNumber {
	if o == nil || IsNil(o.CommissionNumberTabs) {
		var ret []CommissionNumber
		return ret
	}
	return o.CommissionNumberTabs
}

// GetCommissionNumberTabsOk returns a tuple with the CommissionNumberTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCommissionNumberTabsOk() ([]CommissionNumber, bool) {
	if o == nil || IsNil(o.CommissionNumberTabs) {
		return nil, false
	}
	return o.CommissionNumberTabs, true
}

// HasCommissionNumberTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCommissionNumberTabs() bool {
	if o != nil && !IsNil(o.CommissionNumberTabs) {
		return true
	}

	return false
}

// SetCommissionNumberTabs gets a reference to the given []CommissionNumber and assigns it to the CommissionNumberTabs field.
func (o *TemplateRecipientTabs) SetCommissionNumberTabs(v []CommissionNumber) {
	o.CommissionNumberTabs = v
}

// GetCommissionStateTabs returns the CommissionStateTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCommissionStateTabs() []CommissionState {
	if o == nil || IsNil(o.CommissionStateTabs) {
		var ret []CommissionState
		return ret
	}
	return o.CommissionStateTabs
}

// GetCommissionStateTabsOk returns a tuple with the CommissionStateTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCommissionStateTabsOk() ([]CommissionState, bool) {
	if o == nil || IsNil(o.CommissionStateTabs) {
		return nil, false
	}
	return o.CommissionStateTabs, true
}

// HasCommissionStateTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCommissionStateTabs() bool {
	if o != nil && !IsNil(o.CommissionStateTabs) {
		return true
	}

	return false
}

// SetCommissionStateTabs gets a reference to the given []CommissionState and assigns it to the CommissionStateTabs field.
func (o *TemplateRecipientTabs) SetCommissionStateTabs(v []CommissionState) {
	o.CommissionStateTabs = v
}

// GetCompanyTabs returns the CompanyTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetCompanyTabs() []Company {
	if o == nil || IsNil(o.CompanyTabs) {
		var ret []Company
		return ret
	}
	return o.CompanyTabs
}

// GetCompanyTabsOk returns a tuple with the CompanyTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetCompanyTabsOk() ([]Company, bool) {
	if o == nil || IsNil(o.CompanyTabs) {
		return nil, false
	}
	return o.CompanyTabs, true
}

// HasCompanyTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasCompanyTabs() bool {
	if o != nil && !IsNil(o.CompanyTabs) {
		return true
	}

	return false
}

// SetCompanyTabs gets a reference to the given []Company and assigns it to the CompanyTabs field.
func (o *TemplateRecipientTabs) SetCompanyTabs(v []Company) {
	o.CompanyTabs = v
}

// GetDateSignedTabs returns the DateSignedTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetDateSignedTabs() []DateSigned {
	if o == nil || IsNil(o.DateSignedTabs) {
		var ret []DateSigned
		return ret
	}
	return o.DateSignedTabs
}

// GetDateSignedTabsOk returns a tuple with the DateSignedTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetDateSignedTabsOk() ([]DateSigned, bool) {
	if o == nil || IsNil(o.DateSignedTabs) {
		return nil, false
	}
	return o.DateSignedTabs, true
}

// HasDateSignedTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasDateSignedTabs() bool {
	if o != nil && !IsNil(o.DateSignedTabs) {
		return true
	}

	return false
}

// SetDateSignedTabs gets a reference to the given []DateSigned and assigns it to the DateSignedTabs field.
func (o *TemplateRecipientTabs) SetDateSignedTabs(v []DateSigned) {
	o.DateSignedTabs = v
}

// GetDateTabs returns the DateTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetDateTabs() []Date {
	if o == nil || IsNil(o.DateTabs) {
		var ret []Date
		return ret
	}
	return o.DateTabs
}

// GetDateTabsOk returns a tuple with the DateTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetDateTabsOk() ([]Date, bool) {
	if o == nil || IsNil(o.DateTabs) {
		return nil, false
	}
	return o.DateTabs, true
}

// HasDateTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasDateTabs() bool {
	if o != nil && !IsNil(o.DateTabs) {
		return true
	}

	return false
}

// SetDateTabs gets a reference to the given []Date and assigns it to the DateTabs field.
func (o *TemplateRecipientTabs) SetDateTabs(v []Date) {
	o.DateTabs = v
}

// GetDeclineTabs returns the DeclineTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetDeclineTabs() []Decline {
	if o == nil || IsNil(o.DeclineTabs) {
		var ret []Decline
		return ret
	}
	return o.DeclineTabs
}

// GetDeclineTabsOk returns a tuple with the DeclineTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetDeclineTabsOk() ([]Decline, bool) {
	if o == nil || IsNil(o.DeclineTabs) {
		return nil, false
	}
	return o.DeclineTabs, true
}

// HasDeclineTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasDeclineTabs() bool {
	if o != nil && !IsNil(o.DeclineTabs) {
		return true
	}

	return false
}

// SetDeclineTabs gets a reference to the given []Decline and assigns it to the DeclineTabs field.
func (o *TemplateRecipientTabs) SetDeclineTabs(v []Decline) {
	o.DeclineTabs = v
}

// GetDrawTabs returns the DrawTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetDrawTabs() []Draw {
	if o == nil || IsNil(o.DrawTabs) {
		var ret []Draw
		return ret
	}
	return o.DrawTabs
}

// GetDrawTabsOk returns a tuple with the DrawTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetDrawTabsOk() ([]Draw, bool) {
	if o == nil || IsNil(o.DrawTabs) {
		return nil, false
	}
	return o.DrawTabs, true
}

// HasDrawTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasDrawTabs() bool {
	if o != nil && !IsNil(o.DrawTabs) {
		return true
	}

	return false
}

// SetDrawTabs gets a reference to the given []Draw and assigns it to the DrawTabs field.
func (o *TemplateRecipientTabs) SetDrawTabs(v []Draw) {
	o.DrawTabs = v
}

// GetEmailAddressTabs returns the EmailAddressTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetEmailAddressTabs() []EmailAddress {
	if o == nil || IsNil(o.EmailAddressTabs) {
		var ret []EmailAddress
		return ret
	}
	return o.EmailAddressTabs
}

// GetEmailAddressTabsOk returns a tuple with the EmailAddressTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetEmailAddressTabsOk() ([]EmailAddress, bool) {
	if o == nil || IsNil(o.EmailAddressTabs) {
		return nil, false
	}
	return o.EmailAddressTabs, true
}

// HasEmailAddressTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasEmailAddressTabs() bool {
	if o != nil && !IsNil(o.EmailAddressTabs) {
		return true
	}

	return false
}

// SetEmailAddressTabs gets a reference to the given []EmailAddress and assigns it to the EmailAddressTabs field.
func (o *TemplateRecipientTabs) SetEmailAddressTabs(v []EmailAddress) {
	o.EmailAddressTabs = v
}

// GetEmailTabs returns the EmailTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetEmailTabs() []Email {
	if o == nil || IsNil(o.EmailTabs) {
		var ret []Email
		return ret
	}
	return o.EmailTabs
}

// GetEmailTabsOk returns a tuple with the EmailTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetEmailTabsOk() ([]Email, bool) {
	if o == nil || IsNil(o.EmailTabs) {
		return nil, false
	}
	return o.EmailTabs, true
}

// HasEmailTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasEmailTabs() bool {
	if o != nil && !IsNil(o.EmailTabs) {
		return true
	}

	return false
}

// SetEmailTabs gets a reference to the given []Email and assigns it to the EmailTabs field.
func (o *TemplateRecipientTabs) SetEmailTabs(v []Email) {
	o.EmailTabs = v
}

// GetEnvelopeIdTabs returns the EnvelopeIdTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetEnvelopeIdTabs() []EnvelopeId {
	if o == nil || IsNil(o.EnvelopeIdTabs) {
		var ret []EnvelopeId
		return ret
	}
	return o.EnvelopeIdTabs
}

// GetEnvelopeIdTabsOk returns a tuple with the EnvelopeIdTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetEnvelopeIdTabsOk() ([]EnvelopeId, bool) {
	if o == nil || IsNil(o.EnvelopeIdTabs) {
		return nil, false
	}
	return o.EnvelopeIdTabs, true
}

// HasEnvelopeIdTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasEnvelopeIdTabs() bool {
	if o != nil && !IsNil(o.EnvelopeIdTabs) {
		return true
	}

	return false
}

// SetEnvelopeIdTabs gets a reference to the given []EnvelopeId and assigns it to the EnvelopeIdTabs field.
func (o *TemplateRecipientTabs) SetEnvelopeIdTabs(v []EnvelopeId) {
	o.EnvelopeIdTabs = v
}

// GetFirstNameTabs returns the FirstNameTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetFirstNameTabs() []FirstName {
	if o == nil || IsNil(o.FirstNameTabs) {
		var ret []FirstName
		return ret
	}
	return o.FirstNameTabs
}

// GetFirstNameTabsOk returns a tuple with the FirstNameTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetFirstNameTabsOk() ([]FirstName, bool) {
	if o == nil || IsNil(o.FirstNameTabs) {
		return nil, false
	}
	return o.FirstNameTabs, true
}

// HasFirstNameTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasFirstNameTabs() bool {
	if o != nil && !IsNil(o.FirstNameTabs) {
		return true
	}

	return false
}

// SetFirstNameTabs gets a reference to the given []FirstName and assigns it to the FirstNameTabs field.
func (o *TemplateRecipientTabs) SetFirstNameTabs(v []FirstName) {
	o.FirstNameTabs = v
}

// GetFormulaTabs returns the FormulaTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetFormulaTabs() []FormulaTab {
	if o == nil || IsNil(o.FormulaTabs) {
		var ret []FormulaTab
		return ret
	}
	return o.FormulaTabs
}

// GetFormulaTabsOk returns a tuple with the FormulaTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetFormulaTabsOk() ([]FormulaTab, bool) {
	if o == nil || IsNil(o.FormulaTabs) {
		return nil, false
	}
	return o.FormulaTabs, true
}

// HasFormulaTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasFormulaTabs() bool {
	if o != nil && !IsNil(o.FormulaTabs) {
		return true
	}

	return false
}

// SetFormulaTabs gets a reference to the given []FormulaTab and assigns it to the FormulaTabs field.
func (o *TemplateRecipientTabs) SetFormulaTabs(v []FormulaTab) {
	o.FormulaTabs = v
}

// GetFullNameTabs returns the FullNameTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetFullNameTabs() []FullName {
	if o == nil || IsNil(o.FullNameTabs) {
		var ret []FullName
		return ret
	}
	return o.FullNameTabs
}

// GetFullNameTabsOk returns a tuple with the FullNameTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetFullNameTabsOk() ([]FullName, bool) {
	if o == nil || IsNil(o.FullNameTabs) {
		return nil, false
	}
	return o.FullNameTabs, true
}

// HasFullNameTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasFullNameTabs() bool {
	if o != nil && !IsNil(o.FullNameTabs) {
		return true
	}

	return false
}

// SetFullNameTabs gets a reference to the given []FullName and assigns it to the FullNameTabs field.
func (o *TemplateRecipientTabs) SetFullNameTabs(v []FullName) {
	o.FullNameTabs = v
}

// GetInitialHereTabs returns the InitialHereTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetInitialHereTabs() []InitialHere {
	if o == nil || IsNil(o.InitialHereTabs) {
		var ret []InitialHere
		return ret
	}
	return o.InitialHereTabs
}

// GetInitialHereTabsOk returns a tuple with the InitialHereTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetInitialHereTabsOk() ([]InitialHere, bool) {
	if o == nil || IsNil(o.InitialHereTabs) {
		return nil, false
	}
	return o.InitialHereTabs, true
}

// HasInitialHereTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasInitialHereTabs() bool {
	if o != nil && !IsNil(o.InitialHereTabs) {
		return true
	}

	return false
}

// SetInitialHereTabs gets a reference to the given []InitialHere and assigns it to the InitialHereTabs field.
func (o *TemplateRecipientTabs) SetInitialHereTabs(v []InitialHere) {
	o.InitialHereTabs = v
}

// GetLastNameTabs returns the LastNameTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetLastNameTabs() []LastName {
	if o == nil || IsNil(o.LastNameTabs) {
		var ret []LastName
		return ret
	}
	return o.LastNameTabs
}

// GetLastNameTabsOk returns a tuple with the LastNameTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetLastNameTabsOk() ([]LastName, bool) {
	if o == nil || IsNil(o.LastNameTabs) {
		return nil, false
	}
	return o.LastNameTabs, true
}

// HasLastNameTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasLastNameTabs() bool {
	if o != nil && !IsNil(o.LastNameTabs) {
		return true
	}

	return false
}

// SetLastNameTabs gets a reference to the given []LastName and assigns it to the LastNameTabs field.
func (o *TemplateRecipientTabs) SetLastNameTabs(v []LastName) {
	o.LastNameTabs = v
}

// GetListTabs returns the ListTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetListTabs() []List {
	if o == nil || IsNil(o.ListTabs) {
		var ret []List
		return ret
	}
	return o.ListTabs
}

// GetListTabsOk returns a tuple with the ListTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetListTabsOk() ([]List, bool) {
	if o == nil || IsNil(o.ListTabs) {
		return nil, false
	}
	return o.ListTabs, true
}

// HasListTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasListTabs() bool {
	if o != nil && !IsNil(o.ListTabs) {
		return true
	}

	return false
}

// SetListTabs gets a reference to the given []List and assigns it to the ListTabs field.
func (o *TemplateRecipientTabs) SetListTabs(v []List) {
	o.ListTabs = v
}

// GetNotarizeTabs returns the NotarizeTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetNotarizeTabs() []Notarize {
	if o == nil || IsNil(o.NotarizeTabs) {
		var ret []Notarize
		return ret
	}
	return o.NotarizeTabs
}

// GetNotarizeTabsOk returns a tuple with the NotarizeTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetNotarizeTabsOk() ([]Notarize, bool) {
	if o == nil || IsNil(o.NotarizeTabs) {
		return nil, false
	}
	return o.NotarizeTabs, true
}

// HasNotarizeTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasNotarizeTabs() bool {
	if o != nil && !IsNil(o.NotarizeTabs) {
		return true
	}

	return false
}

// SetNotarizeTabs gets a reference to the given []Notarize and assigns it to the NotarizeTabs field.
func (o *TemplateRecipientTabs) SetNotarizeTabs(v []Notarize) {
	o.NotarizeTabs = v
}

// GetNotarySealTabs returns the NotarySealTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetNotarySealTabs() []NotarySeal {
	if o == nil || IsNil(o.NotarySealTabs) {
		var ret []NotarySeal
		return ret
	}
	return o.NotarySealTabs
}

// GetNotarySealTabsOk returns a tuple with the NotarySealTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetNotarySealTabsOk() ([]NotarySeal, bool) {
	if o == nil || IsNil(o.NotarySealTabs) {
		return nil, false
	}
	return o.NotarySealTabs, true
}

// HasNotarySealTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasNotarySealTabs() bool {
	if o != nil && !IsNil(o.NotarySealTabs) {
		return true
	}

	return false
}

// SetNotarySealTabs gets a reference to the given []NotarySeal and assigns it to the NotarySealTabs field.
func (o *TemplateRecipientTabs) SetNotarySealTabs(v []NotarySeal) {
	o.NotarySealTabs = v
}

// GetNoteTabs returns the NoteTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetNoteTabs() []Note {
	if o == nil || IsNil(o.NoteTabs) {
		var ret []Note
		return ret
	}
	return o.NoteTabs
}

// GetNoteTabsOk returns a tuple with the NoteTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetNoteTabsOk() ([]Note, bool) {
	if o == nil || IsNil(o.NoteTabs) {
		return nil, false
	}
	return o.NoteTabs, true
}

// HasNoteTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasNoteTabs() bool {
	if o != nil && !IsNil(o.NoteTabs) {
		return true
	}

	return false
}

// SetNoteTabs gets a reference to the given []Note and assigns it to the NoteTabs field.
func (o *TemplateRecipientTabs) SetNoteTabs(v []Note) {
	o.NoteTabs = v
}

// GetNumberTabs returns the NumberTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetNumberTabs() []Number {
	if o == nil || IsNil(o.NumberTabs) {
		var ret []Number
		return ret
	}
	return o.NumberTabs
}

// GetNumberTabsOk returns a tuple with the NumberTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetNumberTabsOk() ([]Number, bool) {
	if o == nil || IsNil(o.NumberTabs) {
		return nil, false
	}
	return o.NumberTabs, true
}

// HasNumberTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasNumberTabs() bool {
	if o != nil && !IsNil(o.NumberTabs) {
		return true
	}

	return false
}

// SetNumberTabs gets a reference to the given []Number and assigns it to the NumberTabs field.
func (o *TemplateRecipientTabs) SetNumberTabs(v []Number) {
	o.NumberTabs = v
}

// GetNumericalTabs returns the NumericalTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetNumericalTabs() []Numerical {
	if o == nil || IsNil(o.NumericalTabs) {
		var ret []Numerical
		return ret
	}
	return o.NumericalTabs
}

// GetNumericalTabsOk returns a tuple with the NumericalTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetNumericalTabsOk() ([]Numerical, bool) {
	if o == nil || IsNil(o.NumericalTabs) {
		return nil, false
	}
	return o.NumericalTabs, true
}

// HasNumericalTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasNumericalTabs() bool {
	if o != nil && !IsNil(o.NumericalTabs) {
		return true
	}

	return false
}

// SetNumericalTabs gets a reference to the given []Numerical and assigns it to the NumericalTabs field.
func (o *TemplateRecipientTabs) SetNumericalTabs(v []Numerical) {
	o.NumericalTabs = v
}

// GetPhoneNumberTabs returns the PhoneNumberTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetPhoneNumberTabs() []PhoneNumber {
	if o == nil || IsNil(o.PhoneNumberTabs) {
		var ret []PhoneNumber
		return ret
	}
	return o.PhoneNumberTabs
}

// GetPhoneNumberTabsOk returns a tuple with the PhoneNumberTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetPhoneNumberTabsOk() ([]PhoneNumber, bool) {
	if o == nil || IsNil(o.PhoneNumberTabs) {
		return nil, false
	}
	return o.PhoneNumberTabs, true
}

// HasPhoneNumberTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasPhoneNumberTabs() bool {
	if o != nil && !IsNil(o.PhoneNumberTabs) {
		return true
	}

	return false
}

// SetPhoneNumberTabs gets a reference to the given []PhoneNumber and assigns it to the PhoneNumberTabs field.
func (o *TemplateRecipientTabs) SetPhoneNumberTabs(v []PhoneNumber) {
	o.PhoneNumberTabs = v
}

// GetPolyLineOverlayTabs returns the PolyLineOverlayTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetPolyLineOverlayTabs() []PolyLineOverlay {
	if o == nil || IsNil(o.PolyLineOverlayTabs) {
		var ret []PolyLineOverlay
		return ret
	}
	return o.PolyLineOverlayTabs
}

// GetPolyLineOverlayTabsOk returns a tuple with the PolyLineOverlayTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetPolyLineOverlayTabsOk() ([]PolyLineOverlay, bool) {
	if o == nil || IsNil(o.PolyLineOverlayTabs) {
		return nil, false
	}
	return o.PolyLineOverlayTabs, true
}

// HasPolyLineOverlayTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasPolyLineOverlayTabs() bool {
	if o != nil && !IsNil(o.PolyLineOverlayTabs) {
		return true
	}

	return false
}

// SetPolyLineOverlayTabs gets a reference to the given []PolyLineOverlay and assigns it to the PolyLineOverlayTabs field.
func (o *TemplateRecipientTabs) SetPolyLineOverlayTabs(v []PolyLineOverlay) {
	o.PolyLineOverlayTabs = v
}

// GetPrefillTabs returns the PrefillTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetPrefillTabs() PrefillTabs {
	if o == nil || IsNil(o.PrefillTabs) {
		var ret PrefillTabs
		return ret
	}
	return *o.PrefillTabs
}

// GetPrefillTabsOk returns a tuple with the PrefillTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetPrefillTabsOk() (*PrefillTabs, bool) {
	if o == nil || IsNil(o.PrefillTabs) {
		return nil, false
	}
	return o.PrefillTabs, true
}

// HasPrefillTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasPrefillTabs() bool {
	if o != nil && !IsNil(o.PrefillTabs) {
		return true
	}

	return false
}

// SetPrefillTabs gets a reference to the given PrefillTabs and assigns it to the PrefillTabs field.
func (o *TemplateRecipientTabs) SetPrefillTabs(v PrefillTabs) {
	o.PrefillTabs = &v
}

// GetRadioGroupTabs returns the RadioGroupTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetRadioGroupTabs() []RadioGroup {
	if o == nil || IsNil(o.RadioGroupTabs) {
		var ret []RadioGroup
		return ret
	}
	return o.RadioGroupTabs
}

// GetRadioGroupTabsOk returns a tuple with the RadioGroupTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetRadioGroupTabsOk() ([]RadioGroup, bool) {
	if o == nil || IsNil(o.RadioGroupTabs) {
		return nil, false
	}
	return o.RadioGroupTabs, true
}

// HasRadioGroupTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasRadioGroupTabs() bool {
	if o != nil && !IsNil(o.RadioGroupTabs) {
		return true
	}

	return false
}

// SetRadioGroupTabs gets a reference to the given []RadioGroup and assigns it to the RadioGroupTabs field.
func (o *TemplateRecipientTabs) SetRadioGroupTabs(v []RadioGroup) {
	o.RadioGroupTabs = v
}

// GetSignerAttachmentTabs returns the SignerAttachmentTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetSignerAttachmentTabs() []SignerAttachment {
	if o == nil || IsNil(o.SignerAttachmentTabs) {
		var ret []SignerAttachment
		return ret
	}
	return o.SignerAttachmentTabs
}

// GetSignerAttachmentTabsOk returns a tuple with the SignerAttachmentTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetSignerAttachmentTabsOk() ([]SignerAttachment, bool) {
	if o == nil || IsNil(o.SignerAttachmentTabs) {
		return nil, false
	}
	return o.SignerAttachmentTabs, true
}

// HasSignerAttachmentTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasSignerAttachmentTabs() bool {
	if o != nil && !IsNil(o.SignerAttachmentTabs) {
		return true
	}

	return false
}

// SetSignerAttachmentTabs gets a reference to the given []SignerAttachment and assigns it to the SignerAttachmentTabs field.
func (o *TemplateRecipientTabs) SetSignerAttachmentTabs(v []SignerAttachment) {
	o.SignerAttachmentTabs = v
}

// GetSignHereTabs returns the SignHereTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetSignHereTabs() []SignHere {
	if o == nil || IsNil(o.SignHereTabs) {
		var ret []SignHere
		return ret
	}
	return o.SignHereTabs
}

// GetSignHereTabsOk returns a tuple with the SignHereTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetSignHereTabsOk() ([]SignHere, bool) {
	if o == nil || IsNil(o.SignHereTabs) {
		return nil, false
	}
	return o.SignHereTabs, true
}

// HasSignHereTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasSignHereTabs() bool {
	if o != nil && !IsNil(o.SignHereTabs) {
		return true
	}

	return false
}

// SetSignHereTabs gets a reference to the given []SignHere and assigns it to the SignHereTabs field.
func (o *TemplateRecipientTabs) SetSignHereTabs(v []SignHere) {
	o.SignHereTabs = v
}

// GetSmartSectionTabs returns the SmartSectionTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetSmartSectionTabs() []SmartSection {
	if o == nil || IsNil(o.SmartSectionTabs) {
		var ret []SmartSection
		return ret
	}
	return o.SmartSectionTabs
}

// GetSmartSectionTabsOk returns a tuple with the SmartSectionTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetSmartSectionTabsOk() ([]SmartSection, bool) {
	if o == nil || IsNil(o.SmartSectionTabs) {
		return nil, false
	}
	return o.SmartSectionTabs, true
}

// HasSmartSectionTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasSmartSectionTabs() bool {
	if o != nil && !IsNil(o.SmartSectionTabs) {
		return true
	}

	return false
}

// SetSmartSectionTabs gets a reference to the given []SmartSection and assigns it to the SmartSectionTabs field.
func (o *TemplateRecipientTabs) SetSmartSectionTabs(v []SmartSection) {
	o.SmartSectionTabs = v
}

// GetSsnTabs returns the SsnTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetSsnTabs() []Ssn {
	if o == nil || IsNil(o.SsnTabs) {
		var ret []Ssn
		return ret
	}
	return o.SsnTabs
}

// GetSsnTabsOk returns a tuple with the SsnTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetSsnTabsOk() ([]Ssn, bool) {
	if o == nil || IsNil(o.SsnTabs) {
		return nil, false
	}
	return o.SsnTabs, true
}

// HasSsnTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasSsnTabs() bool {
	if o != nil && !IsNil(o.SsnTabs) {
		return true
	}

	return false
}

// SetSsnTabs gets a reference to the given []Ssn and assigns it to the SsnTabs field.
func (o *TemplateRecipientTabs) SetSsnTabs(v []Ssn) {
	o.SsnTabs = v
}

// GetTabGroups returns the TabGroups field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetTabGroups() []TabGroup {
	if o == nil || IsNil(o.TabGroups) {
		var ret []TabGroup
		return ret
	}
	return o.TabGroups
}

// GetTabGroupsOk returns a tuple with the TabGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetTabGroupsOk() ([]TabGroup, bool) {
	if o == nil || IsNil(o.TabGroups) {
		return nil, false
	}
	return o.TabGroups, true
}

// HasTabGroups returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasTabGroups() bool {
	if o != nil && !IsNil(o.TabGroups) {
		return true
	}

	return false
}

// SetTabGroups gets a reference to the given []TabGroup and assigns it to the TabGroups field.
func (o *TemplateRecipientTabs) SetTabGroups(v []TabGroup) {
	o.TabGroups = v
}

// GetTextTabs returns the TextTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetTextTabs() []Text {
	if o == nil || IsNil(o.TextTabs) {
		var ret []Text
		return ret
	}
	return o.TextTabs
}

// GetTextTabsOk returns a tuple with the TextTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetTextTabsOk() ([]Text, bool) {
	if o == nil || IsNil(o.TextTabs) {
		return nil, false
	}
	return o.TextTabs, true
}

// HasTextTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasTextTabs() bool {
	if o != nil && !IsNil(o.TextTabs) {
		return true
	}

	return false
}

// SetTextTabs gets a reference to the given []Text and assigns it to the TextTabs field.
func (o *TemplateRecipientTabs) SetTextTabs(v []Text) {
	o.TextTabs = v
}

// GetTitleTabs returns the TitleTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetTitleTabs() []Title {
	if o == nil || IsNil(o.TitleTabs) {
		var ret []Title
		return ret
	}
	return o.TitleTabs
}

// GetTitleTabsOk returns a tuple with the TitleTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetTitleTabsOk() ([]Title, bool) {
	if o == nil || IsNil(o.TitleTabs) {
		return nil, false
	}
	return o.TitleTabs, true
}

// HasTitleTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasTitleTabs() bool {
	if o != nil && !IsNil(o.TitleTabs) {
		return true
	}

	return false
}

// SetTitleTabs gets a reference to the given []Title and assigns it to the TitleTabs field.
func (o *TemplateRecipientTabs) SetTitleTabs(v []Title) {
	o.TitleTabs = v
}

// GetViewTabs returns the ViewTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetViewTabs() []View {
	if o == nil || IsNil(o.ViewTabs) {
		var ret []View
		return ret
	}
	return o.ViewTabs
}

// GetViewTabsOk returns a tuple with the ViewTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetViewTabsOk() ([]View, bool) {
	if o == nil || IsNil(o.ViewTabs) {
		return nil, false
	}
	return o.ViewTabs, true
}

// HasViewTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasViewTabs() bool {
	if o != nil && !IsNil(o.ViewTabs) {
		return true
	}

	return false
}

// SetViewTabs gets a reference to the given []View and assigns it to the ViewTabs field.
func (o *TemplateRecipientTabs) SetViewTabs(v []View) {
	o.ViewTabs = v
}

// GetZipTabs returns the ZipTabs field value if set, zero value otherwise.
func (o *TemplateRecipientTabs) GetZipTabs() []Zip {
	if o == nil || IsNil(o.ZipTabs) {
		var ret []Zip
		return ret
	}
	return o.ZipTabs
}

// GetZipTabsOk returns a tuple with the ZipTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRecipientTabs) GetZipTabsOk() ([]Zip, bool) {
	if o == nil || IsNil(o.ZipTabs) {
		return nil, false
	}
	return o.ZipTabs, true
}

// HasZipTabs returns a boolean if a field has been set.
func (o *TemplateRecipientTabs) HasZipTabs() bool {
	if o != nil && !IsNil(o.ZipTabs) {
		return true
	}

	return false
}

// SetZipTabs gets a reference to the given []Zip and assigns it to the ZipTabs field.
func (o *TemplateRecipientTabs) SetZipTabs(v []Zip) {
	o.ZipTabs = v
}

func (o TemplateRecipientTabs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateRecipientTabs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApproveTabs) {
		toSerialize["approveTabs"] = o.ApproveTabs
	}
	if !IsNil(o.CheckboxTabs) {
		toSerialize["checkboxTabs"] = o.CheckboxTabs
	}
	if !IsNil(o.CommentThreadTabs) {
		toSerialize["commentThreadTabs"] = o.CommentThreadTabs
	}
	if !IsNil(o.CommissionCountyTabs) {
		toSerialize["commissionCountyTabs"] = o.CommissionCountyTabs
	}
	if !IsNil(o.CommissionExpirationTabs) {
		toSerialize["commissionExpirationTabs"] = o.CommissionExpirationTabs
	}
	if !IsNil(o.CommissionNumberTabs) {
		toSerialize["commissionNumberTabs"] = o.CommissionNumberTabs
	}
	if !IsNil(o.CommissionStateTabs) {
		toSerialize["commissionStateTabs"] = o.CommissionStateTabs
	}
	if !IsNil(o.CompanyTabs) {
		toSerialize["companyTabs"] = o.CompanyTabs
	}
	if !IsNil(o.DateSignedTabs) {
		toSerialize["dateSignedTabs"] = o.DateSignedTabs
	}
	if !IsNil(o.DateTabs) {
		toSerialize["dateTabs"] = o.DateTabs
	}
	if !IsNil(o.DeclineTabs) {
		toSerialize["declineTabs"] = o.DeclineTabs
	}
	if !IsNil(o.DrawTabs) {
		toSerialize["drawTabs"] = o.DrawTabs
	}
	if !IsNil(o.EmailAddressTabs) {
		toSerialize["emailAddressTabs"] = o.EmailAddressTabs
	}
	if !IsNil(o.EmailTabs) {
		toSerialize["emailTabs"] = o.EmailTabs
	}
	if !IsNil(o.EnvelopeIdTabs) {
		toSerialize["envelopeIdTabs"] = o.EnvelopeIdTabs
	}
	if !IsNil(o.FirstNameTabs) {
		toSerialize["firstNameTabs"] = o.FirstNameTabs
	}
	if !IsNil(o.FormulaTabs) {
		toSerialize["formulaTabs"] = o.FormulaTabs
	}
	if !IsNil(o.FullNameTabs) {
		toSerialize["fullNameTabs"] = o.FullNameTabs
	}
	if !IsNil(o.InitialHereTabs) {
		toSerialize["initialHereTabs"] = o.InitialHereTabs
	}
	if !IsNil(o.LastNameTabs) {
		toSerialize["lastNameTabs"] = o.LastNameTabs
	}
	if !IsNil(o.ListTabs) {
		toSerialize["listTabs"] = o.ListTabs
	}
	if !IsNil(o.NotarizeTabs) {
		toSerialize["notarizeTabs"] = o.NotarizeTabs
	}
	if !IsNil(o.NotarySealTabs) {
		toSerialize["notarySealTabs"] = o.NotarySealTabs
	}
	if !IsNil(o.NoteTabs) {
		toSerialize["noteTabs"] = o.NoteTabs
	}
	if !IsNil(o.NumberTabs) {
		toSerialize["numberTabs"] = o.NumberTabs
	}
	if !IsNil(o.NumericalTabs) {
		toSerialize["numericalTabs"] = o.NumericalTabs
	}
	if !IsNil(o.PhoneNumberTabs) {
		toSerialize["phoneNumberTabs"] = o.PhoneNumberTabs
	}
	if !IsNil(o.PolyLineOverlayTabs) {
		toSerialize["polyLineOverlayTabs"] = o.PolyLineOverlayTabs
	}
	if !IsNil(o.PrefillTabs) {
		toSerialize["prefillTabs"] = o.PrefillTabs
	}
	if !IsNil(o.RadioGroupTabs) {
		toSerialize["radioGroupTabs"] = o.RadioGroupTabs
	}
	if !IsNil(o.SignerAttachmentTabs) {
		toSerialize["signerAttachmentTabs"] = o.SignerAttachmentTabs
	}
	if !IsNil(o.SignHereTabs) {
		toSerialize["signHereTabs"] = o.SignHereTabs
	}
	if !IsNil(o.SmartSectionTabs) {
		toSerialize["smartSectionTabs"] = o.SmartSectionTabs
	}
	if !IsNil(o.SsnTabs) {
		toSerialize["ssnTabs"] = o.SsnTabs
	}
	if !IsNil(o.TabGroups) {
		toSerialize["tabGroups"] = o.TabGroups
	}
	if !IsNil(o.TextTabs) {
		toSerialize["textTabs"] = o.TextTabs
	}
	if !IsNil(o.TitleTabs) {
		toSerialize["titleTabs"] = o.TitleTabs
	}
	if !IsNil(o.ViewTabs) {
		toSerialize["viewTabs"] = o.ViewTabs
	}
	if !IsNil(o.ZipTabs) {
		toSerialize["zipTabs"] = o.ZipTabs
	}
	return toSerialize, nil
}

type NullableTemplateRecipientTabs struct {
	value *TemplateRecipientTabs
	isSet bool
}

func (v NullableTemplateRecipientTabs) Get() *TemplateRecipientTabs {
	return v.value
}

func (v *NullableTemplateRecipientTabs) Set(val *TemplateRecipientTabs) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateRecipientTabs) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateRecipientTabs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateRecipientTabs(val *TemplateRecipientTabs) *NullableTemplateRecipientTabs {
	return &NullableTemplateRecipientTabs{value: val, isSet: true}
}

func (v NullableTemplateRecipientTabs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateRecipientTabs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


