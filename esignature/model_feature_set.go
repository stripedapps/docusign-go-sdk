/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeatureSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureSet{}

// FeatureSet This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
type FeatureSet struct {
	// Reserved for DocuSign.
	CurrencyFeatureSetPrices []CurrencyFeatureSetPrice `json:"currencyFeatureSetPrices,omitempty"`
	// Reserved for DocuSign.
	EnvelopeFee *string `json:"envelopeFee,omitempty"`
	// Reserved for DocuSign.
	FeatureSetId *string `json:"featureSetId,omitempty"`
	// Reserved for DocuSign.
	FixedFee *string `json:"fixedFee,omitempty"`
	// Reserved for DocuSign.
	Is21CFRPart11 *string `json:"is21CFRPart11,omitempty"`
	// Reserved for DocuSign.
	IsActive *string `json:"isActive,omitempty"`
	// When **true,** the feature set is actively enabled as part of the plan.
	IsEnabled *string `json:"isEnabled,omitempty"`
	// Reserved for DocuSign.
	Name *string `json:"name,omitempty"`
	// Reserved for DocuSign.
	SeatFee *string `json:"seatFee,omitempty"`
}

// NewFeatureSet instantiates a new FeatureSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureSet() *FeatureSet {
	this := FeatureSet{}
	return &this
}

// NewFeatureSetWithDefaults instantiates a new FeatureSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureSetWithDefaults() *FeatureSet {
	this := FeatureSet{}
	return &this
}

// GetCurrencyFeatureSetPrices returns the CurrencyFeatureSetPrices field value if set, zero value otherwise.
func (o *FeatureSet) GetCurrencyFeatureSetPrices() []CurrencyFeatureSetPrice {
	if o == nil || IsNil(o.CurrencyFeatureSetPrices) {
		var ret []CurrencyFeatureSetPrice
		return ret
	}
	return o.CurrencyFeatureSetPrices
}

// GetCurrencyFeatureSetPricesOk returns a tuple with the CurrencyFeatureSetPrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetCurrencyFeatureSetPricesOk() ([]CurrencyFeatureSetPrice, bool) {
	if o == nil || IsNil(o.CurrencyFeatureSetPrices) {
		return nil, false
	}
	return o.CurrencyFeatureSetPrices, true
}

// HasCurrencyFeatureSetPrices returns a boolean if a field has been set.
func (o *FeatureSet) HasCurrencyFeatureSetPrices() bool {
	if o != nil && !IsNil(o.CurrencyFeatureSetPrices) {
		return true
	}

	return false
}

// SetCurrencyFeatureSetPrices gets a reference to the given []CurrencyFeatureSetPrice and assigns it to the CurrencyFeatureSetPrices field.
func (o *FeatureSet) SetCurrencyFeatureSetPrices(v []CurrencyFeatureSetPrice) {
	o.CurrencyFeatureSetPrices = v
}

// GetEnvelopeFee returns the EnvelopeFee field value if set, zero value otherwise.
func (o *FeatureSet) GetEnvelopeFee() string {
	if o == nil || IsNil(o.EnvelopeFee) {
		var ret string
		return ret
	}
	return *o.EnvelopeFee
}

// GetEnvelopeFeeOk returns a tuple with the EnvelopeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetEnvelopeFeeOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeFee) {
		return nil, false
	}
	return o.EnvelopeFee, true
}

// HasEnvelopeFee returns a boolean if a field has been set.
func (o *FeatureSet) HasEnvelopeFee() bool {
	if o != nil && !IsNil(o.EnvelopeFee) {
		return true
	}

	return false
}

// SetEnvelopeFee gets a reference to the given string and assigns it to the EnvelopeFee field.
func (o *FeatureSet) SetEnvelopeFee(v string) {
	o.EnvelopeFee = &v
}

// GetFeatureSetId returns the FeatureSetId field value if set, zero value otherwise.
func (o *FeatureSet) GetFeatureSetId() string {
	if o == nil || IsNil(o.FeatureSetId) {
		var ret string
		return ret
	}
	return *o.FeatureSetId
}

// GetFeatureSetIdOk returns a tuple with the FeatureSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetFeatureSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureSetId) {
		return nil, false
	}
	return o.FeatureSetId, true
}

// HasFeatureSetId returns a boolean if a field has been set.
func (o *FeatureSet) HasFeatureSetId() bool {
	if o != nil && !IsNil(o.FeatureSetId) {
		return true
	}

	return false
}

// SetFeatureSetId gets a reference to the given string and assigns it to the FeatureSetId field.
func (o *FeatureSet) SetFeatureSetId(v string) {
	o.FeatureSetId = &v
}

// GetFixedFee returns the FixedFee field value if set, zero value otherwise.
func (o *FeatureSet) GetFixedFee() string {
	if o == nil || IsNil(o.FixedFee) {
		var ret string
		return ret
	}
	return *o.FixedFee
}

// GetFixedFeeOk returns a tuple with the FixedFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetFixedFeeOk() (*string, bool) {
	if o == nil || IsNil(o.FixedFee) {
		return nil, false
	}
	return o.FixedFee, true
}

// HasFixedFee returns a boolean if a field has been set.
func (o *FeatureSet) HasFixedFee() bool {
	if o != nil && !IsNil(o.FixedFee) {
		return true
	}

	return false
}

// SetFixedFee gets a reference to the given string and assigns it to the FixedFee field.
func (o *FeatureSet) SetFixedFee(v string) {
	o.FixedFee = &v
}

// GetIs21CFRPart11 returns the Is21CFRPart11 field value if set, zero value otherwise.
func (o *FeatureSet) GetIs21CFRPart11() string {
	if o == nil || IsNil(o.Is21CFRPart11) {
		var ret string
		return ret
	}
	return *o.Is21CFRPart11
}

// GetIs21CFRPart11Ok returns a tuple with the Is21CFRPart11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetIs21CFRPart11Ok() (*string, bool) {
	if o == nil || IsNil(o.Is21CFRPart11) {
		return nil, false
	}
	return o.Is21CFRPart11, true
}

// HasIs21CFRPart11 returns a boolean if a field has been set.
func (o *FeatureSet) HasIs21CFRPart11() bool {
	if o != nil && !IsNil(o.Is21CFRPart11) {
		return true
	}

	return false
}

// SetIs21CFRPart11 gets a reference to the given string and assigns it to the Is21CFRPart11 field.
func (o *FeatureSet) SetIs21CFRPart11(v string) {
	o.Is21CFRPart11 = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *FeatureSet) GetIsActive() string {
	if o == nil || IsNil(o.IsActive) {
		var ret string
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetIsActiveOk() (*string, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *FeatureSet) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given string and assigns it to the IsActive field.
func (o *FeatureSet) SetIsActive(v string) {
	o.IsActive = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *FeatureSet) GetIsEnabled() string {
	if o == nil || IsNil(o.IsEnabled) {
		var ret string
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetIsEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *FeatureSet) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given string and assigns it to the IsEnabled field.
func (o *FeatureSet) SetIsEnabled(v string) {
	o.IsEnabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FeatureSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FeatureSet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FeatureSet) SetName(v string) {
	o.Name = &v
}

// GetSeatFee returns the SeatFee field value if set, zero value otherwise.
func (o *FeatureSet) GetSeatFee() string {
	if o == nil || IsNil(o.SeatFee) {
		var ret string
		return ret
	}
	return *o.SeatFee
}

// GetSeatFeeOk returns a tuple with the SeatFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSet) GetSeatFeeOk() (*string, bool) {
	if o == nil || IsNil(o.SeatFee) {
		return nil, false
	}
	return o.SeatFee, true
}

// HasSeatFee returns a boolean if a field has been set.
func (o *FeatureSet) HasSeatFee() bool {
	if o != nil && !IsNil(o.SeatFee) {
		return true
	}

	return false
}

// SetSeatFee gets a reference to the given string and assigns it to the SeatFee field.
func (o *FeatureSet) SetSeatFee(v string) {
	o.SeatFee = &v
}

func (o FeatureSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyFeatureSetPrices) {
		toSerialize["currencyFeatureSetPrices"] = o.CurrencyFeatureSetPrices
	}
	if !IsNil(o.EnvelopeFee) {
		toSerialize["envelopeFee"] = o.EnvelopeFee
	}
	if !IsNil(o.FeatureSetId) {
		toSerialize["featureSetId"] = o.FeatureSetId
	}
	if !IsNil(o.FixedFee) {
		toSerialize["fixedFee"] = o.FixedFee
	}
	if !IsNil(o.Is21CFRPart11) {
		toSerialize["is21CFRPart11"] = o.Is21CFRPart11
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SeatFee) {
		toSerialize["seatFee"] = o.SeatFee
	}
	return toSerialize, nil
}

type NullableFeatureSet struct {
	value *FeatureSet
	isSet bool
}

func (v NullableFeatureSet) Get() *FeatureSet {
	return v.value
}

func (v *NullableFeatureSet) Set(val *FeatureSet) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureSet) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureSet(val *FeatureSet) *NullableFeatureSet {
	return &NullableFeatureSet{value: val, isSet: true}
}

func (v NullableFeatureSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


