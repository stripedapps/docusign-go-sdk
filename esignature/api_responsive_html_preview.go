/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ResponsiveHtmlPreviewAPIService ResponsiveHtmlPreviewAPI service
type ResponsiveHtmlPreviewAPIService service

type ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest struct {
	ctx context.Context
	ApiService *ResponsiveHtmlPreviewAPIService
	accountId string
	envelopeId string
	documentHtmlDefinition *DocumentHtmlDefinition
}

func (r ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest) DocumentHtmlDefinition(documentHtmlDefinition DocumentHtmlDefinition) ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest {
	r.documentHtmlDefinition = &documentHtmlDefinition
	return r
}

func (r ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest) Execute() (*DocumentHtmlDefinitions, *http.Response, error) {
	return r.ApiService.ResponsiveHtmlPostResponsiveHtmlPreviewExecute(r)
}

/*
ResponsiveHtmlPostResponsiveHtmlPreview Creates a preview of the responsive versions of all of the documents in an envelope.

Creates a preview of the
[responsive](/docs/esign-rest-api/esign101/concepts/responsive/),
HTML versions of all of the documents in an
envelope. This method enables you to preview the
PDF document conversions to responsive HTML across
device types prior to sending.

The request body is a `documentHtmlDefinition`
object, which holds the responsive signing
parameters that define how to generate the HTML
version of the documents.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest
*/
func (a *ResponsiveHtmlPreviewAPIService) ResponsiveHtmlPostResponsiveHtmlPreview(ctx context.Context, accountId string, envelopeId string) ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest {
	return ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return DocumentHtmlDefinitions
func (a *ResponsiveHtmlPreviewAPIService) ResponsiveHtmlPostResponsiveHtmlPreviewExecute(r ApiResponsiveHtmlPostResponsiveHtmlPreviewRequest) (*DocumentHtmlDefinitions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentHtmlDefinitions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponsiveHtmlPreviewAPIService.ResponsiveHtmlPostResponsiveHtmlPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/responsive_html_preview"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.documentHtmlDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
