/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DocumentResponsiveHtmlPreviewAPIService DocumentResponsiveHtmlPreviewAPI service
type DocumentResponsiveHtmlPreviewAPIService service

type ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest struct {
	ctx context.Context
	ApiService *DocumentResponsiveHtmlPreviewAPIService
	accountId string
	documentId string
	envelopeId string
	documentHtmlDefinition *DocumentHtmlDefinition
}

func (r ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest) DocumentHtmlDefinition(documentHtmlDefinition DocumentHtmlDefinition) ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest {
	r.documentHtmlDefinition = &documentHtmlDefinition
	return r
}

func (r ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest) Execute() (*DocumentHtmlDefinitions, *http.Response, error) {
	return r.ApiService.ResponsiveHtmlPostDocumentResponsiveHtmlPreviewExecute(r)
}

/*
ResponsiveHtmlPostDocumentResponsiveHtmlPreview Creates a preview of the responsive version of a document.

Creates a preview of the
[responsive](/docs/esign-rest-api/esign101/concepts/responsive/)
HTML version of a specific document.
This method enables you to preview a PDF document
conversion to responsive HTML across device types prior to sending.

The request body is a `documentHtmlDefinition` object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param documentId The unique ID of the document within the envelope.  Unlike other IDs in the eSignature API, you specify the `documentId` yourself. Typically the first document has the ID `1`, the second document `2`, and so on, but you can use any numbering scheme that fits within a 32-bit signed integer (1 through 2147483647).   Tab objects have a `documentId` property that specifies the document on which to place the tab. 
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest
*/
func (a *DocumentResponsiveHtmlPreviewAPIService) ResponsiveHtmlPostDocumentResponsiveHtmlPreview(ctx context.Context, accountId string, documentId string, envelopeId string) ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest {
	return ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		documentId: documentId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return DocumentHtmlDefinitions
func (a *DocumentResponsiveHtmlPreviewAPIService) ResponsiveHtmlPostDocumentResponsiveHtmlPreviewExecute(r ApiResponsiveHtmlPostDocumentResponsiveHtmlPreviewRequest) (*DocumentHtmlDefinitions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentHtmlDefinitions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentResponsiveHtmlPreviewAPIService.ResponsiveHtmlPostDocumentResponsiveHtmlPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/responsive_html_preview"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"documentId"+"}", url.PathEscape(parameterValueToString(r.documentId, "documentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.documentHtmlDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
