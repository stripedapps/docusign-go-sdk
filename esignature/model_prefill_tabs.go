/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PrefillTabs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrefillTabs{}

// PrefillTabs Prefill tabs are tabs that the sender can fill in before the envelope is sent. They are sometimes called sender tags or pre-fill fields.  Only the following tab types can be prefill tabs:  - text - check boxes - radio buttons    [Pre-Fill Your Own Document Fields][app] describes how prefill tabs work in the web application.   [Customize your envelopes with pre-fill fields][catblog] shows how to use prefill tabs in your application using the eSignature SDKs.  [app]:      https://support.docusign.com/s/document-item?bundleId=gbo1643332197980&topicId=nwo1611173513994.html [catblog]:  https://www.docusign.com/blog/developers/common-api-tasks-customize-your-envelopes-pre-fill-fields
type PrefillTabs struct {
	// A list of [Checkbox tabs][checkbox].   A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.   [checkbox]:  /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	CheckboxTabs []Checkbox `json:"checkboxTabs,omitempty"`
	// A list of [Date tabs][date].  A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but several other date formats are also accepted. The system retains the format that the recipient enters.  **Note:** If you need to enforce a specific date format, DocuSign recommends that you use a Text tab with a validation pattern and validation message.   [date]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	DateTabs []Date `json:"dateTabs,omitempty"`
	// A list of [Email tabs][email].  An Email tab enables the recipient to enter an email address. This is a one-line field that checks that a valid email address is entered. It uses the same parameters as a Text tab, with the validation message and pattern set for email information. This value can be set.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.  [email]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	EmailTabs []Email `json:"emailTabs,omitempty"`
	// A list of Number tabs.  Number tabs validate that the entered value is a number. They do not support advanced validation or display options.  To learn more about the different forms of number tabs, see [Number fields](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/) in the Concepts guide. For specific information about number tabs see [Features of numberTabs](/docs/esign-rest-api/esign101/concepts/tabs/number-fields/#features-of-numbertabs).  [number]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	NumberTabs []Number `json:"numberTabs,omitempty"`
	// A list of [Radio Group tabs][radioGroup].  A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio buttons associated with the group. Only one radio button can be selected in a group. This value can be set.   [radioGroup]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	RadioGroupTabs []RadioGroup `json:"radioGroupTabs,omitempty"`
	// 
	SenderCompanyTabs []SenderCompany `json:"senderCompanyTabs,omitempty"`
	// 
	SenderNameTabs []SenderName `json:"senderNameTabs,omitempty"`
	// A list of [SSN tabs][ssn].  An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.   [ssn]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	SsnTabs []Ssn `json:"ssnTabs,omitempty"`
	// An array of `tabGroup` items.  To associate a tab with a tab group, add the tab group's `groupLabel` to the tab's `tabGroupLabels` array. 
	TabGroups []TabGroup `json:"tabGroups,omitempty"`
	// A list of Text tabs.  A text tab enables the recipient to enter free text. This value can be set.  Find descriptions of all tab types in the [EnvelopeRecipientTabs Resource][ert].  [ert]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	TextTabs []Text `json:"textTabs,omitempty"`
	// A list of [Zip tabs][zip].  A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.   [zip]: /docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/ 
	ZipTabs []Zip `json:"zipTabs,omitempty"`
}

// NewPrefillTabs instantiates a new PrefillTabs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefillTabs() *PrefillTabs {
	this := PrefillTabs{}
	return &this
}

// NewPrefillTabsWithDefaults instantiates a new PrefillTabs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefillTabsWithDefaults() *PrefillTabs {
	this := PrefillTabs{}
	return &this
}

// GetCheckboxTabs returns the CheckboxTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetCheckboxTabs() []Checkbox {
	if o == nil || IsNil(o.CheckboxTabs) {
		var ret []Checkbox
		return ret
	}
	return o.CheckboxTabs
}

// GetCheckboxTabsOk returns a tuple with the CheckboxTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetCheckboxTabsOk() ([]Checkbox, bool) {
	if o == nil || IsNil(o.CheckboxTabs) {
		return nil, false
	}
	return o.CheckboxTabs, true
}

// HasCheckboxTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasCheckboxTabs() bool {
	if o != nil && !IsNil(o.CheckboxTabs) {
		return true
	}

	return false
}

// SetCheckboxTabs gets a reference to the given []Checkbox and assigns it to the CheckboxTabs field.
func (o *PrefillTabs) SetCheckboxTabs(v []Checkbox) {
	o.CheckboxTabs = v
}

// GetDateTabs returns the DateTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetDateTabs() []Date {
	if o == nil || IsNil(o.DateTabs) {
		var ret []Date
		return ret
	}
	return o.DateTabs
}

// GetDateTabsOk returns a tuple with the DateTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetDateTabsOk() ([]Date, bool) {
	if o == nil || IsNil(o.DateTabs) {
		return nil, false
	}
	return o.DateTabs, true
}

// HasDateTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasDateTabs() bool {
	if o != nil && !IsNil(o.DateTabs) {
		return true
	}

	return false
}

// SetDateTabs gets a reference to the given []Date and assigns it to the DateTabs field.
func (o *PrefillTabs) SetDateTabs(v []Date) {
	o.DateTabs = v
}

// GetEmailTabs returns the EmailTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetEmailTabs() []Email {
	if o == nil || IsNil(o.EmailTabs) {
		var ret []Email
		return ret
	}
	return o.EmailTabs
}

// GetEmailTabsOk returns a tuple with the EmailTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetEmailTabsOk() ([]Email, bool) {
	if o == nil || IsNil(o.EmailTabs) {
		return nil, false
	}
	return o.EmailTabs, true
}

// HasEmailTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasEmailTabs() bool {
	if o != nil && !IsNil(o.EmailTabs) {
		return true
	}

	return false
}

// SetEmailTabs gets a reference to the given []Email and assigns it to the EmailTabs field.
func (o *PrefillTabs) SetEmailTabs(v []Email) {
	o.EmailTabs = v
}

// GetNumberTabs returns the NumberTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetNumberTabs() []Number {
	if o == nil || IsNil(o.NumberTabs) {
		var ret []Number
		return ret
	}
	return o.NumberTabs
}

// GetNumberTabsOk returns a tuple with the NumberTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetNumberTabsOk() ([]Number, bool) {
	if o == nil || IsNil(o.NumberTabs) {
		return nil, false
	}
	return o.NumberTabs, true
}

// HasNumberTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasNumberTabs() bool {
	if o != nil && !IsNil(o.NumberTabs) {
		return true
	}

	return false
}

// SetNumberTabs gets a reference to the given []Number and assigns it to the NumberTabs field.
func (o *PrefillTabs) SetNumberTabs(v []Number) {
	o.NumberTabs = v
}

// GetRadioGroupTabs returns the RadioGroupTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetRadioGroupTabs() []RadioGroup {
	if o == nil || IsNil(o.RadioGroupTabs) {
		var ret []RadioGroup
		return ret
	}
	return o.RadioGroupTabs
}

// GetRadioGroupTabsOk returns a tuple with the RadioGroupTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetRadioGroupTabsOk() ([]RadioGroup, bool) {
	if o == nil || IsNil(o.RadioGroupTabs) {
		return nil, false
	}
	return o.RadioGroupTabs, true
}

// HasRadioGroupTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasRadioGroupTabs() bool {
	if o != nil && !IsNil(o.RadioGroupTabs) {
		return true
	}

	return false
}

// SetRadioGroupTabs gets a reference to the given []RadioGroup and assigns it to the RadioGroupTabs field.
func (o *PrefillTabs) SetRadioGroupTabs(v []RadioGroup) {
	o.RadioGroupTabs = v
}

// GetSenderCompanyTabs returns the SenderCompanyTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetSenderCompanyTabs() []SenderCompany {
	if o == nil || IsNil(o.SenderCompanyTabs) {
		var ret []SenderCompany
		return ret
	}
	return o.SenderCompanyTabs
}

// GetSenderCompanyTabsOk returns a tuple with the SenderCompanyTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetSenderCompanyTabsOk() ([]SenderCompany, bool) {
	if o == nil || IsNil(o.SenderCompanyTabs) {
		return nil, false
	}
	return o.SenderCompanyTabs, true
}

// HasSenderCompanyTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasSenderCompanyTabs() bool {
	if o != nil && !IsNil(o.SenderCompanyTabs) {
		return true
	}

	return false
}

// SetSenderCompanyTabs gets a reference to the given []SenderCompany and assigns it to the SenderCompanyTabs field.
func (o *PrefillTabs) SetSenderCompanyTabs(v []SenderCompany) {
	o.SenderCompanyTabs = v
}

// GetSenderNameTabs returns the SenderNameTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetSenderNameTabs() []SenderName {
	if o == nil || IsNil(o.SenderNameTabs) {
		var ret []SenderName
		return ret
	}
	return o.SenderNameTabs
}

// GetSenderNameTabsOk returns a tuple with the SenderNameTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetSenderNameTabsOk() ([]SenderName, bool) {
	if o == nil || IsNil(o.SenderNameTabs) {
		return nil, false
	}
	return o.SenderNameTabs, true
}

// HasSenderNameTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasSenderNameTabs() bool {
	if o != nil && !IsNil(o.SenderNameTabs) {
		return true
	}

	return false
}

// SetSenderNameTabs gets a reference to the given []SenderName and assigns it to the SenderNameTabs field.
func (o *PrefillTabs) SetSenderNameTabs(v []SenderName) {
	o.SenderNameTabs = v
}

// GetSsnTabs returns the SsnTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetSsnTabs() []Ssn {
	if o == nil || IsNil(o.SsnTabs) {
		var ret []Ssn
		return ret
	}
	return o.SsnTabs
}

// GetSsnTabsOk returns a tuple with the SsnTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetSsnTabsOk() ([]Ssn, bool) {
	if o == nil || IsNil(o.SsnTabs) {
		return nil, false
	}
	return o.SsnTabs, true
}

// HasSsnTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasSsnTabs() bool {
	if o != nil && !IsNil(o.SsnTabs) {
		return true
	}

	return false
}

// SetSsnTabs gets a reference to the given []Ssn and assigns it to the SsnTabs field.
func (o *PrefillTabs) SetSsnTabs(v []Ssn) {
	o.SsnTabs = v
}

// GetTabGroups returns the TabGroups field value if set, zero value otherwise.
func (o *PrefillTabs) GetTabGroups() []TabGroup {
	if o == nil || IsNil(o.TabGroups) {
		var ret []TabGroup
		return ret
	}
	return o.TabGroups
}

// GetTabGroupsOk returns a tuple with the TabGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetTabGroupsOk() ([]TabGroup, bool) {
	if o == nil || IsNil(o.TabGroups) {
		return nil, false
	}
	return o.TabGroups, true
}

// HasTabGroups returns a boolean if a field has been set.
func (o *PrefillTabs) HasTabGroups() bool {
	if o != nil && !IsNil(o.TabGroups) {
		return true
	}

	return false
}

// SetTabGroups gets a reference to the given []TabGroup and assigns it to the TabGroups field.
func (o *PrefillTabs) SetTabGroups(v []TabGroup) {
	o.TabGroups = v
}

// GetTextTabs returns the TextTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetTextTabs() []Text {
	if o == nil || IsNil(o.TextTabs) {
		var ret []Text
		return ret
	}
	return o.TextTabs
}

// GetTextTabsOk returns a tuple with the TextTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetTextTabsOk() ([]Text, bool) {
	if o == nil || IsNil(o.TextTabs) {
		return nil, false
	}
	return o.TextTabs, true
}

// HasTextTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasTextTabs() bool {
	if o != nil && !IsNil(o.TextTabs) {
		return true
	}

	return false
}

// SetTextTabs gets a reference to the given []Text and assigns it to the TextTabs field.
func (o *PrefillTabs) SetTextTabs(v []Text) {
	o.TextTabs = v
}

// GetZipTabs returns the ZipTabs field value if set, zero value otherwise.
func (o *PrefillTabs) GetZipTabs() []Zip {
	if o == nil || IsNil(o.ZipTabs) {
		var ret []Zip
		return ret
	}
	return o.ZipTabs
}

// GetZipTabsOk returns a tuple with the ZipTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrefillTabs) GetZipTabsOk() ([]Zip, bool) {
	if o == nil || IsNil(o.ZipTabs) {
		return nil, false
	}
	return o.ZipTabs, true
}

// HasZipTabs returns a boolean if a field has been set.
func (o *PrefillTabs) HasZipTabs() bool {
	if o != nil && !IsNil(o.ZipTabs) {
		return true
	}

	return false
}

// SetZipTabs gets a reference to the given []Zip and assigns it to the ZipTabs field.
func (o *PrefillTabs) SetZipTabs(v []Zip) {
	o.ZipTabs = v
}

func (o PrefillTabs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrefillTabs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckboxTabs) {
		toSerialize["checkboxTabs"] = o.CheckboxTabs
	}
	if !IsNil(o.DateTabs) {
		toSerialize["dateTabs"] = o.DateTabs
	}
	if !IsNil(o.EmailTabs) {
		toSerialize["emailTabs"] = o.EmailTabs
	}
	if !IsNil(o.NumberTabs) {
		toSerialize["numberTabs"] = o.NumberTabs
	}
	if !IsNil(o.RadioGroupTabs) {
		toSerialize["radioGroupTabs"] = o.RadioGroupTabs
	}
	if !IsNil(o.SenderCompanyTabs) {
		toSerialize["senderCompanyTabs"] = o.SenderCompanyTabs
	}
	if !IsNil(o.SenderNameTabs) {
		toSerialize["senderNameTabs"] = o.SenderNameTabs
	}
	if !IsNil(o.SsnTabs) {
		toSerialize["ssnTabs"] = o.SsnTabs
	}
	if !IsNil(o.TabGroups) {
		toSerialize["tabGroups"] = o.TabGroups
	}
	if !IsNil(o.TextTabs) {
		toSerialize["textTabs"] = o.TextTabs
	}
	if !IsNil(o.ZipTabs) {
		toSerialize["zipTabs"] = o.ZipTabs
	}
	return toSerialize, nil
}

type NullablePrefillTabs struct {
	value *PrefillTabs
	isSet bool
}

func (v NullablePrefillTabs) Get() *PrefillTabs {
	return v.value
}

func (v *NullablePrefillTabs) Set(val *PrefillTabs) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefillTabs) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefillTabs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefillTabs(val *PrefillTabs) *NullablePrefillTabs {
	return &NullablePrefillTabs{value: val, isSet: true}
}

func (v NullablePrefillTabs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefillTabs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


