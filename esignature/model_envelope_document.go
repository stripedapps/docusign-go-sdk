/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeDocument{}

// EnvelopeDocument This object contains details about the envelope document.
type EnvelopeDocument struct {
	// If recipients were added by converting form fields into tabs, their IDs appear here. This property is read-only.
	AddedRecipientIds []string `json:"addedRecipientIds,omitempty"`
	// If this document is an attachment to another document in the envelope, this is the ID of the attachment tab it is associated with on the other document.
	AttachmentTabId *string `json:"attachmentTabId,omitempty"`
	// When **true,** marks all of the documents in the envelope as authoritative copies.  **Note:** You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false.**
	AuthoritativeCopy *string `json:"authoritativeCopy,omitempty"`
	AuthoritativeCopyMetadata *PropertyMetadata `json:"authoritativeCopyMetadata,omitempty"`
	// 
	AvailableDocumentTypes []SignatureType `json:"availableDocumentTypes,omitempty"`
	// When **true,** the document has editable form fields that are made available through a PDF format.
	ContainsPdfFormFields *string `json:"containsPdfFormFields,omitempty"`
	// This string sets the display and behavior properties of the document during signing. Valid values:  * `modal`<br>   The document is shown as a supplement action strip   and can be viewed, downloaded, or printed in a modal window.   This is the recommended value for supplemental documents.   * `inline`<br>   The document is shown in the normal signing window.   This value is not used with supplemental documents,   but is the default value for all other documents. 
	Display *string `json:"display,omitempty"`
	DisplayMetadata *PropertyMetadata `json:"displayMetadata,omitempty"`
	// 
	DocGenDocumentStatus *string `json:"docGenDocumentStatus,omitempty"`
	// 
	DocGenErrors []DocGenSyntaxError `json:"docGenErrors,omitempty"`
	// 
	DocGenFormFields []DocGenFormField `json:"docGenFormFields,omitempty"`
	// The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.
	DocumentBase64 *string `json:"documentBase64,omitempty"`
	// An object containing information about the custom fields on the document.
	DocumentFields []NameValue `json:"documentFields,omitempty"`
	// The ID of the document that the tab is placed on. This value must refer to the ID of an existing document.
	DocumentId *string `json:"documentId,omitempty"`
	// The GUID of the document.
	DocumentIdGuid *string `json:"documentIdGuid,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// When **true,** the document is included in the combined document download (`documentsCombinedUri`).  The default value is **true.** 
	IncludeInDownload *string `json:"includeInDownload,omitempty"`
	IncludeInDownloadMetadata *PropertyMetadata `json:"includeInDownloadMetadata,omitempty"`
	// 
	IsAceGenDocument *string `json:"isAceGenDocument,omitempty"`
	// 
	IsDocGenDocument *string `json:"isDocGenDocument,omitempty"`
	// The document's file name.   Example: `Q1-Report.docx`
	Name *string `json:"name,omitempty"`
	NameMetadata *PropertyMetadata `json:"nameMetadata,omitempty"`
	// The order in which to sort the results.  Valid values are:    * `asc`: Ascending order. * `desc`: Descending order. 
	Order *string `json:"order,omitempty"`
	// An array of page objects that contain information about the pages in the document.
	Pages []Page `json:"pages,omitempty"`
	// Sets how the signer interacts with the supplemental document. Valid values:   * `no_interaction`<br>   No recipient action is required.   * `view`<br>   The recipient is required to view the document.   * `accept`<br>   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.   * `view_accept`<br>   The recipient is required to view and accept the document.    
	SignerMustAcknowledge *string `json:"signerMustAcknowledge,omitempty"`
	SignerMustAcknowledgeMetadata *PropertyMetadata `json:"signerMustAcknowledgeMetadata,omitempty"`
	// 
	SizeBytes *string `json:"sizeBytes,omitempty"`
	// When **true,** the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
	TemplateLocked *string `json:"templateLocked,omitempty"`
	// When **true,** the sender may not remove the recipient. Used only when working with template recipients.
	TemplateRequired *string `json:"templateRequired,omitempty"`
	// The type of this tab. Values are:  - Approve - CheckBox - Company - Date - DateSigned, Decline - Email, EmailAddress - EnvelopeId - FirstName - Formula - FullName, InitialHere - InitialHereOptional - LastName - List - Note - Number - Radio - SignerAttachment - SignHere - SignHereOptional - Ssn - Text - Title - Zip5 - Zip5Dash4 
	Type *string `json:"type,omitempty"`
	// The URI for retrieving the document.
	Uri *string `json:"uri,omitempty"`
}

// NewEnvelopeDocument instantiates a new EnvelopeDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeDocument() *EnvelopeDocument {
	this := EnvelopeDocument{}
	return &this
}

// NewEnvelopeDocumentWithDefaults instantiates a new EnvelopeDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeDocumentWithDefaults() *EnvelopeDocument {
	this := EnvelopeDocument{}
	return &this
}

// GetAddedRecipientIds returns the AddedRecipientIds field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetAddedRecipientIds() []string {
	if o == nil || IsNil(o.AddedRecipientIds) {
		var ret []string
		return ret
	}
	return o.AddedRecipientIds
}

// GetAddedRecipientIdsOk returns a tuple with the AddedRecipientIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetAddedRecipientIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddedRecipientIds) {
		return nil, false
	}
	return o.AddedRecipientIds, true
}

// HasAddedRecipientIds returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasAddedRecipientIds() bool {
	if o != nil && !IsNil(o.AddedRecipientIds) {
		return true
	}

	return false
}

// SetAddedRecipientIds gets a reference to the given []string and assigns it to the AddedRecipientIds field.
func (o *EnvelopeDocument) SetAddedRecipientIds(v []string) {
	o.AddedRecipientIds = v
}

// GetAttachmentTabId returns the AttachmentTabId field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetAttachmentTabId() string {
	if o == nil || IsNil(o.AttachmentTabId) {
		var ret string
		return ret
	}
	return *o.AttachmentTabId
}

// GetAttachmentTabIdOk returns a tuple with the AttachmentTabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetAttachmentTabIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentTabId) {
		return nil, false
	}
	return o.AttachmentTabId, true
}

// HasAttachmentTabId returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasAttachmentTabId() bool {
	if o != nil && !IsNil(o.AttachmentTabId) {
		return true
	}

	return false
}

// SetAttachmentTabId gets a reference to the given string and assigns it to the AttachmentTabId field.
func (o *EnvelopeDocument) SetAttachmentTabId(v string) {
	o.AttachmentTabId = &v
}

// GetAuthoritativeCopy returns the AuthoritativeCopy field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetAuthoritativeCopy() string {
	if o == nil || IsNil(o.AuthoritativeCopy) {
		var ret string
		return ret
	}
	return *o.AuthoritativeCopy
}

// GetAuthoritativeCopyOk returns a tuple with the AuthoritativeCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetAuthoritativeCopyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthoritativeCopy) {
		return nil, false
	}
	return o.AuthoritativeCopy, true
}

// HasAuthoritativeCopy returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasAuthoritativeCopy() bool {
	if o != nil && !IsNil(o.AuthoritativeCopy) {
		return true
	}

	return false
}

// SetAuthoritativeCopy gets a reference to the given string and assigns it to the AuthoritativeCopy field.
func (o *EnvelopeDocument) SetAuthoritativeCopy(v string) {
	o.AuthoritativeCopy = &v
}

// GetAuthoritativeCopyMetadata returns the AuthoritativeCopyMetadata field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetAuthoritativeCopyMetadata() PropertyMetadata {
	if o == nil || IsNil(o.AuthoritativeCopyMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.AuthoritativeCopyMetadata
}

// GetAuthoritativeCopyMetadataOk returns a tuple with the AuthoritativeCopyMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetAuthoritativeCopyMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.AuthoritativeCopyMetadata) {
		return nil, false
	}
	return o.AuthoritativeCopyMetadata, true
}

// HasAuthoritativeCopyMetadata returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasAuthoritativeCopyMetadata() bool {
	if o != nil && !IsNil(o.AuthoritativeCopyMetadata) {
		return true
	}

	return false
}

// SetAuthoritativeCopyMetadata gets a reference to the given PropertyMetadata and assigns it to the AuthoritativeCopyMetadata field.
func (o *EnvelopeDocument) SetAuthoritativeCopyMetadata(v PropertyMetadata) {
	o.AuthoritativeCopyMetadata = &v
}

// GetAvailableDocumentTypes returns the AvailableDocumentTypes field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetAvailableDocumentTypes() []SignatureType {
	if o == nil || IsNil(o.AvailableDocumentTypes) {
		var ret []SignatureType
		return ret
	}
	return o.AvailableDocumentTypes
}

// GetAvailableDocumentTypesOk returns a tuple with the AvailableDocumentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetAvailableDocumentTypesOk() ([]SignatureType, bool) {
	if o == nil || IsNil(o.AvailableDocumentTypes) {
		return nil, false
	}
	return o.AvailableDocumentTypes, true
}

// HasAvailableDocumentTypes returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasAvailableDocumentTypes() bool {
	if o != nil && !IsNil(o.AvailableDocumentTypes) {
		return true
	}

	return false
}

// SetAvailableDocumentTypes gets a reference to the given []SignatureType and assigns it to the AvailableDocumentTypes field.
func (o *EnvelopeDocument) SetAvailableDocumentTypes(v []SignatureType) {
	o.AvailableDocumentTypes = v
}

// GetContainsPdfFormFields returns the ContainsPdfFormFields field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetContainsPdfFormFields() string {
	if o == nil || IsNil(o.ContainsPdfFormFields) {
		var ret string
		return ret
	}
	return *o.ContainsPdfFormFields
}

// GetContainsPdfFormFieldsOk returns a tuple with the ContainsPdfFormFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetContainsPdfFormFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.ContainsPdfFormFields) {
		return nil, false
	}
	return o.ContainsPdfFormFields, true
}

// HasContainsPdfFormFields returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasContainsPdfFormFields() bool {
	if o != nil && !IsNil(o.ContainsPdfFormFields) {
		return true
	}

	return false
}

// SetContainsPdfFormFields gets a reference to the given string and assigns it to the ContainsPdfFormFields field.
func (o *EnvelopeDocument) SetContainsPdfFormFields(v string) {
	o.ContainsPdfFormFields = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *EnvelopeDocument) SetDisplay(v string) {
	o.Display = &v
}

// GetDisplayMetadata returns the DisplayMetadata field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDisplayMetadata() PropertyMetadata {
	if o == nil || IsNil(o.DisplayMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.DisplayMetadata
}

// GetDisplayMetadataOk returns a tuple with the DisplayMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDisplayMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.DisplayMetadata) {
		return nil, false
	}
	return o.DisplayMetadata, true
}

// HasDisplayMetadata returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDisplayMetadata() bool {
	if o != nil && !IsNil(o.DisplayMetadata) {
		return true
	}

	return false
}

// SetDisplayMetadata gets a reference to the given PropertyMetadata and assigns it to the DisplayMetadata field.
func (o *EnvelopeDocument) SetDisplayMetadata(v PropertyMetadata) {
	o.DisplayMetadata = &v
}

// GetDocGenDocumentStatus returns the DocGenDocumentStatus field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocGenDocumentStatus() string {
	if o == nil || IsNil(o.DocGenDocumentStatus) {
		var ret string
		return ret
	}
	return *o.DocGenDocumentStatus
}

// GetDocGenDocumentStatusOk returns a tuple with the DocGenDocumentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocGenDocumentStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DocGenDocumentStatus) {
		return nil, false
	}
	return o.DocGenDocumentStatus, true
}

// HasDocGenDocumentStatus returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocGenDocumentStatus() bool {
	if o != nil && !IsNil(o.DocGenDocumentStatus) {
		return true
	}

	return false
}

// SetDocGenDocumentStatus gets a reference to the given string and assigns it to the DocGenDocumentStatus field.
func (o *EnvelopeDocument) SetDocGenDocumentStatus(v string) {
	o.DocGenDocumentStatus = &v
}

// GetDocGenErrors returns the DocGenErrors field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocGenErrors() []DocGenSyntaxError {
	if o == nil || IsNil(o.DocGenErrors) {
		var ret []DocGenSyntaxError
		return ret
	}
	return o.DocGenErrors
}

// GetDocGenErrorsOk returns a tuple with the DocGenErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocGenErrorsOk() ([]DocGenSyntaxError, bool) {
	if o == nil || IsNil(o.DocGenErrors) {
		return nil, false
	}
	return o.DocGenErrors, true
}

// HasDocGenErrors returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocGenErrors() bool {
	if o != nil && !IsNil(o.DocGenErrors) {
		return true
	}

	return false
}

// SetDocGenErrors gets a reference to the given []DocGenSyntaxError and assigns it to the DocGenErrors field.
func (o *EnvelopeDocument) SetDocGenErrors(v []DocGenSyntaxError) {
	o.DocGenErrors = v
}

// GetDocGenFormFields returns the DocGenFormFields field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocGenFormFields() []DocGenFormField {
	if o == nil || IsNil(o.DocGenFormFields) {
		var ret []DocGenFormField
		return ret
	}
	return o.DocGenFormFields
}

// GetDocGenFormFieldsOk returns a tuple with the DocGenFormFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocGenFormFieldsOk() ([]DocGenFormField, bool) {
	if o == nil || IsNil(o.DocGenFormFields) {
		return nil, false
	}
	return o.DocGenFormFields, true
}

// HasDocGenFormFields returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocGenFormFields() bool {
	if o != nil && !IsNil(o.DocGenFormFields) {
		return true
	}

	return false
}

// SetDocGenFormFields gets a reference to the given []DocGenFormField and assigns it to the DocGenFormFields field.
func (o *EnvelopeDocument) SetDocGenFormFields(v []DocGenFormField) {
	o.DocGenFormFields = v
}

// GetDocumentBase64 returns the DocumentBase64 field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocumentBase64() string {
	if o == nil || IsNil(o.DocumentBase64) {
		var ret string
		return ret
	}
	return *o.DocumentBase64
}

// GetDocumentBase64Ok returns a tuple with the DocumentBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocumentBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.DocumentBase64) {
		return nil, false
	}
	return o.DocumentBase64, true
}

// HasDocumentBase64 returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocumentBase64() bool {
	if o != nil && !IsNil(o.DocumentBase64) {
		return true
	}

	return false
}

// SetDocumentBase64 gets a reference to the given string and assigns it to the DocumentBase64 field.
func (o *EnvelopeDocument) SetDocumentBase64(v string) {
	o.DocumentBase64 = &v
}

// GetDocumentFields returns the DocumentFields field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocumentFields() []NameValue {
	if o == nil || IsNil(o.DocumentFields) {
		var ret []NameValue
		return ret
	}
	return o.DocumentFields
}

// GetDocumentFieldsOk returns a tuple with the DocumentFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocumentFieldsOk() ([]NameValue, bool) {
	if o == nil || IsNil(o.DocumentFields) {
		return nil, false
	}
	return o.DocumentFields, true
}

// HasDocumentFields returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocumentFields() bool {
	if o != nil && !IsNil(o.DocumentFields) {
		return true
	}

	return false
}

// SetDocumentFields gets a reference to the given []NameValue and assigns it to the DocumentFields field.
func (o *EnvelopeDocument) SetDocumentFields(v []NameValue) {
	o.DocumentFields = v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *EnvelopeDocument) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetDocumentIdGuid returns the DocumentIdGuid field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetDocumentIdGuid() string {
	if o == nil || IsNil(o.DocumentIdGuid) {
		var ret string
		return ret
	}
	return *o.DocumentIdGuid
}

// GetDocumentIdGuidOk returns a tuple with the DocumentIdGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetDocumentIdGuidOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentIdGuid) {
		return nil, false
	}
	return o.DocumentIdGuid, true
}

// HasDocumentIdGuid returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasDocumentIdGuid() bool {
	if o != nil && !IsNil(o.DocumentIdGuid) {
		return true
	}

	return false
}

// SetDocumentIdGuid gets a reference to the given string and assigns it to the DocumentIdGuid field.
func (o *EnvelopeDocument) SetDocumentIdGuid(v string) {
	o.DocumentIdGuid = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *EnvelopeDocument) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetIncludeInDownload returns the IncludeInDownload field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetIncludeInDownload() string {
	if o == nil || IsNil(o.IncludeInDownload) {
		var ret string
		return ret
	}
	return *o.IncludeInDownload
}

// GetIncludeInDownloadOk returns a tuple with the IncludeInDownload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetIncludeInDownloadOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeInDownload) {
		return nil, false
	}
	return o.IncludeInDownload, true
}

// HasIncludeInDownload returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasIncludeInDownload() bool {
	if o != nil && !IsNil(o.IncludeInDownload) {
		return true
	}

	return false
}

// SetIncludeInDownload gets a reference to the given string and assigns it to the IncludeInDownload field.
func (o *EnvelopeDocument) SetIncludeInDownload(v string) {
	o.IncludeInDownload = &v
}

// GetIncludeInDownloadMetadata returns the IncludeInDownloadMetadata field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetIncludeInDownloadMetadata() PropertyMetadata {
	if o == nil || IsNil(o.IncludeInDownloadMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.IncludeInDownloadMetadata
}

// GetIncludeInDownloadMetadataOk returns a tuple with the IncludeInDownloadMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetIncludeInDownloadMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.IncludeInDownloadMetadata) {
		return nil, false
	}
	return o.IncludeInDownloadMetadata, true
}

// HasIncludeInDownloadMetadata returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasIncludeInDownloadMetadata() bool {
	if o != nil && !IsNil(o.IncludeInDownloadMetadata) {
		return true
	}

	return false
}

// SetIncludeInDownloadMetadata gets a reference to the given PropertyMetadata and assigns it to the IncludeInDownloadMetadata field.
func (o *EnvelopeDocument) SetIncludeInDownloadMetadata(v PropertyMetadata) {
	o.IncludeInDownloadMetadata = &v
}

// GetIsAceGenDocument returns the IsAceGenDocument field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetIsAceGenDocument() string {
	if o == nil || IsNil(o.IsAceGenDocument) {
		var ret string
		return ret
	}
	return *o.IsAceGenDocument
}

// GetIsAceGenDocumentOk returns a tuple with the IsAceGenDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetIsAceGenDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.IsAceGenDocument) {
		return nil, false
	}
	return o.IsAceGenDocument, true
}

// HasIsAceGenDocument returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasIsAceGenDocument() bool {
	if o != nil && !IsNil(o.IsAceGenDocument) {
		return true
	}

	return false
}

// SetIsAceGenDocument gets a reference to the given string and assigns it to the IsAceGenDocument field.
func (o *EnvelopeDocument) SetIsAceGenDocument(v string) {
	o.IsAceGenDocument = &v
}

// GetIsDocGenDocument returns the IsDocGenDocument field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetIsDocGenDocument() string {
	if o == nil || IsNil(o.IsDocGenDocument) {
		var ret string
		return ret
	}
	return *o.IsDocGenDocument
}

// GetIsDocGenDocumentOk returns a tuple with the IsDocGenDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetIsDocGenDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.IsDocGenDocument) {
		return nil, false
	}
	return o.IsDocGenDocument, true
}

// HasIsDocGenDocument returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasIsDocGenDocument() bool {
	if o != nil && !IsNil(o.IsDocGenDocument) {
		return true
	}

	return false
}

// SetIsDocGenDocument gets a reference to the given string and assigns it to the IsDocGenDocument field.
func (o *EnvelopeDocument) SetIsDocGenDocument(v string) {
	o.IsDocGenDocument = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvelopeDocument) SetName(v string) {
	o.Name = &v
}

// GetNameMetadata returns the NameMetadata field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetNameMetadata() PropertyMetadata {
	if o == nil || IsNil(o.NameMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.NameMetadata
}

// GetNameMetadataOk returns a tuple with the NameMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetNameMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.NameMetadata) {
		return nil, false
	}
	return o.NameMetadata, true
}

// HasNameMetadata returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasNameMetadata() bool {
	if o != nil && !IsNil(o.NameMetadata) {
		return true
	}

	return false
}

// SetNameMetadata gets a reference to the given PropertyMetadata and assigns it to the NameMetadata field.
func (o *EnvelopeDocument) SetNameMetadata(v PropertyMetadata) {
	o.NameMetadata = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *EnvelopeDocument) SetOrder(v string) {
	o.Order = &v
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetPages() []Page {
	if o == nil || IsNil(o.Pages) {
		var ret []Page
		return ret
	}
	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetPagesOk() ([]Page, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given []Page and assigns it to the Pages field.
func (o *EnvelopeDocument) SetPages(v []Page) {
	o.Pages = v
}

// GetSignerMustAcknowledge returns the SignerMustAcknowledge field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetSignerMustAcknowledge() string {
	if o == nil || IsNil(o.SignerMustAcknowledge) {
		var ret string
		return ret
	}
	return *o.SignerMustAcknowledge
}

// GetSignerMustAcknowledgeOk returns a tuple with the SignerMustAcknowledge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetSignerMustAcknowledgeOk() (*string, bool) {
	if o == nil || IsNil(o.SignerMustAcknowledge) {
		return nil, false
	}
	return o.SignerMustAcknowledge, true
}

// HasSignerMustAcknowledge returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasSignerMustAcknowledge() bool {
	if o != nil && !IsNil(o.SignerMustAcknowledge) {
		return true
	}

	return false
}

// SetSignerMustAcknowledge gets a reference to the given string and assigns it to the SignerMustAcknowledge field.
func (o *EnvelopeDocument) SetSignerMustAcknowledge(v string) {
	o.SignerMustAcknowledge = &v
}

// GetSignerMustAcknowledgeMetadata returns the SignerMustAcknowledgeMetadata field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetSignerMustAcknowledgeMetadata() PropertyMetadata {
	if o == nil || IsNil(o.SignerMustAcknowledgeMetadata) {
		var ret PropertyMetadata
		return ret
	}
	return *o.SignerMustAcknowledgeMetadata
}

// GetSignerMustAcknowledgeMetadataOk returns a tuple with the SignerMustAcknowledgeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetSignerMustAcknowledgeMetadataOk() (*PropertyMetadata, bool) {
	if o == nil || IsNil(o.SignerMustAcknowledgeMetadata) {
		return nil, false
	}
	return o.SignerMustAcknowledgeMetadata, true
}

// HasSignerMustAcknowledgeMetadata returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasSignerMustAcknowledgeMetadata() bool {
	if o != nil && !IsNil(o.SignerMustAcknowledgeMetadata) {
		return true
	}

	return false
}

// SetSignerMustAcknowledgeMetadata gets a reference to the given PropertyMetadata and assigns it to the SignerMustAcknowledgeMetadata field.
func (o *EnvelopeDocument) SetSignerMustAcknowledgeMetadata(v PropertyMetadata) {
	o.SignerMustAcknowledgeMetadata = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetSizeBytes() string {
	if o == nil || IsNil(o.SizeBytes) {
		var ret string
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetSizeBytesOk() (*string, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given string and assigns it to the SizeBytes field.
func (o *EnvelopeDocument) SetSizeBytes(v string) {
	o.SizeBytes = &v
}

// GetTemplateLocked returns the TemplateLocked field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetTemplateLocked() string {
	if o == nil || IsNil(o.TemplateLocked) {
		var ret string
		return ret
	}
	return *o.TemplateLocked
}

// GetTemplateLockedOk returns a tuple with the TemplateLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetTemplateLockedOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateLocked) {
		return nil, false
	}
	return o.TemplateLocked, true
}

// HasTemplateLocked returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasTemplateLocked() bool {
	if o != nil && !IsNil(o.TemplateLocked) {
		return true
	}

	return false
}

// SetTemplateLocked gets a reference to the given string and assigns it to the TemplateLocked field.
func (o *EnvelopeDocument) SetTemplateLocked(v string) {
	o.TemplateLocked = &v
}

// GetTemplateRequired returns the TemplateRequired field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetTemplateRequired() string {
	if o == nil || IsNil(o.TemplateRequired) {
		var ret string
		return ret
	}
	return *o.TemplateRequired
}

// GetTemplateRequiredOk returns a tuple with the TemplateRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetTemplateRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateRequired) {
		return nil, false
	}
	return o.TemplateRequired, true
}

// HasTemplateRequired returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasTemplateRequired() bool {
	if o != nil && !IsNil(o.TemplateRequired) {
		return true
	}

	return false
}

// SetTemplateRequired gets a reference to the given string and assigns it to the TemplateRequired field.
func (o *EnvelopeDocument) SetTemplateRequired(v string) {
	o.TemplateRequired = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EnvelopeDocument) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *EnvelopeDocument) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeDocument) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *EnvelopeDocument) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *EnvelopeDocument) SetUri(v string) {
	o.Uri = &v
}

func (o EnvelopeDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddedRecipientIds) {
		toSerialize["addedRecipientIds"] = o.AddedRecipientIds
	}
	if !IsNil(o.AttachmentTabId) {
		toSerialize["attachmentTabId"] = o.AttachmentTabId
	}
	if !IsNil(o.AuthoritativeCopy) {
		toSerialize["authoritativeCopy"] = o.AuthoritativeCopy
	}
	if !IsNil(o.AuthoritativeCopyMetadata) {
		toSerialize["authoritativeCopyMetadata"] = o.AuthoritativeCopyMetadata
	}
	if !IsNil(o.AvailableDocumentTypes) {
		toSerialize["availableDocumentTypes"] = o.AvailableDocumentTypes
	}
	if !IsNil(o.ContainsPdfFormFields) {
		toSerialize["containsPdfFormFields"] = o.ContainsPdfFormFields
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.DisplayMetadata) {
		toSerialize["displayMetadata"] = o.DisplayMetadata
	}
	if !IsNil(o.DocGenDocumentStatus) {
		toSerialize["docGenDocumentStatus"] = o.DocGenDocumentStatus
	}
	if !IsNil(o.DocGenErrors) {
		toSerialize["docGenErrors"] = o.DocGenErrors
	}
	if !IsNil(o.DocGenFormFields) {
		toSerialize["docGenFormFields"] = o.DocGenFormFields
	}
	if !IsNil(o.DocumentBase64) {
		toSerialize["documentBase64"] = o.DocumentBase64
	}
	if !IsNil(o.DocumentFields) {
		toSerialize["documentFields"] = o.DocumentFields
	}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.DocumentIdGuid) {
		toSerialize["documentIdGuid"] = o.DocumentIdGuid
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.IncludeInDownload) {
		toSerialize["includeInDownload"] = o.IncludeInDownload
	}
	if !IsNil(o.IncludeInDownloadMetadata) {
		toSerialize["includeInDownloadMetadata"] = o.IncludeInDownloadMetadata
	}
	if !IsNil(o.IsAceGenDocument) {
		toSerialize["isAceGenDocument"] = o.IsAceGenDocument
	}
	if !IsNil(o.IsDocGenDocument) {
		toSerialize["isDocGenDocument"] = o.IsDocGenDocument
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameMetadata) {
		toSerialize["nameMetadata"] = o.NameMetadata
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Pages) {
		toSerialize["pages"] = o.Pages
	}
	if !IsNil(o.SignerMustAcknowledge) {
		toSerialize["signerMustAcknowledge"] = o.SignerMustAcknowledge
	}
	if !IsNil(o.SignerMustAcknowledgeMetadata) {
		toSerialize["signerMustAcknowledgeMetadata"] = o.SignerMustAcknowledgeMetadata
	}
	if !IsNil(o.SizeBytes) {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	if !IsNil(o.TemplateLocked) {
		toSerialize["templateLocked"] = o.TemplateLocked
	}
	if !IsNil(o.TemplateRequired) {
		toSerialize["templateRequired"] = o.TemplateRequired
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableEnvelopeDocument struct {
	value *EnvelopeDocument
	isSet bool
}

func (v NullableEnvelopeDocument) Get() *EnvelopeDocument {
	return v.value
}

func (v *NullableEnvelopeDocument) Set(val *EnvelopeDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeDocument(val *EnvelopeDocument) *NullableEnvelopeDocument {
	return &NullableEnvelopeDocument{value: val, isSet: true}
}

func (v NullableEnvelopeDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


