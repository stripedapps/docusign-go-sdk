/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DelayedRouting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelayedRouting{}

// DelayedRouting A complex element that specifies the delayed routing settings for the workflow step.
type DelayedRouting struct {
	// The ISO 8601 timestamp of when the envelope is scheduled to be sent to the recipients associated with the workflow step. This property is `null` if the workflow step has not been initiated.  This property is read-only. 
	ResumeDate *string `json:"resumeDate,omitempty"`
	// User-specified rules indicating how and when the envelope should sent for the workflow step and its associated recipients. Only one rule may be specified.
	Rules []EnvelopeDelayRule `json:"rules,omitempty"`
	// Status of the delayed routing step. Valid values:  * `pending`: The workflow step has not been reached and the delay has not been initiated. * `started`: The workflow step has begun and the delay is in progress. The envelope has not yet been sent to the workflow step's recipients. * `completed`: The delay has elapsed and the envelope has been sent to the workflow step's recipients.  This property is read-only.
	Status *string `json:"status,omitempty"`
}

// NewDelayedRouting instantiates a new DelayedRouting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelayedRouting() *DelayedRouting {
	this := DelayedRouting{}
	return &this
}

// NewDelayedRoutingWithDefaults instantiates a new DelayedRouting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelayedRoutingWithDefaults() *DelayedRouting {
	this := DelayedRouting{}
	return &this
}

// GetResumeDate returns the ResumeDate field value if set, zero value otherwise.
func (o *DelayedRouting) GetResumeDate() string {
	if o == nil || IsNil(o.ResumeDate) {
		var ret string
		return ret
	}
	return *o.ResumeDate
}

// GetResumeDateOk returns a tuple with the ResumeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayedRouting) GetResumeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ResumeDate) {
		return nil, false
	}
	return o.ResumeDate, true
}

// HasResumeDate returns a boolean if a field has been set.
func (o *DelayedRouting) HasResumeDate() bool {
	if o != nil && !IsNil(o.ResumeDate) {
		return true
	}

	return false
}

// SetResumeDate gets a reference to the given string and assigns it to the ResumeDate field.
func (o *DelayedRouting) SetResumeDate(v string) {
	o.ResumeDate = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *DelayedRouting) GetRules() []EnvelopeDelayRule {
	if o == nil || IsNil(o.Rules) {
		var ret []EnvelopeDelayRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayedRouting) GetRulesOk() ([]EnvelopeDelayRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *DelayedRouting) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []EnvelopeDelayRule and assigns it to the Rules field.
func (o *DelayedRouting) SetRules(v []EnvelopeDelayRule) {
	o.Rules = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DelayedRouting) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayedRouting) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DelayedRouting) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DelayedRouting) SetStatus(v string) {
	o.Status = &v
}

func (o DelayedRouting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelayedRouting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResumeDate) {
		toSerialize["resumeDate"] = o.ResumeDate
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDelayedRouting struct {
	value *DelayedRouting
	isSet bool
}

func (v NullableDelayedRouting) Get() *DelayedRouting {
	return v.value
}

func (v *NullableDelayedRouting) Set(val *DelayedRouting) {
	v.value = val
	v.isSet = true
}

func (v NullableDelayedRouting) IsSet() bool {
	return v.isSet
}

func (v *NullableDelayedRouting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelayedRouting(val *DelayedRouting) *NullableDelayedRouting {
	return &NullableDelayedRouting{value: val, isSet: true}
}

func (v NullableDelayedRouting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelayedRouting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


