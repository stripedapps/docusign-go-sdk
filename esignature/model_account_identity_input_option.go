/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountIdentityInputOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountIdentityInputOption{}

// AccountIdentityInputOption 
type AccountIdentityInputOption struct {
	// 
	IsRequired *bool `json:"isRequired,omitempty"`
	// 
	OptionName *string `json:"optionName,omitempty"`
	// 
	ValueType *string `json:"valueType,omitempty"`
}

// NewAccountIdentityInputOption instantiates a new AccountIdentityInputOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountIdentityInputOption() *AccountIdentityInputOption {
	this := AccountIdentityInputOption{}
	return &this
}

// NewAccountIdentityInputOptionWithDefaults instantiates a new AccountIdentityInputOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountIdentityInputOptionWithDefaults() *AccountIdentityInputOption {
	this := AccountIdentityInputOption{}
	return &this
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *AccountIdentityInputOption) GetIsRequired() bool {
	if o == nil || IsNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIdentityInputOption) GetIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequired) {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *AccountIdentityInputOption) HasIsRequired() bool {
	if o != nil && !IsNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *AccountIdentityInputOption) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetOptionName returns the OptionName field value if set, zero value otherwise.
func (o *AccountIdentityInputOption) GetOptionName() string {
	if o == nil || IsNil(o.OptionName) {
		var ret string
		return ret
	}
	return *o.OptionName
}

// GetOptionNameOk returns a tuple with the OptionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIdentityInputOption) GetOptionNameOk() (*string, bool) {
	if o == nil || IsNil(o.OptionName) {
		return nil, false
	}
	return o.OptionName, true
}

// HasOptionName returns a boolean if a field has been set.
func (o *AccountIdentityInputOption) HasOptionName() bool {
	if o != nil && !IsNil(o.OptionName) {
		return true
	}

	return false
}

// SetOptionName gets a reference to the given string and assigns it to the OptionName field.
func (o *AccountIdentityInputOption) SetOptionName(v string) {
	o.OptionName = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *AccountIdentityInputOption) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIdentityInputOption) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *AccountIdentityInputOption) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *AccountIdentityInputOption) SetValueType(v string) {
	o.ValueType = &v
}

func (o AccountIdentityInputOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountIdentityInputOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsRequired) {
		toSerialize["isRequired"] = o.IsRequired
	}
	if !IsNil(o.OptionName) {
		toSerialize["optionName"] = o.OptionName
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	return toSerialize, nil
}

type NullableAccountIdentityInputOption struct {
	value *AccountIdentityInputOption
	isSet bool
}

func (v NullableAccountIdentityInputOption) Get() *AccountIdentityInputOption {
	return v.value
}

func (v *NullableAccountIdentityInputOption) Set(val *AccountIdentityInputOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountIdentityInputOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountIdentityInputOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountIdentityInputOption(val *AccountIdentityInputOption) *NullableAccountIdentityInputOption {
	return &NullableAccountIdentityInputOption{value: val, isSet: true}
}

func (v NullableAccountIdentityInputOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountIdentityInputOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


