/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeSummary{}

// EnvelopeSummary  This object describes an envelope.
type EnvelopeSummary struct {
	BulkEnvelopeStatus *BulkEnvelopeStatus `json:"bulkEnvelopeStatus,omitempty"`
	// The envelope ID of the envelope status that failed to post.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// 
	RecipientSigningUri *string `json:"recipientSigningUri,omitempty"`
	// 
	RecipientSigningUriError *string `json:"recipientSigningUriError,omitempty"`
	// Indicates the envelope status. Valid values are:   * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in. * `created`: The envelope is created as a draft. It can be modified and sent later. * `declined`: The envelope has been declined by the recipients. * `delivered`: The envelope has been delivered to the recipients. * `sent`: The envelope will be sent to the recipients after the envelope is created. * `signed`: The envelope has been signed by the recipients. * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope. 
	Status *string `json:"status,omitempty"`
	// The DateTime that the envelope changed status (i.e. was created or sent.)
	StatusDateTime *string `json:"statusDateTime,omitempty"`
	// A URI containing the user ID.
	Uri *string `json:"uri,omitempty"`
}

// NewEnvelopeSummary instantiates a new EnvelopeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeSummary() *EnvelopeSummary {
	this := EnvelopeSummary{}
	return &this
}

// NewEnvelopeSummaryWithDefaults instantiates a new EnvelopeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeSummaryWithDefaults() *EnvelopeSummary {
	this := EnvelopeSummary{}
	return &this
}

// GetBulkEnvelopeStatus returns the BulkEnvelopeStatus field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetBulkEnvelopeStatus() BulkEnvelopeStatus {
	if o == nil || IsNil(o.BulkEnvelopeStatus) {
		var ret BulkEnvelopeStatus
		return ret
	}
	return *o.BulkEnvelopeStatus
}

// GetBulkEnvelopeStatusOk returns a tuple with the BulkEnvelopeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetBulkEnvelopeStatusOk() (*BulkEnvelopeStatus, bool) {
	if o == nil || IsNil(o.BulkEnvelopeStatus) {
		return nil, false
	}
	return o.BulkEnvelopeStatus, true
}

// HasBulkEnvelopeStatus returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasBulkEnvelopeStatus() bool {
	if o != nil && !IsNil(o.BulkEnvelopeStatus) {
		return true
	}

	return false
}

// SetBulkEnvelopeStatus gets a reference to the given BulkEnvelopeStatus and assigns it to the BulkEnvelopeStatus field.
func (o *EnvelopeSummary) SetBulkEnvelopeStatus(v BulkEnvelopeStatus) {
	o.BulkEnvelopeStatus = &v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *EnvelopeSummary) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *EnvelopeSummary) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetRecipientSigningUri returns the RecipientSigningUri field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetRecipientSigningUri() string {
	if o == nil || IsNil(o.RecipientSigningUri) {
		var ret string
		return ret
	}
	return *o.RecipientSigningUri
}

// GetRecipientSigningUriOk returns a tuple with the RecipientSigningUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetRecipientSigningUriOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientSigningUri) {
		return nil, false
	}
	return o.RecipientSigningUri, true
}

// HasRecipientSigningUri returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasRecipientSigningUri() bool {
	if o != nil && !IsNil(o.RecipientSigningUri) {
		return true
	}

	return false
}

// SetRecipientSigningUri gets a reference to the given string and assigns it to the RecipientSigningUri field.
func (o *EnvelopeSummary) SetRecipientSigningUri(v string) {
	o.RecipientSigningUri = &v
}

// GetRecipientSigningUriError returns the RecipientSigningUriError field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetRecipientSigningUriError() string {
	if o == nil || IsNil(o.RecipientSigningUriError) {
		var ret string
		return ret
	}
	return *o.RecipientSigningUriError
}

// GetRecipientSigningUriErrorOk returns a tuple with the RecipientSigningUriError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetRecipientSigningUriErrorOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientSigningUriError) {
		return nil, false
	}
	return o.RecipientSigningUriError, true
}

// HasRecipientSigningUriError returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasRecipientSigningUriError() bool {
	if o != nil && !IsNil(o.RecipientSigningUriError) {
		return true
	}

	return false
}

// SetRecipientSigningUriError gets a reference to the given string and assigns it to the RecipientSigningUriError field.
func (o *EnvelopeSummary) SetRecipientSigningUriError(v string) {
	o.RecipientSigningUriError = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EnvelopeSummary) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDateTime returns the StatusDateTime field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetStatusDateTime() string {
	if o == nil || IsNil(o.StatusDateTime) {
		var ret string
		return ret
	}
	return *o.StatusDateTime
}

// GetStatusDateTimeOk returns a tuple with the StatusDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetStatusDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDateTime) {
		return nil, false
	}
	return o.StatusDateTime, true
}

// HasStatusDateTime returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasStatusDateTime() bool {
	if o != nil && !IsNil(o.StatusDateTime) {
		return true
	}

	return false
}

// SetStatusDateTime gets a reference to the given string and assigns it to the StatusDateTime field.
func (o *EnvelopeSummary) SetStatusDateTime(v string) {
	o.StatusDateTime = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *EnvelopeSummary) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeSummary) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *EnvelopeSummary) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *EnvelopeSummary) SetUri(v string) {
	o.Uri = &v
}

func (o EnvelopeSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BulkEnvelopeStatus) {
		toSerialize["bulkEnvelopeStatus"] = o.BulkEnvelopeStatus
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.RecipientSigningUri) {
		toSerialize["recipientSigningUri"] = o.RecipientSigningUri
	}
	if !IsNil(o.RecipientSigningUriError) {
		toSerialize["recipientSigningUriError"] = o.RecipientSigningUriError
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDateTime) {
		toSerialize["statusDateTime"] = o.StatusDateTime
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableEnvelopeSummary struct {
	value *EnvelopeSummary
	isSet bool
}

func (v NullableEnvelopeSummary) Get() *EnvelopeSummary {
	return v.value
}

func (v *NullableEnvelopeSummary) Set(val *EnvelopeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeSummary(val *EnvelopeSummary) *NullableEnvelopeSummary {
	return &NullableEnvelopeSummary{value: val, isSet: true}
}

func (v NullableEnvelopeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


