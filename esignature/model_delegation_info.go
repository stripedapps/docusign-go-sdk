/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DelegationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelegationInfo{}

// DelegationInfo 
type DelegationInfo struct {
	// 
	Email *string `json:"Email,omitempty"`
	// 
	Name *string `json:"Name,omitempty"`
	// 
	UserAuthorizationId *string `json:"UserAuthorizationId,omitempty"`
	// 
	UserId *string `json:"UserId,omitempty"`
}

// NewDelegationInfo instantiates a new DelegationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegationInfo() *DelegationInfo {
	this := DelegationInfo{}
	return &this
}

// NewDelegationInfoWithDefaults instantiates a new DelegationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationInfoWithDefaults() *DelegationInfo {
	this := DelegationInfo{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DelegationInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DelegationInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DelegationInfo) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DelegationInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DelegationInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DelegationInfo) SetName(v string) {
	o.Name = &v
}

// GetUserAuthorizationId returns the UserAuthorizationId field value if set, zero value otherwise.
func (o *DelegationInfo) GetUserAuthorizationId() string {
	if o == nil || IsNil(o.UserAuthorizationId) {
		var ret string
		return ret
	}
	return *o.UserAuthorizationId
}

// GetUserAuthorizationIdOk returns a tuple with the UserAuthorizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetUserAuthorizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserAuthorizationId) {
		return nil, false
	}
	return o.UserAuthorizationId, true
}

// HasUserAuthorizationId returns a boolean if a field has been set.
func (o *DelegationInfo) HasUserAuthorizationId() bool {
	if o != nil && !IsNil(o.UserAuthorizationId) {
		return true
	}

	return false
}

// SetUserAuthorizationId gets a reference to the given string and assigns it to the UserAuthorizationId field.
func (o *DelegationInfo) SetUserAuthorizationId(v string) {
	o.UserAuthorizationId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DelegationInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DelegationInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DelegationInfo) SetUserId(v string) {
	o.UserId = &v
}

func (o DelegationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelegationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["Email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.UserAuthorizationId) {
		toSerialize["UserAuthorizationId"] = o.UserAuthorizationId
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableDelegationInfo struct {
	value *DelegationInfo
	isSet bool
}

func (v NullableDelegationInfo) Get() *DelegationInfo {
	return v.value
}

func (v *NullableDelegationInfo) Set(val *DelegationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegationInfo(val *DelegationInfo) *NullableDelegationInfo {
	return &NullableDelegationInfo{value: val, isSet: true}
}

func (v NullableDelegationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


