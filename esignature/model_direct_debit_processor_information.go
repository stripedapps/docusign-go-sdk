/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DirectDebitProcessorInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectDebitProcessorInformation{}

// DirectDebitProcessorInformation Contains information about a bank that processes a customer's direct debit payments.
type DirectDebitProcessorInformation struct {
	// The branch code of the bank used for direct debit.  Maximum Length: 10 characters.
	BankBranchCode *string `json:"bankBranchCode,omitempty"`
	// The check digit or digits in the international bank account number. These digits are used to confirm the validity of the account.  Maximum Length: 4 characters.
	BankCheckDigit *string `json:"bankCheckDigit,omitempty"`
	// The code or number that identifies the bank. This is also known as the sort code.  Example: `200000`  Maximum Length: 18 characters.
	BankCode *string `json:"bankCode,omitempty"`
	// The name of the direct debit bank.  Maximum Length: 80 characters.
	BankName *string `json:"bankName,omitempty"`
	// The name on the direct debit bank account. This field is required for POST and PUT requests.  Maximum Length: 60 characters.
	BankTransferAccountName *string `json:"bankTransferAccountName,omitempty"`
	// The customer's bank account number. This value will be obfuscated. This field is required for POST and PUT requests.  Maximum Length: 30 characters.
	BankTransferAccountNumber *string `json:"bankTransferAccountNumber,omitempty"`
	// Specifies the type of direct debit transfer. The value of this field is dependent on the user's country. This field is required for POST and PUT requests. Possible values are:  - `DirectDebitUK` - `DirectEntryAU` - `SEPA`
	BankTransferType *string `json:"bankTransferType,omitempty"`
	// The user's country. The system populates this value automatically.  
	Country *string `json:"country,omitempty"`
	// The email address of the user who is associated with the payment method. This field is required for POST and PUT requests.  Maximum Length: 80 characters.
	Email *string `json:"email,omitempty"`
	// The user's first name. This field is required for POST and PUT requests.  Maximum Length: 30 characters.
	FirstName *string `json:"firstName,omitempty"`
	// The International Bank Account Number (IBAN).   Example: `DE89370400440532013000`  For more information, see [PeopleSoft's guide to Setting Up Banks](https://docs.oracle.com/cd/E16365_01/fscm91pbr0/eng/psbooks/fsbk/chapter.htm?File=fsbk/htm/fsbk03.htm).  **Note:** This number will be obfuscated.
	IBAN *string `json:"iBAN,omitempty"`
	// The user's last name. This field is required for POST and PUT requests.  Maximum Length: 70 characters.
	LastName *string `json:"lastName,omitempty"`
}

// NewDirectDebitProcessorInformation instantiates a new DirectDebitProcessorInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectDebitProcessorInformation() *DirectDebitProcessorInformation {
	this := DirectDebitProcessorInformation{}
	return &this
}

// NewDirectDebitProcessorInformationWithDefaults instantiates a new DirectDebitProcessorInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectDebitProcessorInformationWithDefaults() *DirectDebitProcessorInformation {
	this := DirectDebitProcessorInformation{}
	return &this
}

// GetBankBranchCode returns the BankBranchCode field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankBranchCode() string {
	if o == nil || IsNil(o.BankBranchCode) {
		var ret string
		return ret
	}
	return *o.BankBranchCode
}

// GetBankBranchCodeOk returns a tuple with the BankBranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankBranchCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BankBranchCode) {
		return nil, false
	}
	return o.BankBranchCode, true
}

// HasBankBranchCode returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankBranchCode() bool {
	if o != nil && !IsNil(o.BankBranchCode) {
		return true
	}

	return false
}

// SetBankBranchCode gets a reference to the given string and assigns it to the BankBranchCode field.
func (o *DirectDebitProcessorInformation) SetBankBranchCode(v string) {
	o.BankBranchCode = &v
}

// GetBankCheckDigit returns the BankCheckDigit field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankCheckDigit() string {
	if o == nil || IsNil(o.BankCheckDigit) {
		var ret string
		return ret
	}
	return *o.BankCheckDigit
}

// GetBankCheckDigitOk returns a tuple with the BankCheckDigit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankCheckDigitOk() (*string, bool) {
	if o == nil || IsNil(o.BankCheckDigit) {
		return nil, false
	}
	return o.BankCheckDigit, true
}

// HasBankCheckDigit returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankCheckDigit() bool {
	if o != nil && !IsNil(o.BankCheckDigit) {
		return true
	}

	return false
}

// SetBankCheckDigit gets a reference to the given string and assigns it to the BankCheckDigit field.
func (o *DirectDebitProcessorInformation) SetBankCheckDigit(v string) {
	o.BankCheckDigit = &v
}

// GetBankCode returns the BankCode field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankCode() string {
	if o == nil || IsNil(o.BankCode) {
		var ret string
		return ret
	}
	return *o.BankCode
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BankCode) {
		return nil, false
	}
	return o.BankCode, true
}

// HasBankCode returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankCode() bool {
	if o != nil && !IsNil(o.BankCode) {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given string and assigns it to the BankCode field.
func (o *DirectDebitProcessorInformation) SetBankCode(v string) {
	o.BankCode = &v
}

// GetBankName returns the BankName field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankName() string {
	if o == nil || IsNil(o.BankName) {
		var ret string
		return ret
	}
	return *o.BankName
}

// GetBankNameOk returns a tuple with the BankName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankNameOk() (*string, bool) {
	if o == nil || IsNil(o.BankName) {
		return nil, false
	}
	return o.BankName, true
}

// HasBankName returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankName() bool {
	if o != nil && !IsNil(o.BankName) {
		return true
	}

	return false
}

// SetBankName gets a reference to the given string and assigns it to the BankName field.
func (o *DirectDebitProcessorInformation) SetBankName(v string) {
	o.BankName = &v
}

// GetBankTransferAccountName returns the BankTransferAccountName field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankTransferAccountName() string {
	if o == nil || IsNil(o.BankTransferAccountName) {
		var ret string
		return ret
	}
	return *o.BankTransferAccountName
}

// GetBankTransferAccountNameOk returns a tuple with the BankTransferAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankTransferAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.BankTransferAccountName) {
		return nil, false
	}
	return o.BankTransferAccountName, true
}

// HasBankTransferAccountName returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankTransferAccountName() bool {
	if o != nil && !IsNil(o.BankTransferAccountName) {
		return true
	}

	return false
}

// SetBankTransferAccountName gets a reference to the given string and assigns it to the BankTransferAccountName field.
func (o *DirectDebitProcessorInformation) SetBankTransferAccountName(v string) {
	o.BankTransferAccountName = &v
}

// GetBankTransferAccountNumber returns the BankTransferAccountNumber field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankTransferAccountNumber() string {
	if o == nil || IsNil(o.BankTransferAccountNumber) {
		var ret string
		return ret
	}
	return *o.BankTransferAccountNumber
}

// GetBankTransferAccountNumberOk returns a tuple with the BankTransferAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankTransferAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BankTransferAccountNumber) {
		return nil, false
	}
	return o.BankTransferAccountNumber, true
}

// HasBankTransferAccountNumber returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankTransferAccountNumber() bool {
	if o != nil && !IsNil(o.BankTransferAccountNumber) {
		return true
	}

	return false
}

// SetBankTransferAccountNumber gets a reference to the given string and assigns it to the BankTransferAccountNumber field.
func (o *DirectDebitProcessorInformation) SetBankTransferAccountNumber(v string) {
	o.BankTransferAccountNumber = &v
}

// GetBankTransferType returns the BankTransferType field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetBankTransferType() string {
	if o == nil || IsNil(o.BankTransferType) {
		var ret string
		return ret
	}
	return *o.BankTransferType
}

// GetBankTransferTypeOk returns a tuple with the BankTransferType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetBankTransferTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BankTransferType) {
		return nil, false
	}
	return o.BankTransferType, true
}

// HasBankTransferType returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasBankTransferType() bool {
	if o != nil && !IsNil(o.BankTransferType) {
		return true
	}

	return false
}

// SetBankTransferType gets a reference to the given string and assigns it to the BankTransferType field.
func (o *DirectDebitProcessorInformation) SetBankTransferType(v string) {
	o.BankTransferType = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *DirectDebitProcessorInformation) SetCountry(v string) {
	o.Country = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DirectDebitProcessorInformation) SetEmail(v string) {
	o.Email = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *DirectDebitProcessorInformation) SetFirstName(v string) {
	o.FirstName = &v
}

// GetIBAN returns the IBAN field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetIBAN() string {
	if o == nil || IsNil(o.IBAN) {
		var ret string
		return ret
	}
	return *o.IBAN
}

// GetIBANOk returns a tuple with the IBAN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetIBANOk() (*string, bool) {
	if o == nil || IsNil(o.IBAN) {
		return nil, false
	}
	return o.IBAN, true
}

// HasIBAN returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasIBAN() bool {
	if o != nil && !IsNil(o.IBAN) {
		return true
	}

	return false
}

// SetIBAN gets a reference to the given string and assigns it to the IBAN field.
func (o *DirectDebitProcessorInformation) SetIBAN(v string) {
	o.IBAN = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *DirectDebitProcessorInformation) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectDebitProcessorInformation) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *DirectDebitProcessorInformation) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *DirectDebitProcessorInformation) SetLastName(v string) {
	o.LastName = &v
}

func (o DirectDebitProcessorInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectDebitProcessorInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankBranchCode) {
		toSerialize["bankBranchCode"] = o.BankBranchCode
	}
	if !IsNil(o.BankCheckDigit) {
		toSerialize["bankCheckDigit"] = o.BankCheckDigit
	}
	if !IsNil(o.BankCode) {
		toSerialize["bankCode"] = o.BankCode
	}
	if !IsNil(o.BankName) {
		toSerialize["bankName"] = o.BankName
	}
	if !IsNil(o.BankTransferAccountName) {
		toSerialize["bankTransferAccountName"] = o.BankTransferAccountName
	}
	if !IsNil(o.BankTransferAccountNumber) {
		toSerialize["bankTransferAccountNumber"] = o.BankTransferAccountNumber
	}
	if !IsNil(o.BankTransferType) {
		toSerialize["bankTransferType"] = o.BankTransferType
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.IBAN) {
		toSerialize["iBAN"] = o.IBAN
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	return toSerialize, nil
}

type NullableDirectDebitProcessorInformation struct {
	value *DirectDebitProcessorInformation
	isSet bool
}

func (v NullableDirectDebitProcessorInformation) Get() *DirectDebitProcessorInformation {
	return v.value
}

func (v *NullableDirectDebitProcessorInformation) Set(val *DirectDebitProcessorInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectDebitProcessorInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectDebitProcessorInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectDebitProcessorInformation(val *DirectDebitProcessorInformation) *NullableDirectDebitProcessorInformation {
	return &NullableDirectDebitProcessorInformation{value: val, isSet: true}
}

func (v NullableDirectDebitProcessorInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectDebitProcessorInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


