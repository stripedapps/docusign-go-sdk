/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountBillingPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountBillingPlan{}

// AccountBillingPlan Contains information about an account billing plan.
type AccountBillingPlan struct {
	// Reserved for DocuSign.
	AddOns []AddOn `json:"addOns,omitempty"`
	// 
	AppStoreReceiptExpirationDate *string `json:"appStoreReceiptExpirationDate,omitempty"`
	// 
	AppStoreReceiptPurchaseDate *string `json:"appStoreReceiptPurchaseDate,omitempty"`
	// Reserved for DocuSign.
	CanCancelRenewal *string `json:"canCancelRenewal,omitempty"`
	// When **true,** specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
	CanUpgrade *string `json:"canUpgrade,omitempty"`
	// Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code to use for the account.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	DowngradePlanInformation *DowngradePlanUpdateResponse `json:"downgradePlanInformation,omitempty"`
	// When **true,** customer support is provided as part of the account plan.
	EnableSupport *string `json:"enableSupport,omitempty"`
	// The number of seats (users) included in the plan.
	IncludedSeats *string `json:"includedSeats,omitempty"`
	// Reserved for DocuSign.
	IncrementalSeats *string `json:"incrementalSeats,omitempty"`
	// When **true,** the account has been downgraded from a premium account type. Otherwise **false.**
	IsDowngrade *string `json:"isDowngrade,omitempty"`
	// 
	NotificationType *string `json:"notificationType,omitempty"`
	//  Any other percentage discount for the plan. 
	OtherDiscountPercent *string `json:"otherDiscountPercent,omitempty"`
	// The payment cycle associated with the plan. Valid values:   - `Monthly` - `Annually` 
	PaymentCycle *string `json:"paymentCycle,omitempty"`
	//  The payment method used with the plan. Valid values: CreditCard, PurchaseOrder, Premium, or Freemium. 
	PaymentMethod *string `json:"paymentMethod,omitempty"`
	// The per-seat price associated with the plan.  Example: `\"456.0000\"`
	PerSeatPrice *string `json:"perSeatPrice,omitempty"`
	// Identifies the type of plan. Examples include:  - `business` - `corporate` - `enterprise`  - `free`
	PlanClassification *string `json:"planClassification,omitempty"`
	// A complex type that sets the feature sets for the account. It contains the following information (all string content):  * currencyFeatureSetPrices - Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, seatFee that are configured for this plan feature set. * envelopeFee - An incremental envelope cost for plans with envelope overages (when isEnabled=true). * featureSetId - A unique ID for the feature set. * fixedFee - A one-time fee associated with the plan (when isEnabled=true). * isActive - Specifies whether the feature set is actively set as part of the plan. * isEnabled - Specifies whether the feature set is actively enabled as part of the plan. * name - The name of the feature set. * seatFee - An incremental seat cost for seat-based plans (when isEnabled=true). 
	PlanFeatureSets []FeatureSet `json:"planFeatureSets,omitempty"`
	// DocuSign's ID for the account plan.
	PlanId *string `json:"planId,omitempty"`
	// The name of the Billing Plan.
	PlanName *string `json:"planName,omitempty"`
	// The date that the Account started using the current plan.
	PlanStartDate *string `json:"planStartDate,omitempty"`
	// The Product ID from the AppStore.
	ProductId *string `json:"productId,omitempty"`
	// 
	RenewalDate *string `json:"renewalDate,omitempty"`
	// The renewal status for the account. Valid values are:  * `auto`: The account automatically renews. * `queued_for_close`: The account will be closed at the `billingPeriodEndDate`. * `queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.  **Note:** For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
	RenewalStatus *string `json:"renewalStatus,omitempty"`
	//  A complex type that contains any seat discount information. Valid values:    - `BeginSeatCount`   - `EndSeatCount`  - `SeatDiscountPercent`   
	SeatDiscounts []SeatDiscount `json:"seatDiscounts,omitempty"`
	// 
	SubscriptionStartDate *string `json:"subscriptionStartDate,omitempty"`
	// The support incident fee charged for each support incident.  Example: `\"$0.00\"`
	SupportIncidentFee *string `json:"supportIncidentFee,omitempty"`
	// The support plan fee charged for this plan.  Example: `\"$0.00\"`
	SupportPlanFee *string `json:"supportPlanFee,omitempty"`
	// 
	TaxExemptId *string `json:"taxExemptId,omitempty"`
}

// NewAccountBillingPlan instantiates a new AccountBillingPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountBillingPlan() *AccountBillingPlan {
	this := AccountBillingPlan{}
	return &this
}

// NewAccountBillingPlanWithDefaults instantiates a new AccountBillingPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountBillingPlanWithDefaults() *AccountBillingPlan {
	this := AccountBillingPlan{}
	return &this
}

// GetAddOns returns the AddOns field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetAddOns() []AddOn {
	if o == nil || IsNil(o.AddOns) {
		var ret []AddOn
		return ret
	}
	return o.AddOns
}

// GetAddOnsOk returns a tuple with the AddOns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetAddOnsOk() ([]AddOn, bool) {
	if o == nil || IsNil(o.AddOns) {
		return nil, false
	}
	return o.AddOns, true
}

// HasAddOns returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasAddOns() bool {
	if o != nil && !IsNil(o.AddOns) {
		return true
	}

	return false
}

// SetAddOns gets a reference to the given []AddOn and assigns it to the AddOns field.
func (o *AccountBillingPlan) SetAddOns(v []AddOn) {
	o.AddOns = v
}

// GetAppStoreReceiptExpirationDate returns the AppStoreReceiptExpirationDate field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetAppStoreReceiptExpirationDate() string {
	if o == nil || IsNil(o.AppStoreReceiptExpirationDate) {
		var ret string
		return ret
	}
	return *o.AppStoreReceiptExpirationDate
}

// GetAppStoreReceiptExpirationDateOk returns a tuple with the AppStoreReceiptExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetAppStoreReceiptExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.AppStoreReceiptExpirationDate) {
		return nil, false
	}
	return o.AppStoreReceiptExpirationDate, true
}

// HasAppStoreReceiptExpirationDate returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasAppStoreReceiptExpirationDate() bool {
	if o != nil && !IsNil(o.AppStoreReceiptExpirationDate) {
		return true
	}

	return false
}

// SetAppStoreReceiptExpirationDate gets a reference to the given string and assigns it to the AppStoreReceiptExpirationDate field.
func (o *AccountBillingPlan) SetAppStoreReceiptExpirationDate(v string) {
	o.AppStoreReceiptExpirationDate = &v
}

// GetAppStoreReceiptPurchaseDate returns the AppStoreReceiptPurchaseDate field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetAppStoreReceiptPurchaseDate() string {
	if o == nil || IsNil(o.AppStoreReceiptPurchaseDate) {
		var ret string
		return ret
	}
	return *o.AppStoreReceiptPurchaseDate
}

// GetAppStoreReceiptPurchaseDateOk returns a tuple with the AppStoreReceiptPurchaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetAppStoreReceiptPurchaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.AppStoreReceiptPurchaseDate) {
		return nil, false
	}
	return o.AppStoreReceiptPurchaseDate, true
}

// HasAppStoreReceiptPurchaseDate returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasAppStoreReceiptPurchaseDate() bool {
	if o != nil && !IsNil(o.AppStoreReceiptPurchaseDate) {
		return true
	}

	return false
}

// SetAppStoreReceiptPurchaseDate gets a reference to the given string and assigns it to the AppStoreReceiptPurchaseDate field.
func (o *AccountBillingPlan) SetAppStoreReceiptPurchaseDate(v string) {
	o.AppStoreReceiptPurchaseDate = &v
}

// GetCanCancelRenewal returns the CanCancelRenewal field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetCanCancelRenewal() string {
	if o == nil || IsNil(o.CanCancelRenewal) {
		var ret string
		return ret
	}
	return *o.CanCancelRenewal
}

// GetCanCancelRenewalOk returns a tuple with the CanCancelRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetCanCancelRenewalOk() (*string, bool) {
	if o == nil || IsNil(o.CanCancelRenewal) {
		return nil, false
	}
	return o.CanCancelRenewal, true
}

// HasCanCancelRenewal returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasCanCancelRenewal() bool {
	if o != nil && !IsNil(o.CanCancelRenewal) {
		return true
	}

	return false
}

// SetCanCancelRenewal gets a reference to the given string and assigns it to the CanCancelRenewal field.
func (o *AccountBillingPlan) SetCanCancelRenewal(v string) {
	o.CanCancelRenewal = &v
}

// GetCanUpgrade returns the CanUpgrade field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetCanUpgrade() string {
	if o == nil || IsNil(o.CanUpgrade) {
		var ret string
		return ret
	}
	return *o.CanUpgrade
}

// GetCanUpgradeOk returns a tuple with the CanUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetCanUpgradeOk() (*string, bool) {
	if o == nil || IsNil(o.CanUpgrade) {
		return nil, false
	}
	return o.CanUpgrade, true
}

// HasCanUpgrade returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasCanUpgrade() bool {
	if o != nil && !IsNil(o.CanUpgrade) {
		return true
	}

	return false
}

// SetCanUpgrade gets a reference to the given string and assigns it to the CanUpgrade field.
func (o *AccountBillingPlan) SetCanUpgrade(v string) {
	o.CanUpgrade = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *AccountBillingPlan) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDowngradePlanInformation returns the DowngradePlanInformation field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetDowngradePlanInformation() DowngradePlanUpdateResponse {
	if o == nil || IsNil(o.DowngradePlanInformation) {
		var ret DowngradePlanUpdateResponse
		return ret
	}
	return *o.DowngradePlanInformation
}

// GetDowngradePlanInformationOk returns a tuple with the DowngradePlanInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetDowngradePlanInformationOk() (*DowngradePlanUpdateResponse, bool) {
	if o == nil || IsNil(o.DowngradePlanInformation) {
		return nil, false
	}
	return o.DowngradePlanInformation, true
}

// HasDowngradePlanInformation returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasDowngradePlanInformation() bool {
	if o != nil && !IsNil(o.DowngradePlanInformation) {
		return true
	}

	return false
}

// SetDowngradePlanInformation gets a reference to the given DowngradePlanUpdateResponse and assigns it to the DowngradePlanInformation field.
func (o *AccountBillingPlan) SetDowngradePlanInformation(v DowngradePlanUpdateResponse) {
	o.DowngradePlanInformation = &v
}

// GetEnableSupport returns the EnableSupport field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetEnableSupport() string {
	if o == nil || IsNil(o.EnableSupport) {
		var ret string
		return ret
	}
	return *o.EnableSupport
}

// GetEnableSupportOk returns a tuple with the EnableSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetEnableSupportOk() (*string, bool) {
	if o == nil || IsNil(o.EnableSupport) {
		return nil, false
	}
	return o.EnableSupport, true
}

// HasEnableSupport returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasEnableSupport() bool {
	if o != nil && !IsNil(o.EnableSupport) {
		return true
	}

	return false
}

// SetEnableSupport gets a reference to the given string and assigns it to the EnableSupport field.
func (o *AccountBillingPlan) SetEnableSupport(v string) {
	o.EnableSupport = &v
}

// GetIncludedSeats returns the IncludedSeats field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetIncludedSeats() string {
	if o == nil || IsNil(o.IncludedSeats) {
		var ret string
		return ret
	}
	return *o.IncludedSeats
}

// GetIncludedSeatsOk returns a tuple with the IncludedSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetIncludedSeatsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludedSeats) {
		return nil, false
	}
	return o.IncludedSeats, true
}

// HasIncludedSeats returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasIncludedSeats() bool {
	if o != nil && !IsNil(o.IncludedSeats) {
		return true
	}

	return false
}

// SetIncludedSeats gets a reference to the given string and assigns it to the IncludedSeats field.
func (o *AccountBillingPlan) SetIncludedSeats(v string) {
	o.IncludedSeats = &v
}

// GetIncrementalSeats returns the IncrementalSeats field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetIncrementalSeats() string {
	if o == nil || IsNil(o.IncrementalSeats) {
		var ret string
		return ret
	}
	return *o.IncrementalSeats
}

// GetIncrementalSeatsOk returns a tuple with the IncrementalSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetIncrementalSeatsOk() (*string, bool) {
	if o == nil || IsNil(o.IncrementalSeats) {
		return nil, false
	}
	return o.IncrementalSeats, true
}

// HasIncrementalSeats returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasIncrementalSeats() bool {
	if o != nil && !IsNil(o.IncrementalSeats) {
		return true
	}

	return false
}

// SetIncrementalSeats gets a reference to the given string and assigns it to the IncrementalSeats field.
func (o *AccountBillingPlan) SetIncrementalSeats(v string) {
	o.IncrementalSeats = &v
}

// GetIsDowngrade returns the IsDowngrade field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetIsDowngrade() string {
	if o == nil || IsNil(o.IsDowngrade) {
		var ret string
		return ret
	}
	return *o.IsDowngrade
}

// GetIsDowngradeOk returns a tuple with the IsDowngrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetIsDowngradeOk() (*string, bool) {
	if o == nil || IsNil(o.IsDowngrade) {
		return nil, false
	}
	return o.IsDowngrade, true
}

// HasIsDowngrade returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasIsDowngrade() bool {
	if o != nil && !IsNil(o.IsDowngrade) {
		return true
	}

	return false
}

// SetIsDowngrade gets a reference to the given string and assigns it to the IsDowngrade field.
func (o *AccountBillingPlan) SetIsDowngrade(v string) {
	o.IsDowngrade = &v
}

// GetNotificationType returns the NotificationType field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetNotificationType() string {
	if o == nil || IsNil(o.NotificationType) {
		var ret string
		return ret
	}
	return *o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetNotificationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationType) {
		return nil, false
	}
	return o.NotificationType, true
}

// HasNotificationType returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasNotificationType() bool {
	if o != nil && !IsNil(o.NotificationType) {
		return true
	}

	return false
}

// SetNotificationType gets a reference to the given string and assigns it to the NotificationType field.
func (o *AccountBillingPlan) SetNotificationType(v string) {
	o.NotificationType = &v
}

// GetOtherDiscountPercent returns the OtherDiscountPercent field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetOtherDiscountPercent() string {
	if o == nil || IsNil(o.OtherDiscountPercent) {
		var ret string
		return ret
	}
	return *o.OtherDiscountPercent
}

// GetOtherDiscountPercentOk returns a tuple with the OtherDiscountPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetOtherDiscountPercentOk() (*string, bool) {
	if o == nil || IsNil(o.OtherDiscountPercent) {
		return nil, false
	}
	return o.OtherDiscountPercent, true
}

// HasOtherDiscountPercent returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasOtherDiscountPercent() bool {
	if o != nil && !IsNil(o.OtherDiscountPercent) {
		return true
	}

	return false
}

// SetOtherDiscountPercent gets a reference to the given string and assigns it to the OtherDiscountPercent field.
func (o *AccountBillingPlan) SetOtherDiscountPercent(v string) {
	o.OtherDiscountPercent = &v
}

// GetPaymentCycle returns the PaymentCycle field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPaymentCycle() string {
	if o == nil || IsNil(o.PaymentCycle) {
		var ret string
		return ret
	}
	return *o.PaymentCycle
}

// GetPaymentCycleOk returns a tuple with the PaymentCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPaymentCycleOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentCycle) {
		return nil, false
	}
	return o.PaymentCycle, true
}

// HasPaymentCycle returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPaymentCycle() bool {
	if o != nil && !IsNil(o.PaymentCycle) {
		return true
	}

	return false
}

// SetPaymentCycle gets a reference to the given string and assigns it to the PaymentCycle field.
func (o *AccountBillingPlan) SetPaymentCycle(v string) {
	o.PaymentCycle = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPaymentMethod() string {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPaymentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *AccountBillingPlan) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

// GetPerSeatPrice returns the PerSeatPrice field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPerSeatPrice() string {
	if o == nil || IsNil(o.PerSeatPrice) {
		var ret string
		return ret
	}
	return *o.PerSeatPrice
}

// GetPerSeatPriceOk returns a tuple with the PerSeatPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPerSeatPriceOk() (*string, bool) {
	if o == nil || IsNil(o.PerSeatPrice) {
		return nil, false
	}
	return o.PerSeatPrice, true
}

// HasPerSeatPrice returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPerSeatPrice() bool {
	if o != nil && !IsNil(o.PerSeatPrice) {
		return true
	}

	return false
}

// SetPerSeatPrice gets a reference to the given string and assigns it to the PerSeatPrice field.
func (o *AccountBillingPlan) SetPerSeatPrice(v string) {
	o.PerSeatPrice = &v
}

// GetPlanClassification returns the PlanClassification field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPlanClassification() string {
	if o == nil || IsNil(o.PlanClassification) {
		var ret string
		return ret
	}
	return *o.PlanClassification
}

// GetPlanClassificationOk returns a tuple with the PlanClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPlanClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.PlanClassification) {
		return nil, false
	}
	return o.PlanClassification, true
}

// HasPlanClassification returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPlanClassification() bool {
	if o != nil && !IsNil(o.PlanClassification) {
		return true
	}

	return false
}

// SetPlanClassification gets a reference to the given string and assigns it to the PlanClassification field.
func (o *AccountBillingPlan) SetPlanClassification(v string) {
	o.PlanClassification = &v
}

// GetPlanFeatureSets returns the PlanFeatureSets field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPlanFeatureSets() []FeatureSet {
	if o == nil || IsNil(o.PlanFeatureSets) {
		var ret []FeatureSet
		return ret
	}
	return o.PlanFeatureSets
}

// GetPlanFeatureSetsOk returns a tuple with the PlanFeatureSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPlanFeatureSetsOk() ([]FeatureSet, bool) {
	if o == nil || IsNil(o.PlanFeatureSets) {
		return nil, false
	}
	return o.PlanFeatureSets, true
}

// HasPlanFeatureSets returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPlanFeatureSets() bool {
	if o != nil && !IsNil(o.PlanFeatureSets) {
		return true
	}

	return false
}

// SetPlanFeatureSets gets a reference to the given []FeatureSet and assigns it to the PlanFeatureSets field.
func (o *AccountBillingPlan) SetPlanFeatureSets(v []FeatureSet) {
	o.PlanFeatureSets = v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *AccountBillingPlan) SetPlanId(v string) {
	o.PlanId = &v
}

// GetPlanName returns the PlanName field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPlanName() string {
	if o == nil || IsNil(o.PlanName) {
		var ret string
		return ret
	}
	return *o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PlanName) {
		return nil, false
	}
	return o.PlanName, true
}

// HasPlanName returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPlanName() bool {
	if o != nil && !IsNil(o.PlanName) {
		return true
	}

	return false
}

// SetPlanName gets a reference to the given string and assigns it to the PlanName field.
func (o *AccountBillingPlan) SetPlanName(v string) {
	o.PlanName = &v
}

// GetPlanStartDate returns the PlanStartDate field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetPlanStartDate() string {
	if o == nil || IsNil(o.PlanStartDate) {
		var ret string
		return ret
	}
	return *o.PlanStartDate
}

// GetPlanStartDateOk returns a tuple with the PlanStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetPlanStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.PlanStartDate) {
		return nil, false
	}
	return o.PlanStartDate, true
}

// HasPlanStartDate returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasPlanStartDate() bool {
	if o != nil && !IsNil(o.PlanStartDate) {
		return true
	}

	return false
}

// SetPlanStartDate gets a reference to the given string and assigns it to the PlanStartDate field.
func (o *AccountBillingPlan) SetPlanStartDate(v string) {
	o.PlanStartDate = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *AccountBillingPlan) SetProductId(v string) {
	o.ProductId = &v
}

// GetRenewalDate returns the RenewalDate field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetRenewalDate() string {
	if o == nil || IsNil(o.RenewalDate) {
		var ret string
		return ret
	}
	return *o.RenewalDate
}

// GetRenewalDateOk returns a tuple with the RenewalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetRenewalDateOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalDate) {
		return nil, false
	}
	return o.RenewalDate, true
}

// HasRenewalDate returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasRenewalDate() bool {
	if o != nil && !IsNil(o.RenewalDate) {
		return true
	}

	return false
}

// SetRenewalDate gets a reference to the given string and assigns it to the RenewalDate field.
func (o *AccountBillingPlan) SetRenewalDate(v string) {
	o.RenewalDate = &v
}

// GetRenewalStatus returns the RenewalStatus field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetRenewalStatus() string {
	if o == nil || IsNil(o.RenewalStatus) {
		var ret string
		return ret
	}
	return *o.RenewalStatus
}

// GetRenewalStatusOk returns a tuple with the RenewalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetRenewalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalStatus) {
		return nil, false
	}
	return o.RenewalStatus, true
}

// HasRenewalStatus returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasRenewalStatus() bool {
	if o != nil && !IsNil(o.RenewalStatus) {
		return true
	}

	return false
}

// SetRenewalStatus gets a reference to the given string and assigns it to the RenewalStatus field.
func (o *AccountBillingPlan) SetRenewalStatus(v string) {
	o.RenewalStatus = &v
}

// GetSeatDiscounts returns the SeatDiscounts field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetSeatDiscounts() []SeatDiscount {
	if o == nil || IsNil(o.SeatDiscounts) {
		var ret []SeatDiscount
		return ret
	}
	return o.SeatDiscounts
}

// GetSeatDiscountsOk returns a tuple with the SeatDiscounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetSeatDiscountsOk() ([]SeatDiscount, bool) {
	if o == nil || IsNil(o.SeatDiscounts) {
		return nil, false
	}
	return o.SeatDiscounts, true
}

// HasSeatDiscounts returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasSeatDiscounts() bool {
	if o != nil && !IsNil(o.SeatDiscounts) {
		return true
	}

	return false
}

// SetSeatDiscounts gets a reference to the given []SeatDiscount and assigns it to the SeatDiscounts field.
func (o *AccountBillingPlan) SetSeatDiscounts(v []SeatDiscount) {
	o.SeatDiscounts = v
}

// GetSubscriptionStartDate returns the SubscriptionStartDate field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetSubscriptionStartDate() string {
	if o == nil || IsNil(o.SubscriptionStartDate) {
		var ret string
		return ret
	}
	return *o.SubscriptionStartDate
}

// GetSubscriptionStartDateOk returns a tuple with the SubscriptionStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetSubscriptionStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionStartDate) {
		return nil, false
	}
	return o.SubscriptionStartDate, true
}

// HasSubscriptionStartDate returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasSubscriptionStartDate() bool {
	if o != nil && !IsNil(o.SubscriptionStartDate) {
		return true
	}

	return false
}

// SetSubscriptionStartDate gets a reference to the given string and assigns it to the SubscriptionStartDate field.
func (o *AccountBillingPlan) SetSubscriptionStartDate(v string) {
	o.SubscriptionStartDate = &v
}

// GetSupportIncidentFee returns the SupportIncidentFee field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetSupportIncidentFee() string {
	if o == nil || IsNil(o.SupportIncidentFee) {
		var ret string
		return ret
	}
	return *o.SupportIncidentFee
}

// GetSupportIncidentFeeOk returns a tuple with the SupportIncidentFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetSupportIncidentFeeOk() (*string, bool) {
	if o == nil || IsNil(o.SupportIncidentFee) {
		return nil, false
	}
	return o.SupportIncidentFee, true
}

// HasSupportIncidentFee returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasSupportIncidentFee() bool {
	if o != nil && !IsNil(o.SupportIncidentFee) {
		return true
	}

	return false
}

// SetSupportIncidentFee gets a reference to the given string and assigns it to the SupportIncidentFee field.
func (o *AccountBillingPlan) SetSupportIncidentFee(v string) {
	o.SupportIncidentFee = &v
}

// GetSupportPlanFee returns the SupportPlanFee field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetSupportPlanFee() string {
	if o == nil || IsNil(o.SupportPlanFee) {
		var ret string
		return ret
	}
	return *o.SupportPlanFee
}

// GetSupportPlanFeeOk returns a tuple with the SupportPlanFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetSupportPlanFeeOk() (*string, bool) {
	if o == nil || IsNil(o.SupportPlanFee) {
		return nil, false
	}
	return o.SupportPlanFee, true
}

// HasSupportPlanFee returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasSupportPlanFee() bool {
	if o != nil && !IsNil(o.SupportPlanFee) {
		return true
	}

	return false
}

// SetSupportPlanFee gets a reference to the given string and assigns it to the SupportPlanFee field.
func (o *AccountBillingPlan) SetSupportPlanFee(v string) {
	o.SupportPlanFee = &v
}

// GetTaxExemptId returns the TaxExemptId field value if set, zero value otherwise.
func (o *AccountBillingPlan) GetTaxExemptId() string {
	if o == nil || IsNil(o.TaxExemptId) {
		var ret string
		return ret
	}
	return *o.TaxExemptId
}

// GetTaxExemptIdOk returns a tuple with the TaxExemptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBillingPlan) GetTaxExemptIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxExemptId) {
		return nil, false
	}
	return o.TaxExemptId, true
}

// HasTaxExemptId returns a boolean if a field has been set.
func (o *AccountBillingPlan) HasTaxExemptId() bool {
	if o != nil && !IsNil(o.TaxExemptId) {
		return true
	}

	return false
}

// SetTaxExemptId gets a reference to the given string and assigns it to the TaxExemptId field.
func (o *AccountBillingPlan) SetTaxExemptId(v string) {
	o.TaxExemptId = &v
}

func (o AccountBillingPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountBillingPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddOns) {
		toSerialize["addOns"] = o.AddOns
	}
	if !IsNil(o.AppStoreReceiptExpirationDate) {
		toSerialize["appStoreReceiptExpirationDate"] = o.AppStoreReceiptExpirationDate
	}
	if !IsNil(o.AppStoreReceiptPurchaseDate) {
		toSerialize["appStoreReceiptPurchaseDate"] = o.AppStoreReceiptPurchaseDate
	}
	if !IsNil(o.CanCancelRenewal) {
		toSerialize["canCancelRenewal"] = o.CanCancelRenewal
	}
	if !IsNil(o.CanUpgrade) {
		toSerialize["canUpgrade"] = o.CanUpgrade
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.DowngradePlanInformation) {
		toSerialize["downgradePlanInformation"] = o.DowngradePlanInformation
	}
	if !IsNil(o.EnableSupport) {
		toSerialize["enableSupport"] = o.EnableSupport
	}
	if !IsNil(o.IncludedSeats) {
		toSerialize["includedSeats"] = o.IncludedSeats
	}
	if !IsNil(o.IncrementalSeats) {
		toSerialize["incrementalSeats"] = o.IncrementalSeats
	}
	if !IsNil(o.IsDowngrade) {
		toSerialize["isDowngrade"] = o.IsDowngrade
	}
	if !IsNil(o.NotificationType) {
		toSerialize["notificationType"] = o.NotificationType
	}
	if !IsNil(o.OtherDiscountPercent) {
		toSerialize["otherDiscountPercent"] = o.OtherDiscountPercent
	}
	if !IsNil(o.PaymentCycle) {
		toSerialize["paymentCycle"] = o.PaymentCycle
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !IsNil(o.PerSeatPrice) {
		toSerialize["perSeatPrice"] = o.PerSeatPrice
	}
	if !IsNil(o.PlanClassification) {
		toSerialize["planClassification"] = o.PlanClassification
	}
	if !IsNil(o.PlanFeatureSets) {
		toSerialize["planFeatureSets"] = o.PlanFeatureSets
	}
	if !IsNil(o.PlanId) {
		toSerialize["planId"] = o.PlanId
	}
	if !IsNil(o.PlanName) {
		toSerialize["planName"] = o.PlanName
	}
	if !IsNil(o.PlanStartDate) {
		toSerialize["planStartDate"] = o.PlanStartDate
	}
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !IsNil(o.RenewalDate) {
		toSerialize["renewalDate"] = o.RenewalDate
	}
	if !IsNil(o.RenewalStatus) {
		toSerialize["renewalStatus"] = o.RenewalStatus
	}
	if !IsNil(o.SeatDiscounts) {
		toSerialize["seatDiscounts"] = o.SeatDiscounts
	}
	if !IsNil(o.SubscriptionStartDate) {
		toSerialize["subscriptionStartDate"] = o.SubscriptionStartDate
	}
	if !IsNil(o.SupportIncidentFee) {
		toSerialize["supportIncidentFee"] = o.SupportIncidentFee
	}
	if !IsNil(o.SupportPlanFee) {
		toSerialize["supportPlanFee"] = o.SupportPlanFee
	}
	if !IsNil(o.TaxExemptId) {
		toSerialize["taxExemptId"] = o.TaxExemptId
	}
	return toSerialize, nil
}

type NullableAccountBillingPlan struct {
	value *AccountBillingPlan
	isSet bool
}

func (v NullableAccountBillingPlan) Get() *AccountBillingPlan {
	return v.value
}

func (v *NullableAccountBillingPlan) Set(val *AccountBillingPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountBillingPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountBillingPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountBillingPlan(val *AccountBillingPlan) *NullableAccountBillingPlan {
	return &NullableAccountBillingPlan{value: val, isSet: true}
}

func (v NullableAccountBillingPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountBillingPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


