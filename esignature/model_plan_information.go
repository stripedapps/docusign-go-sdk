/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlanInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanInformation{}

// PlanInformation An object used to identify the features and attributes of the account being created.
type PlanInformation struct {
	// Reserved for DocuSign.
	AddOns []AddOn `json:"addOns,omitempty"`
	// Specifies the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the account.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Reserved for DocuSign.
	FreeTrialDaysOverride *string `json:"freeTrialDaysOverride,omitempty"`
	// Reserved for DocuSign.
	PlanFeatureSets []FeatureSet `json:"planFeatureSets,omitempty"`
	// DocuSign's ID for the account plan.
	PlanId *string `json:"planId,omitempty"`
	// 
	RecipientDomains []RecipientDomain `json:"recipientDomains,omitempty"`
}

// NewPlanInformation instantiates a new PlanInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanInformation() *PlanInformation {
	this := PlanInformation{}
	return &this
}

// NewPlanInformationWithDefaults instantiates a new PlanInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanInformationWithDefaults() *PlanInformation {
	this := PlanInformation{}
	return &this
}

// GetAddOns returns the AddOns field value if set, zero value otherwise.
func (o *PlanInformation) GetAddOns() []AddOn {
	if o == nil || IsNil(o.AddOns) {
		var ret []AddOn
		return ret
	}
	return o.AddOns
}

// GetAddOnsOk returns a tuple with the AddOns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanInformation) GetAddOnsOk() ([]AddOn, bool) {
	if o == nil || IsNil(o.AddOns) {
		return nil, false
	}
	return o.AddOns, true
}

// HasAddOns returns a boolean if a field has been set.
func (o *PlanInformation) HasAddOns() bool {
	if o != nil && !IsNil(o.AddOns) {
		return true
	}

	return false
}

// SetAddOns gets a reference to the given []AddOn and assigns it to the AddOns field.
func (o *PlanInformation) SetAddOns(v []AddOn) {
	o.AddOns = v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *PlanInformation) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanInformation) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *PlanInformation) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *PlanInformation) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetFreeTrialDaysOverride returns the FreeTrialDaysOverride field value if set, zero value otherwise.
func (o *PlanInformation) GetFreeTrialDaysOverride() string {
	if o == nil || IsNil(o.FreeTrialDaysOverride) {
		var ret string
		return ret
	}
	return *o.FreeTrialDaysOverride
}

// GetFreeTrialDaysOverrideOk returns a tuple with the FreeTrialDaysOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanInformation) GetFreeTrialDaysOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.FreeTrialDaysOverride) {
		return nil, false
	}
	return o.FreeTrialDaysOverride, true
}

// HasFreeTrialDaysOverride returns a boolean if a field has been set.
func (o *PlanInformation) HasFreeTrialDaysOverride() bool {
	if o != nil && !IsNil(o.FreeTrialDaysOverride) {
		return true
	}

	return false
}

// SetFreeTrialDaysOverride gets a reference to the given string and assigns it to the FreeTrialDaysOverride field.
func (o *PlanInformation) SetFreeTrialDaysOverride(v string) {
	o.FreeTrialDaysOverride = &v
}

// GetPlanFeatureSets returns the PlanFeatureSets field value if set, zero value otherwise.
func (o *PlanInformation) GetPlanFeatureSets() []FeatureSet {
	if o == nil || IsNil(o.PlanFeatureSets) {
		var ret []FeatureSet
		return ret
	}
	return o.PlanFeatureSets
}

// GetPlanFeatureSetsOk returns a tuple with the PlanFeatureSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanInformation) GetPlanFeatureSetsOk() ([]FeatureSet, bool) {
	if o == nil || IsNil(o.PlanFeatureSets) {
		return nil, false
	}
	return o.PlanFeatureSets, true
}

// HasPlanFeatureSets returns a boolean if a field has been set.
func (o *PlanInformation) HasPlanFeatureSets() bool {
	if o != nil && !IsNil(o.PlanFeatureSets) {
		return true
	}

	return false
}

// SetPlanFeatureSets gets a reference to the given []FeatureSet and assigns it to the PlanFeatureSets field.
func (o *PlanInformation) SetPlanFeatureSets(v []FeatureSet) {
	o.PlanFeatureSets = v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *PlanInformation) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanInformation) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *PlanInformation) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *PlanInformation) SetPlanId(v string) {
	o.PlanId = &v
}

// GetRecipientDomains returns the RecipientDomains field value if set, zero value otherwise.
func (o *PlanInformation) GetRecipientDomains() []RecipientDomain {
	if o == nil || IsNil(o.RecipientDomains) {
		var ret []RecipientDomain
		return ret
	}
	return o.RecipientDomains
}

// GetRecipientDomainsOk returns a tuple with the RecipientDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanInformation) GetRecipientDomainsOk() ([]RecipientDomain, bool) {
	if o == nil || IsNil(o.RecipientDomains) {
		return nil, false
	}
	return o.RecipientDomains, true
}

// HasRecipientDomains returns a boolean if a field has been set.
func (o *PlanInformation) HasRecipientDomains() bool {
	if o != nil && !IsNil(o.RecipientDomains) {
		return true
	}

	return false
}

// SetRecipientDomains gets a reference to the given []RecipientDomain and assigns it to the RecipientDomains field.
func (o *PlanInformation) SetRecipientDomains(v []RecipientDomain) {
	o.RecipientDomains = v
}

func (o PlanInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddOns) {
		toSerialize["addOns"] = o.AddOns
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.FreeTrialDaysOverride) {
		toSerialize["freeTrialDaysOverride"] = o.FreeTrialDaysOverride
	}
	if !IsNil(o.PlanFeatureSets) {
		toSerialize["planFeatureSets"] = o.PlanFeatureSets
	}
	if !IsNil(o.PlanId) {
		toSerialize["planId"] = o.PlanId
	}
	if !IsNil(o.RecipientDomains) {
		toSerialize["recipientDomains"] = o.RecipientDomains
	}
	return toSerialize, nil
}

type NullablePlanInformation struct {
	value *PlanInformation
	isSet bool
}

func (v NullablePlanInformation) Get() *PlanInformation {
	return v.value
}

func (v *NullablePlanInformation) Set(val *PlanInformation) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanInformation) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanInformation(val *PlanInformation) *NullablePlanInformation {
	return &NullablePlanInformation{value: val, isSet: true}
}

func (v NullablePlanInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


