/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountSeals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSeals{}

// AccountSeals 
type AccountSeals struct {
	// A list of electronic seals to apply to documents.
	Seals []SealIdentifier `json:"seals,omitempty"`
}

// NewAccountSeals instantiates a new AccountSeals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSeals() *AccountSeals {
	this := AccountSeals{}
	return &this
}

// NewAccountSealsWithDefaults instantiates a new AccountSeals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSealsWithDefaults() *AccountSeals {
	this := AccountSeals{}
	return &this
}

// GetSeals returns the Seals field value if set, zero value otherwise.
func (o *AccountSeals) GetSeals() []SealIdentifier {
	if o == nil || IsNil(o.Seals) {
		var ret []SealIdentifier
		return ret
	}
	return o.Seals
}

// GetSealsOk returns a tuple with the Seals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSeals) GetSealsOk() ([]SealIdentifier, bool) {
	if o == nil || IsNil(o.Seals) {
		return nil, false
	}
	return o.Seals, true
}

// HasSeals returns a boolean if a field has been set.
func (o *AccountSeals) HasSeals() bool {
	if o != nil && !IsNil(o.Seals) {
		return true
	}

	return false
}

// SetSeals gets a reference to the given []SealIdentifier and assigns it to the Seals field.
func (o *AccountSeals) SetSeals(v []SealIdentifier) {
	o.Seals = v
}

func (o AccountSeals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSeals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Seals) {
		toSerialize["seals"] = o.Seals
	}
	return toSerialize, nil
}

type NullableAccountSeals struct {
	value *AccountSeals
	isSet bool
}

func (v NullableAccountSeals) Get() *AccountSeals {
	return v.value
}

func (v *NullableAccountSeals) Set(val *AccountSeals) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSeals) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSeals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSeals(val *AccountSeals) *NullableAccountSeals {
	return &NullableAccountSeals{value: val, isSet: true}
}

func (v NullableAccountSeals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSeals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


