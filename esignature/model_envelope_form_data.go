/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeFormData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeFormData{}

// EnvelopeFormData This object contains the data that recipients have entered into the form fields associated with an envelope.
type EnvelopeFormData struct {
	// The subject line of the email message that is sent to all recipients.  For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](/docs/esign-rest-api/reference/templates/templates/create/#template-email-subject-merge-fields).  **Note:** The subject line is limited to 100 characters, including any merged fields.It is not truncated. It is an error if the text is longer than 100 characters. 
	EmailSubject *string `json:"emailSubject,omitempty"`
	// The ID of the envelope.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// An array of form data objects.
	FormData []FormDataItem `json:"formData,omitempty"`
	PrefillFormData *PrefillFormData `json:"prefillFormData,omitempty"`
	// An array of form data objects that are associated with specific recipients.
	RecipientFormData []RecipientFormData `json:"recipientFormData,omitempty"`
	// The UTC DateTime when the envelope was sent. This property is read-only.
	SentDateTime *string `json:"sentDateTime,omitempty"`
	// Indicates the envelope status. Valid values are:  * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in. * `created`: The envelope is created as a draft. It can be modified and sent later. * `declined`: The envelope has been declined by the recipients. * `delivered`: The envelope has been delivered to the recipients. * `sent`: The envelope will be sent to the recipients after the envelope is created. * `signed`: The envelope has been signed by the recipients. * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope. 
	Status *string `json:"status,omitempty"`
}

// NewEnvelopeFormData instantiates a new EnvelopeFormData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeFormData() *EnvelopeFormData {
	this := EnvelopeFormData{}
	return &this
}

// NewEnvelopeFormDataWithDefaults instantiates a new EnvelopeFormData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeFormDataWithDefaults() *EnvelopeFormData {
	this := EnvelopeFormData{}
	return &this
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetEmailSubject() string {
	if o == nil || IsNil(o.EmailSubject) {
		var ret string
		return ret
	}
	return *o.EmailSubject
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetEmailSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.EmailSubject) {
		return nil, false
	}
	return o.EmailSubject, true
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasEmailSubject() bool {
	if o != nil && !IsNil(o.EmailSubject) {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given string and assigns it to the EmailSubject field.
func (o *EnvelopeFormData) SetEmailSubject(v string) {
	o.EmailSubject = &v
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *EnvelopeFormData) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetFormData returns the FormData field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetFormData() []FormDataItem {
	if o == nil || IsNil(o.FormData) {
		var ret []FormDataItem
		return ret
	}
	return o.FormData
}

// GetFormDataOk returns a tuple with the FormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetFormDataOk() ([]FormDataItem, bool) {
	if o == nil || IsNil(o.FormData) {
		return nil, false
	}
	return o.FormData, true
}

// HasFormData returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasFormData() bool {
	if o != nil && !IsNil(o.FormData) {
		return true
	}

	return false
}

// SetFormData gets a reference to the given []FormDataItem and assigns it to the FormData field.
func (o *EnvelopeFormData) SetFormData(v []FormDataItem) {
	o.FormData = v
}

// GetPrefillFormData returns the PrefillFormData field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetPrefillFormData() PrefillFormData {
	if o == nil || IsNil(o.PrefillFormData) {
		var ret PrefillFormData
		return ret
	}
	return *o.PrefillFormData
}

// GetPrefillFormDataOk returns a tuple with the PrefillFormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetPrefillFormDataOk() (*PrefillFormData, bool) {
	if o == nil || IsNil(o.PrefillFormData) {
		return nil, false
	}
	return o.PrefillFormData, true
}

// HasPrefillFormData returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasPrefillFormData() bool {
	if o != nil && !IsNil(o.PrefillFormData) {
		return true
	}

	return false
}

// SetPrefillFormData gets a reference to the given PrefillFormData and assigns it to the PrefillFormData field.
func (o *EnvelopeFormData) SetPrefillFormData(v PrefillFormData) {
	o.PrefillFormData = &v
}

// GetRecipientFormData returns the RecipientFormData field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetRecipientFormData() []RecipientFormData {
	if o == nil || IsNil(o.RecipientFormData) {
		var ret []RecipientFormData
		return ret
	}
	return o.RecipientFormData
}

// GetRecipientFormDataOk returns a tuple with the RecipientFormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetRecipientFormDataOk() ([]RecipientFormData, bool) {
	if o == nil || IsNil(o.RecipientFormData) {
		return nil, false
	}
	return o.RecipientFormData, true
}

// HasRecipientFormData returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasRecipientFormData() bool {
	if o != nil && !IsNil(o.RecipientFormData) {
		return true
	}

	return false
}

// SetRecipientFormData gets a reference to the given []RecipientFormData and assigns it to the RecipientFormData field.
func (o *EnvelopeFormData) SetRecipientFormData(v []RecipientFormData) {
	o.RecipientFormData = v
}

// GetSentDateTime returns the SentDateTime field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetSentDateTime() string {
	if o == nil || IsNil(o.SentDateTime) {
		var ret string
		return ret
	}
	return *o.SentDateTime
}

// GetSentDateTimeOk returns a tuple with the SentDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetSentDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SentDateTime) {
		return nil, false
	}
	return o.SentDateTime, true
}

// HasSentDateTime returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasSentDateTime() bool {
	if o != nil && !IsNil(o.SentDateTime) {
		return true
	}

	return false
}

// SetSentDateTime gets a reference to the given string and assigns it to the SentDateTime field.
func (o *EnvelopeFormData) SetSentDateTime(v string) {
	o.SentDateTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EnvelopeFormData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeFormData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EnvelopeFormData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EnvelopeFormData) SetStatus(v string) {
	o.Status = &v
}

func (o EnvelopeFormData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeFormData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailSubject) {
		toSerialize["emailSubject"] = o.EmailSubject
	}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.FormData) {
		toSerialize["formData"] = o.FormData
	}
	if !IsNil(o.PrefillFormData) {
		toSerialize["prefillFormData"] = o.PrefillFormData
	}
	if !IsNil(o.RecipientFormData) {
		toSerialize["recipientFormData"] = o.RecipientFormData
	}
	if !IsNil(o.SentDateTime) {
		toSerialize["sentDateTime"] = o.SentDateTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableEnvelopeFormData struct {
	value *EnvelopeFormData
	isSet bool
}

func (v NullableEnvelopeFormData) Get() *EnvelopeFormData {
	return v.value
}

func (v *NullableEnvelopeFormData) Set(val *EnvelopeFormData) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeFormData) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeFormData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeFormData(val *EnvelopeFormData) *NullableEnvelopeFormData {
	return &NullableEnvelopeFormData{value: val, isSet: true}
}

func (v NullableEnvelopeFormData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeFormData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


