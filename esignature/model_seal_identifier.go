/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SealIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SealIdentifier{}

// SealIdentifier 
type SealIdentifier struct {
	// The user-friendly display name for a seal.
	SealDisplayName *string `json:"sealDisplayName,omitempty"`
	// The name of a seal.
	SealName *string `json:"sealName,omitempty"`
}

// NewSealIdentifier instantiates a new SealIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSealIdentifier() *SealIdentifier {
	this := SealIdentifier{}
	return &this
}

// NewSealIdentifierWithDefaults instantiates a new SealIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSealIdentifierWithDefaults() *SealIdentifier {
	this := SealIdentifier{}
	return &this
}

// GetSealDisplayName returns the SealDisplayName field value if set, zero value otherwise.
func (o *SealIdentifier) GetSealDisplayName() string {
	if o == nil || IsNil(o.SealDisplayName) {
		var ret string
		return ret
	}
	return *o.SealDisplayName
}

// GetSealDisplayNameOk returns a tuple with the SealDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SealIdentifier) GetSealDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.SealDisplayName) {
		return nil, false
	}
	return o.SealDisplayName, true
}

// HasSealDisplayName returns a boolean if a field has been set.
func (o *SealIdentifier) HasSealDisplayName() bool {
	if o != nil && !IsNil(o.SealDisplayName) {
		return true
	}

	return false
}

// SetSealDisplayName gets a reference to the given string and assigns it to the SealDisplayName field.
func (o *SealIdentifier) SetSealDisplayName(v string) {
	o.SealDisplayName = &v
}

// GetSealName returns the SealName field value if set, zero value otherwise.
func (o *SealIdentifier) GetSealName() string {
	if o == nil || IsNil(o.SealName) {
		var ret string
		return ret
	}
	return *o.SealName
}

// GetSealNameOk returns a tuple with the SealName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SealIdentifier) GetSealNameOk() (*string, bool) {
	if o == nil || IsNil(o.SealName) {
		return nil, false
	}
	return o.SealName, true
}

// HasSealName returns a boolean if a field has been set.
func (o *SealIdentifier) HasSealName() bool {
	if o != nil && !IsNil(o.SealName) {
		return true
	}

	return false
}

// SetSealName gets a reference to the given string and assigns it to the SealName field.
func (o *SealIdentifier) SetSealName(v string) {
	o.SealName = &v
}

func (o SealIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SealIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SealDisplayName) {
		toSerialize["sealDisplayName"] = o.SealDisplayName
	}
	if !IsNil(o.SealName) {
		toSerialize["sealName"] = o.SealName
	}
	return toSerialize, nil
}

type NullableSealIdentifier struct {
	value *SealIdentifier
	isSet bool
}

func (v NullableSealIdentifier) Get() *SealIdentifier {
	return v.value
}

func (v *NullableSealIdentifier) Set(val *SealIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableSealIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableSealIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSealIdentifier(val *SealIdentifier) *NullableSealIdentifier {
	return &NullableSealIdentifier{value: val, isSet: true}
}

func (v NullableSealIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSealIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


