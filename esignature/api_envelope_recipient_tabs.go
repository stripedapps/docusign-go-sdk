/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EnvelopeRecipientTabsAPIService EnvelopeRecipientTabsAPI service
type EnvelopeRecipientTabsAPIService service

type ApiRecipientsDeleteRecipientTabsRequest struct {
	ctx context.Context
	ApiService *EnvelopeRecipientTabsAPIService
	accountId string
	envelopeId string
	recipientId string
	envelopeRecipientTabs *EnvelopeRecipientTabs
}

func (r ApiRecipientsDeleteRecipientTabsRequest) EnvelopeRecipientTabs(envelopeRecipientTabs EnvelopeRecipientTabs) ApiRecipientsDeleteRecipientTabsRequest {
	r.envelopeRecipientTabs = &envelopeRecipientTabs
	return r
}

func (r ApiRecipientsDeleteRecipientTabsRequest) Execute() (*EnvelopeRecipientTabs, *http.Response, error) {
	return r.ApiService.RecipientsDeleteRecipientTabsExecute(r)
}

/*
RecipientsDeleteRecipientTabs Deletes the tabs associated with a recipient.  **Note:** It is an error to delete a tab that has the `templateLocked` property set to true. This property corresponds to the **Restrict changes** option in the web app.  

Deletes one or more tabs associated with a recipient in a draft envelope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @return ApiRecipientsDeleteRecipientTabsRequest
*/
func (a *EnvelopeRecipientTabsAPIService) RecipientsDeleteRecipientTabs(ctx context.Context, accountId string, envelopeId string, recipientId string) ApiRecipientsDeleteRecipientTabsRequest {
	return ApiRecipientsDeleteRecipientTabsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
		recipientId: recipientId,
	}
}

// Execute executes the request
//  @return EnvelopeRecipientTabs
func (a *EnvelopeRecipientTabsAPIService) RecipientsDeleteRecipientTabsExecute(r ApiRecipientsDeleteRecipientTabsRequest) (*EnvelopeRecipientTabs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeRecipientTabs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeRecipientTabsAPIService.RecipientsDeleteRecipientTabs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.envelopeRecipientTabs
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsGetRecipientTabsRequest struct {
	ctx context.Context
	ApiService *EnvelopeRecipientTabsAPIService
	accountId string
	envelopeId string
	recipientId string
	includeAnchorTabLocations *string
	includeMetadata *string
}

// When **true,** all tabs with anchor tab properties are included in the response. The default value is **false.**
func (r ApiRecipientsGetRecipientTabsRequest) IncludeAnchorTabLocations(includeAnchorTabLocations string) ApiRecipientsGetRecipientTabsRequest {
	r.includeAnchorTabLocations = &includeAnchorTabLocations
	return r
}

// When **true,** the response includes metadata indicating which properties are editable.
func (r ApiRecipientsGetRecipientTabsRequest) IncludeMetadata(includeMetadata string) ApiRecipientsGetRecipientTabsRequest {
	r.includeMetadata = &includeMetadata
	return r
}

func (r ApiRecipientsGetRecipientTabsRequest) Execute() (*EnvelopeRecipientTabs, *http.Response, error) {
	return r.ApiService.RecipientsGetRecipientTabsExecute(r)
}

/*
RecipientsGetRecipientTabs Gets the tabs information for a signer or sign-in-person recipient in an envelope.

Retrieves information about the tabs associated
with a recipient. You can make a single API call
to get all the tab values and information from a
given, completed envelope in addition to draft
ones.  Tab values can be retrieved by using the
[EnvelopeRecipients:list method](/docs/esign-rest-api/reference/envelopes/enveloperecipients/list/)
with query parameter `include_tabs` set to **true.**

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @return ApiRecipientsGetRecipientTabsRequest
*/
func (a *EnvelopeRecipientTabsAPIService) RecipientsGetRecipientTabs(ctx context.Context, accountId string, envelopeId string, recipientId string) ApiRecipientsGetRecipientTabsRequest {
	return ApiRecipientsGetRecipientTabsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
		recipientId: recipientId,
	}
}

// Execute executes the request
//  @return EnvelopeRecipientTabs
func (a *EnvelopeRecipientTabsAPIService) RecipientsGetRecipientTabsExecute(r ApiRecipientsGetRecipientTabsRequest) (*EnvelopeRecipientTabs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeRecipientTabs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeRecipientTabsAPIService.RecipientsGetRecipientTabs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeAnchorTabLocations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_anchor_tab_locations", r.includeAnchorTabLocations, "")
	}
	if r.includeMetadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_metadata", r.includeMetadata, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsPostRecipientTabsRequest struct {
	ctx context.Context
	ApiService *EnvelopeRecipientTabsAPIService
	accountId string
	envelopeId string
	recipientId string
	envelopeRecipientTabs *EnvelopeRecipientTabs
}

func (r ApiRecipientsPostRecipientTabsRequest) EnvelopeRecipientTabs(envelopeRecipientTabs EnvelopeRecipientTabs) ApiRecipientsPostRecipientTabsRequest {
	r.envelopeRecipientTabs = &envelopeRecipientTabs
	return r
}

func (r ApiRecipientsPostRecipientTabsRequest) Execute() (*EnvelopeRecipientTabs, *http.Response, error) {
	return r.ApiService.RecipientsPostRecipientTabsExecute(r)
}

/*
RecipientsPostRecipientTabs Adds tabs for a recipient.

Adds one or more tabs for a recipient.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @return ApiRecipientsPostRecipientTabsRequest
*/
func (a *EnvelopeRecipientTabsAPIService) RecipientsPostRecipientTabs(ctx context.Context, accountId string, envelopeId string, recipientId string) ApiRecipientsPostRecipientTabsRequest {
	return ApiRecipientsPostRecipientTabsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
		recipientId: recipientId,
	}
}

// Execute executes the request
//  @return EnvelopeRecipientTabs
func (a *EnvelopeRecipientTabsAPIService) RecipientsPostRecipientTabsExecute(r ApiRecipientsPostRecipientTabsRequest) (*EnvelopeRecipientTabs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeRecipientTabs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeRecipientTabsAPIService.RecipientsPostRecipientTabs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.envelopeRecipientTabs
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipientsPutRecipientTabsRequest struct {
	ctx context.Context
	ApiService *EnvelopeRecipientTabsAPIService
	accountId string
	envelopeId string
	recipientId string
	envelopeRecipientTabs *EnvelopeRecipientTabs
}

func (r ApiRecipientsPutRecipientTabsRequest) EnvelopeRecipientTabs(envelopeRecipientTabs EnvelopeRecipientTabs) ApiRecipientsPutRecipientTabsRequest {
	r.envelopeRecipientTabs = &envelopeRecipientTabs
	return r
}

func (r ApiRecipientsPutRecipientTabsRequest) Execute() (*EnvelopeRecipientTabs, *http.Response, error) {
	return r.ApiService.RecipientsPutRecipientTabsExecute(r)
}

/*
RecipientsPutRecipientTabs Updates the tabs for a recipient.  

Updates one or more tabs for a recipient in a draft envelope.
A draft envelope is one that is not yet complete.

**Note:** It is an error to update a tab that has the
`templateLocked` property set to true.
This property corresponds to the **Restrict changes** option in the web app.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @param recipientId A local reference used to map recipients to other objects, such as specific document tabs.  A `recipientId` must be either an integer or a GUID, and the `recipientId` must be unique within an envelope.  For example, many envelopes assign the first recipient a `recipientId` of `1`. 
 @return ApiRecipientsPutRecipientTabsRequest
*/
func (a *EnvelopeRecipientTabsAPIService) RecipientsPutRecipientTabs(ctx context.Context, accountId string, envelopeId string, recipientId string) ApiRecipientsPutRecipientTabsRequest {
	return ApiRecipientsPutRecipientTabsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		envelopeId: envelopeId,
		recipientId: recipientId,
	}
}

// Execute executes the request
//  @return EnvelopeRecipientTabs
func (a *EnvelopeRecipientTabsAPIService) RecipientsPutRecipientTabsExecute(r ApiRecipientsPutRecipientTabsRequest) (*EnvelopeRecipientTabs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnvelopeRecipientTabs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeRecipientTabsAPIService.RecipientsPutRecipientTabs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipientId"+"}", url.PathEscape(parameterValueToString(r.recipientId, "recipientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.envelopeRecipientTabs
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
