/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group This object contains information about a group.
type Group struct {
	// Reserved for DocuSign.
	DsGroupId *string `json:"dsGroupId,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The DocuSign group ID for the group. This is a read-only property.
	GroupId *string `json:"groupId,omitempty"`
	// The name of the group.
	GroupName *string `json:"groupName,omitempty"`
	// The group type.
	GroupType *string `json:"groupType,omitempty"`
	// The ID of the permission profile associated with the group.  Use [AccountPermissionProfiles: list](/docs/esign-rest-api/reference/accounts/accountpermissionprofiles/list/) to get a list of permission profiles and their IDs.
	PermissionProfileId *string `json:"permissionProfileId,omitempty"`
	// A list of the users in the group. This property is not used by [Groups: list](/docs/esign-rest-api/reference/usergroups/groups/list/). To get a list of users see [GroupUsers: list](/docs/esign-rest-api/reference/usergroups/groupusers/list/) 
	Users []UserInfo `json:"users,omitempty"`
	// The total number of users in the group.
	UsersCount *string `json:"usersCount,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetDsGroupId returns the DsGroupId field value if set, zero value otherwise.
func (o *Group) GetDsGroupId() string {
	if o == nil || IsNil(o.DsGroupId) {
		var ret string
		return ret
	}
	return *o.DsGroupId
}

// GetDsGroupIdOk returns a tuple with the DsGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDsGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.DsGroupId) {
		return nil, false
	}
	return o.DsGroupId, true
}

// HasDsGroupId returns a boolean if a field has been set.
func (o *Group) HasDsGroupId() bool {
	if o != nil && !IsNil(o.DsGroupId) {
		return true
	}

	return false
}

// SetDsGroupId gets a reference to the given string and assigns it to the DsGroupId field.
func (o *Group) SetDsGroupId(v string) {
	o.DsGroupId = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *Group) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *Group) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *Group) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Group) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Group) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Group) SetGroupId(v string) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *Group) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *Group) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *Group) SetGroupName(v string) {
	o.GroupName = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *Group) GetGroupType() string {
	if o == nil || IsNil(o.GroupType) {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *Group) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *Group) SetGroupType(v string) {
	o.GroupType = &v
}

// GetPermissionProfileId returns the PermissionProfileId field value if set, zero value otherwise.
func (o *Group) GetPermissionProfileId() string {
	if o == nil || IsNil(o.PermissionProfileId) {
		var ret string
		return ret
	}
	return *o.PermissionProfileId
}

// GetPermissionProfileIdOk returns a tuple with the PermissionProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetPermissionProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.PermissionProfileId) {
		return nil, false
	}
	return o.PermissionProfileId, true
}

// HasPermissionProfileId returns a boolean if a field has been set.
func (o *Group) HasPermissionProfileId() bool {
	if o != nil && !IsNil(o.PermissionProfileId) {
		return true
	}

	return false
}

// SetPermissionProfileId gets a reference to the given string and assigns it to the PermissionProfileId field.
func (o *Group) SetPermissionProfileId(v string) {
	o.PermissionProfileId = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Group) GetUsers() []UserInfo {
	if o == nil || IsNil(o.Users) {
		var ret []UserInfo
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetUsersOk() ([]UserInfo, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Group) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserInfo and assigns it to the Users field.
func (o *Group) SetUsers(v []UserInfo) {
	o.Users = v
}

// GetUsersCount returns the UsersCount field value if set, zero value otherwise.
func (o *Group) GetUsersCount() string {
	if o == nil || IsNil(o.UsersCount) {
		var ret string
		return ret
	}
	return *o.UsersCount
}

// GetUsersCountOk returns a tuple with the UsersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetUsersCountOk() (*string, bool) {
	if o == nil || IsNil(o.UsersCount) {
		return nil, false
	}
	return o.UsersCount, true
}

// HasUsersCount returns a boolean if a field has been set.
func (o *Group) HasUsersCount() bool {
	if o != nil && !IsNil(o.UsersCount) {
		return true
	}

	return false
}

// SetUsersCount gets a reference to the given string and assigns it to the UsersCount field.
func (o *Group) SetUsersCount(v string) {
	o.UsersCount = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DsGroupId) {
		toSerialize["dsGroupId"] = o.DsGroupId
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.PermissionProfileId) {
		toSerialize["permissionProfileId"] = o.PermissionProfileId
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.UsersCount) {
		toSerialize["usersCount"] = o.UsersCount
	}
	return toSerialize, nil
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


