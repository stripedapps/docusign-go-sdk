/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EnvelopeDocumentHtmlDefinitionsAPIService EnvelopeDocumentHtmlDefinitionsAPI service
type EnvelopeDocumentHtmlDefinitionsAPIService service

type ApiResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsRequest struct {
	ctx context.Context
	ApiService *EnvelopeDocumentHtmlDefinitionsAPIService
	accountId string
	documentId string
	envelopeId string
}

func (r ApiResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsRequest) Execute() (*DocumentHtmlDefinitionOriginals, *http.Response, error) {
	return r.ApiService.ResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsExecute(r)
}

/*
ResponsiveHtmlGetEnvelopeDocumentHtmlDefinitions Retrieves the HTML definition used to generate a dynamically sized responsive document.

Retrieves the HTML definition used to generate a dynamically sized responsive document.

If the document was not created as a signable HTML document, this endpoint will return a 200-OK response and an empty JSON body. 

**Note:** The `documentId` query parameter is a GUID value, not an integer document ID. If an invalid document ID is provided, this endpoint will return a 200-OK response and an empty JSON body.

### Related topics

- [Responsive signing](/docs/esign-rest-api/esign101/concepts/responsive/)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The external account number (int) or account ID GUID.
 @param documentId The GUID of the document.  Example: c671747c-xxxx-xxxx-xxxx-4a4a48e23744
 @param envelopeId The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec` 
 @return ApiResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsRequest
*/
func (a *EnvelopeDocumentHtmlDefinitionsAPIService) ResponsiveHtmlGetEnvelopeDocumentHtmlDefinitions(ctx context.Context, accountId string, documentId string, envelopeId string) ApiResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsRequest {
	return ApiResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		documentId: documentId,
		envelopeId: envelopeId,
	}
}

// Execute executes the request
//  @return DocumentHtmlDefinitionOriginals
func (a *EnvelopeDocumentHtmlDefinitionsAPIService) ResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsExecute(r ApiResponsiveHtmlGetEnvelopeDocumentHtmlDefinitionsRequest) (*DocumentHtmlDefinitionOriginals, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentHtmlDefinitionOriginals
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvelopeDocumentHtmlDefinitionsAPIService.ResponsiveHtmlGetEnvelopeDocumentHtmlDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/html_definitions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"documentId"+"}", url.PathEscape(parameterValueToString(r.documentId, "documentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envelopeId"+"}", url.PathEscape(parameterValueToString(r.envelopeId, "envelopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
