/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectDebugLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectDebugLog{}

// ConnectDebugLog 
type ConnectDebugLog struct {
	// The name of the Connect configuration.
	ConnectConfig *string `json:"connectConfig,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The UTC date and time of the event.
	EventDateTime *string `json:"eventDateTime,omitempty"`
	// A description of the event.
	EventDescription *string `json:"eventDescription,omitempty"`
	// Log output.
	Payload *string `json:"payload,omitempty"`
}

// NewConnectDebugLog instantiates a new ConnectDebugLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectDebugLog() *ConnectDebugLog {
	this := ConnectDebugLog{}
	return &this
}

// NewConnectDebugLogWithDefaults instantiates a new ConnectDebugLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectDebugLogWithDefaults() *ConnectDebugLog {
	this := ConnectDebugLog{}
	return &this
}

// GetConnectConfig returns the ConnectConfig field value if set, zero value otherwise.
func (o *ConnectDebugLog) GetConnectConfig() string {
	if o == nil || IsNil(o.ConnectConfig) {
		var ret string
		return ret
	}
	return *o.ConnectConfig
}

// GetConnectConfigOk returns a tuple with the ConnectConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectDebugLog) GetConnectConfigOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectConfig) {
		return nil, false
	}
	return o.ConnectConfig, true
}

// HasConnectConfig returns a boolean if a field has been set.
func (o *ConnectDebugLog) HasConnectConfig() bool {
	if o != nil && !IsNil(o.ConnectConfig) {
		return true
	}

	return false
}

// SetConnectConfig gets a reference to the given string and assigns it to the ConnectConfig field.
func (o *ConnectDebugLog) SetConnectConfig(v string) {
	o.ConnectConfig = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *ConnectDebugLog) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectDebugLog) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *ConnectDebugLog) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *ConnectDebugLog) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetEventDateTime returns the EventDateTime field value if set, zero value otherwise.
func (o *ConnectDebugLog) GetEventDateTime() string {
	if o == nil || IsNil(o.EventDateTime) {
		var ret string
		return ret
	}
	return *o.EventDateTime
}

// GetEventDateTimeOk returns a tuple with the EventDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectDebugLog) GetEventDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EventDateTime) {
		return nil, false
	}
	return o.EventDateTime, true
}

// HasEventDateTime returns a boolean if a field has been set.
func (o *ConnectDebugLog) HasEventDateTime() bool {
	if o != nil && !IsNil(o.EventDateTime) {
		return true
	}

	return false
}

// SetEventDateTime gets a reference to the given string and assigns it to the EventDateTime field.
func (o *ConnectDebugLog) SetEventDateTime(v string) {
	o.EventDateTime = &v
}

// GetEventDescription returns the EventDescription field value if set, zero value otherwise.
func (o *ConnectDebugLog) GetEventDescription() string {
	if o == nil || IsNil(o.EventDescription) {
		var ret string
		return ret
	}
	return *o.EventDescription
}

// GetEventDescriptionOk returns a tuple with the EventDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectDebugLog) GetEventDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.EventDescription) {
		return nil, false
	}
	return o.EventDescription, true
}

// HasEventDescription returns a boolean if a field has been set.
func (o *ConnectDebugLog) HasEventDescription() bool {
	if o != nil && !IsNil(o.EventDescription) {
		return true
	}

	return false
}

// SetEventDescription gets a reference to the given string and assigns it to the EventDescription field.
func (o *ConnectDebugLog) SetEventDescription(v string) {
	o.EventDescription = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ConnectDebugLog) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectDebugLog) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ConnectDebugLog) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *ConnectDebugLog) SetPayload(v string) {
	o.Payload = &v
}

func (o ConnectDebugLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectDebugLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectConfig) {
		toSerialize["connectConfig"] = o.ConnectConfig
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.EventDateTime) {
		toSerialize["eventDateTime"] = o.EventDateTime
	}
	if !IsNil(o.EventDescription) {
		toSerialize["eventDescription"] = o.EventDescription
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableConnectDebugLog struct {
	value *ConnectDebugLog
	isSet bool
}

func (v NullableConnectDebugLog) Get() *ConnectDebugLog {
	return v.value
}

func (v *NullableConnectDebugLog) Set(val *ConnectDebugLog) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectDebugLog) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectDebugLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectDebugLog(val *ConnectDebugLog) *NullableConnectDebugLog {
	return &NullableConnectDebugLog{value: val, isSet: true}
}

func (v NullableConnectDebugLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectDebugLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


