/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BccEmailArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BccEmailArchive{}

// BccEmailArchive This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
type BccEmailArchive struct {
	// The ID of the account that owns the BCC email archive configuration.
	AccountId *string `json:"accountId,omitempty"`
	// The ID of the BCC email archive configuration.
	BccEmailArchiveId *string `json:"bccEmailArchiveId,omitempty"`
	// The UTC DateTime when the BCC email archive configuration was created.
	Created *string `json:"created,omitempty"`
	CreatedBy *UserInfo `json:"createdBy,omitempty"`
	// The BCC email address to use for archiving DocuSign messages.  Example: customer_bcc@example.com
	Email *string `json:"email,omitempty"`
	// The GUID of the activation email message sent to the BCC email address.
	EmailNotificationId *string `json:"emailNotificationId,omitempty"`
	// The UTC DateTime when the BCC email archive configuration was last modified.
	Modified *string `json:"modified,omitempty"`
	ModifiedBy *UserInfo `json:"modifiedBy,omitempty"`
	// The status of the BCC email address. Possible values are:  - `activation_sent`: An activation link has been sent to the BCC email address. - `active`: The BCC email address is actively used for archiving. - `closed`: The BCC email address is no longer used for archiving.
	Status *string `json:"status,omitempty"`
	// The helper URI for retrieving the BCC email archive.
	Uri *string `json:"uri,omitempty"`
}

// NewBccEmailArchive instantiates a new BccEmailArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBccEmailArchive() *BccEmailArchive {
	this := BccEmailArchive{}
	return &this
}

// NewBccEmailArchiveWithDefaults instantiates a new BccEmailArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBccEmailArchiveWithDefaults() *BccEmailArchive {
	this := BccEmailArchive{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *BccEmailArchive) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *BccEmailArchive) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *BccEmailArchive) SetAccountId(v string) {
	o.AccountId = &v
}

// GetBccEmailArchiveId returns the BccEmailArchiveId field value if set, zero value otherwise.
func (o *BccEmailArchive) GetBccEmailArchiveId() string {
	if o == nil || IsNil(o.BccEmailArchiveId) {
		var ret string
		return ret
	}
	return *o.BccEmailArchiveId
}

// GetBccEmailArchiveIdOk returns a tuple with the BccEmailArchiveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetBccEmailArchiveIdOk() (*string, bool) {
	if o == nil || IsNil(o.BccEmailArchiveId) {
		return nil, false
	}
	return o.BccEmailArchiveId, true
}

// HasBccEmailArchiveId returns a boolean if a field has been set.
func (o *BccEmailArchive) HasBccEmailArchiveId() bool {
	if o != nil && !IsNil(o.BccEmailArchiveId) {
		return true
	}

	return false
}

// SetBccEmailArchiveId gets a reference to the given string and assigns it to the BccEmailArchiveId field.
func (o *BccEmailArchive) SetBccEmailArchiveId(v string) {
	o.BccEmailArchiveId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *BccEmailArchive) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *BccEmailArchive) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *BccEmailArchive) SetCreated(v string) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *BccEmailArchive) GetCreatedBy() UserInfo {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *BccEmailArchive) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserInfo and assigns it to the CreatedBy field.
func (o *BccEmailArchive) SetCreatedBy(v UserInfo) {
	o.CreatedBy = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *BccEmailArchive) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *BccEmailArchive) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *BccEmailArchive) SetEmail(v string) {
	o.Email = &v
}

// GetEmailNotificationId returns the EmailNotificationId field value if set, zero value otherwise.
func (o *BccEmailArchive) GetEmailNotificationId() string {
	if o == nil || IsNil(o.EmailNotificationId) {
		var ret string
		return ret
	}
	return *o.EmailNotificationId
}

// GetEmailNotificationIdOk returns a tuple with the EmailNotificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetEmailNotificationIdOk() (*string, bool) {
	if o == nil || IsNil(o.EmailNotificationId) {
		return nil, false
	}
	return o.EmailNotificationId, true
}

// HasEmailNotificationId returns a boolean if a field has been set.
func (o *BccEmailArchive) HasEmailNotificationId() bool {
	if o != nil && !IsNil(o.EmailNotificationId) {
		return true
	}

	return false
}

// SetEmailNotificationId gets a reference to the given string and assigns it to the EmailNotificationId field.
func (o *BccEmailArchive) SetEmailNotificationId(v string) {
	o.EmailNotificationId = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *BccEmailArchive) GetModified() string {
	if o == nil || IsNil(o.Modified) {
		var ret string
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *BccEmailArchive) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given string and assigns it to the Modified field.
func (o *BccEmailArchive) SetModified(v string) {
	o.Modified = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *BccEmailArchive) GetModifiedBy() UserInfo {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret UserInfo
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetModifiedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *BccEmailArchive) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given UserInfo and assigns it to the ModifiedBy field.
func (o *BccEmailArchive) SetModifiedBy(v UserInfo) {
	o.ModifiedBy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BccEmailArchive) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BccEmailArchive) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BccEmailArchive) SetStatus(v string) {
	o.Status = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *BccEmailArchive) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BccEmailArchive) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *BccEmailArchive) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *BccEmailArchive) SetUri(v string) {
	o.Uri = &v
}

func (o BccEmailArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BccEmailArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.BccEmailArchiveId) {
		toSerialize["bccEmailArchiveId"] = o.BccEmailArchiveId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailNotificationId) {
		toSerialize["emailNotificationId"] = o.EmailNotificationId
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableBccEmailArchive struct {
	value *BccEmailArchive
	isSet bool
}

func (v NullableBccEmailArchive) Get() *BccEmailArchive {
	return v.value
}

func (v *NullableBccEmailArchive) Set(val *BccEmailArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableBccEmailArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableBccEmailArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBccEmailArchive(val *BccEmailArchive) *NullableBccEmailArchive {
	return &NullableBccEmailArchive{value: val, isSet: true}
}

func (v NullableBccEmailArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBccEmailArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


