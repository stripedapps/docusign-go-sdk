/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IdentityVerifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityVerifications{}

// IdentityVerifications Identity Verification enables you to verify a signer's identity before they can access a document. The `IdentityVerifications` resource provides a method that enables you to list the workflows that are available to an account.
type IdentityVerifications struct {
	// Specifies the ID Verification workflow applied on an envelope by workflow ID. <br/>See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. <br/>This can be used in addition to other [recipient authentication](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=kzp1578456318101.html) methods. <br/>Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients' identity by verifying their ID while ID Check relies on data available on public records (such as current and former address).
	IdentityVerification []AccountIdentityVerificationWorkflow `json:"identityVerification,omitempty"`
}

// NewIdentityVerifications instantiates a new IdentityVerifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityVerifications() *IdentityVerifications {
	this := IdentityVerifications{}
	return &this
}

// NewIdentityVerificationsWithDefaults instantiates a new IdentityVerifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityVerificationsWithDefaults() *IdentityVerifications {
	this := IdentityVerifications{}
	return &this
}

// GetIdentityVerification returns the IdentityVerification field value if set, zero value otherwise.
func (o *IdentityVerifications) GetIdentityVerification() []AccountIdentityVerificationWorkflow {
	if o == nil || IsNil(o.IdentityVerification) {
		var ret []AccountIdentityVerificationWorkflow
		return ret
	}
	return o.IdentityVerification
}

// GetIdentityVerificationOk returns a tuple with the IdentityVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityVerifications) GetIdentityVerificationOk() ([]AccountIdentityVerificationWorkflow, bool) {
	if o == nil || IsNil(o.IdentityVerification) {
		return nil, false
	}
	return o.IdentityVerification, true
}

// HasIdentityVerification returns a boolean if a field has been set.
func (o *IdentityVerifications) HasIdentityVerification() bool {
	if o != nil && !IsNil(o.IdentityVerification) {
		return true
	}

	return false
}

// SetIdentityVerification gets a reference to the given []AccountIdentityVerificationWorkflow and assigns it to the IdentityVerification field.
func (o *IdentityVerifications) SetIdentityVerification(v []AccountIdentityVerificationWorkflow) {
	o.IdentityVerification = v
}

func (o IdentityVerifications) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityVerifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IdentityVerification) {
		toSerialize["identityVerification"] = o.IdentityVerification
	}
	return toSerialize, nil
}

type NullableIdentityVerifications struct {
	value *IdentityVerifications
	isSet bool
}

func (v NullableIdentityVerifications) Get() *IdentityVerifications {
	return v.value
}

func (v *NullableIdentityVerifications) Set(val *IdentityVerifications) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityVerifications) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityVerifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityVerifications(val *IdentityVerifications) *NullableIdentityVerifications {
	return &NullableIdentityVerifications{value: val, isSet: true}
}

func (v NullableIdentityVerifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityVerifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


