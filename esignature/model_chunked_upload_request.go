/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChunkedUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChunkedUploadRequest{}

// ChunkedUploadRequest This is the request object for uploading a chunked upload.
type ChunkedUploadRequest struct {
	// The ID of the chunked upload.  **Note:** This property is ignored in requests, and overridden with an auto-generated value in responses.
	ChunkedUploadId *string `json:"chunkedUploadId,omitempty"`
	// A base64-encoded representation of the content that is used to upload the file.   Maximum size: 50 MB. However, data is also subject to REST API limits regarding request sizes, and Internet Information Systems (IIS) might place further constraints on file size.
	Data *string `json:"data,omitempty"`
}

// NewChunkedUploadRequest instantiates a new ChunkedUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunkedUploadRequest() *ChunkedUploadRequest {
	this := ChunkedUploadRequest{}
	return &this
}

// NewChunkedUploadRequestWithDefaults instantiates a new ChunkedUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunkedUploadRequestWithDefaults() *ChunkedUploadRequest {
	this := ChunkedUploadRequest{}
	return &this
}

// GetChunkedUploadId returns the ChunkedUploadId field value if set, zero value otherwise.
func (o *ChunkedUploadRequest) GetChunkedUploadId() string {
	if o == nil || IsNil(o.ChunkedUploadId) {
		var ret string
		return ret
	}
	return *o.ChunkedUploadId
}

// GetChunkedUploadIdOk returns a tuple with the ChunkedUploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkedUploadRequest) GetChunkedUploadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChunkedUploadId) {
		return nil, false
	}
	return o.ChunkedUploadId, true
}

// HasChunkedUploadId returns a boolean if a field has been set.
func (o *ChunkedUploadRequest) HasChunkedUploadId() bool {
	if o != nil && !IsNil(o.ChunkedUploadId) {
		return true
	}

	return false
}

// SetChunkedUploadId gets a reference to the given string and assigns it to the ChunkedUploadId field.
func (o *ChunkedUploadRequest) SetChunkedUploadId(v string) {
	o.ChunkedUploadId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ChunkedUploadRequest) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunkedUploadRequest) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ChunkedUploadRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ChunkedUploadRequest) SetData(v string) {
	o.Data = &v
}

func (o ChunkedUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChunkedUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChunkedUploadId) {
		toSerialize["chunkedUploadId"] = o.ChunkedUploadId
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableChunkedUploadRequest struct {
	value *ChunkedUploadRequest
	isSet bool
}

func (v NullableChunkedUploadRequest) Get() *ChunkedUploadRequest {
	return v.value
}

func (v *NullableChunkedUploadRequest) Set(val *ChunkedUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChunkedUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChunkedUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunkedUploadRequest(val *ChunkedUploadRequest) *NullableChunkedUploadRequest {
	return &NullableChunkedUploadRequest{value: val, isSet: true}
}

func (v NullableChunkedUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunkedUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


