/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SigningGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SigningGroups{}

// SigningGroups Signing groups
type SigningGroups struct {
	// The UTC DateTime when the workspace user authorization was created.
	Created *string `json:"created,omitempty"`
	// The name of the user who created the signing group.
	CreatedBy *string `json:"createdBy,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The email address for the signing group. You can use a group email address to email all of the group members at the same time.
	GroupEmail *string `json:"groupEmail,omitempty"`
	// The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
	GroupName *string `json:"groupName,omitempty"`
	// The group type. Possible values include:  - `adminstrators` - `everyone` - `customGroup` - `sharedSigningGroup`  <!-- More? To do -->
	GroupType *string `json:"groupType,omitempty"`
	// The date and time that the signing group was last modified.
	Modified *string `json:"modified,omitempty"`
	// The user ID (GUID) of the user who last modified this user record. This property is read-only.
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html). 
	SigningGroupId *string `json:"signingGroupId,omitempty"`
	// User management information.
	Users []SigningGroupUser `json:"users,omitempty"`
}

// NewSigningGroups instantiates a new SigningGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigningGroups() *SigningGroups {
	this := SigningGroups{}
	return &this
}

// NewSigningGroupsWithDefaults instantiates a new SigningGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigningGroupsWithDefaults() *SigningGroups {
	this := SigningGroups{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SigningGroups) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SigningGroups) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *SigningGroups) SetCreated(v string) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *SigningGroups) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *SigningGroups) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *SigningGroups) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *SigningGroups) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *SigningGroups) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *SigningGroups) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetGroupEmail returns the GroupEmail field value if set, zero value otherwise.
func (o *SigningGroups) GetGroupEmail() string {
	if o == nil || IsNil(o.GroupEmail) {
		var ret string
		return ret
	}
	return *o.GroupEmail
}

// GetGroupEmailOk returns a tuple with the GroupEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetGroupEmailOk() (*string, bool) {
	if o == nil || IsNil(o.GroupEmail) {
		return nil, false
	}
	return o.GroupEmail, true
}

// HasGroupEmail returns a boolean if a field has been set.
func (o *SigningGroups) HasGroupEmail() bool {
	if o != nil && !IsNil(o.GroupEmail) {
		return true
	}

	return false
}

// SetGroupEmail gets a reference to the given string and assigns it to the GroupEmail field.
func (o *SigningGroups) SetGroupEmail(v string) {
	o.GroupEmail = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *SigningGroups) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *SigningGroups) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *SigningGroups) SetGroupName(v string) {
	o.GroupName = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *SigningGroups) GetGroupType() string {
	if o == nil || IsNil(o.GroupType) {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *SigningGroups) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *SigningGroups) SetGroupType(v string) {
	o.GroupType = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *SigningGroups) GetModified() string {
	if o == nil || IsNil(o.Modified) {
		var ret string
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *SigningGroups) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given string and assigns it to the Modified field.
func (o *SigningGroups) SetModified(v string) {
	o.Modified = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *SigningGroups) GetModifiedBy() string {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetModifiedByOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *SigningGroups) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *SigningGroups) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetSigningGroupId returns the SigningGroupId field value if set, zero value otherwise.
func (o *SigningGroups) GetSigningGroupId() string {
	if o == nil || IsNil(o.SigningGroupId) {
		var ret string
		return ret
	}
	return *o.SigningGroupId
}

// GetSigningGroupIdOk returns a tuple with the SigningGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetSigningGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupId) {
		return nil, false
	}
	return o.SigningGroupId, true
}

// HasSigningGroupId returns a boolean if a field has been set.
func (o *SigningGroups) HasSigningGroupId() bool {
	if o != nil && !IsNil(o.SigningGroupId) {
		return true
	}

	return false
}

// SetSigningGroupId gets a reference to the given string and assigns it to the SigningGroupId field.
func (o *SigningGroups) SetSigningGroupId(v string) {
	o.SigningGroupId = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *SigningGroups) GetUsers() []SigningGroupUser {
	if o == nil || IsNil(o.Users) {
		var ret []SigningGroupUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroups) GetUsersOk() ([]SigningGroupUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *SigningGroups) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []SigningGroupUser and assigns it to the Users field.
func (o *SigningGroups) SetUsers(v []SigningGroupUser) {
	o.Users = v
}

func (o SigningGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SigningGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.GroupEmail) {
		toSerialize["groupEmail"] = o.GroupEmail
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !IsNil(o.SigningGroupId) {
		toSerialize["signingGroupId"] = o.SigningGroupId
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableSigningGroups struct {
	value *SigningGroups
	isSet bool
}

func (v NullableSigningGroups) Get() *SigningGroups {
	return v.value
}

func (v *NullableSigningGroups) Set(val *SigningGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableSigningGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableSigningGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigningGroups(val *SigningGroups) *NullableSigningGroups {
	return &NullableSigningGroups{value: val, isSet: true}
}

func (v NullableSigningGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigningGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


