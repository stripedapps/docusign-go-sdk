/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TemplateRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateRole{}

// TemplateRole Information about a specific role.
type TemplateRole struct {
	// If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account's access code format setting.  If blank, but the signer `accessCode` property is set in the envelope, then that value is used.  If blank and the signer `accessCode` property is not set, then the access code is not required.
	AccessCode *string `json:"accessCode,omitempty"`
	// An array of additional notification objects.
	AdditionalNotifications []RecipientAdditionalNotification `json:"additionalNotifications,omitempty"`
	// Specifies whether the recipient is embedded or remote.   If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  If the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true,** an error is generated on sending.  **Note:** This property is not returned by the [listStatusChanges](/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/) endpoint.  Maximum length: 100 characters.  
	ClientUserId *string `json:"clientUserId,omitempty"`
	// When **true,** this recipient is the default recipient and any tabs generated by the `transformPdfFields` option are mapped to this recipient.
	DefaultRecipient *string `json:"defaultRecipient,omitempty"`
	// The delivery method. One of:  - `email` - `fax` - `SMS` - `WhatsApp` - `offline`  The `SMS` and `WhatsApp` delivery methods are limited to `signer`, `carbonCopy`, and `certifiedDelivery` recipients.  **Related topics**  - [Using SMS delivery with the eSignature API][smsconcept] - [How to request a signature by SMS delivery][howto]  [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/ [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
	DeliveryMethod *string `json:"deliveryMethod,omitempty"`
	// The email address of the person associated with a role name. It is the email address of the person specified in the `name` property.  For an in-person signer, this is the email address of the host.
	Email *string `json:"email,omitempty"`
	EmailNotification *RecipientEmailNotification `json:"emailNotification,omitempty"`
	// Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.   When `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.  It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
	EmbeddedRecipientStartURL *string `json:"embeddedRecipientStartURL,omitempty"`
	// The full legal name of the in-person signer.  Maximum Length: 100 characters.
	InPersonSignerName *string `json:"inPersonSignerName,omitempty"`
	// Specifies the recipient's name.  For an in-person signer, this is the name of the host.
	Name *string `json:"name,omitempty"`
	PhoneNumber *RecipientPhoneNumber `json:"phoneNumber,omitempty"`
	// The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/)
	RecipientSignatureProviders []RecipientSignatureProvider `json:"recipientSignatureProviders,omitempty"`
	// Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
	RoleName *string `json:"roleName,omitempty"`
	// Specifies the routing order of the recipient in the envelope. 
	RoutingOrder *string `json:"routingOrder,omitempty"`
	// The ID of the [signing group](https://support.docusign.com/s/document-item?bundleId=gav1643676262430&topicId=zgn1578456447934.html). 
	SigningGroupId *string `json:"signingGroupId,omitempty"`
	Tabs *EnvelopeRecipientTabs `json:"tabs,omitempty"`
}

// NewTemplateRole instantiates a new TemplateRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateRole() *TemplateRole {
	this := TemplateRole{}
	return &this
}

// NewTemplateRoleWithDefaults instantiates a new TemplateRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateRoleWithDefaults() *TemplateRole {
	this := TemplateRole{}
	return &this
}

// GetAccessCode returns the AccessCode field value if set, zero value otherwise.
func (o *TemplateRole) GetAccessCode() string {
	if o == nil || IsNil(o.AccessCode) {
		var ret string
		return ret
	}
	return *o.AccessCode
}

// GetAccessCodeOk returns a tuple with the AccessCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetAccessCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessCode) {
		return nil, false
	}
	return o.AccessCode, true
}

// HasAccessCode returns a boolean if a field has been set.
func (o *TemplateRole) HasAccessCode() bool {
	if o != nil && !IsNil(o.AccessCode) {
		return true
	}

	return false
}

// SetAccessCode gets a reference to the given string and assigns it to the AccessCode field.
func (o *TemplateRole) SetAccessCode(v string) {
	o.AccessCode = &v
}

// GetAdditionalNotifications returns the AdditionalNotifications field value if set, zero value otherwise.
func (o *TemplateRole) GetAdditionalNotifications() []RecipientAdditionalNotification {
	if o == nil || IsNil(o.AdditionalNotifications) {
		var ret []RecipientAdditionalNotification
		return ret
	}
	return o.AdditionalNotifications
}

// GetAdditionalNotificationsOk returns a tuple with the AdditionalNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetAdditionalNotificationsOk() ([]RecipientAdditionalNotification, bool) {
	if o == nil || IsNil(o.AdditionalNotifications) {
		return nil, false
	}
	return o.AdditionalNotifications, true
}

// HasAdditionalNotifications returns a boolean if a field has been set.
func (o *TemplateRole) HasAdditionalNotifications() bool {
	if o != nil && !IsNil(o.AdditionalNotifications) {
		return true
	}

	return false
}

// SetAdditionalNotifications gets a reference to the given []RecipientAdditionalNotification and assigns it to the AdditionalNotifications field.
func (o *TemplateRole) SetAdditionalNotifications(v []RecipientAdditionalNotification) {
	o.AdditionalNotifications = v
}

// GetClientUserId returns the ClientUserId field value if set, zero value otherwise.
func (o *TemplateRole) GetClientUserId() string {
	if o == nil || IsNil(o.ClientUserId) {
		var ret string
		return ret
	}
	return *o.ClientUserId
}

// GetClientUserIdOk returns a tuple with the ClientUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetClientUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientUserId) {
		return nil, false
	}
	return o.ClientUserId, true
}

// HasClientUserId returns a boolean if a field has been set.
func (o *TemplateRole) HasClientUserId() bool {
	if o != nil && !IsNil(o.ClientUserId) {
		return true
	}

	return false
}

// SetClientUserId gets a reference to the given string and assigns it to the ClientUserId field.
func (o *TemplateRole) SetClientUserId(v string) {
	o.ClientUserId = &v
}

// GetDefaultRecipient returns the DefaultRecipient field value if set, zero value otherwise.
func (o *TemplateRole) GetDefaultRecipient() string {
	if o == nil || IsNil(o.DefaultRecipient) {
		var ret string
		return ret
	}
	return *o.DefaultRecipient
}

// GetDefaultRecipientOk returns a tuple with the DefaultRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetDefaultRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRecipient) {
		return nil, false
	}
	return o.DefaultRecipient, true
}

// HasDefaultRecipient returns a boolean if a field has been set.
func (o *TemplateRole) HasDefaultRecipient() bool {
	if o != nil && !IsNil(o.DefaultRecipient) {
		return true
	}

	return false
}

// SetDefaultRecipient gets a reference to the given string and assigns it to the DefaultRecipient field.
func (o *TemplateRole) SetDefaultRecipient(v string) {
	o.DefaultRecipient = &v
}

// GetDeliveryMethod returns the DeliveryMethod field value if set, zero value otherwise.
func (o *TemplateRole) GetDeliveryMethod() string {
	if o == nil || IsNil(o.DeliveryMethod) {
		var ret string
		return ret
	}
	return *o.DeliveryMethod
}

// GetDeliveryMethodOk returns a tuple with the DeliveryMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetDeliveryMethodOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryMethod) {
		return nil, false
	}
	return o.DeliveryMethod, true
}

// HasDeliveryMethod returns a boolean if a field has been set.
func (o *TemplateRole) HasDeliveryMethod() bool {
	if o != nil && !IsNil(o.DeliveryMethod) {
		return true
	}

	return false
}

// SetDeliveryMethod gets a reference to the given string and assigns it to the DeliveryMethod field.
func (o *TemplateRole) SetDeliveryMethod(v string) {
	o.DeliveryMethod = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *TemplateRole) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *TemplateRole) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *TemplateRole) SetEmail(v string) {
	o.Email = &v
}

// GetEmailNotification returns the EmailNotification field value if set, zero value otherwise.
func (o *TemplateRole) GetEmailNotification() RecipientEmailNotification {
	if o == nil || IsNil(o.EmailNotification) {
		var ret RecipientEmailNotification
		return ret
	}
	return *o.EmailNotification
}

// GetEmailNotificationOk returns a tuple with the EmailNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetEmailNotificationOk() (*RecipientEmailNotification, bool) {
	if o == nil || IsNil(o.EmailNotification) {
		return nil, false
	}
	return o.EmailNotification, true
}

// HasEmailNotification returns a boolean if a field has been set.
func (o *TemplateRole) HasEmailNotification() bool {
	if o != nil && !IsNil(o.EmailNotification) {
		return true
	}

	return false
}

// SetEmailNotification gets a reference to the given RecipientEmailNotification and assigns it to the EmailNotification field.
func (o *TemplateRole) SetEmailNotification(v RecipientEmailNotification) {
	o.EmailNotification = &v
}

// GetEmbeddedRecipientStartURL returns the EmbeddedRecipientStartURL field value if set, zero value otherwise.
func (o *TemplateRole) GetEmbeddedRecipientStartURL() string {
	if o == nil || IsNil(o.EmbeddedRecipientStartURL) {
		var ret string
		return ret
	}
	return *o.EmbeddedRecipientStartURL
}

// GetEmbeddedRecipientStartURLOk returns a tuple with the EmbeddedRecipientStartURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetEmbeddedRecipientStartURLOk() (*string, bool) {
	if o == nil || IsNil(o.EmbeddedRecipientStartURL) {
		return nil, false
	}
	return o.EmbeddedRecipientStartURL, true
}

// HasEmbeddedRecipientStartURL returns a boolean if a field has been set.
func (o *TemplateRole) HasEmbeddedRecipientStartURL() bool {
	if o != nil && !IsNil(o.EmbeddedRecipientStartURL) {
		return true
	}

	return false
}

// SetEmbeddedRecipientStartURL gets a reference to the given string and assigns it to the EmbeddedRecipientStartURL field.
func (o *TemplateRole) SetEmbeddedRecipientStartURL(v string) {
	o.EmbeddedRecipientStartURL = &v
}

// GetInPersonSignerName returns the InPersonSignerName field value if set, zero value otherwise.
func (o *TemplateRole) GetInPersonSignerName() string {
	if o == nil || IsNil(o.InPersonSignerName) {
		var ret string
		return ret
	}
	return *o.InPersonSignerName
}

// GetInPersonSignerNameOk returns a tuple with the InPersonSignerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetInPersonSignerNameOk() (*string, bool) {
	if o == nil || IsNil(o.InPersonSignerName) {
		return nil, false
	}
	return o.InPersonSignerName, true
}

// HasInPersonSignerName returns a boolean if a field has been set.
func (o *TemplateRole) HasInPersonSignerName() bool {
	if o != nil && !IsNil(o.InPersonSignerName) {
		return true
	}

	return false
}

// SetInPersonSignerName gets a reference to the given string and assigns it to the InPersonSignerName field.
func (o *TemplateRole) SetInPersonSignerName(v string) {
	o.InPersonSignerName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TemplateRole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TemplateRole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TemplateRole) SetName(v string) {
	o.Name = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *TemplateRole) GetPhoneNumber() RecipientPhoneNumber {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret RecipientPhoneNumber
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetPhoneNumberOk() (*RecipientPhoneNumber, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *TemplateRole) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given RecipientPhoneNumber and assigns it to the PhoneNumber field.
func (o *TemplateRole) SetPhoneNumber(v RecipientPhoneNumber) {
	o.PhoneNumber = &v
}

// GetRecipientSignatureProviders returns the RecipientSignatureProviders field value if set, zero value otherwise.
func (o *TemplateRole) GetRecipientSignatureProviders() []RecipientSignatureProvider {
	if o == nil || IsNil(o.RecipientSignatureProviders) {
		var ret []RecipientSignatureProvider
		return ret
	}
	return o.RecipientSignatureProviders
}

// GetRecipientSignatureProvidersOk returns a tuple with the RecipientSignatureProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetRecipientSignatureProvidersOk() ([]RecipientSignatureProvider, bool) {
	if o == nil || IsNil(o.RecipientSignatureProviders) {
		return nil, false
	}
	return o.RecipientSignatureProviders, true
}

// HasRecipientSignatureProviders returns a boolean if a field has been set.
func (o *TemplateRole) HasRecipientSignatureProviders() bool {
	if o != nil && !IsNil(o.RecipientSignatureProviders) {
		return true
	}

	return false
}

// SetRecipientSignatureProviders gets a reference to the given []RecipientSignatureProvider and assigns it to the RecipientSignatureProviders field.
func (o *TemplateRole) SetRecipientSignatureProviders(v []RecipientSignatureProvider) {
	o.RecipientSignatureProviders = v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *TemplateRole) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *TemplateRole) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *TemplateRole) SetRoleName(v string) {
	o.RoleName = &v
}

// GetRoutingOrder returns the RoutingOrder field value if set, zero value otherwise.
func (o *TemplateRole) GetRoutingOrder() string {
	if o == nil || IsNil(o.RoutingOrder) {
		var ret string
		return ret
	}
	return *o.RoutingOrder
}

// GetRoutingOrderOk returns a tuple with the RoutingOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetRoutingOrderOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingOrder) {
		return nil, false
	}
	return o.RoutingOrder, true
}

// HasRoutingOrder returns a boolean if a field has been set.
func (o *TemplateRole) HasRoutingOrder() bool {
	if o != nil && !IsNil(o.RoutingOrder) {
		return true
	}

	return false
}

// SetRoutingOrder gets a reference to the given string and assigns it to the RoutingOrder field.
func (o *TemplateRole) SetRoutingOrder(v string) {
	o.RoutingOrder = &v
}

// GetSigningGroupId returns the SigningGroupId field value if set, zero value otherwise.
func (o *TemplateRole) GetSigningGroupId() string {
	if o == nil || IsNil(o.SigningGroupId) {
		var ret string
		return ret
	}
	return *o.SigningGroupId
}

// GetSigningGroupIdOk returns a tuple with the SigningGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetSigningGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupId) {
		return nil, false
	}
	return o.SigningGroupId, true
}

// HasSigningGroupId returns a boolean if a field has been set.
func (o *TemplateRole) HasSigningGroupId() bool {
	if o != nil && !IsNil(o.SigningGroupId) {
		return true
	}

	return false
}

// SetSigningGroupId gets a reference to the given string and assigns it to the SigningGroupId field.
func (o *TemplateRole) SetSigningGroupId(v string) {
	o.SigningGroupId = &v
}

// GetTabs returns the Tabs field value if set, zero value otherwise.
func (o *TemplateRole) GetTabs() EnvelopeRecipientTabs {
	if o == nil || IsNil(o.Tabs) {
		var ret EnvelopeRecipientTabs
		return ret
	}
	return *o.Tabs
}

// GetTabsOk returns a tuple with the Tabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRole) GetTabsOk() (*EnvelopeRecipientTabs, bool) {
	if o == nil || IsNil(o.Tabs) {
		return nil, false
	}
	return o.Tabs, true
}

// HasTabs returns a boolean if a field has been set.
func (o *TemplateRole) HasTabs() bool {
	if o != nil && !IsNil(o.Tabs) {
		return true
	}

	return false
}

// SetTabs gets a reference to the given EnvelopeRecipientTabs and assigns it to the Tabs field.
func (o *TemplateRole) SetTabs(v EnvelopeRecipientTabs) {
	o.Tabs = &v
}

func (o TemplateRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessCode) {
		toSerialize["accessCode"] = o.AccessCode
	}
	if !IsNil(o.AdditionalNotifications) {
		toSerialize["additionalNotifications"] = o.AdditionalNotifications
	}
	if !IsNil(o.ClientUserId) {
		toSerialize["clientUserId"] = o.ClientUserId
	}
	if !IsNil(o.DefaultRecipient) {
		toSerialize["defaultRecipient"] = o.DefaultRecipient
	}
	if !IsNil(o.DeliveryMethod) {
		toSerialize["deliveryMethod"] = o.DeliveryMethod
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailNotification) {
		toSerialize["emailNotification"] = o.EmailNotification
	}
	if !IsNil(o.EmbeddedRecipientStartURL) {
		toSerialize["embeddedRecipientStartURL"] = o.EmbeddedRecipientStartURL
	}
	if !IsNil(o.InPersonSignerName) {
		toSerialize["inPersonSignerName"] = o.InPersonSignerName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.RecipientSignatureProviders) {
		toSerialize["recipientSignatureProviders"] = o.RecipientSignatureProviders
	}
	if !IsNil(o.RoleName) {
		toSerialize["roleName"] = o.RoleName
	}
	if !IsNil(o.RoutingOrder) {
		toSerialize["routingOrder"] = o.RoutingOrder
	}
	if !IsNil(o.SigningGroupId) {
		toSerialize["signingGroupId"] = o.SigningGroupId
	}
	if !IsNil(o.Tabs) {
		toSerialize["tabs"] = o.Tabs
	}
	return toSerialize, nil
}

type NullableTemplateRole struct {
	value *TemplateRole
	isSet bool
}

func (v NullableTemplateRole) Get() *TemplateRole {
	return v.value
}

func (v *NullableTemplateRole) Set(val *TemplateRole) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateRole) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateRole(val *TemplateRole) *NullableTemplateRole {
	return &NullableTemplateRole{value: val, isSet: true}
}

func (v NullableTemplateRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


