/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SignatureType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureType{}

// SignatureType This object contains information about the type of signature.
type SignatureType struct {
	// When **true,** the signature type is the default type.
	IsDefault *string `json:"isDefault,omitempty"`
	// The type of signature. Valid values are:  - `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia. This is the default signature type that DocuSign uses. - `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures, you must use the [DocuSign Signature Appliance](/docs/dsa-api/).  For more information, see [Standards Based Signatures](/docs/esign-rest-api/esign101/concepts/standards-based-signatures/).
	Type *string `json:"type,omitempty"`
}

// NewSignatureType instantiates a new SignatureType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureType() *SignatureType {
	this := SignatureType{}
	return &this
}

// NewSignatureTypeWithDefaults instantiates a new SignatureType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureTypeWithDefaults() *SignatureType {
	this := SignatureType{}
	return &this
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *SignatureType) GetIsDefault() string {
	if o == nil || IsNil(o.IsDefault) {
		var ret string
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureType) GetIsDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *SignatureType) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given string and assigns it to the IsDefault field.
func (o *SignatureType) SetIsDefault(v string) {
	o.IsDefault = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SignatureType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SignatureType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SignatureType) SetType(v string) {
	o.Type = &v
}

func (o SignatureType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSignatureType struct {
	value *SignatureType
	isSet bool
}

func (v NullableSignatureType) Get() *SignatureType {
	return v.value
}

func (v *NullableSignatureType) Set(val *SignatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureType(val *SignatureType) *NullableSignatureType {
	return &NullableSignatureType{value: val, isSet: true}
}

func (v NullableSignatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


