/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GraphicsContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphicsContext{}

// GraphicsContext 
type GraphicsContext struct {
	// The fill color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
	FillColor *string `json:"fillColor,omitempty"`
	// The line color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
	LineColor *string `json:"lineColor,omitempty"`
	// The line weight or thickness to use for the overlay.
	LineWeight *string `json:"lineWeight,omitempty"`
}

// NewGraphicsContext instantiates a new GraphicsContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphicsContext() *GraphicsContext {
	this := GraphicsContext{}
	return &this
}

// NewGraphicsContextWithDefaults instantiates a new GraphicsContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphicsContextWithDefaults() *GraphicsContext {
	this := GraphicsContext{}
	return &this
}

// GetFillColor returns the FillColor field value if set, zero value otherwise.
func (o *GraphicsContext) GetFillColor() string {
	if o == nil || IsNil(o.FillColor) {
		var ret string
		return ret
	}
	return *o.FillColor
}

// GetFillColorOk returns a tuple with the FillColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsContext) GetFillColorOk() (*string, bool) {
	if o == nil || IsNil(o.FillColor) {
		return nil, false
	}
	return o.FillColor, true
}

// HasFillColor returns a boolean if a field has been set.
func (o *GraphicsContext) HasFillColor() bool {
	if o != nil && !IsNil(o.FillColor) {
		return true
	}

	return false
}

// SetFillColor gets a reference to the given string and assigns it to the FillColor field.
func (o *GraphicsContext) SetFillColor(v string) {
	o.FillColor = &v
}

// GetLineColor returns the LineColor field value if set, zero value otherwise.
func (o *GraphicsContext) GetLineColor() string {
	if o == nil || IsNil(o.LineColor) {
		var ret string
		return ret
	}
	return *o.LineColor
}

// GetLineColorOk returns a tuple with the LineColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsContext) GetLineColorOk() (*string, bool) {
	if o == nil || IsNil(o.LineColor) {
		return nil, false
	}
	return o.LineColor, true
}

// HasLineColor returns a boolean if a field has been set.
func (o *GraphicsContext) HasLineColor() bool {
	if o != nil && !IsNil(o.LineColor) {
		return true
	}

	return false
}

// SetLineColor gets a reference to the given string and assigns it to the LineColor field.
func (o *GraphicsContext) SetLineColor(v string) {
	o.LineColor = &v
}

// GetLineWeight returns the LineWeight field value if set, zero value otherwise.
func (o *GraphicsContext) GetLineWeight() string {
	if o == nil || IsNil(o.LineWeight) {
		var ret string
		return ret
	}
	return *o.LineWeight
}

// GetLineWeightOk returns a tuple with the LineWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsContext) GetLineWeightOk() (*string, bool) {
	if o == nil || IsNil(o.LineWeight) {
		return nil, false
	}
	return o.LineWeight, true
}

// HasLineWeight returns a boolean if a field has been set.
func (o *GraphicsContext) HasLineWeight() bool {
	if o != nil && !IsNil(o.LineWeight) {
		return true
	}

	return false
}

// SetLineWeight gets a reference to the given string and assigns it to the LineWeight field.
func (o *GraphicsContext) SetLineWeight(v string) {
	o.LineWeight = &v
}

func (o GraphicsContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphicsContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FillColor) {
		toSerialize["fillColor"] = o.FillColor
	}
	if !IsNil(o.LineColor) {
		toSerialize["lineColor"] = o.LineColor
	}
	if !IsNil(o.LineWeight) {
		toSerialize["lineWeight"] = o.LineWeight
	}
	return toSerialize, nil
}

type NullableGraphicsContext struct {
	value *GraphicsContext
	isSet bool
}

func (v NullableGraphicsContext) Get() *GraphicsContext {
	return v.value
}

func (v *NullableGraphicsContext) Set(val *GraphicsContext) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphicsContext) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphicsContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphicsContext(val *GraphicsContext) *NullableGraphicsContext {
	return &NullableGraphicsContext{value: val, isSet: true}
}

func (v NullableGraphicsContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphicsContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


