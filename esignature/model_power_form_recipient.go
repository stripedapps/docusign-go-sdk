/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PowerFormRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerFormRecipient{}

// PowerFormRecipient **Note:** For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
type PowerFormRecipient struct {
	// (Optional) The access code that the recipient must enter to access the PowerForm.  Maximum Length: 50 characters. The code must also conform to the account's access code format setting.  If blank but the signer accessCode property is set in the envelope, then that value is used.  If blank and the signer accessCode property is not set, then the access code is not required.
	AccessCode *string `json:"accessCode,omitempty"`
	// When **true,** the `accessCode` property is locked and cannot be edited.
	AccessCodeLocked *string `json:"accessCodeLocked,omitempty"`
	// When **true,** the recipient must enter the `accessCode` to access the PowerForm.
	AccessCodeRequired *string `json:"accessCodeRequired,omitempty"`
	// The email address of the recipient.  **Note:** For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
	Email *string `json:"email,omitempty"`
	// When **true,** the recipient's email address is locked and cannot be edited.
	EmailLocked *string `json:"emailLocked,omitempty"`
	// The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:  - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object. - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object. - `ID Check $`: The  recipient must answer detailed security questions.   **Example:** Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
	IdCheckConfigurationName *string `json:"idCheckConfigurationName,omitempty"`
	// Indicates if authentication is configured for the account. Valid values are:  - `always`: Authentication checks are performed on every envelope.  - `never`: Authentication checks are not performed on any envelopes.  - `optional:` Authentication is configurable per envelope.
	IdCheckRequired *string `json:"idCheckRequired,omitempty"`
	// The name of the PowerForm recipient.  **Note:** For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
	Name *string `json:"name,omitempty"`
	// The recipient type, as specified by the following values: - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order. - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order. - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents. - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients. - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer. - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order. - `seal`: Electronic seal recipients represent legal entities. - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope. - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
	RecipientType *string `json:"recipientType,omitempty"`
	// The role associated with the recipient (for example, `Member`).  This property is required when you are working with template recipients and PowerForm recipients.
	RoleName *string `json:"roleName,omitempty"`
	// Specifies the routing order of the recipient in the envelope. 
	RoutingOrder *string `json:"routingOrder,omitempty"`
	// When **true,** the template used to create the PowerForm requires ID lookup for the recipient.
	TemplateRequiresIdLookup *string `json:"templateRequiresIdLookup,omitempty"`
	// When **true,** the `userName` property for the recipient is locked and cannot be edited.
	UserNameLocked *string `json:"userNameLocked,omitempty"`
}

// NewPowerFormRecipient instantiates a new PowerFormRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerFormRecipient() *PowerFormRecipient {
	this := PowerFormRecipient{}
	return &this
}

// NewPowerFormRecipientWithDefaults instantiates a new PowerFormRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerFormRecipientWithDefaults() *PowerFormRecipient {
	this := PowerFormRecipient{}
	return &this
}

// GetAccessCode returns the AccessCode field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetAccessCode() string {
	if o == nil || IsNil(o.AccessCode) {
		var ret string
		return ret
	}
	return *o.AccessCode
}

// GetAccessCodeOk returns a tuple with the AccessCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetAccessCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessCode) {
		return nil, false
	}
	return o.AccessCode, true
}

// HasAccessCode returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasAccessCode() bool {
	if o != nil && !IsNil(o.AccessCode) {
		return true
	}

	return false
}

// SetAccessCode gets a reference to the given string and assigns it to the AccessCode field.
func (o *PowerFormRecipient) SetAccessCode(v string) {
	o.AccessCode = &v
}

// GetAccessCodeLocked returns the AccessCodeLocked field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetAccessCodeLocked() string {
	if o == nil || IsNil(o.AccessCodeLocked) {
		var ret string
		return ret
	}
	return *o.AccessCodeLocked
}

// GetAccessCodeLockedOk returns a tuple with the AccessCodeLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetAccessCodeLockedOk() (*string, bool) {
	if o == nil || IsNil(o.AccessCodeLocked) {
		return nil, false
	}
	return o.AccessCodeLocked, true
}

// HasAccessCodeLocked returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasAccessCodeLocked() bool {
	if o != nil && !IsNil(o.AccessCodeLocked) {
		return true
	}

	return false
}

// SetAccessCodeLocked gets a reference to the given string and assigns it to the AccessCodeLocked field.
func (o *PowerFormRecipient) SetAccessCodeLocked(v string) {
	o.AccessCodeLocked = &v
}

// GetAccessCodeRequired returns the AccessCodeRequired field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetAccessCodeRequired() string {
	if o == nil || IsNil(o.AccessCodeRequired) {
		var ret string
		return ret
	}
	return *o.AccessCodeRequired
}

// GetAccessCodeRequiredOk returns a tuple with the AccessCodeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetAccessCodeRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.AccessCodeRequired) {
		return nil, false
	}
	return o.AccessCodeRequired, true
}

// HasAccessCodeRequired returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasAccessCodeRequired() bool {
	if o != nil && !IsNil(o.AccessCodeRequired) {
		return true
	}

	return false
}

// SetAccessCodeRequired gets a reference to the given string and assigns it to the AccessCodeRequired field.
func (o *PowerFormRecipient) SetAccessCodeRequired(v string) {
	o.AccessCodeRequired = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PowerFormRecipient) SetEmail(v string) {
	o.Email = &v
}

// GetEmailLocked returns the EmailLocked field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetEmailLocked() string {
	if o == nil || IsNil(o.EmailLocked) {
		var ret string
		return ret
	}
	return *o.EmailLocked
}

// GetEmailLockedOk returns a tuple with the EmailLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetEmailLockedOk() (*string, bool) {
	if o == nil || IsNil(o.EmailLocked) {
		return nil, false
	}
	return o.EmailLocked, true
}

// HasEmailLocked returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasEmailLocked() bool {
	if o != nil && !IsNil(o.EmailLocked) {
		return true
	}

	return false
}

// SetEmailLocked gets a reference to the given string and assigns it to the EmailLocked field.
func (o *PowerFormRecipient) SetEmailLocked(v string) {
	o.EmailLocked = &v
}

// GetIdCheckConfigurationName returns the IdCheckConfigurationName field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetIdCheckConfigurationName() string {
	if o == nil || IsNil(o.IdCheckConfigurationName) {
		var ret string
		return ret
	}
	return *o.IdCheckConfigurationName
}

// GetIdCheckConfigurationNameOk returns a tuple with the IdCheckConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetIdCheckConfigurationNameOk() (*string, bool) {
	if o == nil || IsNil(o.IdCheckConfigurationName) {
		return nil, false
	}
	return o.IdCheckConfigurationName, true
}

// HasIdCheckConfigurationName returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasIdCheckConfigurationName() bool {
	if o != nil && !IsNil(o.IdCheckConfigurationName) {
		return true
	}

	return false
}

// SetIdCheckConfigurationName gets a reference to the given string and assigns it to the IdCheckConfigurationName field.
func (o *PowerFormRecipient) SetIdCheckConfigurationName(v string) {
	o.IdCheckConfigurationName = &v
}

// GetIdCheckRequired returns the IdCheckRequired field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetIdCheckRequired() string {
	if o == nil || IsNil(o.IdCheckRequired) {
		var ret string
		return ret
	}
	return *o.IdCheckRequired
}

// GetIdCheckRequiredOk returns a tuple with the IdCheckRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetIdCheckRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.IdCheckRequired) {
		return nil, false
	}
	return o.IdCheckRequired, true
}

// HasIdCheckRequired returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasIdCheckRequired() bool {
	if o != nil && !IsNil(o.IdCheckRequired) {
		return true
	}

	return false
}

// SetIdCheckRequired gets a reference to the given string and assigns it to the IdCheckRequired field.
func (o *PowerFormRecipient) SetIdCheckRequired(v string) {
	o.IdCheckRequired = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PowerFormRecipient) SetName(v string) {
	o.Name = &v
}

// GetRecipientType returns the RecipientType field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetRecipientType() string {
	if o == nil || IsNil(o.RecipientType) {
		var ret string
		return ret
	}
	return *o.RecipientType
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetRecipientTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientType) {
		return nil, false
	}
	return o.RecipientType, true
}

// HasRecipientType returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasRecipientType() bool {
	if o != nil && !IsNil(o.RecipientType) {
		return true
	}

	return false
}

// SetRecipientType gets a reference to the given string and assigns it to the RecipientType field.
func (o *PowerFormRecipient) SetRecipientType(v string) {
	o.RecipientType = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *PowerFormRecipient) SetRoleName(v string) {
	o.RoleName = &v
}

// GetRoutingOrder returns the RoutingOrder field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetRoutingOrder() string {
	if o == nil || IsNil(o.RoutingOrder) {
		var ret string
		return ret
	}
	return *o.RoutingOrder
}

// GetRoutingOrderOk returns a tuple with the RoutingOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetRoutingOrderOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingOrder) {
		return nil, false
	}
	return o.RoutingOrder, true
}

// HasRoutingOrder returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasRoutingOrder() bool {
	if o != nil && !IsNil(o.RoutingOrder) {
		return true
	}

	return false
}

// SetRoutingOrder gets a reference to the given string and assigns it to the RoutingOrder field.
func (o *PowerFormRecipient) SetRoutingOrder(v string) {
	o.RoutingOrder = &v
}

// GetTemplateRequiresIdLookup returns the TemplateRequiresIdLookup field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetTemplateRequiresIdLookup() string {
	if o == nil || IsNil(o.TemplateRequiresIdLookup) {
		var ret string
		return ret
	}
	return *o.TemplateRequiresIdLookup
}

// GetTemplateRequiresIdLookupOk returns a tuple with the TemplateRequiresIdLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetTemplateRequiresIdLookupOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateRequiresIdLookup) {
		return nil, false
	}
	return o.TemplateRequiresIdLookup, true
}

// HasTemplateRequiresIdLookup returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasTemplateRequiresIdLookup() bool {
	if o != nil && !IsNil(o.TemplateRequiresIdLookup) {
		return true
	}

	return false
}

// SetTemplateRequiresIdLookup gets a reference to the given string and assigns it to the TemplateRequiresIdLookup field.
func (o *PowerFormRecipient) SetTemplateRequiresIdLookup(v string) {
	o.TemplateRequiresIdLookup = &v
}

// GetUserNameLocked returns the UserNameLocked field value if set, zero value otherwise.
func (o *PowerFormRecipient) GetUserNameLocked() string {
	if o == nil || IsNil(o.UserNameLocked) {
		var ret string
		return ret
	}
	return *o.UserNameLocked
}

// GetUserNameLockedOk returns a tuple with the UserNameLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerFormRecipient) GetUserNameLockedOk() (*string, bool) {
	if o == nil || IsNil(o.UserNameLocked) {
		return nil, false
	}
	return o.UserNameLocked, true
}

// HasUserNameLocked returns a boolean if a field has been set.
func (o *PowerFormRecipient) HasUserNameLocked() bool {
	if o != nil && !IsNil(o.UserNameLocked) {
		return true
	}

	return false
}

// SetUserNameLocked gets a reference to the given string and assigns it to the UserNameLocked field.
func (o *PowerFormRecipient) SetUserNameLocked(v string) {
	o.UserNameLocked = &v
}

func (o PowerFormRecipient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerFormRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessCode) {
		toSerialize["accessCode"] = o.AccessCode
	}
	if !IsNil(o.AccessCodeLocked) {
		toSerialize["accessCodeLocked"] = o.AccessCodeLocked
	}
	if !IsNil(o.AccessCodeRequired) {
		toSerialize["accessCodeRequired"] = o.AccessCodeRequired
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailLocked) {
		toSerialize["emailLocked"] = o.EmailLocked
	}
	if !IsNil(o.IdCheckConfigurationName) {
		toSerialize["idCheckConfigurationName"] = o.IdCheckConfigurationName
	}
	if !IsNil(o.IdCheckRequired) {
		toSerialize["idCheckRequired"] = o.IdCheckRequired
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RecipientType) {
		toSerialize["recipientType"] = o.RecipientType
	}
	if !IsNil(o.RoleName) {
		toSerialize["roleName"] = o.RoleName
	}
	if !IsNil(o.RoutingOrder) {
		toSerialize["routingOrder"] = o.RoutingOrder
	}
	if !IsNil(o.TemplateRequiresIdLookup) {
		toSerialize["templateRequiresIdLookup"] = o.TemplateRequiresIdLookup
	}
	if !IsNil(o.UserNameLocked) {
		toSerialize["userNameLocked"] = o.UserNameLocked
	}
	return toSerialize, nil
}

type NullablePowerFormRecipient struct {
	value *PowerFormRecipient
	isSet bool
}

func (v NullablePowerFormRecipient) Get() *PowerFormRecipient {
	return v.value
}

func (v *NullablePowerFormRecipient) Set(val *PowerFormRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerFormRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerFormRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerFormRecipient(val *PowerFormRecipient) *NullablePowerFormRecipient {
	return &NullablePowerFormRecipient{value: val, isSet: true}
}

func (v NullablePowerFormRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerFormRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


