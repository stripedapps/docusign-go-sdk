/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConsentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsentDetails{}

// ConsentDetails 
type ConsentDetails struct {
	// 
	ConsentKey *string `json:"consentKey,omitempty"`
	// The delivery method. One of:  - `email` - `fax` - `SMS` - `WhatsApp` - `offline`  The `SMS` and `WhatsApp` delivery methods are limited to `signer`, `carbonCopy`, and `certifiedDelivery` recipients.  **Related topics**  - [Using SMS delivery with the eSignature API][smsconcept] - [How to request a signature by SMS delivery][howto]  [smsconcept]: /docs/esign-rest-api/esign101/concepts/sms-delivery/using-sms-esignature/ [howto]: /docs/esign-rest-api/how-to/request-signature-sms/
	DeliveryMethod *string `json:"deliveryMethod,omitempty"`
	// 
	SignerConsentStatus *string `json:"signerConsentStatus,omitempty"`
}

// NewConsentDetails instantiates a new ConsentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentDetails() *ConsentDetails {
	this := ConsentDetails{}
	return &this
}

// NewConsentDetailsWithDefaults instantiates a new ConsentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentDetailsWithDefaults() *ConsentDetails {
	this := ConsentDetails{}
	return &this
}

// GetConsentKey returns the ConsentKey field value if set, zero value otherwise.
func (o *ConsentDetails) GetConsentKey() string {
	if o == nil || IsNil(o.ConsentKey) {
		var ret string
		return ret
	}
	return *o.ConsentKey
}

// GetConsentKeyOk returns a tuple with the ConsentKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetConsentKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ConsentKey) {
		return nil, false
	}
	return o.ConsentKey, true
}

// HasConsentKey returns a boolean if a field has been set.
func (o *ConsentDetails) HasConsentKey() bool {
	if o != nil && !IsNil(o.ConsentKey) {
		return true
	}

	return false
}

// SetConsentKey gets a reference to the given string and assigns it to the ConsentKey field.
func (o *ConsentDetails) SetConsentKey(v string) {
	o.ConsentKey = &v
}

// GetDeliveryMethod returns the DeliveryMethod field value if set, zero value otherwise.
func (o *ConsentDetails) GetDeliveryMethod() string {
	if o == nil || IsNil(o.DeliveryMethod) {
		var ret string
		return ret
	}
	return *o.DeliveryMethod
}

// GetDeliveryMethodOk returns a tuple with the DeliveryMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetDeliveryMethodOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryMethod) {
		return nil, false
	}
	return o.DeliveryMethod, true
}

// HasDeliveryMethod returns a boolean if a field has been set.
func (o *ConsentDetails) HasDeliveryMethod() bool {
	if o != nil && !IsNil(o.DeliveryMethod) {
		return true
	}

	return false
}

// SetDeliveryMethod gets a reference to the given string and assigns it to the DeliveryMethod field.
func (o *ConsentDetails) SetDeliveryMethod(v string) {
	o.DeliveryMethod = &v
}

// GetSignerConsentStatus returns the SignerConsentStatus field value if set, zero value otherwise.
func (o *ConsentDetails) GetSignerConsentStatus() string {
	if o == nil || IsNil(o.SignerConsentStatus) {
		var ret string
		return ret
	}
	return *o.SignerConsentStatus
}

// GetSignerConsentStatusOk returns a tuple with the SignerConsentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetSignerConsentStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SignerConsentStatus) {
		return nil, false
	}
	return o.SignerConsentStatus, true
}

// HasSignerConsentStatus returns a boolean if a field has been set.
func (o *ConsentDetails) HasSignerConsentStatus() bool {
	if o != nil && !IsNil(o.SignerConsentStatus) {
		return true
	}

	return false
}

// SetSignerConsentStatus gets a reference to the given string and assigns it to the SignerConsentStatus field.
func (o *ConsentDetails) SetSignerConsentStatus(v string) {
	o.SignerConsentStatus = &v
}

func (o ConsentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsentKey) {
		toSerialize["consentKey"] = o.ConsentKey
	}
	if !IsNil(o.DeliveryMethod) {
		toSerialize["deliveryMethod"] = o.DeliveryMethod
	}
	if !IsNil(o.SignerConsentStatus) {
		toSerialize["signerConsentStatus"] = o.SignerConsentStatus
	}
	return toSerialize, nil
}

type NullableConsentDetails struct {
	value *ConsentDetails
	isSet bool
}

func (v NullableConsentDetails) Get() *ConsentDetails {
	return v.value
}

func (v *NullableConsentDetails) Set(val *ConsentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentDetails(val *ConsentDetails) *NullableConsentDetails {
	return &NullableConsentDetails{value: val, isSet: true}
}

func (v NullableConsentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


