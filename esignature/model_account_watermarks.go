/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountWatermarks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountWatermarks{}

// AccountWatermarks 
type AccountWatermarks struct {
	// 
	DisplayAngle *string `json:"displayAngle,omitempty"`
	// 
	Enabled *string `json:"enabled,omitempty"`
	// The font to be used for the tab value. Supported fonts include:  - Default - Arial - ArialNarrow - Calibri - CourierNew - Garamond - Georgia - Helvetica - LucidaConsole - MSGothic - MSMincho - OCR-A - Tahoma - TimesNewRoman - Trebuchet - Verdana 
	Font *string `json:"font,omitempty"`
	// The font color to use for the information in the tab. Possible values are:   - Black - BrightBlue - BrightRed - DarkGreen - DarkRed - Gold - Green - NavyBlue - Purple - White 
	FontColor *string `json:"fontColor,omitempty"`
	// The font size used for the information in the tab. Possible values are:  - Size7 - Size8 - Size9 - Size10 - Size11 - Size12 - Size14 - Size16 - Size18 - Size20 - Size22 - Size24 - Size26 - Size28 - Size36 - Size48 - Size72
	FontSize *string `json:"fontSize,omitempty"`
	// A unique ID for the Salesforce object.
	Id *string `json:"id,omitempty"`
	// 
	ImageBase64 *string `json:"imageBase64,omitempty"`
	// 
	Transparency *string `json:"transparency,omitempty"`
	// 
	WatermarkText *string `json:"watermarkText,omitempty"`
}

// NewAccountWatermarks instantiates a new AccountWatermarks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountWatermarks() *AccountWatermarks {
	this := AccountWatermarks{}
	return &this
}

// NewAccountWatermarksWithDefaults instantiates a new AccountWatermarks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWatermarksWithDefaults() *AccountWatermarks {
	this := AccountWatermarks{}
	return &this
}

// GetDisplayAngle returns the DisplayAngle field value if set, zero value otherwise.
func (o *AccountWatermarks) GetDisplayAngle() string {
	if o == nil || IsNil(o.DisplayAngle) {
		var ret string
		return ret
	}
	return *o.DisplayAngle
}

// GetDisplayAngleOk returns a tuple with the DisplayAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetDisplayAngleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayAngle) {
		return nil, false
	}
	return o.DisplayAngle, true
}

// HasDisplayAngle returns a boolean if a field has been set.
func (o *AccountWatermarks) HasDisplayAngle() bool {
	if o != nil && !IsNil(o.DisplayAngle) {
		return true
	}

	return false
}

// SetDisplayAngle gets a reference to the given string and assigns it to the DisplayAngle field.
func (o *AccountWatermarks) SetDisplayAngle(v string) {
	o.DisplayAngle = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AccountWatermarks) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AccountWatermarks) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *AccountWatermarks) SetEnabled(v string) {
	o.Enabled = &v
}

// GetFont returns the Font field value if set, zero value otherwise.
func (o *AccountWatermarks) GetFont() string {
	if o == nil || IsNil(o.Font) {
		var ret string
		return ret
	}
	return *o.Font
}

// GetFontOk returns a tuple with the Font field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetFontOk() (*string, bool) {
	if o == nil || IsNil(o.Font) {
		return nil, false
	}
	return o.Font, true
}

// HasFont returns a boolean if a field has been set.
func (o *AccountWatermarks) HasFont() bool {
	if o != nil && !IsNil(o.Font) {
		return true
	}

	return false
}

// SetFont gets a reference to the given string and assigns it to the Font field.
func (o *AccountWatermarks) SetFont(v string) {
	o.Font = &v
}

// GetFontColor returns the FontColor field value if set, zero value otherwise.
func (o *AccountWatermarks) GetFontColor() string {
	if o == nil || IsNil(o.FontColor) {
		var ret string
		return ret
	}
	return *o.FontColor
}

// GetFontColorOk returns a tuple with the FontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetFontColorOk() (*string, bool) {
	if o == nil || IsNil(o.FontColor) {
		return nil, false
	}
	return o.FontColor, true
}

// HasFontColor returns a boolean if a field has been set.
func (o *AccountWatermarks) HasFontColor() bool {
	if o != nil && !IsNil(o.FontColor) {
		return true
	}

	return false
}

// SetFontColor gets a reference to the given string and assigns it to the FontColor field.
func (o *AccountWatermarks) SetFontColor(v string) {
	o.FontColor = &v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *AccountWatermarks) GetFontSize() string {
	if o == nil || IsNil(o.FontSize) {
		var ret string
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetFontSizeOk() (*string, bool) {
	if o == nil || IsNil(o.FontSize) {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *AccountWatermarks) HasFontSize() bool {
	if o != nil && !IsNil(o.FontSize) {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given string and assigns it to the FontSize field.
func (o *AccountWatermarks) SetFontSize(v string) {
	o.FontSize = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountWatermarks) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountWatermarks) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccountWatermarks) SetId(v string) {
	o.Id = &v
}

// GetImageBase64 returns the ImageBase64 field value if set, zero value otherwise.
func (o *AccountWatermarks) GetImageBase64() string {
	if o == nil || IsNil(o.ImageBase64) {
		var ret string
		return ret
	}
	return *o.ImageBase64
}

// GetImageBase64Ok returns a tuple with the ImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetImageBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.ImageBase64) {
		return nil, false
	}
	return o.ImageBase64, true
}

// HasImageBase64 returns a boolean if a field has been set.
func (o *AccountWatermarks) HasImageBase64() bool {
	if o != nil && !IsNil(o.ImageBase64) {
		return true
	}

	return false
}

// SetImageBase64 gets a reference to the given string and assigns it to the ImageBase64 field.
func (o *AccountWatermarks) SetImageBase64(v string) {
	o.ImageBase64 = &v
}

// GetTransparency returns the Transparency field value if set, zero value otherwise.
func (o *AccountWatermarks) GetTransparency() string {
	if o == nil || IsNil(o.Transparency) {
		var ret string
		return ret
	}
	return *o.Transparency
}

// GetTransparencyOk returns a tuple with the Transparency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetTransparencyOk() (*string, bool) {
	if o == nil || IsNil(o.Transparency) {
		return nil, false
	}
	return o.Transparency, true
}

// HasTransparency returns a boolean if a field has been set.
func (o *AccountWatermarks) HasTransparency() bool {
	if o != nil && !IsNil(o.Transparency) {
		return true
	}

	return false
}

// SetTransparency gets a reference to the given string and assigns it to the Transparency field.
func (o *AccountWatermarks) SetTransparency(v string) {
	o.Transparency = &v
}

// GetWatermarkText returns the WatermarkText field value if set, zero value otherwise.
func (o *AccountWatermarks) GetWatermarkText() string {
	if o == nil || IsNil(o.WatermarkText) {
		var ret string
		return ret
	}
	return *o.WatermarkText
}

// GetWatermarkTextOk returns a tuple with the WatermarkText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountWatermarks) GetWatermarkTextOk() (*string, bool) {
	if o == nil || IsNil(o.WatermarkText) {
		return nil, false
	}
	return o.WatermarkText, true
}

// HasWatermarkText returns a boolean if a field has been set.
func (o *AccountWatermarks) HasWatermarkText() bool {
	if o != nil && !IsNil(o.WatermarkText) {
		return true
	}

	return false
}

// SetWatermarkText gets a reference to the given string and assigns it to the WatermarkText field.
func (o *AccountWatermarks) SetWatermarkText(v string) {
	o.WatermarkText = &v
}

func (o AccountWatermarks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountWatermarks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayAngle) {
		toSerialize["displayAngle"] = o.DisplayAngle
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Font) {
		toSerialize["font"] = o.Font
	}
	if !IsNil(o.FontColor) {
		toSerialize["fontColor"] = o.FontColor
	}
	if !IsNil(o.FontSize) {
		toSerialize["fontSize"] = o.FontSize
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ImageBase64) {
		toSerialize["imageBase64"] = o.ImageBase64
	}
	if !IsNil(o.Transparency) {
		toSerialize["transparency"] = o.Transparency
	}
	if !IsNil(o.WatermarkText) {
		toSerialize["watermarkText"] = o.WatermarkText
	}
	return toSerialize, nil
}

type NullableAccountWatermarks struct {
	value *AccountWatermarks
	isSet bool
}

func (v NullableAccountWatermarks) Get() *AccountWatermarks {
	return v.value
}

func (v *NullableAccountWatermarks) Set(val *AccountWatermarks) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountWatermarks) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountWatermarks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountWatermarks(val *AccountWatermarks) *NullableAccountWatermarks {
	return &NullableAccountWatermarks{value: val, isSet: true}
}

func (v NullableAccountWatermarks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountWatermarks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


