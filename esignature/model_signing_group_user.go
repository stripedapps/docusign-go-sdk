/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SigningGroupUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SigningGroupUser{}

// SigningGroupUser 
type SigningGroupUser struct {
	// 
	Email *string `json:"email,omitempty"`
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
	// The name of the group member.   Maximum Length: 100 characters. 
	UserName *string `json:"userName,omitempty"`
}

// NewSigningGroupUser instantiates a new SigningGroupUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigningGroupUser() *SigningGroupUser {
	this := SigningGroupUser{}
	return &this
}

// NewSigningGroupUserWithDefaults instantiates a new SigningGroupUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigningGroupUserWithDefaults() *SigningGroupUser {
	this := SigningGroupUser{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SigningGroupUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroupUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SigningGroupUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SigningGroupUser) SetEmail(v string) {
	o.Email = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *SigningGroupUser) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroupUser) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *SigningGroupUser) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *SigningGroupUser) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SigningGroupUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningGroupUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SigningGroupUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SigningGroupUser) SetUserName(v string) {
	o.UserName = &v
}

func (o SigningGroupUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SigningGroupUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableSigningGroupUser struct {
	value *SigningGroupUser
	isSet bool
}

func (v NullableSigningGroupUser) Get() *SigningGroupUser {
	return v.value
}

func (v *NullableSigningGroupUser) Set(val *SigningGroupUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSigningGroupUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSigningGroupUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigningGroupUser(val *SigningGroupUser) *NullableSigningGroupUser {
	return &NullableSigningGroupUser{value: val, isSet: true}
}

func (v NullableSigningGroupUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigningGroupUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


