/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BillingCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingCharge{}

// BillingCharge Contains information about a billing charge.
type BillingCharge struct {
	// Reserved for DocuSign.
	AllowedQuantity *string `json:"allowedQuantity,omitempty"`
	// Reserved for DocuSign.
	Blocked *string `json:"blocked,omitempty"`
	// Provides information on what services the charge item is for.  The following table provides a description of the different chargeName values available at this time.  | chargeName | Description | | --- | --- | | id_check | ID Check Charge | | in_person_signing | In Person Signing charge | | envelopes Included | Sent Envelopes for the account | | age_verify | Age verification check | | ofac | OFAC Check | | id_confirm | ID confirmation check | | student_authentication | STAN PIN authentication check | | wet_sign_fax | Pages for returning signed documents by fax | | attachment_fax | Pages for returning attachments by fax | | phone_authentication | Phone authentication charge | | powerforms | PowerForm envelopes sent | | signer_payments | Payment processing charge | | outbound_fax | Send by fax charge | | bulk_recipient_envelopes | Bulk Recipient Envelopes sent | | sms_authentications | SMS authentication charge | | saml_authentications | SAML authentication charge | | express_signer_certificate | DocuSign Express Certificate charge | | personal_signer_certificate | Personal Signer Certificate charge | | safe_certificate | SAFE BioPharma Signer Certificate charge | | seats | Included active seats charge | | open_trust_certificate | OpenTrust Signer Certificate charge |
	ChargeName *string `json:"chargeName,omitempty"`
	// Reserved for DocuSign.
	ChargeType *string `json:"chargeType,omitempty"`
	// Reserved for DocuSign.
	ChargeUnitOfMeasure *string `json:"chargeUnitOfMeasure,omitempty"`
	// 
	Discounts []BillingDiscount `json:"discounts,omitempty"`
	// 
	FirstEffectiveDate *string `json:"firstEffectiveDate,omitempty"`
	// 
	IncludedQuantity *string `json:"includedQuantity,omitempty"`
	// Reserved for DocuSign.
	IncrementalQuantity *string `json:"incrementalQuantity,omitempty"`
	// 
	LastEffectiveDate *string `json:"lastEffectiveDate,omitempty"`
	// 
	Prices []BillingPrice `json:"prices,omitempty"`
	// Reserved for DocuSign.
	UnitPrice *string `json:"unitPrice,omitempty"`
	// 
	UsedQuantity *string `json:"usedQuantity,omitempty"`
}

// NewBillingCharge instantiates a new BillingCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingCharge() *BillingCharge {
	this := BillingCharge{}
	return &this
}

// NewBillingChargeWithDefaults instantiates a new BillingCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingChargeWithDefaults() *BillingCharge {
	this := BillingCharge{}
	return &this
}

// GetAllowedQuantity returns the AllowedQuantity field value if set, zero value otherwise.
func (o *BillingCharge) GetAllowedQuantity() string {
	if o == nil || IsNil(o.AllowedQuantity) {
		var ret string
		return ret
	}
	return *o.AllowedQuantity
}

// GetAllowedQuantityOk returns a tuple with the AllowedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetAllowedQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedQuantity) {
		return nil, false
	}
	return o.AllowedQuantity, true
}

// HasAllowedQuantity returns a boolean if a field has been set.
func (o *BillingCharge) HasAllowedQuantity() bool {
	if o != nil && !IsNil(o.AllowedQuantity) {
		return true
	}

	return false
}

// SetAllowedQuantity gets a reference to the given string and assigns it to the AllowedQuantity field.
func (o *BillingCharge) SetAllowedQuantity(v string) {
	o.AllowedQuantity = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *BillingCharge) GetBlocked() string {
	if o == nil || IsNil(o.Blocked) {
		var ret string
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetBlockedOk() (*string, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *BillingCharge) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given string and assigns it to the Blocked field.
func (o *BillingCharge) SetBlocked(v string) {
	o.Blocked = &v
}

// GetChargeName returns the ChargeName field value if set, zero value otherwise.
func (o *BillingCharge) GetChargeName() string {
	if o == nil || IsNil(o.ChargeName) {
		var ret string
		return ret
	}
	return *o.ChargeName
}

// GetChargeNameOk returns a tuple with the ChargeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetChargeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeName) {
		return nil, false
	}
	return o.ChargeName, true
}

// HasChargeName returns a boolean if a field has been set.
func (o *BillingCharge) HasChargeName() bool {
	if o != nil && !IsNil(o.ChargeName) {
		return true
	}

	return false
}

// SetChargeName gets a reference to the given string and assigns it to the ChargeName field.
func (o *BillingCharge) SetChargeName(v string) {
	o.ChargeName = &v
}

// GetChargeType returns the ChargeType field value if set, zero value otherwise.
func (o *BillingCharge) GetChargeType() string {
	if o == nil || IsNil(o.ChargeType) {
		var ret string
		return ret
	}
	return *o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetChargeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeType) {
		return nil, false
	}
	return o.ChargeType, true
}

// HasChargeType returns a boolean if a field has been set.
func (o *BillingCharge) HasChargeType() bool {
	if o != nil && !IsNil(o.ChargeType) {
		return true
	}

	return false
}

// SetChargeType gets a reference to the given string and assigns it to the ChargeType field.
func (o *BillingCharge) SetChargeType(v string) {
	o.ChargeType = &v
}

// GetChargeUnitOfMeasure returns the ChargeUnitOfMeasure field value if set, zero value otherwise.
func (o *BillingCharge) GetChargeUnitOfMeasure() string {
	if o == nil || IsNil(o.ChargeUnitOfMeasure) {
		var ret string
		return ret
	}
	return *o.ChargeUnitOfMeasure
}

// GetChargeUnitOfMeasureOk returns a tuple with the ChargeUnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetChargeUnitOfMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeUnitOfMeasure) {
		return nil, false
	}
	return o.ChargeUnitOfMeasure, true
}

// HasChargeUnitOfMeasure returns a boolean if a field has been set.
func (o *BillingCharge) HasChargeUnitOfMeasure() bool {
	if o != nil && !IsNil(o.ChargeUnitOfMeasure) {
		return true
	}

	return false
}

// SetChargeUnitOfMeasure gets a reference to the given string and assigns it to the ChargeUnitOfMeasure field.
func (o *BillingCharge) SetChargeUnitOfMeasure(v string) {
	o.ChargeUnitOfMeasure = &v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *BillingCharge) GetDiscounts() []BillingDiscount {
	if o == nil || IsNil(o.Discounts) {
		var ret []BillingDiscount
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetDiscountsOk() ([]BillingDiscount, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *BillingCharge) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []BillingDiscount and assigns it to the Discounts field.
func (o *BillingCharge) SetDiscounts(v []BillingDiscount) {
	o.Discounts = v
}

// GetFirstEffectiveDate returns the FirstEffectiveDate field value if set, zero value otherwise.
func (o *BillingCharge) GetFirstEffectiveDate() string {
	if o == nil || IsNil(o.FirstEffectiveDate) {
		var ret string
		return ret
	}
	return *o.FirstEffectiveDate
}

// GetFirstEffectiveDateOk returns a tuple with the FirstEffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetFirstEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.FirstEffectiveDate) {
		return nil, false
	}
	return o.FirstEffectiveDate, true
}

// HasFirstEffectiveDate returns a boolean if a field has been set.
func (o *BillingCharge) HasFirstEffectiveDate() bool {
	if o != nil && !IsNil(o.FirstEffectiveDate) {
		return true
	}

	return false
}

// SetFirstEffectiveDate gets a reference to the given string and assigns it to the FirstEffectiveDate field.
func (o *BillingCharge) SetFirstEffectiveDate(v string) {
	o.FirstEffectiveDate = &v
}

// GetIncludedQuantity returns the IncludedQuantity field value if set, zero value otherwise.
func (o *BillingCharge) GetIncludedQuantity() string {
	if o == nil || IsNil(o.IncludedQuantity) {
		var ret string
		return ret
	}
	return *o.IncludedQuantity
}

// GetIncludedQuantityOk returns a tuple with the IncludedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetIncludedQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.IncludedQuantity) {
		return nil, false
	}
	return o.IncludedQuantity, true
}

// HasIncludedQuantity returns a boolean if a field has been set.
func (o *BillingCharge) HasIncludedQuantity() bool {
	if o != nil && !IsNil(o.IncludedQuantity) {
		return true
	}

	return false
}

// SetIncludedQuantity gets a reference to the given string and assigns it to the IncludedQuantity field.
func (o *BillingCharge) SetIncludedQuantity(v string) {
	o.IncludedQuantity = &v
}

// GetIncrementalQuantity returns the IncrementalQuantity field value if set, zero value otherwise.
func (o *BillingCharge) GetIncrementalQuantity() string {
	if o == nil || IsNil(o.IncrementalQuantity) {
		var ret string
		return ret
	}
	return *o.IncrementalQuantity
}

// GetIncrementalQuantityOk returns a tuple with the IncrementalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetIncrementalQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.IncrementalQuantity) {
		return nil, false
	}
	return o.IncrementalQuantity, true
}

// HasIncrementalQuantity returns a boolean if a field has been set.
func (o *BillingCharge) HasIncrementalQuantity() bool {
	if o != nil && !IsNil(o.IncrementalQuantity) {
		return true
	}

	return false
}

// SetIncrementalQuantity gets a reference to the given string and assigns it to the IncrementalQuantity field.
func (o *BillingCharge) SetIncrementalQuantity(v string) {
	o.IncrementalQuantity = &v
}

// GetLastEffectiveDate returns the LastEffectiveDate field value if set, zero value otherwise.
func (o *BillingCharge) GetLastEffectiveDate() string {
	if o == nil || IsNil(o.LastEffectiveDate) {
		var ret string
		return ret
	}
	return *o.LastEffectiveDate
}

// GetLastEffectiveDateOk returns a tuple with the LastEffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetLastEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastEffectiveDate) {
		return nil, false
	}
	return o.LastEffectiveDate, true
}

// HasLastEffectiveDate returns a boolean if a field has been set.
func (o *BillingCharge) HasLastEffectiveDate() bool {
	if o != nil && !IsNil(o.LastEffectiveDate) {
		return true
	}

	return false
}

// SetLastEffectiveDate gets a reference to the given string and assigns it to the LastEffectiveDate field.
func (o *BillingCharge) SetLastEffectiveDate(v string) {
	o.LastEffectiveDate = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *BillingCharge) GetPrices() []BillingPrice {
	if o == nil || IsNil(o.Prices) {
		var ret []BillingPrice
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetPricesOk() ([]BillingPrice, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *BillingCharge) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []BillingPrice and assigns it to the Prices field.
func (o *BillingCharge) SetPrices(v []BillingPrice) {
	o.Prices = v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *BillingCharge) GetUnitPrice() string {
	if o == nil || IsNil(o.UnitPrice) {
		var ret string
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetUnitPriceOk() (*string, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *BillingCharge) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given string and assigns it to the UnitPrice field.
func (o *BillingCharge) SetUnitPrice(v string) {
	o.UnitPrice = &v
}

// GetUsedQuantity returns the UsedQuantity field value if set, zero value otherwise.
func (o *BillingCharge) GetUsedQuantity() string {
	if o == nil || IsNil(o.UsedQuantity) {
		var ret string
		return ret
	}
	return *o.UsedQuantity
}

// GetUsedQuantityOk returns a tuple with the UsedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCharge) GetUsedQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.UsedQuantity) {
		return nil, false
	}
	return o.UsedQuantity, true
}

// HasUsedQuantity returns a boolean if a field has been set.
func (o *BillingCharge) HasUsedQuantity() bool {
	if o != nil && !IsNil(o.UsedQuantity) {
		return true
	}

	return false
}

// SetUsedQuantity gets a reference to the given string and assigns it to the UsedQuantity field.
func (o *BillingCharge) SetUsedQuantity(v string) {
	o.UsedQuantity = &v
}

func (o BillingCharge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedQuantity) {
		toSerialize["allowedQuantity"] = o.AllowedQuantity
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.ChargeName) {
		toSerialize["chargeName"] = o.ChargeName
	}
	if !IsNil(o.ChargeType) {
		toSerialize["chargeType"] = o.ChargeType
	}
	if !IsNil(o.ChargeUnitOfMeasure) {
		toSerialize["chargeUnitOfMeasure"] = o.ChargeUnitOfMeasure
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.FirstEffectiveDate) {
		toSerialize["firstEffectiveDate"] = o.FirstEffectiveDate
	}
	if !IsNil(o.IncludedQuantity) {
		toSerialize["includedQuantity"] = o.IncludedQuantity
	}
	if !IsNil(o.IncrementalQuantity) {
		toSerialize["incrementalQuantity"] = o.IncrementalQuantity
	}
	if !IsNil(o.LastEffectiveDate) {
		toSerialize["lastEffectiveDate"] = o.LastEffectiveDate
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.UsedQuantity) {
		toSerialize["usedQuantity"] = o.UsedQuantity
	}
	return toSerialize, nil
}

type NullableBillingCharge struct {
	value *BillingCharge
	isSet bool
}

func (v NullableBillingCharge) Get() *BillingCharge {
	return v.value
}

func (v *NullableBillingCharge) Set(val *BillingCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingCharge(val *BillingCharge) *NullableBillingCharge {
	return &NullableBillingCharge{value: val, isSet: true}
}

func (v NullableBillingCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


