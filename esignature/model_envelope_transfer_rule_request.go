/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeTransferRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeTransferRuleRequest{}

// EnvelopeTransferRuleRequest This object contains details about the envelope transfer rule that you want to create.
type EnvelopeTransferRuleRequest struct {
	// When **true,** the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false.**
	CarbonCopyOriginalOwner *string `json:"carbonCopyOriginalOwner,omitempty"`
	// When **true,** the envelope transfer rule is active.
	Enabled *string `json:"enabled,omitempty"`
	// The ID of the envelope transfer rule. The system generates this ID when the rule is first created.
	EnvelopeTransferRuleId *string `json:"envelopeTransferRuleId,omitempty"`
	// The type of envelope event that triggers the transfer. Valid values are:  - `sent` - `before sent`  - `completed`
	EventType *string `json:"eventType,omitempty"`
	// Information about the group that triggers the transfer.
	FromGroups []Group `json:"fromGroups,omitempty"`
	// Information about the user who triggers the transfer.
	FromUsers []UserInformation `json:"fromUsers,omitempty"`
	// The UTC DateTime when the envelope transfer rule was last modified. This property is read-only.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	ModifiedUser *UserInformation `json:"modifiedUser,omitempty"`
	ToFolder *Folder `json:"toFolder,omitempty"`
	ToUser *UserInformation `json:"toUser,omitempty"`
}

// NewEnvelopeTransferRuleRequest instantiates a new EnvelopeTransferRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeTransferRuleRequest() *EnvelopeTransferRuleRequest {
	this := EnvelopeTransferRuleRequest{}
	return &this
}

// NewEnvelopeTransferRuleRequestWithDefaults instantiates a new EnvelopeTransferRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeTransferRuleRequestWithDefaults() *EnvelopeTransferRuleRequest {
	this := EnvelopeTransferRuleRequest{}
	return &this
}

// GetCarbonCopyOriginalOwner returns the CarbonCopyOriginalOwner field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetCarbonCopyOriginalOwner() string {
	if o == nil || IsNil(o.CarbonCopyOriginalOwner) {
		var ret string
		return ret
	}
	return *o.CarbonCopyOriginalOwner
}

// GetCarbonCopyOriginalOwnerOk returns a tuple with the CarbonCopyOriginalOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetCarbonCopyOriginalOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.CarbonCopyOriginalOwner) {
		return nil, false
	}
	return o.CarbonCopyOriginalOwner, true
}

// HasCarbonCopyOriginalOwner returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasCarbonCopyOriginalOwner() bool {
	if o != nil && !IsNil(o.CarbonCopyOriginalOwner) {
		return true
	}

	return false
}

// SetCarbonCopyOriginalOwner gets a reference to the given string and assigns it to the CarbonCopyOriginalOwner field.
func (o *EnvelopeTransferRuleRequest) SetCarbonCopyOriginalOwner(v string) {
	o.CarbonCopyOriginalOwner = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *EnvelopeTransferRuleRequest) SetEnabled(v string) {
	o.Enabled = &v
}

// GetEnvelopeTransferRuleId returns the EnvelopeTransferRuleId field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetEnvelopeTransferRuleId() string {
	if o == nil || IsNil(o.EnvelopeTransferRuleId) {
		var ret string
		return ret
	}
	return *o.EnvelopeTransferRuleId
}

// GetEnvelopeTransferRuleIdOk returns a tuple with the EnvelopeTransferRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetEnvelopeTransferRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeTransferRuleId) {
		return nil, false
	}
	return o.EnvelopeTransferRuleId, true
}

// HasEnvelopeTransferRuleId returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasEnvelopeTransferRuleId() bool {
	if o != nil && !IsNil(o.EnvelopeTransferRuleId) {
		return true
	}

	return false
}

// SetEnvelopeTransferRuleId gets a reference to the given string and assigns it to the EnvelopeTransferRuleId field.
func (o *EnvelopeTransferRuleRequest) SetEnvelopeTransferRuleId(v string) {
	o.EnvelopeTransferRuleId = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EnvelopeTransferRuleRequest) SetEventType(v string) {
	o.EventType = &v
}

// GetFromGroups returns the FromGroups field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetFromGroups() []Group {
	if o == nil || IsNil(o.FromGroups) {
		var ret []Group
		return ret
	}
	return o.FromGroups
}

// GetFromGroupsOk returns a tuple with the FromGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetFromGroupsOk() ([]Group, bool) {
	if o == nil || IsNil(o.FromGroups) {
		return nil, false
	}
	return o.FromGroups, true
}

// HasFromGroups returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasFromGroups() bool {
	if o != nil && !IsNil(o.FromGroups) {
		return true
	}

	return false
}

// SetFromGroups gets a reference to the given []Group and assigns it to the FromGroups field.
func (o *EnvelopeTransferRuleRequest) SetFromGroups(v []Group) {
	o.FromGroups = v
}

// GetFromUsers returns the FromUsers field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetFromUsers() []UserInformation {
	if o == nil || IsNil(o.FromUsers) {
		var ret []UserInformation
		return ret
	}
	return o.FromUsers
}

// GetFromUsersOk returns a tuple with the FromUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetFromUsersOk() ([]UserInformation, bool) {
	if o == nil || IsNil(o.FromUsers) {
		return nil, false
	}
	return o.FromUsers, true
}

// HasFromUsers returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasFromUsers() bool {
	if o != nil && !IsNil(o.FromUsers) {
		return true
	}

	return false
}

// SetFromUsers gets a reference to the given []UserInformation and assigns it to the FromUsers field.
func (o *EnvelopeTransferRuleRequest) SetFromUsers(v []UserInformation) {
	o.FromUsers = v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetModifiedDate() string {
	if o == nil || IsNil(o.ModifiedDate) {
		var ret string
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetModifiedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasModifiedDate() bool {
	if o != nil && !IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given string and assigns it to the ModifiedDate field.
func (o *EnvelopeTransferRuleRequest) SetModifiedDate(v string) {
	o.ModifiedDate = &v
}

// GetModifiedUser returns the ModifiedUser field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetModifiedUser() UserInformation {
	if o == nil || IsNil(o.ModifiedUser) {
		var ret UserInformation
		return ret
	}
	return *o.ModifiedUser
}

// GetModifiedUserOk returns a tuple with the ModifiedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetModifiedUserOk() (*UserInformation, bool) {
	if o == nil || IsNil(o.ModifiedUser) {
		return nil, false
	}
	return o.ModifiedUser, true
}

// HasModifiedUser returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasModifiedUser() bool {
	if o != nil && !IsNil(o.ModifiedUser) {
		return true
	}

	return false
}

// SetModifiedUser gets a reference to the given UserInformation and assigns it to the ModifiedUser field.
func (o *EnvelopeTransferRuleRequest) SetModifiedUser(v UserInformation) {
	o.ModifiedUser = &v
}

// GetToFolder returns the ToFolder field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetToFolder() Folder {
	if o == nil || IsNil(o.ToFolder) {
		var ret Folder
		return ret
	}
	return *o.ToFolder
}

// GetToFolderOk returns a tuple with the ToFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetToFolderOk() (*Folder, bool) {
	if o == nil || IsNil(o.ToFolder) {
		return nil, false
	}
	return o.ToFolder, true
}

// HasToFolder returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasToFolder() bool {
	if o != nil && !IsNil(o.ToFolder) {
		return true
	}

	return false
}

// SetToFolder gets a reference to the given Folder and assigns it to the ToFolder field.
func (o *EnvelopeTransferRuleRequest) SetToFolder(v Folder) {
	o.ToFolder = &v
}

// GetToUser returns the ToUser field value if set, zero value otherwise.
func (o *EnvelopeTransferRuleRequest) GetToUser() UserInformation {
	if o == nil || IsNil(o.ToUser) {
		var ret UserInformation
		return ret
	}
	return *o.ToUser
}

// GetToUserOk returns a tuple with the ToUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeTransferRuleRequest) GetToUserOk() (*UserInformation, bool) {
	if o == nil || IsNil(o.ToUser) {
		return nil, false
	}
	return o.ToUser, true
}

// HasToUser returns a boolean if a field has been set.
func (o *EnvelopeTransferRuleRequest) HasToUser() bool {
	if o != nil && !IsNil(o.ToUser) {
		return true
	}

	return false
}

// SetToUser gets a reference to the given UserInformation and assigns it to the ToUser field.
func (o *EnvelopeTransferRuleRequest) SetToUser(v UserInformation) {
	o.ToUser = &v
}

func (o EnvelopeTransferRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeTransferRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CarbonCopyOriginalOwner) {
		toSerialize["carbonCopyOriginalOwner"] = o.CarbonCopyOriginalOwner
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EnvelopeTransferRuleId) {
		toSerialize["envelopeTransferRuleId"] = o.EnvelopeTransferRuleId
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.FromGroups) {
		toSerialize["fromGroups"] = o.FromGroups
	}
	if !IsNil(o.FromUsers) {
		toSerialize["fromUsers"] = o.FromUsers
	}
	if !IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !IsNil(o.ModifiedUser) {
		toSerialize["modifiedUser"] = o.ModifiedUser
	}
	if !IsNil(o.ToFolder) {
		toSerialize["toFolder"] = o.ToFolder
	}
	if !IsNil(o.ToUser) {
		toSerialize["toUser"] = o.ToUser
	}
	return toSerialize, nil
}

type NullableEnvelopeTransferRuleRequest struct {
	value *EnvelopeTransferRuleRequest
	isSet bool
}

func (v NullableEnvelopeTransferRuleRequest) Get() *EnvelopeTransferRuleRequest {
	return v.value
}

func (v *NullableEnvelopeTransferRuleRequest) Set(val *EnvelopeTransferRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeTransferRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeTransferRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeTransferRuleRequest(val *EnvelopeTransferRuleRequest) *NullableEnvelopeTransferRuleRequest {
	return &NullableEnvelopeTransferRuleRequest{value: val, isSet: true}
}

func (v NullableEnvelopeTransferRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeTransferRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


