/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WorkspaceSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkspaceSettings{}

// WorkspaceSettings This object provides information about the settings for the workspace.
type WorkspaceSettings struct {
	// When **true,** commenting on the documents in the workspace is allowed.
	CommentsAllowed *string `json:"commentsAllowed,omitempty"`
}

// NewWorkspaceSettings instantiates a new WorkspaceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspaceSettings() *WorkspaceSettings {
	this := WorkspaceSettings{}
	return &this
}

// NewWorkspaceSettingsWithDefaults instantiates a new WorkspaceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspaceSettingsWithDefaults() *WorkspaceSettings {
	this := WorkspaceSettings{}
	return &this
}

// GetCommentsAllowed returns the CommentsAllowed field value if set, zero value otherwise.
func (o *WorkspaceSettings) GetCommentsAllowed() string {
	if o == nil || IsNil(o.CommentsAllowed) {
		var ret string
		return ret
	}
	return *o.CommentsAllowed
}

// GetCommentsAllowedOk returns a tuple with the CommentsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceSettings) GetCommentsAllowedOk() (*string, bool) {
	if o == nil || IsNil(o.CommentsAllowed) {
		return nil, false
	}
	return o.CommentsAllowed, true
}

// HasCommentsAllowed returns a boolean if a field has been set.
func (o *WorkspaceSettings) HasCommentsAllowed() bool {
	if o != nil && !IsNil(o.CommentsAllowed) {
		return true
	}

	return false
}

// SetCommentsAllowed gets a reference to the given string and assigns it to the CommentsAllowed field.
func (o *WorkspaceSettings) SetCommentsAllowed(v string) {
	o.CommentsAllowed = &v
}

func (o WorkspaceSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkspaceSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommentsAllowed) {
		toSerialize["commentsAllowed"] = o.CommentsAllowed
	}
	return toSerialize, nil
}

type NullableWorkspaceSettings struct {
	value *WorkspaceSettings
	isSet bool
}

func (v NullableWorkspaceSettings) Get() *WorkspaceSettings {
	return v.value
}

func (v *NullableWorkspaceSettings) Set(val *WorkspaceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceSettings(val *WorkspaceSettings) *NullableWorkspaceSettings {
	return &NullableWorkspaceSettings{value: val, isSet: true}
}

func (v NullableWorkspaceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


