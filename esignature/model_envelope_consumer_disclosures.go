/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvelopeConsumerDisclosures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvelopeConsumerDisclosures{}

// EnvelopeConsumerDisclosures Details about envelope consumer disclosures.
type EnvelopeConsumerDisclosures struct {
	// The GUID of the account associated with the consumer disclosure.
	AccountEsignId *string `json:"accountEsignId,omitempty"`
	// When **true,** indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false.** **Note:** Only Admin users can change this setting.
	AllowCDWithdraw *string `json:"allowCDWithdraw,omitempty"`
	AllowCDWithdrawMetadata *SettingsMetadata `json:"allowCDWithdrawMetadata,omitempty"`
	// If the customer needs to change their email address, this is the email address to which they should the change request.
	ChangeEmail *string `json:"changeEmail,omitempty"`
	// Other information about the requirements for the user to change their email address.  Example:   `We do not require any other information from you to change your email address.`
	ChangeEmailOther *string `json:"changeEmailOther,omitempty"`
	// Specifies the company name used in the disclosure. The default value is the account name.  However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true.** Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.  **Note:** This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true.** 
	CompanyName *string `json:"companyName,omitempty"`
	// The phone number of the company associated with the consumer disclosure, as a free-formatted string.
	CompanyPhone *string `json:"companyPhone,omitempty"`
	// The cost per page if the customer requests paper copies.  Example:   `0.0000`
	CopyCostPerPage *string `json:"copyCostPerPage,omitempty"`
	// Specifies the fee collection method for cases in which the customer requires paper copies of the document.  Maximum length: 255 characters.  Example:   `We will bill you for any fees at that time, if any.`
	CopyFeeCollectionMethod *string `json:"copyFeeCollectionMethod,omitempty"`
	// The email address to which the customer should send a request for copies of a document.  Maximum length: 100 characters.
	CopyRequestEmail *string `json:"copyRequestEmail,omitempty"`
	// When **true,** indicates that the consumer disclosure is a custom disclosure. The default is **false.**
	Custom *string `json:"custom,omitempty"`
	// When **true** (default), indicates that eSign is enabled.
	EnableEsign *string `json:"enableEsign,omitempty"`
	// The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics. It also includes the HTML tags used for formatting.
	EsignAgreement *string `json:"esignAgreement,omitempty"`
	// The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.  **Note:** If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
	EsignText *string `json:"esignText,omitempty"`
	// The simple type enumeration for the language to use when displaying the disclosure. The following languages are supported:  - Arabic (`ar`) - Bulgarian (`bg`) - Czech (`cs`) - Chinese Simplified (`zh_CN`) - Chinese Traditional (`zh_TW`) - Croatian (`hr`) - Danish (`da`) - Dutch (`nl`) - English US (`en`) - English UK (`en_GB`) - Estonian (`et`) - Farsi (`fa`) - Finnish (`fi`) - French (`fr`) - French Canadian (`fr_CA`) - German (`de`) - Greek (`el`) - Hebrew (`he`) - Hindi (`hi`) - Hungarian (`hu`) - Bahasa Indonesian (`id`) - Italian (`it`) - Japanese (`ja`) - Korean (`ko`) - Latvian (`lv`) - Lithuanian (`lt`) - Bahasa Melayu (`ms`) - Norwegian (`no`) - Polish (`pl`) - Portuguese (`pt`) - Portuguese Brazil (`pt_BR`) - Romanian (`ro`) - Russian (`ru`) - Serbian (`sr`) - Slovak (`sk`) - Slovenian (`sl`) - Spanish (`es`) - Spanish Latin America (`es_MX`) - Swedish (`sv`) - Thai (`th`) - Turkish (`tr`) - Ukrainian (`uk`)  - Vietnamese (`vi`)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
	LanguageCode *string `json:"languageCode,omitempty"`
	// When **true,** the  recipient must agree to the consumer disclosure. The value of this property is read-only. It is calculated based on the account setting `consumerDisclosureFrequency` and the user's actions.
	MustAgreeToEsign *string `json:"mustAgreeToEsign,omitempty"`
	// **Deprecated.**   The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored. 
	PdfId *string `json:"pdfId,omitempty"`
	// When **true,** specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a signing brand with a specified company name, that value is used in email notifications and in the signing experience.    When **false** (default), or if the signing brand does not specify a company name, the account name is used instead.  **Note:** This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. 
	UseBrand *string `json:"useBrand,omitempty"`
	// When **true,** specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
	UseConsumerDisclosureWithinAccount *string `json:"useConsumerDisclosureWithinAccount,omitempty"`
	UseConsumerDisclosureWithinAccountMetadata *SettingsMetadata `json:"useConsumerDisclosureWithinAccountMetadata,omitempty"`
	// Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. 
	WithdrawAddressLine1 *string `json:"withdrawAddressLine1,omitempty"`
	// Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. 
	WithdrawAddressLine2 *string `json:"withdrawAddressLine2,omitempty"`
	// When **true** (default), indicates that the customer can withdraw consent by email.
	WithdrawByEmail *string `json:"withdrawByEmail,omitempty"`
	// When **true,** indicates that the customer can withdraw consent by postal mail. The default is **false.**
	WithdrawByMail *string `json:"withdrawByMail,omitempty"`
	// When **true,** indicates that the customer can withdraw consent by phone. The default is **false.**
	WithdrawByPhone *string `json:"withdrawByPhone,omitempty"`
	// Contains the city of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 50 characters. 
	WithdrawCity *string `json:"withdrawCity,omitempty"`
	// Text indicating the consequences of withdrawing consent.  Maximum length: 255 characters.
	WithdrawConsequences *string `json:"withdrawConsequences,omitempty"`
	// Contains the email address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. 
	WithdrawEmail *string `json:"withdrawEmail,omitempty"`
	// Contains any other information needed to withdraw consent.  Maximum length: 255 characters.  Example:  `We do not need any other information from you to withdraw consent.`
	WithdrawOther *string `json:"withdrawOther,omitempty"`
	// Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.  Maximum length: 20 characters. 
	WithdrawPhone *string `json:"withdrawPhone,omitempty"`
	// Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 20 characters. 
	WithdrawPostalCode *string `json:"withdrawPostalCode,omitempty"`
	// Contains the state of the postal address to which a customer can send a consent withdrawal notification.  Example: `PA`
	WithdrawState *string `json:"withdrawState,omitempty"`
}

// NewEnvelopeConsumerDisclosures instantiates a new EnvelopeConsumerDisclosures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvelopeConsumerDisclosures() *EnvelopeConsumerDisclosures {
	this := EnvelopeConsumerDisclosures{}
	return &this
}

// NewEnvelopeConsumerDisclosuresWithDefaults instantiates a new EnvelopeConsumerDisclosures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvelopeConsumerDisclosuresWithDefaults() *EnvelopeConsumerDisclosures {
	this := EnvelopeConsumerDisclosures{}
	return &this
}

// GetAccountEsignId returns the AccountEsignId field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetAccountEsignId() string {
	if o == nil || IsNil(o.AccountEsignId) {
		var ret string
		return ret
	}
	return *o.AccountEsignId
}

// GetAccountEsignIdOk returns a tuple with the AccountEsignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetAccountEsignIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountEsignId) {
		return nil, false
	}
	return o.AccountEsignId, true
}

// HasAccountEsignId returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasAccountEsignId() bool {
	if o != nil && !IsNil(o.AccountEsignId) {
		return true
	}

	return false
}

// SetAccountEsignId gets a reference to the given string and assigns it to the AccountEsignId field.
func (o *EnvelopeConsumerDisclosures) SetAccountEsignId(v string) {
	o.AccountEsignId = &v
}

// GetAllowCDWithdraw returns the AllowCDWithdraw field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetAllowCDWithdraw() string {
	if o == nil || IsNil(o.AllowCDWithdraw) {
		var ret string
		return ret
	}
	return *o.AllowCDWithdraw
}

// GetAllowCDWithdrawOk returns a tuple with the AllowCDWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetAllowCDWithdrawOk() (*string, bool) {
	if o == nil || IsNil(o.AllowCDWithdraw) {
		return nil, false
	}
	return o.AllowCDWithdraw, true
}

// HasAllowCDWithdraw returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasAllowCDWithdraw() bool {
	if o != nil && !IsNil(o.AllowCDWithdraw) {
		return true
	}

	return false
}

// SetAllowCDWithdraw gets a reference to the given string and assigns it to the AllowCDWithdraw field.
func (o *EnvelopeConsumerDisclosures) SetAllowCDWithdraw(v string) {
	o.AllowCDWithdraw = &v
}

// GetAllowCDWithdrawMetadata returns the AllowCDWithdrawMetadata field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetAllowCDWithdrawMetadata() SettingsMetadata {
	if o == nil || IsNil(o.AllowCDWithdrawMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.AllowCDWithdrawMetadata
}

// GetAllowCDWithdrawMetadataOk returns a tuple with the AllowCDWithdrawMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetAllowCDWithdrawMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.AllowCDWithdrawMetadata) {
		return nil, false
	}
	return o.AllowCDWithdrawMetadata, true
}

// HasAllowCDWithdrawMetadata returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasAllowCDWithdrawMetadata() bool {
	if o != nil && !IsNil(o.AllowCDWithdrawMetadata) {
		return true
	}

	return false
}

// SetAllowCDWithdrawMetadata gets a reference to the given SettingsMetadata and assigns it to the AllowCDWithdrawMetadata field.
func (o *EnvelopeConsumerDisclosures) SetAllowCDWithdrawMetadata(v SettingsMetadata) {
	o.AllowCDWithdrawMetadata = &v
}

// GetChangeEmail returns the ChangeEmail field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetChangeEmail() string {
	if o == nil || IsNil(o.ChangeEmail) {
		var ret string
		return ret
	}
	return *o.ChangeEmail
}

// GetChangeEmailOk returns a tuple with the ChangeEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetChangeEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeEmail) {
		return nil, false
	}
	return o.ChangeEmail, true
}

// HasChangeEmail returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasChangeEmail() bool {
	if o != nil && !IsNil(o.ChangeEmail) {
		return true
	}

	return false
}

// SetChangeEmail gets a reference to the given string and assigns it to the ChangeEmail field.
func (o *EnvelopeConsumerDisclosures) SetChangeEmail(v string) {
	o.ChangeEmail = &v
}

// GetChangeEmailOther returns the ChangeEmailOther field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetChangeEmailOther() string {
	if o == nil || IsNil(o.ChangeEmailOther) {
		var ret string
		return ret
	}
	return *o.ChangeEmailOther
}

// GetChangeEmailOtherOk returns a tuple with the ChangeEmailOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetChangeEmailOtherOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeEmailOther) {
		return nil, false
	}
	return o.ChangeEmailOther, true
}

// HasChangeEmailOther returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasChangeEmailOther() bool {
	if o != nil && !IsNil(o.ChangeEmailOther) {
		return true
	}

	return false
}

// SetChangeEmailOther gets a reference to the given string and assigns it to the ChangeEmailOther field.
func (o *EnvelopeConsumerDisclosures) SetChangeEmailOther(v string) {
	o.ChangeEmailOther = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *EnvelopeConsumerDisclosures) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetCompanyPhone returns the CompanyPhone field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetCompanyPhone() string {
	if o == nil || IsNil(o.CompanyPhone) {
		var ret string
		return ret
	}
	return *o.CompanyPhone
}

// GetCompanyPhoneOk returns a tuple with the CompanyPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetCompanyPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyPhone) {
		return nil, false
	}
	return o.CompanyPhone, true
}

// HasCompanyPhone returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasCompanyPhone() bool {
	if o != nil && !IsNil(o.CompanyPhone) {
		return true
	}

	return false
}

// SetCompanyPhone gets a reference to the given string and assigns it to the CompanyPhone field.
func (o *EnvelopeConsumerDisclosures) SetCompanyPhone(v string) {
	o.CompanyPhone = &v
}

// GetCopyCostPerPage returns the CopyCostPerPage field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetCopyCostPerPage() string {
	if o == nil || IsNil(o.CopyCostPerPage) {
		var ret string
		return ret
	}
	return *o.CopyCostPerPage
}

// GetCopyCostPerPageOk returns a tuple with the CopyCostPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetCopyCostPerPageOk() (*string, bool) {
	if o == nil || IsNil(o.CopyCostPerPage) {
		return nil, false
	}
	return o.CopyCostPerPage, true
}

// HasCopyCostPerPage returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasCopyCostPerPage() bool {
	if o != nil && !IsNil(o.CopyCostPerPage) {
		return true
	}

	return false
}

// SetCopyCostPerPage gets a reference to the given string and assigns it to the CopyCostPerPage field.
func (o *EnvelopeConsumerDisclosures) SetCopyCostPerPage(v string) {
	o.CopyCostPerPage = &v
}

// GetCopyFeeCollectionMethod returns the CopyFeeCollectionMethod field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetCopyFeeCollectionMethod() string {
	if o == nil || IsNil(o.CopyFeeCollectionMethod) {
		var ret string
		return ret
	}
	return *o.CopyFeeCollectionMethod
}

// GetCopyFeeCollectionMethodOk returns a tuple with the CopyFeeCollectionMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetCopyFeeCollectionMethodOk() (*string, bool) {
	if o == nil || IsNil(o.CopyFeeCollectionMethod) {
		return nil, false
	}
	return o.CopyFeeCollectionMethod, true
}

// HasCopyFeeCollectionMethod returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasCopyFeeCollectionMethod() bool {
	if o != nil && !IsNil(o.CopyFeeCollectionMethod) {
		return true
	}

	return false
}

// SetCopyFeeCollectionMethod gets a reference to the given string and assigns it to the CopyFeeCollectionMethod field.
func (o *EnvelopeConsumerDisclosures) SetCopyFeeCollectionMethod(v string) {
	o.CopyFeeCollectionMethod = &v
}

// GetCopyRequestEmail returns the CopyRequestEmail field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetCopyRequestEmail() string {
	if o == nil || IsNil(o.CopyRequestEmail) {
		var ret string
		return ret
	}
	return *o.CopyRequestEmail
}

// GetCopyRequestEmailOk returns a tuple with the CopyRequestEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetCopyRequestEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CopyRequestEmail) {
		return nil, false
	}
	return o.CopyRequestEmail, true
}

// HasCopyRequestEmail returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasCopyRequestEmail() bool {
	if o != nil && !IsNil(o.CopyRequestEmail) {
		return true
	}

	return false
}

// SetCopyRequestEmail gets a reference to the given string and assigns it to the CopyRequestEmail field.
func (o *EnvelopeConsumerDisclosures) SetCopyRequestEmail(v string) {
	o.CopyRequestEmail = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetCustom() string {
	if o == nil || IsNil(o.Custom) {
		var ret string
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetCustomOk() (*string, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given string and assigns it to the Custom field.
func (o *EnvelopeConsumerDisclosures) SetCustom(v string) {
	o.Custom = &v
}

// GetEnableEsign returns the EnableEsign field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetEnableEsign() string {
	if o == nil || IsNil(o.EnableEsign) {
		var ret string
		return ret
	}
	return *o.EnableEsign
}

// GetEnableEsignOk returns a tuple with the EnableEsign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetEnableEsignOk() (*string, bool) {
	if o == nil || IsNil(o.EnableEsign) {
		return nil, false
	}
	return o.EnableEsign, true
}

// HasEnableEsign returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasEnableEsign() bool {
	if o != nil && !IsNil(o.EnableEsign) {
		return true
	}

	return false
}

// SetEnableEsign gets a reference to the given string and assigns it to the EnableEsign field.
func (o *EnvelopeConsumerDisclosures) SetEnableEsign(v string) {
	o.EnableEsign = &v
}

// GetEsignAgreement returns the EsignAgreement field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetEsignAgreement() string {
	if o == nil || IsNil(o.EsignAgreement) {
		var ret string
		return ret
	}
	return *o.EsignAgreement
}

// GetEsignAgreementOk returns a tuple with the EsignAgreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetEsignAgreementOk() (*string, bool) {
	if o == nil || IsNil(o.EsignAgreement) {
		return nil, false
	}
	return o.EsignAgreement, true
}

// HasEsignAgreement returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasEsignAgreement() bool {
	if o != nil && !IsNil(o.EsignAgreement) {
		return true
	}

	return false
}

// SetEsignAgreement gets a reference to the given string and assigns it to the EsignAgreement field.
func (o *EnvelopeConsumerDisclosures) SetEsignAgreement(v string) {
	o.EsignAgreement = &v
}

// GetEsignText returns the EsignText field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetEsignText() string {
	if o == nil || IsNil(o.EsignText) {
		var ret string
		return ret
	}
	return *o.EsignText
}

// GetEsignTextOk returns a tuple with the EsignText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetEsignTextOk() (*string, bool) {
	if o == nil || IsNil(o.EsignText) {
		return nil, false
	}
	return o.EsignText, true
}

// HasEsignText returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasEsignText() bool {
	if o != nil && !IsNil(o.EsignText) {
		return true
	}

	return false
}

// SetEsignText gets a reference to the given string and assigns it to the EsignText field.
func (o *EnvelopeConsumerDisclosures) SetEsignText(v string) {
	o.EsignText = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *EnvelopeConsumerDisclosures) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetMustAgreeToEsign returns the MustAgreeToEsign field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetMustAgreeToEsign() string {
	if o == nil || IsNil(o.MustAgreeToEsign) {
		var ret string
		return ret
	}
	return *o.MustAgreeToEsign
}

// GetMustAgreeToEsignOk returns a tuple with the MustAgreeToEsign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetMustAgreeToEsignOk() (*string, bool) {
	if o == nil || IsNil(o.MustAgreeToEsign) {
		return nil, false
	}
	return o.MustAgreeToEsign, true
}

// HasMustAgreeToEsign returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasMustAgreeToEsign() bool {
	if o != nil && !IsNil(o.MustAgreeToEsign) {
		return true
	}

	return false
}

// SetMustAgreeToEsign gets a reference to the given string and assigns it to the MustAgreeToEsign field.
func (o *EnvelopeConsumerDisclosures) SetMustAgreeToEsign(v string) {
	o.MustAgreeToEsign = &v
}

// GetPdfId returns the PdfId field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetPdfId() string {
	if o == nil || IsNil(o.PdfId) {
		var ret string
		return ret
	}
	return *o.PdfId
}

// GetPdfIdOk returns a tuple with the PdfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetPdfIdOk() (*string, bool) {
	if o == nil || IsNil(o.PdfId) {
		return nil, false
	}
	return o.PdfId, true
}

// HasPdfId returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasPdfId() bool {
	if o != nil && !IsNil(o.PdfId) {
		return true
	}

	return false
}

// SetPdfId gets a reference to the given string and assigns it to the PdfId field.
func (o *EnvelopeConsumerDisclosures) SetPdfId(v string) {
	o.PdfId = &v
}

// GetUseBrand returns the UseBrand field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetUseBrand() string {
	if o == nil || IsNil(o.UseBrand) {
		var ret string
		return ret
	}
	return *o.UseBrand
}

// GetUseBrandOk returns a tuple with the UseBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetUseBrandOk() (*string, bool) {
	if o == nil || IsNil(o.UseBrand) {
		return nil, false
	}
	return o.UseBrand, true
}

// HasUseBrand returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasUseBrand() bool {
	if o != nil && !IsNil(o.UseBrand) {
		return true
	}

	return false
}

// SetUseBrand gets a reference to the given string and assigns it to the UseBrand field.
func (o *EnvelopeConsumerDisclosures) SetUseBrand(v string) {
	o.UseBrand = &v
}

// GetUseConsumerDisclosureWithinAccount returns the UseConsumerDisclosureWithinAccount field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetUseConsumerDisclosureWithinAccount() string {
	if o == nil || IsNil(o.UseConsumerDisclosureWithinAccount) {
		var ret string
		return ret
	}
	return *o.UseConsumerDisclosureWithinAccount
}

// GetUseConsumerDisclosureWithinAccountOk returns a tuple with the UseConsumerDisclosureWithinAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetUseConsumerDisclosureWithinAccountOk() (*string, bool) {
	if o == nil || IsNil(o.UseConsumerDisclosureWithinAccount) {
		return nil, false
	}
	return o.UseConsumerDisclosureWithinAccount, true
}

// HasUseConsumerDisclosureWithinAccount returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasUseConsumerDisclosureWithinAccount() bool {
	if o != nil && !IsNil(o.UseConsumerDisclosureWithinAccount) {
		return true
	}

	return false
}

// SetUseConsumerDisclosureWithinAccount gets a reference to the given string and assigns it to the UseConsumerDisclosureWithinAccount field.
func (o *EnvelopeConsumerDisclosures) SetUseConsumerDisclosureWithinAccount(v string) {
	o.UseConsumerDisclosureWithinAccount = &v
}

// GetUseConsumerDisclosureWithinAccountMetadata returns the UseConsumerDisclosureWithinAccountMetadata field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetUseConsumerDisclosureWithinAccountMetadata() SettingsMetadata {
	if o == nil || IsNil(o.UseConsumerDisclosureWithinAccountMetadata) {
		var ret SettingsMetadata
		return ret
	}
	return *o.UseConsumerDisclosureWithinAccountMetadata
}

// GetUseConsumerDisclosureWithinAccountMetadataOk returns a tuple with the UseConsumerDisclosureWithinAccountMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetUseConsumerDisclosureWithinAccountMetadataOk() (*SettingsMetadata, bool) {
	if o == nil || IsNil(o.UseConsumerDisclosureWithinAccountMetadata) {
		return nil, false
	}
	return o.UseConsumerDisclosureWithinAccountMetadata, true
}

// HasUseConsumerDisclosureWithinAccountMetadata returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasUseConsumerDisclosureWithinAccountMetadata() bool {
	if o != nil && !IsNil(o.UseConsumerDisclosureWithinAccountMetadata) {
		return true
	}

	return false
}

// SetUseConsumerDisclosureWithinAccountMetadata gets a reference to the given SettingsMetadata and assigns it to the UseConsumerDisclosureWithinAccountMetadata field.
func (o *EnvelopeConsumerDisclosures) SetUseConsumerDisclosureWithinAccountMetadata(v SettingsMetadata) {
	o.UseConsumerDisclosureWithinAccountMetadata = &v
}

// GetWithdrawAddressLine1 returns the WithdrawAddressLine1 field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawAddressLine1() string {
	if o == nil || IsNil(o.WithdrawAddressLine1) {
		var ret string
		return ret
	}
	return *o.WithdrawAddressLine1
}

// GetWithdrawAddressLine1Ok returns a tuple with the WithdrawAddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.WithdrawAddressLine1) {
		return nil, false
	}
	return o.WithdrawAddressLine1, true
}

// HasWithdrawAddressLine1 returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawAddressLine1() bool {
	if o != nil && !IsNil(o.WithdrawAddressLine1) {
		return true
	}

	return false
}

// SetWithdrawAddressLine1 gets a reference to the given string and assigns it to the WithdrawAddressLine1 field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawAddressLine1(v string) {
	o.WithdrawAddressLine1 = &v
}

// GetWithdrawAddressLine2 returns the WithdrawAddressLine2 field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawAddressLine2() string {
	if o == nil || IsNil(o.WithdrawAddressLine2) {
		var ret string
		return ret
	}
	return *o.WithdrawAddressLine2
}

// GetWithdrawAddressLine2Ok returns a tuple with the WithdrawAddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.WithdrawAddressLine2) {
		return nil, false
	}
	return o.WithdrawAddressLine2, true
}

// HasWithdrawAddressLine2 returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawAddressLine2() bool {
	if o != nil && !IsNil(o.WithdrawAddressLine2) {
		return true
	}

	return false
}

// SetWithdrawAddressLine2 gets a reference to the given string and assigns it to the WithdrawAddressLine2 field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawAddressLine2(v string) {
	o.WithdrawAddressLine2 = &v
}

// GetWithdrawByEmail returns the WithdrawByEmail field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawByEmail() string {
	if o == nil || IsNil(o.WithdrawByEmail) {
		var ret string
		return ret
	}
	return *o.WithdrawByEmail
}

// GetWithdrawByEmailOk returns a tuple with the WithdrawByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawByEmailOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawByEmail) {
		return nil, false
	}
	return o.WithdrawByEmail, true
}

// HasWithdrawByEmail returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawByEmail() bool {
	if o != nil && !IsNil(o.WithdrawByEmail) {
		return true
	}

	return false
}

// SetWithdrawByEmail gets a reference to the given string and assigns it to the WithdrawByEmail field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawByEmail(v string) {
	o.WithdrawByEmail = &v
}

// GetWithdrawByMail returns the WithdrawByMail field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawByMail() string {
	if o == nil || IsNil(o.WithdrawByMail) {
		var ret string
		return ret
	}
	return *o.WithdrawByMail
}

// GetWithdrawByMailOk returns a tuple with the WithdrawByMail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawByMailOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawByMail) {
		return nil, false
	}
	return o.WithdrawByMail, true
}

// HasWithdrawByMail returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawByMail() bool {
	if o != nil && !IsNil(o.WithdrawByMail) {
		return true
	}

	return false
}

// SetWithdrawByMail gets a reference to the given string and assigns it to the WithdrawByMail field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawByMail(v string) {
	o.WithdrawByMail = &v
}

// GetWithdrawByPhone returns the WithdrawByPhone field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawByPhone() string {
	if o == nil || IsNil(o.WithdrawByPhone) {
		var ret string
		return ret
	}
	return *o.WithdrawByPhone
}

// GetWithdrawByPhoneOk returns a tuple with the WithdrawByPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawByPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawByPhone) {
		return nil, false
	}
	return o.WithdrawByPhone, true
}

// HasWithdrawByPhone returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawByPhone() bool {
	if o != nil && !IsNil(o.WithdrawByPhone) {
		return true
	}

	return false
}

// SetWithdrawByPhone gets a reference to the given string and assigns it to the WithdrawByPhone field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawByPhone(v string) {
	o.WithdrawByPhone = &v
}

// GetWithdrawCity returns the WithdrawCity field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawCity() string {
	if o == nil || IsNil(o.WithdrawCity) {
		var ret string
		return ret
	}
	return *o.WithdrawCity
}

// GetWithdrawCityOk returns a tuple with the WithdrawCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawCityOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawCity) {
		return nil, false
	}
	return o.WithdrawCity, true
}

// HasWithdrawCity returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawCity() bool {
	if o != nil && !IsNil(o.WithdrawCity) {
		return true
	}

	return false
}

// SetWithdrawCity gets a reference to the given string and assigns it to the WithdrawCity field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawCity(v string) {
	o.WithdrawCity = &v
}

// GetWithdrawConsequences returns the WithdrawConsequences field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawConsequences() string {
	if o == nil || IsNil(o.WithdrawConsequences) {
		var ret string
		return ret
	}
	return *o.WithdrawConsequences
}

// GetWithdrawConsequencesOk returns a tuple with the WithdrawConsequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawConsequencesOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawConsequences) {
		return nil, false
	}
	return o.WithdrawConsequences, true
}

// HasWithdrawConsequences returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawConsequences() bool {
	if o != nil && !IsNil(o.WithdrawConsequences) {
		return true
	}

	return false
}

// SetWithdrawConsequences gets a reference to the given string and assigns it to the WithdrawConsequences field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawConsequences(v string) {
	o.WithdrawConsequences = &v
}

// GetWithdrawEmail returns the WithdrawEmail field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawEmail() string {
	if o == nil || IsNil(o.WithdrawEmail) {
		var ret string
		return ret
	}
	return *o.WithdrawEmail
}

// GetWithdrawEmailOk returns a tuple with the WithdrawEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawEmailOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawEmail) {
		return nil, false
	}
	return o.WithdrawEmail, true
}

// HasWithdrawEmail returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawEmail() bool {
	if o != nil && !IsNil(o.WithdrawEmail) {
		return true
	}

	return false
}

// SetWithdrawEmail gets a reference to the given string and assigns it to the WithdrawEmail field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawEmail(v string) {
	o.WithdrawEmail = &v
}

// GetWithdrawOther returns the WithdrawOther field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawOther() string {
	if o == nil || IsNil(o.WithdrawOther) {
		var ret string
		return ret
	}
	return *o.WithdrawOther
}

// GetWithdrawOtherOk returns a tuple with the WithdrawOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawOtherOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawOther) {
		return nil, false
	}
	return o.WithdrawOther, true
}

// HasWithdrawOther returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawOther() bool {
	if o != nil && !IsNil(o.WithdrawOther) {
		return true
	}

	return false
}

// SetWithdrawOther gets a reference to the given string and assigns it to the WithdrawOther field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawOther(v string) {
	o.WithdrawOther = &v
}

// GetWithdrawPhone returns the WithdrawPhone field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawPhone() string {
	if o == nil || IsNil(o.WithdrawPhone) {
		var ret string
		return ret
	}
	return *o.WithdrawPhone
}

// GetWithdrawPhoneOk returns a tuple with the WithdrawPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawPhone) {
		return nil, false
	}
	return o.WithdrawPhone, true
}

// HasWithdrawPhone returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawPhone() bool {
	if o != nil && !IsNil(o.WithdrawPhone) {
		return true
	}

	return false
}

// SetWithdrawPhone gets a reference to the given string and assigns it to the WithdrawPhone field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawPhone(v string) {
	o.WithdrawPhone = &v
}

// GetWithdrawPostalCode returns the WithdrawPostalCode field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawPostalCode() string {
	if o == nil || IsNil(o.WithdrawPostalCode) {
		var ret string
		return ret
	}
	return *o.WithdrawPostalCode
}

// GetWithdrawPostalCodeOk returns a tuple with the WithdrawPostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawPostalCode) {
		return nil, false
	}
	return o.WithdrawPostalCode, true
}

// HasWithdrawPostalCode returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawPostalCode() bool {
	if o != nil && !IsNil(o.WithdrawPostalCode) {
		return true
	}

	return false
}

// SetWithdrawPostalCode gets a reference to the given string and assigns it to the WithdrawPostalCode field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawPostalCode(v string) {
	o.WithdrawPostalCode = &v
}

// GetWithdrawState returns the WithdrawState field value if set, zero value otherwise.
func (o *EnvelopeConsumerDisclosures) GetWithdrawState() string {
	if o == nil || IsNil(o.WithdrawState) {
		var ret string
		return ret
	}
	return *o.WithdrawState
}

// GetWithdrawStateOk returns a tuple with the WithdrawState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvelopeConsumerDisclosures) GetWithdrawStateOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawState) {
		return nil, false
	}
	return o.WithdrawState, true
}

// HasWithdrawState returns a boolean if a field has been set.
func (o *EnvelopeConsumerDisclosures) HasWithdrawState() bool {
	if o != nil && !IsNil(o.WithdrawState) {
		return true
	}

	return false
}

// SetWithdrawState gets a reference to the given string and assigns it to the WithdrawState field.
func (o *EnvelopeConsumerDisclosures) SetWithdrawState(v string) {
	o.WithdrawState = &v
}

func (o EnvelopeConsumerDisclosures) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvelopeConsumerDisclosures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountEsignId) {
		toSerialize["accountEsignId"] = o.AccountEsignId
	}
	if !IsNil(o.AllowCDWithdraw) {
		toSerialize["allowCDWithdraw"] = o.AllowCDWithdraw
	}
	if !IsNil(o.AllowCDWithdrawMetadata) {
		toSerialize["allowCDWithdrawMetadata"] = o.AllowCDWithdrawMetadata
	}
	if !IsNil(o.ChangeEmail) {
		toSerialize["changeEmail"] = o.ChangeEmail
	}
	if !IsNil(o.ChangeEmailOther) {
		toSerialize["changeEmailOther"] = o.ChangeEmailOther
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.CompanyPhone) {
		toSerialize["companyPhone"] = o.CompanyPhone
	}
	if !IsNil(o.CopyCostPerPage) {
		toSerialize["copyCostPerPage"] = o.CopyCostPerPage
	}
	if !IsNil(o.CopyFeeCollectionMethod) {
		toSerialize["copyFeeCollectionMethod"] = o.CopyFeeCollectionMethod
	}
	if !IsNil(o.CopyRequestEmail) {
		toSerialize["copyRequestEmail"] = o.CopyRequestEmail
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.EnableEsign) {
		toSerialize["enableEsign"] = o.EnableEsign
	}
	if !IsNil(o.EsignAgreement) {
		toSerialize["esignAgreement"] = o.EsignAgreement
	}
	if !IsNil(o.EsignText) {
		toSerialize["esignText"] = o.EsignText
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.MustAgreeToEsign) {
		toSerialize["mustAgreeToEsign"] = o.MustAgreeToEsign
	}
	if !IsNil(o.PdfId) {
		toSerialize["pdfId"] = o.PdfId
	}
	if !IsNil(o.UseBrand) {
		toSerialize["useBrand"] = o.UseBrand
	}
	if !IsNil(o.UseConsumerDisclosureWithinAccount) {
		toSerialize["useConsumerDisclosureWithinAccount"] = o.UseConsumerDisclosureWithinAccount
	}
	if !IsNil(o.UseConsumerDisclosureWithinAccountMetadata) {
		toSerialize["useConsumerDisclosureWithinAccountMetadata"] = o.UseConsumerDisclosureWithinAccountMetadata
	}
	if !IsNil(o.WithdrawAddressLine1) {
		toSerialize["withdrawAddressLine1"] = o.WithdrawAddressLine1
	}
	if !IsNil(o.WithdrawAddressLine2) {
		toSerialize["withdrawAddressLine2"] = o.WithdrawAddressLine2
	}
	if !IsNil(o.WithdrawByEmail) {
		toSerialize["withdrawByEmail"] = o.WithdrawByEmail
	}
	if !IsNil(o.WithdrawByMail) {
		toSerialize["withdrawByMail"] = o.WithdrawByMail
	}
	if !IsNil(o.WithdrawByPhone) {
		toSerialize["withdrawByPhone"] = o.WithdrawByPhone
	}
	if !IsNil(o.WithdrawCity) {
		toSerialize["withdrawCity"] = o.WithdrawCity
	}
	if !IsNil(o.WithdrawConsequences) {
		toSerialize["withdrawConsequences"] = o.WithdrawConsequences
	}
	if !IsNil(o.WithdrawEmail) {
		toSerialize["withdrawEmail"] = o.WithdrawEmail
	}
	if !IsNil(o.WithdrawOther) {
		toSerialize["withdrawOther"] = o.WithdrawOther
	}
	if !IsNil(o.WithdrawPhone) {
		toSerialize["withdrawPhone"] = o.WithdrawPhone
	}
	if !IsNil(o.WithdrawPostalCode) {
		toSerialize["withdrawPostalCode"] = o.WithdrawPostalCode
	}
	if !IsNil(o.WithdrawState) {
		toSerialize["withdrawState"] = o.WithdrawState
	}
	return toSerialize, nil
}

type NullableEnvelopeConsumerDisclosures struct {
	value *EnvelopeConsumerDisclosures
	isSet bool
}

func (v NullableEnvelopeConsumerDisclosures) Get() *EnvelopeConsumerDisclosures {
	return v.value
}

func (v *NullableEnvelopeConsumerDisclosures) Set(val *EnvelopeConsumerDisclosures) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelopeConsumerDisclosures) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelopeConsumerDisclosures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelopeConsumerDisclosures(val *EnvelopeConsumerDisclosures) *NullableEnvelopeConsumerDisclosures {
	return &NullableEnvelopeConsumerDisclosures{value: val, isSet: true}
}

func (v NullableEnvelopeConsumerDisclosures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelopeConsumerDisclosures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


