/*
DocuSign REST API

The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment 
type Comment struct {
	// The Guid of the envelope the comment thread belongs to.
	EnvelopeId *string `json:"envelopeId,omitempty"`
	// Reserved for DocuSign.
	Hmac *string `json:"hmac,omitempty"`
	// The unique identifier for the comment.
	Id *string `json:"id,omitempty"`
	// An array of userIds that are mentioned directly in the body of a comment.
	Mentions []string `json:"mentions,omitempty"`
	// When **true,** indicates that the comment was read.
	Read *bool `json:"read,omitempty"`
	// The email address of the user who created the comment.
	SentByEmail *string `json:"sentByEmail,omitempty"`
	// The full name of the user who created the comment.
	SentByFullName *string `json:"sentByFullName,omitempty"`
	// Reserved for DocuSign.
	SentByImageId *string `json:"sentByImageId,omitempty"`
	// The initials of the user who created the comment.
	SentByInitials *string `json:"sentByInitials,omitempty"`
	// The recipient ID of the user who created the comment.
	SentByRecipientId *string `json:"sentByRecipientId,omitempty"`
	// The user ID of the user who created the comment.
	SentByUserId *string `json:"sentByUserId,omitempty"`
	// The ID of the signing group that can view the comment or that created the comment.
	SigningGroupId *string `json:"signingGroupId,omitempty"`
	// Optional. The name of the signing group.   Maximum Length: 100 characters. 
	SigningGroupName *string `json:"signingGroupName,omitempty"`
	// The subject of the envelope.
	Subject *string `json:"subject,omitempty"`
	// The unique identifier for the tab that represents the comment thread.
	TabId *string `json:"tabId,omitempty"`
	// The content of the comment, as UTF-8 text.   Maximum Length: 500 characters.  **Note:** The maximum size allowed for the entire message body is 32 KB. 
	Text *string `json:"text,omitempty"`
	// The unique identifier for the comment thread.
	ThreadId *string `json:"threadId,omitempty"`
	// The userId of the user who created the thread.
	ThreadOriginatorId *string `json:"threadOriginatorId,omitempty"`
	// The time the comment was created.
	Timestamp *string `json:"timestamp,omitempty"`
	// The time the comment was created, formatted according to the format of the user who created the comment.
	TimeStampFormatted *string `json:"timeStampFormatted,omitempty"`
	// The user IDs of the users that the comment is visible to.
	VisibleTo []string `json:"visibleTo,omitempty"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment() *Comment {
	this := Comment{}
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetEnvelopeId returns the EnvelopeId field value if set, zero value otherwise.
func (o *Comment) GetEnvelopeId() string {
	if o == nil || IsNil(o.EnvelopeId) {
		var ret string
		return ret
	}
	return *o.EnvelopeId
}

// GetEnvelopeIdOk returns a tuple with the EnvelopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetEnvelopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeId) {
		return nil, false
	}
	return o.EnvelopeId, true
}

// HasEnvelopeId returns a boolean if a field has been set.
func (o *Comment) HasEnvelopeId() bool {
	if o != nil && !IsNil(o.EnvelopeId) {
		return true
	}

	return false
}

// SetEnvelopeId gets a reference to the given string and assigns it to the EnvelopeId field.
func (o *Comment) SetEnvelopeId(v string) {
	o.EnvelopeId = &v
}

// GetHmac returns the Hmac field value if set, zero value otherwise.
func (o *Comment) GetHmac() string {
	if o == nil || IsNil(o.Hmac) {
		var ret string
		return ret
	}
	return *o.Hmac
}

// GetHmacOk returns a tuple with the Hmac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetHmacOk() (*string, bool) {
	if o == nil || IsNil(o.Hmac) {
		return nil, false
	}
	return o.Hmac, true
}

// HasHmac returns a boolean if a field has been set.
func (o *Comment) HasHmac() bool {
	if o != nil && !IsNil(o.Hmac) {
		return true
	}

	return false
}

// SetHmac gets a reference to the given string and assigns it to the Hmac field.
func (o *Comment) SetHmac(v string) {
	o.Hmac = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Comment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Comment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Comment) SetId(v string) {
	o.Id = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *Comment) GetMentions() []string {
	if o == nil || IsNil(o.Mentions) {
		var ret []string
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetMentionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *Comment) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []string and assigns it to the Mentions field.
func (o *Comment) SetMentions(v []string) {
	o.Mentions = v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *Comment) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *Comment) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *Comment) SetRead(v bool) {
	o.Read = &v
}

// GetSentByEmail returns the SentByEmail field value if set, zero value otherwise.
func (o *Comment) GetSentByEmail() string {
	if o == nil || IsNil(o.SentByEmail) {
		var ret string
		return ret
	}
	return *o.SentByEmail
}

// GetSentByEmailOk returns a tuple with the SentByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSentByEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SentByEmail) {
		return nil, false
	}
	return o.SentByEmail, true
}

// HasSentByEmail returns a boolean if a field has been set.
func (o *Comment) HasSentByEmail() bool {
	if o != nil && !IsNil(o.SentByEmail) {
		return true
	}

	return false
}

// SetSentByEmail gets a reference to the given string and assigns it to the SentByEmail field.
func (o *Comment) SetSentByEmail(v string) {
	o.SentByEmail = &v
}

// GetSentByFullName returns the SentByFullName field value if set, zero value otherwise.
func (o *Comment) GetSentByFullName() string {
	if o == nil || IsNil(o.SentByFullName) {
		var ret string
		return ret
	}
	return *o.SentByFullName
}

// GetSentByFullNameOk returns a tuple with the SentByFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSentByFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.SentByFullName) {
		return nil, false
	}
	return o.SentByFullName, true
}

// HasSentByFullName returns a boolean if a field has been set.
func (o *Comment) HasSentByFullName() bool {
	if o != nil && !IsNil(o.SentByFullName) {
		return true
	}

	return false
}

// SetSentByFullName gets a reference to the given string and assigns it to the SentByFullName field.
func (o *Comment) SetSentByFullName(v string) {
	o.SentByFullName = &v
}

// GetSentByImageId returns the SentByImageId field value if set, zero value otherwise.
func (o *Comment) GetSentByImageId() string {
	if o == nil || IsNil(o.SentByImageId) {
		var ret string
		return ret
	}
	return *o.SentByImageId
}

// GetSentByImageIdOk returns a tuple with the SentByImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSentByImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.SentByImageId) {
		return nil, false
	}
	return o.SentByImageId, true
}

// HasSentByImageId returns a boolean if a field has been set.
func (o *Comment) HasSentByImageId() bool {
	if o != nil && !IsNil(o.SentByImageId) {
		return true
	}

	return false
}

// SetSentByImageId gets a reference to the given string and assigns it to the SentByImageId field.
func (o *Comment) SetSentByImageId(v string) {
	o.SentByImageId = &v
}

// GetSentByInitials returns the SentByInitials field value if set, zero value otherwise.
func (o *Comment) GetSentByInitials() string {
	if o == nil || IsNil(o.SentByInitials) {
		var ret string
		return ret
	}
	return *o.SentByInitials
}

// GetSentByInitialsOk returns a tuple with the SentByInitials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSentByInitialsOk() (*string, bool) {
	if o == nil || IsNil(o.SentByInitials) {
		return nil, false
	}
	return o.SentByInitials, true
}

// HasSentByInitials returns a boolean if a field has been set.
func (o *Comment) HasSentByInitials() bool {
	if o != nil && !IsNil(o.SentByInitials) {
		return true
	}

	return false
}

// SetSentByInitials gets a reference to the given string and assigns it to the SentByInitials field.
func (o *Comment) SetSentByInitials(v string) {
	o.SentByInitials = &v
}

// GetSentByRecipientId returns the SentByRecipientId field value if set, zero value otherwise.
func (o *Comment) GetSentByRecipientId() string {
	if o == nil || IsNil(o.SentByRecipientId) {
		var ret string
		return ret
	}
	return *o.SentByRecipientId
}

// GetSentByRecipientIdOk returns a tuple with the SentByRecipientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSentByRecipientIdOk() (*string, bool) {
	if o == nil || IsNil(o.SentByRecipientId) {
		return nil, false
	}
	return o.SentByRecipientId, true
}

// HasSentByRecipientId returns a boolean if a field has been set.
func (o *Comment) HasSentByRecipientId() bool {
	if o != nil && !IsNil(o.SentByRecipientId) {
		return true
	}

	return false
}

// SetSentByRecipientId gets a reference to the given string and assigns it to the SentByRecipientId field.
func (o *Comment) SetSentByRecipientId(v string) {
	o.SentByRecipientId = &v
}

// GetSentByUserId returns the SentByUserId field value if set, zero value otherwise.
func (o *Comment) GetSentByUserId() string {
	if o == nil || IsNil(o.SentByUserId) {
		var ret string
		return ret
	}
	return *o.SentByUserId
}

// GetSentByUserIdOk returns a tuple with the SentByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSentByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.SentByUserId) {
		return nil, false
	}
	return o.SentByUserId, true
}

// HasSentByUserId returns a boolean if a field has been set.
func (o *Comment) HasSentByUserId() bool {
	if o != nil && !IsNil(o.SentByUserId) {
		return true
	}

	return false
}

// SetSentByUserId gets a reference to the given string and assigns it to the SentByUserId field.
func (o *Comment) SetSentByUserId(v string) {
	o.SentByUserId = &v
}

// GetSigningGroupId returns the SigningGroupId field value if set, zero value otherwise.
func (o *Comment) GetSigningGroupId() string {
	if o == nil || IsNil(o.SigningGroupId) {
		var ret string
		return ret
	}
	return *o.SigningGroupId
}

// GetSigningGroupIdOk returns a tuple with the SigningGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSigningGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupId) {
		return nil, false
	}
	return o.SigningGroupId, true
}

// HasSigningGroupId returns a boolean if a field has been set.
func (o *Comment) HasSigningGroupId() bool {
	if o != nil && !IsNil(o.SigningGroupId) {
		return true
	}

	return false
}

// SetSigningGroupId gets a reference to the given string and assigns it to the SigningGroupId field.
func (o *Comment) SetSigningGroupId(v string) {
	o.SigningGroupId = &v
}

// GetSigningGroupName returns the SigningGroupName field value if set, zero value otherwise.
func (o *Comment) GetSigningGroupName() string {
	if o == nil || IsNil(o.SigningGroupName) {
		var ret string
		return ret
	}
	return *o.SigningGroupName
}

// GetSigningGroupNameOk returns a tuple with the SigningGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSigningGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.SigningGroupName) {
		return nil, false
	}
	return o.SigningGroupName, true
}

// HasSigningGroupName returns a boolean if a field has been set.
func (o *Comment) HasSigningGroupName() bool {
	if o != nil && !IsNil(o.SigningGroupName) {
		return true
	}

	return false
}

// SetSigningGroupName gets a reference to the given string and assigns it to the SigningGroupName field.
func (o *Comment) SetSigningGroupName(v string) {
	o.SigningGroupName = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Comment) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Comment) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *Comment) SetSubject(v string) {
	o.Subject = &v
}

// GetTabId returns the TabId field value if set, zero value otherwise.
func (o *Comment) GetTabId() string {
	if o == nil || IsNil(o.TabId) {
		var ret string
		return ret
	}
	return *o.TabId
}

// GetTabIdOk returns a tuple with the TabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetTabIdOk() (*string, bool) {
	if o == nil || IsNil(o.TabId) {
		return nil, false
	}
	return o.TabId, true
}

// HasTabId returns a boolean if a field has been set.
func (o *Comment) HasTabId() bool {
	if o != nil && !IsNil(o.TabId) {
		return true
	}

	return false
}

// SetTabId gets a reference to the given string and assigns it to the TabId field.
func (o *Comment) SetTabId(v string) {
	o.TabId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Comment) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Comment) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Comment) SetText(v string) {
	o.Text = &v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *Comment) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *Comment) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *Comment) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetThreadOriginatorId returns the ThreadOriginatorId field value if set, zero value otherwise.
func (o *Comment) GetThreadOriginatorId() string {
	if o == nil || IsNil(o.ThreadOriginatorId) {
		var ret string
		return ret
	}
	return *o.ThreadOriginatorId
}

// GetThreadOriginatorIdOk returns a tuple with the ThreadOriginatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetThreadOriginatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadOriginatorId) {
		return nil, false
	}
	return o.ThreadOriginatorId, true
}

// HasThreadOriginatorId returns a boolean if a field has been set.
func (o *Comment) HasThreadOriginatorId() bool {
	if o != nil && !IsNil(o.ThreadOriginatorId) {
		return true
	}

	return false
}

// SetThreadOriginatorId gets a reference to the given string and assigns it to the ThreadOriginatorId field.
func (o *Comment) SetThreadOriginatorId(v string) {
	o.ThreadOriginatorId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Comment) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Comment) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *Comment) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetTimeStampFormatted returns the TimeStampFormatted field value if set, zero value otherwise.
func (o *Comment) GetTimeStampFormatted() string {
	if o == nil || IsNil(o.TimeStampFormatted) {
		var ret string
		return ret
	}
	return *o.TimeStampFormatted
}

// GetTimeStampFormattedOk returns a tuple with the TimeStampFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetTimeStampFormattedOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStampFormatted) {
		return nil, false
	}
	return o.TimeStampFormatted, true
}

// HasTimeStampFormatted returns a boolean if a field has been set.
func (o *Comment) HasTimeStampFormatted() bool {
	if o != nil && !IsNil(o.TimeStampFormatted) {
		return true
	}

	return false
}

// SetTimeStampFormatted gets a reference to the given string and assigns it to the TimeStampFormatted field.
func (o *Comment) SetTimeStampFormatted(v string) {
	o.TimeStampFormatted = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *Comment) GetVisibleTo() []string {
	if o == nil || IsNil(o.VisibleTo) {
		var ret []string
		return ret
	}
	return o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetVisibleToOk() ([]string, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *Comment) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given []string and assigns it to the VisibleTo field.
func (o *Comment) SetVisibleTo(v []string) {
	o.VisibleTo = v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvelopeId) {
		toSerialize["envelopeId"] = o.EnvelopeId
	}
	if !IsNil(o.Hmac) {
		toSerialize["hmac"] = o.Hmac
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.SentByEmail) {
		toSerialize["sentByEmail"] = o.SentByEmail
	}
	if !IsNil(o.SentByFullName) {
		toSerialize["sentByFullName"] = o.SentByFullName
	}
	if !IsNil(o.SentByImageId) {
		toSerialize["sentByImageId"] = o.SentByImageId
	}
	if !IsNil(o.SentByInitials) {
		toSerialize["sentByInitials"] = o.SentByInitials
	}
	if !IsNil(o.SentByRecipientId) {
		toSerialize["sentByRecipientId"] = o.SentByRecipientId
	}
	if !IsNil(o.SentByUserId) {
		toSerialize["sentByUserId"] = o.SentByUserId
	}
	if !IsNil(o.SigningGroupId) {
		toSerialize["signingGroupId"] = o.SigningGroupId
	}
	if !IsNil(o.SigningGroupName) {
		toSerialize["signingGroupName"] = o.SigningGroupName
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.TabId) {
		toSerialize["tabId"] = o.TabId
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.ThreadId) {
		toSerialize["threadId"] = o.ThreadId
	}
	if !IsNil(o.ThreadOriginatorId) {
		toSerialize["threadOriginatorId"] = o.ThreadOriginatorId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TimeStampFormatted) {
		toSerialize["timeStampFormatted"] = o.TimeStampFormatted
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visibleTo"] = o.VisibleTo
	}
	return toSerialize, nil
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


