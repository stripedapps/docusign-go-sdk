/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrganizationImportResponseErrorRollup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationImportResponseErrorRollup{}

// OrganizationImportResponseErrorRollup 
type OrganizationImportResponseErrorRollup struct {
	// The type of error. One of:   - `no_action_taken_user_exists` - `user_added` - `user_updated` - `invalid_column_header` - `invalid_row_data` - `insufficient_row_data_found` - `extra_row_data_found` - `blank_username` - `invalid_characters_in_username` - `invalid_useremail_address` - `email_domain_is_reserved` - `new_name_with_existing_useremail_not_allowed` - `invalid_characters_in_jobtitle` - `invalid_membership_id` - `membership_not_in_account` - `maximum_users_exceeded` - `invalid_permissionset` - `user_permissionset_problems` - `invalid_group` - `user_group_problems` - `group_and_permissionset_problems` - `column_headers_missing` - `invalid_csv_data_or_syntax` - `invalid_characters_in_companyname` - `invalid_language_code` - `username_column_header_missing` - `useremail_column_header_missing` - `permissionset_column_header_missing` - `membership_id_column_header_usage_not_permitted` - `administrator_group_assignment_not_permitted` - `user_awaiting_activation` - `account_admin_access_denied` - `invalid_characters_in_address` - `permissionset_required` - `apiusername_column_header_missing` - `invalid_apiusername` - `useremail_username_combination_exists` - `permissionset_change_not_allowed` - `username_language_changes_ignored_warning` - `invalid_country_warning` - `invalid_account_id` - `invalid_autoactivate` - `invalid_loginpolicy` - `autoactivate_not_allowed` - `membership_closed` - `membership_closed_or_disabled_warning` - `cannot_close_last_active_admin` - `no_action_taken` - `cannot_close_own_membership` - `unspecified_error`  
	ErrorType *string `json:"error_type,omitempty"`
	// The number of errors of this type.
	Count *int32 `json:"count,omitempty"`
}

// NewOrganizationImportResponseErrorRollup instantiates a new OrganizationImportResponseErrorRollup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationImportResponseErrorRollup() *OrganizationImportResponseErrorRollup {
	this := OrganizationImportResponseErrorRollup{}
	return &this
}

// NewOrganizationImportResponseErrorRollupWithDefaults instantiates a new OrganizationImportResponseErrorRollup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationImportResponseErrorRollupWithDefaults() *OrganizationImportResponseErrorRollup {
	this := OrganizationImportResponseErrorRollup{}
	return &this
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *OrganizationImportResponseErrorRollup) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType) {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationImportResponseErrorRollup) GetErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *OrganizationImportResponseErrorRollup) HasErrorType() bool {
	if o != nil && !IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *OrganizationImportResponseErrorRollup) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *OrganizationImportResponseErrorRollup) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationImportResponseErrorRollup) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *OrganizationImportResponseErrorRollup) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *OrganizationImportResponseErrorRollup) SetCount(v int32) {
	o.Count = &v
}

func (o OrganizationImportResponseErrorRollup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationImportResponseErrorRollup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorType) {
		toSerialize["error_type"] = o.ErrorType
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableOrganizationImportResponseErrorRollup struct {
	value *OrganizationImportResponseErrorRollup
	isSet bool
}

func (v NullableOrganizationImportResponseErrorRollup) Get() *OrganizationImportResponseErrorRollup {
	return v.value
}

func (v *NullableOrganizationImportResponseErrorRollup) Set(val *OrganizationImportResponseErrorRollup) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationImportResponseErrorRollup) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationImportResponseErrorRollup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationImportResponseErrorRollup(val *OrganizationImportResponseErrorRollup) *NullableOrganizationImportResponseErrorRollup {
	return &NullableOrganizationImportResponseErrorRollup{value: val, isSet: true}
}

func (v NullableOrganizationImportResponseErrorRollup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationImportResponseErrorRollup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


