/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CertificateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateResponse{}

// CertificateResponse Information about a single certificate.
type CertificateResponse struct {
	// The unique ID of the certificate.
	Id *string `json:"id,omitempty"`
	// The certificate issuer.
	Issuer *string `json:"issuer,omitempty"`
	// The thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty"`
	// The date when the certificate expires.
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	// When **true,** the certificate is valid.
	IsValid *bool `json:"is_valid,omitempty"`
	// A list of useful links.
	Links []LinkResponse `json:"links,omitempty"`
}

// NewCertificateResponse instantiates a new CertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateResponse() *CertificateResponse {
	this := CertificateResponse{}
	return &this
}

// NewCertificateResponseWithDefaults instantiates a new CertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateResponseWithDefaults() *CertificateResponse {
	this := CertificateResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertificateResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertificateResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertificateResponse) SetId(v string) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *CertificateResponse) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *CertificateResponse) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *CertificateResponse) SetIssuer(v string) {
	o.Issuer = &v
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *CertificateResponse) GetThumbprint() string {
	if o == nil || IsNil(o.Thumbprint) {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetThumbprintOk() (*string, bool) {
	if o == nil || IsNil(o.Thumbprint) {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *CertificateResponse) HasThumbprint() bool {
	if o != nil && !IsNil(o.Thumbprint) {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *CertificateResponse) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *CertificateResponse) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *CertificateResponse) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *CertificateResponse) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *CertificateResponse) GetIsValid() bool {
	if o == nil || IsNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *CertificateResponse) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *CertificateResponse) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CertificateResponse) GetLinks() []LinkResponse {
	if o == nil || IsNil(o.Links) {
		var ret []LinkResponse
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetLinksOk() ([]LinkResponse, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CertificateResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkResponse and assigns it to the Links field.
func (o *CertificateResponse) SetLinks(v []LinkResponse) {
	o.Links = v
}

func (o CertificateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Thumbprint) {
		toSerialize["thumbprint"] = o.Thumbprint
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !IsNil(o.IsValid) {
		toSerialize["is_valid"] = o.IsValid
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableCertificateResponse struct {
	value *CertificateResponse
	isSet bool
}

func (v NullableCertificateResponse) Get() *CertificateResponse {
	return v.value
}

func (v *NullableCertificateResponse) Set(val *CertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateResponse(val *CertificateResponse) *NullableCertificateResponse {
	return &NullableCertificateResponse{value: val, isSet: true}
}

func (v NullableCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


