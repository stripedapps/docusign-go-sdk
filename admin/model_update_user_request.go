/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequest{}

// UpdateUserRequest Request to change a user's information.
type UpdateUserRequest struct {
	// The user's unique ID.
	Id string `json:"id"`
	// The site ID.
	SiteId int32 `json:"site_id"`
	// The full name of the user.
	UserName *string `json:"user_name,omitempty"`
	// The user's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The user's last name.
	LastName *string `json:"last_name,omitempty"`
	// The email address.
	Email *string `json:"email,omitempty"`
	// The account ID of the user's default account.
	DefaultAccountId *string `json:"default_account_id,omitempty"`
	// The language and culture of the user.    * Chinese Simplified: `zh_CN`   * Chinese Traditional: `zh_TW`   * Dutch: `nl`   * English: `en`   * French: `fr`   * German: `de`   * Italian: `it`   * Japanese: `ja`   * Korean: `ko`   * Portuguese: `pt`   * Portuguese Brazil: `pt_BR`   * Russian: `ru`   * Spanish: `es` 
	LanguageCulture *string `json:"language_culture,omitempty"`
	// 
	SelectedLanguages *string `json:"selected_languages,omitempty"`
	// The user's federated status. One of:  - `RemoveStatus` - `FedAuthRequired` - `FedAuthBypass` - `Evicted`
	FederatedStatus *string `json:"federated_status,omitempty"`
	// When **true,** the user will be required to change the account password.
	ForcePasswordChange *bool `json:"force_password_change,omitempty"`
	// A list of group membership requests.
	Memberships []UpdateMembershipRequest `json:"memberships,omitempty"`
	// 
	DeviceVerificationEnabled *bool `json:"device_verification_enabled,omitempty"`
}

// NewUpdateUserRequest instantiates a new UpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequest(id string, siteId int32) *UpdateUserRequest {
	this := UpdateUserRequest{}
	this.Id = id
	this.SiteId = siteId
	return &this
}

// NewUpdateUserRequestWithDefaults instantiates a new UpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestWithDefaults() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateUserRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateUserRequest) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *UpdateUserRequest) GetSiteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetSiteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *UpdateUserRequest) SetSiteId(v int32) {
	o.SiteId = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *UpdateUserRequest) SetUserName(v string) {
	o.UserName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UpdateUserRequest) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UpdateUserRequest) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequest) SetEmail(v string) {
	o.Email = &v
}

// GetDefaultAccountId returns the DefaultAccountId field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetDefaultAccountId() string {
	if o == nil || IsNil(o.DefaultAccountId) {
		var ret string
		return ret
	}
	return *o.DefaultAccountId
}

// GetDefaultAccountIdOk returns a tuple with the DefaultAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetDefaultAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultAccountId) {
		return nil, false
	}
	return o.DefaultAccountId, true
}

// HasDefaultAccountId returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasDefaultAccountId() bool {
	if o != nil && !IsNil(o.DefaultAccountId) {
		return true
	}

	return false
}

// SetDefaultAccountId gets a reference to the given string and assigns it to the DefaultAccountId field.
func (o *UpdateUserRequest) SetDefaultAccountId(v string) {
	o.DefaultAccountId = &v
}

// GetLanguageCulture returns the LanguageCulture field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetLanguageCulture() string {
	if o == nil || IsNil(o.LanguageCulture) {
		var ret string
		return ret
	}
	return *o.LanguageCulture
}

// GetLanguageCultureOk returns a tuple with the LanguageCulture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetLanguageCultureOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCulture) {
		return nil, false
	}
	return o.LanguageCulture, true
}

// HasLanguageCulture returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasLanguageCulture() bool {
	if o != nil && !IsNil(o.LanguageCulture) {
		return true
	}

	return false
}

// SetLanguageCulture gets a reference to the given string and assigns it to the LanguageCulture field.
func (o *UpdateUserRequest) SetLanguageCulture(v string) {
	o.LanguageCulture = &v
}

// GetSelectedLanguages returns the SelectedLanguages field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetSelectedLanguages() string {
	if o == nil || IsNil(o.SelectedLanguages) {
		var ret string
		return ret
	}
	return *o.SelectedLanguages
}

// GetSelectedLanguagesOk returns a tuple with the SelectedLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetSelectedLanguagesOk() (*string, bool) {
	if o == nil || IsNil(o.SelectedLanguages) {
		return nil, false
	}
	return o.SelectedLanguages, true
}

// HasSelectedLanguages returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasSelectedLanguages() bool {
	if o != nil && !IsNil(o.SelectedLanguages) {
		return true
	}

	return false
}

// SetSelectedLanguages gets a reference to the given string and assigns it to the SelectedLanguages field.
func (o *UpdateUserRequest) SetSelectedLanguages(v string) {
	o.SelectedLanguages = &v
}

// GetFederatedStatus returns the FederatedStatus field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetFederatedStatus() string {
	if o == nil || IsNil(o.FederatedStatus) {
		var ret string
		return ret
	}
	return *o.FederatedStatus
}

// GetFederatedStatusOk returns a tuple with the FederatedStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetFederatedStatusOk() (*string, bool) {
	if o == nil || IsNil(o.FederatedStatus) {
		return nil, false
	}
	return o.FederatedStatus, true
}

// HasFederatedStatus returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasFederatedStatus() bool {
	if o != nil && !IsNil(o.FederatedStatus) {
		return true
	}

	return false
}

// SetFederatedStatus gets a reference to the given string and assigns it to the FederatedStatus field.
func (o *UpdateUserRequest) SetFederatedStatus(v string) {
	o.FederatedStatus = &v
}

// GetForcePasswordChange returns the ForcePasswordChange field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetForcePasswordChange() bool {
	if o == nil || IsNil(o.ForcePasswordChange) {
		var ret bool
		return ret
	}
	return *o.ForcePasswordChange
}

// GetForcePasswordChangeOk returns a tuple with the ForcePasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetForcePasswordChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcePasswordChange) {
		return nil, false
	}
	return o.ForcePasswordChange, true
}

// HasForcePasswordChange returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasForcePasswordChange() bool {
	if o != nil && !IsNil(o.ForcePasswordChange) {
		return true
	}

	return false
}

// SetForcePasswordChange gets a reference to the given bool and assigns it to the ForcePasswordChange field.
func (o *UpdateUserRequest) SetForcePasswordChange(v bool) {
	o.ForcePasswordChange = &v
}

// GetMemberships returns the Memberships field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetMemberships() []UpdateMembershipRequest {
	if o == nil || IsNil(o.Memberships) {
		var ret []UpdateMembershipRequest
		return ret
	}
	return o.Memberships
}

// GetMembershipsOk returns a tuple with the Memberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetMembershipsOk() ([]UpdateMembershipRequest, bool) {
	if o == nil || IsNil(o.Memberships) {
		return nil, false
	}
	return o.Memberships, true
}

// HasMemberships returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasMemberships() bool {
	if o != nil && !IsNil(o.Memberships) {
		return true
	}

	return false
}

// SetMemberships gets a reference to the given []UpdateMembershipRequest and assigns it to the Memberships field.
func (o *UpdateUserRequest) SetMemberships(v []UpdateMembershipRequest) {
	o.Memberships = v
}

// GetDeviceVerificationEnabled returns the DeviceVerificationEnabled field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetDeviceVerificationEnabled() bool {
	if o == nil || IsNil(o.DeviceVerificationEnabled) {
		var ret bool
		return ret
	}
	return *o.DeviceVerificationEnabled
}

// GetDeviceVerificationEnabledOk returns a tuple with the DeviceVerificationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetDeviceVerificationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DeviceVerificationEnabled) {
		return nil, false
	}
	return o.DeviceVerificationEnabled, true
}

// HasDeviceVerificationEnabled returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasDeviceVerificationEnabled() bool {
	if o != nil && !IsNil(o.DeviceVerificationEnabled) {
		return true
	}

	return false
}

// SetDeviceVerificationEnabled gets a reference to the given bool and assigns it to the DeviceVerificationEnabled field.
func (o *UpdateUserRequest) SetDeviceVerificationEnabled(v bool) {
	o.DeviceVerificationEnabled = &v
}

func (o UpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.DefaultAccountId) {
		toSerialize["default_account_id"] = o.DefaultAccountId
	}
	if !IsNil(o.LanguageCulture) {
		toSerialize["language_culture"] = o.LanguageCulture
	}
	if !IsNil(o.SelectedLanguages) {
		toSerialize["selected_languages"] = o.SelectedLanguages
	}
	if !IsNil(o.FederatedStatus) {
		toSerialize["federated_status"] = o.FederatedStatus
	}
	if !IsNil(o.ForcePasswordChange) {
		toSerialize["force_password_change"] = o.ForcePasswordChange
	}
	if !IsNil(o.Memberships) {
		toSerialize["memberships"] = o.Memberships
	}
	if !IsNil(o.DeviceVerificationEnabled) {
		toSerialize["device_verification_enabled"] = o.DeviceVerificationEnabled
	}
	return toSerialize, nil
}

type NullableUpdateUserRequest struct {
	value *UpdateUserRequest
	isSet bool
}

func (v NullableUpdateUserRequest) Get() *UpdateUserRequest {
	return v.value
}

func (v *NullableUpdateUserRequest) Set(val *UpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequest(val *UpdateUserRequest) *NullableUpdateUserRequest {
	return &NullableUpdateUserRequest{value: val, isSet: true}
}

func (v NullableUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


