/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SettingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingResponse{}

// SettingResponse A key/value list of settings.
type SettingResponse struct {
	// The key of the setting.
	Key *string `json:"key,omitempty"`
	// The value of the setting.
	Value map[string]interface{} `json:"value,omitempty"`
	// The type of the setting. One of:  - `unknown` - `guid` - `text` - `integer` - `boolean` - `datetime` - `enumeration`
	Type *string `json:"type,omitempty"`
}

// NewSettingResponse instantiates a new SettingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingResponse() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// NewSettingResponseWithDefaults instantiates a new SettingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingResponseWithDefaults() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SettingResponse) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SettingResponse) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SettingResponse) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SettingResponse) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SettingResponse) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *SettingResponse) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SettingResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SettingResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SettingResponse) SetType(v string) {
	o.Type = &v
}

func (o SettingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSettingResponse struct {
	value *SettingResponse
	isSet bool
}

func (v NullableSettingResponse) Get() *SettingResponse {
	return v.value
}

func (v *NullableSettingResponse) Set(val *SettingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingResponse(val *SettingResponse) *NullableSettingResponse {
	return &NullableSettingResponse{value: val, isSet: true}
}

func (v NullableSettingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


