/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserUpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdateResponse{}

// UserUpdateResponse Error result of attempting to change a user's email address.
type UserUpdateResponse struct {
	// The ID of the user whose email address has been updated.
	Id *string `json:"id,omitempty"`
	// The site ID.
	SiteId *int32 `json:"site_id,omitempty"`
	// The email address.
	Email *string `json:"email,omitempty"`
	ErrorDetails *ErrorDetails `json:"error_details,omitempty"`
}

// NewUserUpdateResponse instantiates a new UserUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateResponse() *UserUpdateResponse {
	this := UserUpdateResponse{}
	return &this
}

// NewUserUpdateResponseWithDefaults instantiates a new UserUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateResponseWithDefaults() *UserUpdateResponse {
	this := UserUpdateResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserUpdateResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserUpdateResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserUpdateResponse) SetId(v string) {
	o.Id = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *UserUpdateResponse) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateResponse) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *UserUpdateResponse) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *UserUpdateResponse) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserUpdateResponse) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateResponse) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserUpdateResponse) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserUpdateResponse) SetEmail(v string) {
	o.Email = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *UserUpdateResponse) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateResponse) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *UserUpdateResponse) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *UserUpdateResponse) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

func (o UserUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["error_details"] = o.ErrorDetails
	}
	return toSerialize, nil
}

type NullableUserUpdateResponse struct {
	value *UserUpdateResponse
	isSet bool
}

func (v NullableUserUpdateResponse) Get() *UserUpdateResponse {
	return v.value
}

func (v *NullableUserUpdateResponse) Set(val *UserUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateResponse(val *UserUpdateResponse) *NullableUserUpdateResponse {
	return &NullableUserUpdateResponse{value: val, isSet: true}
}

func (v NullableUserUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


