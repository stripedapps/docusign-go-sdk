/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DataDeletion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataDeletion{}

// DataDeletion Methods to delete data for closed users.
type DataDeletion struct {
	// 
	UserId *string `json:"user_id,omitempty"`
	// Status.
	Status *string `json:"status,omitempty"`
	// 
	MembershipResults []MembershipDataRedactionResponse `json:"membership_results,omitempty"`
}

// NewDataDeletion instantiates a new DataDeletion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataDeletion() *DataDeletion {
	this := DataDeletion{}
	return &this
}

// NewDataDeletionWithDefaults instantiates a new DataDeletion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataDeletionWithDefaults() *DataDeletion {
	this := DataDeletion{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DataDeletion) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDeletion) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DataDeletion) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DataDeletion) SetUserId(v string) {
	o.UserId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataDeletion) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDeletion) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataDeletion) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DataDeletion) SetStatus(v string) {
	o.Status = &v
}

// GetMembershipResults returns the MembershipResults field value if set, zero value otherwise.
func (o *DataDeletion) GetMembershipResults() []MembershipDataRedactionResponse {
	if o == nil || IsNil(o.MembershipResults) {
		var ret []MembershipDataRedactionResponse
		return ret
	}
	return o.MembershipResults
}

// GetMembershipResultsOk returns a tuple with the MembershipResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDeletion) GetMembershipResultsOk() ([]MembershipDataRedactionResponse, bool) {
	if o == nil || IsNil(o.MembershipResults) {
		return nil, false
	}
	return o.MembershipResults, true
}

// HasMembershipResults returns a boolean if a field has been set.
func (o *DataDeletion) HasMembershipResults() bool {
	if o != nil && !IsNil(o.MembershipResults) {
		return true
	}

	return false
}

// SetMembershipResults gets a reference to the given []MembershipDataRedactionResponse and assigns it to the MembershipResults field.
func (o *DataDeletion) SetMembershipResults(v []MembershipDataRedactionResponse) {
	o.MembershipResults = v
}

func (o DataDeletion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataDeletion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.MembershipResults) {
		toSerialize["membership_results"] = o.MembershipResults
	}
	return toSerialize, nil
}

type NullableDataDeletion struct {
	value *DataDeletion
	isSet bool
}

func (v NullableDataDeletion) Get() *DataDeletion {
	return v.value
}

func (v *NullableDataDeletion) Set(val *DataDeletion) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDeletion) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDeletion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDeletion(val *DataDeletion) *NullableDataDeletion {
	return &NullableDataDeletion{value: val, isSet: true}
}

func (v NullableDataDeletion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDeletion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


