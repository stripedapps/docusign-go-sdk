/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DSGroupUsersRemoveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DSGroupUsersRemoveRequest{}

// DSGroupUsersRemoveRequest Information about users to remove from the group.
type DSGroupUsersRemoveRequest struct {
	// An array of IDs corresponding to users to remove from the group.
	UserIds []string `json:"user_ids,omitempty"`
	// An array of emails associated with users to remove from the group. **Note:** If `user_ids` is also specified, this parameter will be ignored.
	UserEmails []string `json:"user_emails,omitempty"`
}

// NewDSGroupUsersRemoveRequest instantiates a new DSGroupUsersRemoveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDSGroupUsersRemoveRequest() *DSGroupUsersRemoveRequest {
	this := DSGroupUsersRemoveRequest{}
	return &this
}

// NewDSGroupUsersRemoveRequestWithDefaults instantiates a new DSGroupUsersRemoveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDSGroupUsersRemoveRequestWithDefaults() *DSGroupUsersRemoveRequest {
	this := DSGroupUsersRemoveRequest{}
	return &this
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *DSGroupUsersRemoveRequest) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DSGroupUsersRemoveRequest) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *DSGroupUsersRemoveRequest) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *DSGroupUsersRemoveRequest) SetUserIds(v []string) {
	o.UserIds = v
}

// GetUserEmails returns the UserEmails field value if set, zero value otherwise.
func (o *DSGroupUsersRemoveRequest) GetUserEmails() []string {
	if o == nil || IsNil(o.UserEmails) {
		var ret []string
		return ret
	}
	return o.UserEmails
}

// GetUserEmailsOk returns a tuple with the UserEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DSGroupUsersRemoveRequest) GetUserEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserEmails) {
		return nil, false
	}
	return o.UserEmails, true
}

// HasUserEmails returns a boolean if a field has been set.
func (o *DSGroupUsersRemoveRequest) HasUserEmails() bool {
	if o != nil && !IsNil(o.UserEmails) {
		return true
	}

	return false
}

// SetUserEmails gets a reference to the given []string and assigns it to the UserEmails field.
func (o *DSGroupUsersRemoveRequest) SetUserEmails(v []string) {
	o.UserEmails = v
}

func (o DSGroupUsersRemoveRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DSGroupUsersRemoveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	if !IsNil(o.UserEmails) {
		toSerialize["user_emails"] = o.UserEmails
	}
	return toSerialize, nil
}

type NullableDSGroupUsersRemoveRequest struct {
	value *DSGroupUsersRemoveRequest
	isSet bool
}

func (v NullableDSGroupUsersRemoveRequest) Get() *DSGroupUsersRemoveRequest {
	return v.value
}

func (v *NullableDSGroupUsersRemoveRequest) Set(val *DSGroupUsersRemoveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDSGroupUsersRemoveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDSGroupUsersRemoveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDSGroupUsersRemoveRequest(val *DSGroupUsersRemoveRequest) *NullableDSGroupUsersRemoveRequest {
	return &NullableDSGroupUsersRemoveRequest{value: val, isSet: true}
}

func (v NullableDSGroupUsersRemoveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDSGroupUsersRemoveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


