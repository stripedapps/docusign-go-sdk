/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DSGroupAndUsersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DSGroupAndUsersResponse{}

// DSGroupAndUsersResponse 
type DSGroupAndUsersResponse struct {
	Group *DSGroupResponse `json:"group,omitempty"`
	GroupUsers *DSGroupUsersResponse `json:"group_users,omitempty"`
}

// NewDSGroupAndUsersResponse instantiates a new DSGroupAndUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDSGroupAndUsersResponse() *DSGroupAndUsersResponse {
	this := DSGroupAndUsersResponse{}
	return &this
}

// NewDSGroupAndUsersResponseWithDefaults instantiates a new DSGroupAndUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDSGroupAndUsersResponseWithDefaults() *DSGroupAndUsersResponse {
	this := DSGroupAndUsersResponse{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DSGroupAndUsersResponse) GetGroup() DSGroupResponse {
	if o == nil || IsNil(o.Group) {
		var ret DSGroupResponse
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DSGroupAndUsersResponse) GetGroupOk() (*DSGroupResponse, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DSGroupAndUsersResponse) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given DSGroupResponse and assigns it to the Group field.
func (o *DSGroupAndUsersResponse) SetGroup(v DSGroupResponse) {
	o.Group = &v
}

// GetGroupUsers returns the GroupUsers field value if set, zero value otherwise.
func (o *DSGroupAndUsersResponse) GetGroupUsers() DSGroupUsersResponse {
	if o == nil || IsNil(o.GroupUsers) {
		var ret DSGroupUsersResponse
		return ret
	}
	return *o.GroupUsers
}

// GetGroupUsersOk returns a tuple with the GroupUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DSGroupAndUsersResponse) GetGroupUsersOk() (*DSGroupUsersResponse, bool) {
	if o == nil || IsNil(o.GroupUsers) {
		return nil, false
	}
	return o.GroupUsers, true
}

// HasGroupUsers returns a boolean if a field has been set.
func (o *DSGroupAndUsersResponse) HasGroupUsers() bool {
	if o != nil && !IsNil(o.GroupUsers) {
		return true
	}

	return false
}

// SetGroupUsers gets a reference to the given DSGroupUsersResponse and assigns it to the GroupUsers field.
func (o *DSGroupAndUsersResponse) SetGroupUsers(v DSGroupUsersResponse) {
	o.GroupUsers = &v
}

func (o DSGroupAndUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DSGroupAndUsersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.GroupUsers) {
		toSerialize["group_users"] = o.GroupUsers
	}
	return toSerialize, nil
}

type NullableDSGroupAndUsersResponse struct {
	value *DSGroupAndUsersResponse
	isSet bool
}

func (v NullableDSGroupAndUsersResponse) Get() *DSGroupAndUsersResponse {
	return v.value
}

func (v *NullableDSGroupAndUsersResponse) Set(val *DSGroupAndUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDSGroupAndUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDSGroupAndUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDSGroupAndUsersResponse(val *DSGroupAndUsersResponse) *NullableDSGroupAndUsersResponse {
	return &NullableDSGroupAndUsersResponse{value: val, isSet: true}
}

func (v NullableDSGroupAndUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDSGroupAndUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


