/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserIdentityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdentityResponse{}

// UserIdentityResponse Results of deleting a user identity.
type UserIdentityResponse struct {
	// The ID of the result.
	Id *string `json:"id,omitempty"`
	// The ID of the identity provider.
	ProviderId *string `json:"provider_id,omitempty"`
	// The user ID.
	UserId *string `json:"user_id,omitempty"`
	// A unique ID to identify the removed user.
	ImmutableId *string `json:"immutable_id,omitempty"`
	ErrorDetails *ErrorDetails `json:"error_details,omitempty"`
}

// NewUserIdentityResponse instantiates a new UserIdentityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdentityResponse() *UserIdentityResponse {
	this := UserIdentityResponse{}
	return &this
}

// NewUserIdentityResponseWithDefaults instantiates a new UserIdentityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdentityResponseWithDefaults() *UserIdentityResponse {
	this := UserIdentityResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserIdentityResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentityResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserIdentityResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserIdentityResponse) SetId(v string) {
	o.Id = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *UserIdentityResponse) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentityResponse) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *UserIdentityResponse) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *UserIdentityResponse) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserIdentityResponse) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentityResponse) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserIdentityResponse) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserIdentityResponse) SetUserId(v string) {
	o.UserId = &v
}

// GetImmutableId returns the ImmutableId field value if set, zero value otherwise.
func (o *UserIdentityResponse) GetImmutableId() string {
	if o == nil || IsNil(o.ImmutableId) {
		var ret string
		return ret
	}
	return *o.ImmutableId
}

// GetImmutableIdOk returns a tuple with the ImmutableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentityResponse) GetImmutableIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImmutableId) {
		return nil, false
	}
	return o.ImmutableId, true
}

// HasImmutableId returns a boolean if a field has been set.
func (o *UserIdentityResponse) HasImmutableId() bool {
	if o != nil && !IsNil(o.ImmutableId) {
		return true
	}

	return false
}

// SetImmutableId gets a reference to the given string and assigns it to the ImmutableId field.
func (o *UserIdentityResponse) SetImmutableId(v string) {
	o.ImmutableId = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *UserIdentityResponse) GetErrorDetails() ErrorDetails {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorDetails
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdentityResponse) GetErrorDetailsOk() (*ErrorDetails, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *UserIdentityResponse) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorDetails and assigns it to the ErrorDetails field.
func (o *UserIdentityResponse) SetErrorDetails(v ErrorDetails) {
	o.ErrorDetails = &v
}

func (o UserIdentityResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdentityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.ImmutableId) {
		toSerialize["immutable_id"] = o.ImmutableId
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["error_details"] = o.ErrorDetails
	}
	return toSerialize, nil
}

type NullableUserIdentityResponse struct {
	value *UserIdentityResponse
	isSet bool
}

func (v NullableUserIdentityResponse) Get() *UserIdentityResponse {
	return v.value
}

func (v *NullableUserIdentityResponse) Set(val *UserIdentityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdentityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdentityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdentityResponse(val *UserIdentityResponse) *NullableUserIdentityResponse {
	return &NullableUserIdentityResponse{value: val, isSet: true}
}

func (v NullableUserIdentityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdentityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


