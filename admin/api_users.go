/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UsersAPIService UsersAPI service
type UsersAPIService service

type ApiOrganizationUserOrganizationUsersGetV2Request struct {
	ctx context.Context
	ApiService *UsersAPIService
	organizationId string
	start *int32
	take *int32
	end *int32
	email *string
	emailUserNameLike *string
	status *string
	membershipStatus *string
	accountId *string
	organizationReservedDomainId *string
	lastModifiedSince *string
}

// Index of first item to include in the response. The default value is 0.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) Start(start int32) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.start = &start
	return r
}

// Page size of the response. The default value is 20.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) Take(take int32) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.take = &take
	return r
}

// Index of the last item to include in the response. Ignored if &#x60;take&#x60; parameter is specified.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) End(end int32) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.end = &end
	return r
}

// Email address of the desired user. At least one of &#x60;email&#x60;, &#x60;account_id&#x60; or &#x60;organization_reserved_domain_id&#x60; must be specified.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) Email(email string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.email = &email
	return r
}

// Selects users by pattern matching on the user&#39;s email address
func (r ApiOrganizationUserOrganizationUsersGetV2Request) EmailUserNameLike(emailUserNameLike string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.emailUserNameLike = &emailUserNameLike
	return r
}

// Status.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) Status(status string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.status = &status
	return r
}

// The user&#39;s membership status. One of:  - &#x60;activation_required&#x60; - &#x60;activation_sent&#x60; - &#x60;active&#x60; - &#x60;closed&#x60; - &#x60;disabled&#x60; 
func (r ApiOrganizationUserOrganizationUsersGetV2Request) MembershipStatus(membershipStatus string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.membershipStatus = &membershipStatus
	return r
}

// Select users that are members of the specified account. At least one of &#x60;email&#x60;, &#x60;account_id&#x60; or &#x60;organization_reserved_domain_id&#x60; must be specified.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) AccountId(accountId string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.accountId = &accountId
	return r
}

// Select users that are in the specified domain. At least one of &#x60;email&#x60;, &#x60;account_id&#x60; or &#x60;organization_reserved_domain_id&#x60; must be specified.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) OrganizationReservedDomainId(organizationReservedDomainId string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.organizationReservedDomainId = &organizationReservedDomainId
	return r
}

// Select users whose data have been modified since the date specified. &#x60;account_id&#x60; or &#x60;organization_reserved_domain_id&#x60; must be specified.
func (r ApiOrganizationUserOrganizationUsersGetV2Request) LastModifiedSince(lastModifiedSince string) ApiOrganizationUserOrganizationUsersGetV2Request {
	r.lastModifiedSince = &lastModifiedSince
	return r
}

func (r ApiOrganizationUserOrganizationUsersGetV2Request) Execute() (*OrganizationUsersResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserOrganizationUsersGetV2Execute(r)
}

/*
OrganizationUserOrganizationUsersGetV2 Returns information about the users in an organization.

Returns information about the users in an organization.

You must include at least one of the following query parameters in the request:

- `account_id`: The ID of an account associated with the organization.
- `organization_reserved_domain_id`: The ID of one of the organization's reserved domains.
- `email`: An email address associated with the users that you want to return.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationUserOrganizationUsersGetV2Request
*/
func (a *UsersAPIService) OrganizationUserOrganizationUsersGetV2(ctx context.Context, organizationId string) ApiOrganizationUserOrganizationUsersGetV2Request {
	return ApiOrganizationUserOrganizationUsersGetV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationUsersResponse
func (a *UsersAPIService) OrganizationUserOrganizationUsersGetV2Execute(r ApiOrganizationUserOrganizationUsersGetV2Request) (*OrganizationUsersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationUsersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.OrganizationUserOrganizationUsersGetV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.emailUserNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email_user_name_like", r.emailUserNameLike, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.membershipStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membership_status", r.membershipStatus, "")
	}
	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "")
	}
	if r.organizationReservedDomainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organization_reserved_domain_id", r.organizationReservedDomainId, "")
	}
	if r.lastModifiedSince != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_modified_since", r.lastModifiedSince, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserUsersUpdateEmailAddressesV2Request struct {
	ctx context.Context
	ApiService *UsersAPIService
	organizationId string
	request *UpdateUsersEmailRequest
}

func (r ApiUserUsersUpdateEmailAddressesV2Request) Request(request UpdateUsersEmailRequest) ApiUserUsersUpdateEmailAddressesV2Request {
	r.request = &request
	return r
}

func (r ApiUserUsersUpdateEmailAddressesV2Request) Execute() (*UsersUpdateResponse, *http.Response, error) {
	return r.ApiService.UserUsersUpdateEmailAddressesV2Execute(r)
}

/*
UserUsersUpdateEmailAddressesV2 Updates a user's email address.

Updates a user's email address.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiUserUsersUpdateEmailAddressesV2Request
*/
func (a *UsersAPIService) UserUsersUpdateEmailAddressesV2(ctx context.Context, organizationId string) ApiUserUsersUpdateEmailAddressesV2Request {
	return ApiUserUsersUpdateEmailAddressesV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return UsersUpdateResponse
func (a *UsersAPIService) UserUsersUpdateEmailAddressesV2Execute(r ApiUserUsersUpdateEmailAddressesV2Request) (*UsersUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUsersUpdateEmailAddressesV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users/email_addresses"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
