/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateMembershipRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMembershipRequest{}

// UpdateMembershipRequest A request to update group membership.
type UpdateMembershipRequest struct {
	// The user's unique ID.
	AccountId string `json:"account_id"`
	PermissionProfile *PermissionProfileRequest `json:"permission_profile,omitempty"`
	// The user's requested groups.
	Groups []GroupRequest `json:"groups,omitempty"`
	// The user's company name.
	CompanyName *string `json:"company_name,omitempty"`
	// The user's job title.
	JobTitle *string `json:"job_title,omitempty"`
	// When **true,** send an activation request after the update.
	SendActivation *bool `json:"send_activation,omitempty"`
	// The access code that the user needs to activate an account.
	AccessCode *string `json:"access_code,omitempty"`
}

// NewUpdateMembershipRequest instantiates a new UpdateMembershipRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMembershipRequest(accountId string) *UpdateMembershipRequest {
	this := UpdateMembershipRequest{}
	this.AccountId = accountId
	return &this
}

// NewUpdateMembershipRequestWithDefaults instantiates a new UpdateMembershipRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMembershipRequestWithDefaults() *UpdateMembershipRequest {
	this := UpdateMembershipRequest{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *UpdateMembershipRequest) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *UpdateMembershipRequest) SetAccountId(v string) {
	o.AccountId = v
}

// GetPermissionProfile returns the PermissionProfile field value if set, zero value otherwise.
func (o *UpdateMembershipRequest) GetPermissionProfile() PermissionProfileRequest {
	if o == nil || IsNil(o.PermissionProfile) {
		var ret PermissionProfileRequest
		return ret
	}
	return *o.PermissionProfile
}

// GetPermissionProfileOk returns a tuple with the PermissionProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetPermissionProfileOk() (*PermissionProfileRequest, bool) {
	if o == nil || IsNil(o.PermissionProfile) {
		return nil, false
	}
	return o.PermissionProfile, true
}

// HasPermissionProfile returns a boolean if a field has been set.
func (o *UpdateMembershipRequest) HasPermissionProfile() bool {
	if o != nil && !IsNil(o.PermissionProfile) {
		return true
	}

	return false
}

// SetPermissionProfile gets a reference to the given PermissionProfileRequest and assigns it to the PermissionProfile field.
func (o *UpdateMembershipRequest) SetPermissionProfile(v PermissionProfileRequest) {
	o.PermissionProfile = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *UpdateMembershipRequest) GetGroups() []GroupRequest {
	if o == nil || IsNil(o.Groups) {
		var ret []GroupRequest
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetGroupsOk() ([]GroupRequest, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *UpdateMembershipRequest) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupRequest and assigns it to the Groups field.
func (o *UpdateMembershipRequest) SetGroups(v []GroupRequest) {
	o.Groups = v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *UpdateMembershipRequest) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *UpdateMembershipRequest) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *UpdateMembershipRequest) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise.
func (o *UpdateMembershipRequest) GetJobTitle() string {
	if o == nil || IsNil(o.JobTitle) {
		var ret string
		return ret
	}
	return *o.JobTitle
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetJobTitleOk() (*string, bool) {
	if o == nil || IsNil(o.JobTitle) {
		return nil, false
	}
	return o.JobTitle, true
}

// HasJobTitle returns a boolean if a field has been set.
func (o *UpdateMembershipRequest) HasJobTitle() bool {
	if o != nil && !IsNil(o.JobTitle) {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given string and assigns it to the JobTitle field.
func (o *UpdateMembershipRequest) SetJobTitle(v string) {
	o.JobTitle = &v
}

// GetSendActivation returns the SendActivation field value if set, zero value otherwise.
func (o *UpdateMembershipRequest) GetSendActivation() bool {
	if o == nil || IsNil(o.SendActivation) {
		var ret bool
		return ret
	}
	return *o.SendActivation
}

// GetSendActivationOk returns a tuple with the SendActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetSendActivationOk() (*bool, bool) {
	if o == nil || IsNil(o.SendActivation) {
		return nil, false
	}
	return o.SendActivation, true
}

// HasSendActivation returns a boolean if a field has been set.
func (o *UpdateMembershipRequest) HasSendActivation() bool {
	if o != nil && !IsNil(o.SendActivation) {
		return true
	}

	return false
}

// SetSendActivation gets a reference to the given bool and assigns it to the SendActivation field.
func (o *UpdateMembershipRequest) SetSendActivation(v bool) {
	o.SendActivation = &v
}

// GetAccessCode returns the AccessCode field value if set, zero value otherwise.
func (o *UpdateMembershipRequest) GetAccessCode() string {
	if o == nil || IsNil(o.AccessCode) {
		var ret string
		return ret
	}
	return *o.AccessCode
}

// GetAccessCodeOk returns a tuple with the AccessCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMembershipRequest) GetAccessCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessCode) {
		return nil, false
	}
	return o.AccessCode, true
}

// HasAccessCode returns a boolean if a field has been set.
func (o *UpdateMembershipRequest) HasAccessCode() bool {
	if o != nil && !IsNil(o.AccessCode) {
		return true
	}

	return false
}

// SetAccessCode gets a reference to the given string and assigns it to the AccessCode field.
func (o *UpdateMembershipRequest) SetAccessCode(v string) {
	o.AccessCode = &v
}

func (o UpdateMembershipRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMembershipRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	if !IsNil(o.PermissionProfile) {
		toSerialize["permission_profile"] = o.PermissionProfile
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.JobTitle) {
		toSerialize["job_title"] = o.JobTitle
	}
	if !IsNil(o.SendActivation) {
		toSerialize["send_activation"] = o.SendActivation
	}
	if !IsNil(o.AccessCode) {
		toSerialize["access_code"] = o.AccessCode
	}
	return toSerialize, nil
}

type NullableUpdateMembershipRequest struct {
	value *UpdateMembershipRequest
	isSet bool
}

func (v NullableUpdateMembershipRequest) Get() *UpdateMembershipRequest {
	return v.value
}

func (v *NullableUpdateMembershipRequest) Set(val *UpdateMembershipRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMembershipRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMembershipRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMembershipRequest(val *UpdateMembershipRequest) *NullableUpdateMembershipRequest {
	return &NullableUpdateMembershipRequest{value: val, isSet: true}
}

func (v NullableUpdateMembershipRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMembershipRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


