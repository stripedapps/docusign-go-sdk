/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrgReportListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgReportListResponse{}

// OrgReportListResponse 
type OrgReportListResponse struct {
	// 
	Reports []OrgReportListResponseOrgReport `json:"reports,omitempty"`
}

// NewOrgReportListResponse instantiates a new OrgReportListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgReportListResponse() *OrgReportListResponse {
	this := OrgReportListResponse{}
	return &this
}

// NewOrgReportListResponseWithDefaults instantiates a new OrgReportListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgReportListResponseWithDefaults() *OrgReportListResponse {
	this := OrgReportListResponse{}
	return &this
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *OrgReportListResponse) GetReports() []OrgReportListResponseOrgReport {
	if o == nil || IsNil(o.Reports) {
		var ret []OrgReportListResponseOrgReport
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgReportListResponse) GetReportsOk() ([]OrgReportListResponseOrgReport, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *OrgReportListResponse) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []OrgReportListResponseOrgReport and assigns it to the Reports field.
func (o *OrgReportListResponse) SetReports(v []OrgReportListResponseOrgReport) {
	o.Reports = v
}

func (o OrgReportListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgReportListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	return toSerialize, nil
}

type NullableOrgReportListResponse struct {
	value *OrgReportListResponse
	isSet bool
}

func (v NullableOrgReportListResponse) Get() *OrgReportListResponse {
	return v.value
}

func (v *NullableOrgReportListResponse) Set(val *OrgReportListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgReportListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgReportListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgReportListResponse(val *OrgReportListResponse) *NullableOrgReportListResponse {
	return &NullableOrgReportListResponse{value: val, isSet: true}
}

func (v NullableOrgReportListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgReportListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


