/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountSettingsExportAPIService AccountSettingsExportAPI service
type AccountSettingsExportAPIService service

type ApiOrganizationExportOrganizationExportAccountCompareRequest struct {
	ctx context.Context
	ApiService *AccountSettingsExportAPIService
	organizationId string
	request *OrganizationAccountsRequest
}

func (r ApiOrganizationExportOrganizationExportAccountCompareRequest) Request(request OrganizationAccountsRequest) ApiOrganizationExportOrganizationExportAccountCompareRequest {
	r.request = &request
	return r
}

func (r ApiOrganizationExportOrganizationExportAccountCompareRequest) Execute() (*OrganizationExportResponse, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportAccountCompareExecute(r)
}

/*
OrganizationExportOrganizationExportAccountCompare Creates a  new account settings export request.

Creates a new account settings export request.

To learn more about exporting account settings,
see [Account Settings Export][guide-export]
in the DocuSign Admin Guide.

You can export settings for up to 40 accounts at a time.

Specify the accounts whose settings you are requesting as JSON in the body of the request, like this:

``` json
{
  "accounts":	[
  	{ "account_id": "9ca037f4-xxxx-xxxx-xxxx-212e57d4f22e"},
  	{ "account_id": "624e3e00-xxxx-xxxx-xxxx-43918c520dab"}

  ]
}
```

[Required authentication scopes](/docs/admin-api/admin101/auth/): `account_write`.

### Related topics

- [Account Settings import][guide-import] guide
- [Account Settings Export][guide-export] guide


[guide-import]: https://support.docusign.com/s/document-item?bundleId=rrf1583359212854&topicId=nwl1583359167434.html
[guide-export]: https://support.docusign.com/s/document-item?bundleId=rrf1583359212854&topicId=kfj1583359164049.html

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationExportOrganizationExportAccountCompareRequest
*/
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportAccountCompare(ctx context.Context, organizationId string) ApiOrganizationExportOrganizationExportAccountCompareRequest {
	return ApiOrganizationExportOrganizationExportAccountCompareRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationExportResponse
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportAccountCompareExecute(r ApiOrganizationExportOrganizationExportAccountCompareRequest) (*OrganizationExportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsExportAPIService.OrganizationExportOrganizationExportAccountCompare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/account_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationExportOrganizationExportDeleteByAccountSettingsExportIdRequest struct {
	ctx context.Context
	ApiService *AccountSettingsExportAPIService
	organizationId string
	exportId string
}

func (r ApiOrganizationExportOrganizationExportDeleteByAccountSettingsExportIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportDeleteByAccountSettingsExportIdExecute(r)
}

/*
OrganizationExportOrganizationExportDeleteByAccountSettingsExportId Deletes a single account settings export request.

Deletes a single account settings export request.
Any data associated with the request is also deleted.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `account_read`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param exportId The export ID GUID for the request.
 @return ApiOrganizationExportOrganizationExportDeleteByAccountSettingsExportIdRequest
*/
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportDeleteByAccountSettingsExportId(ctx context.Context, organizationId string, exportId string) ApiOrganizationExportOrganizationExportDeleteByAccountSettingsExportIdRequest {
	return ApiOrganizationExportOrganizationExportDeleteByAccountSettingsExportIdRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		exportId: exportId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportDeleteByAccountSettingsExportIdExecute(r ApiOrganizationExportOrganizationExportDeleteByAccountSettingsExportIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsExportAPIService.OrganizationExportOrganizationExportDeleteByAccountSettingsExportId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/account_settings/{exportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exportId"+"}", url.PathEscape(parameterValueToString(r.exportId, "exportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationExportOrganizationExportGetAccountCompareRequest struct {
	ctx context.Context
	ApiService *AccountSettingsExportAPIService
	organizationId string
}

func (r ApiOrganizationExportOrganizationExportGetAccountCompareRequest) Execute() (*OrganizationExportsResponse, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportGetAccountCompareExecute(r)
}

/*
OrganizationExportOrganizationExportGetAccountCompare Returns a list of pending and completed account settings export request.

Returns a list of pending and completed account settings export requests.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `account_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationExportOrganizationExportGetAccountCompareRequest
*/
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportGetAccountCompare(ctx context.Context, organizationId string) ApiOrganizationExportOrganizationExportGetAccountCompareRequest {
	return ApiOrganizationExportOrganizationExportGetAccountCompareRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationExportsResponse
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportGetAccountCompareExecute(r ApiOrganizationExportOrganizationExportGetAccountCompareRequest) (*OrganizationExportsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationExportsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsExportAPIService.OrganizationExportOrganizationExportGetAccountCompare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/account_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationExportOrganizationExportGetAccountSettingsExportByExportIdRequest struct {
	ctx context.Context
	ApiService *AccountSettingsExportAPIService
	organizationId string
	exportId string
}

func (r ApiOrganizationExportOrganizationExportGetAccountSettingsExportByExportIdRequest) Execute() (*OrganizationExportResponse, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportGetAccountSettingsExportByExportIdExecute(r)
}

/*
OrganizationExportOrganizationExportGetAccountSettingsExportByExportId Returns the results for a single account settings export request.

Returns the results for a single account settings export request.

Given an export ID, this method returns the results of an account settings export request.
To get a list of all the export requests, use `getAccountSettingsExports`.

The results are available through a URL that
you can access through the `results` property of the response.
For example, to get the URL of first result you might use
`results[0].url`

The settings export is formatted like this:

``` json
{
  "accounts": [
    {
      "account_id": "9ca037f4-xxxx-xxxx-xxxx-212e57d4f22e",
      "name": "The Happy Company",
      . . .
    },
    {
      "account_id": "624e3e00-xxxx-xxxx-xxxx-43918c520dab",
      "name": "LoanCo",
      . . .
    }
  ],
  "settings": [
    . . .
    {
      "category": "Signing",
      "name": "SignerCanSignOnMobile",
      "account_values": [
        {
          "account_id": "9ca037f4-xxxx-xxxx-xxxx-212e57d4f22e",
          "value": "true",
          "rights": "editable"
        },
        {
          "account_id": "624e3e00-xxxx-xxxx-xxxx-43918c520dab",
          "value": "true",
          "rights": "editable"
        }
      ]
    },
    . . .
  ]
}

```

[Required authentication scopes](/docs/admin-api/admin101/auth/): `account_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param exportId The export ID GUID for the request.
 @return ApiOrganizationExportOrganizationExportGetAccountSettingsExportByExportIdRequest
*/
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportGetAccountSettingsExportByExportId(ctx context.Context, organizationId string, exportId string) ApiOrganizationExportOrganizationExportGetAccountSettingsExportByExportIdRequest {
	return ApiOrganizationExportOrganizationExportGetAccountSettingsExportByExportIdRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		exportId: exportId,
	}
}

// Execute executes the request
//  @return OrganizationExportResponse
func (a *AccountSettingsExportAPIService) OrganizationExportOrganizationExportGetAccountSettingsExportByExportIdExecute(r ApiOrganizationExportOrganizationExportGetAccountSettingsExportByExportIdRequest) (*OrganizationExportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsExportAPIService.OrganizationExportOrganizationExportGetAccountSettingsExportByExportId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/account_settings/{exportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exportId"+"}", url.PathEscape(parameterValueToString(r.exportId, "exportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
