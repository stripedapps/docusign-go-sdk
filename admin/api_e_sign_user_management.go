/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ESignUserManagementAPIService ESignUserManagementAPI service
type ESignUserManagementAPIService service

type ApiAccountAccountsGetGroupsV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	accountId string
	start *int32
	take *int32
	end *int32
}

// Index of first item to include in the response. The default value is 0.
func (r ApiAccountAccountsGetGroupsV2Request) Start(start int32) ApiAccountAccountsGetGroupsV2Request {
	r.start = &start
	return r
}

// Page size of the response. The default value is 20.
func (r ApiAccountAccountsGetGroupsV2Request) Take(take int32) ApiAccountAccountsGetGroupsV2Request {
	r.take = &take
	return r
}

// Index of the last item to include in the response. Ignored if &#x60;take&#x60; parameter is specified.
func (r ApiAccountAccountsGetGroupsV2Request) End(end int32) ApiAccountAccountsGetGroupsV2Request {
	r.end = &end
	return r
}

func (r ApiAccountAccountsGetGroupsV2Request) Execute() (*MemberGroupsResponse, *http.Response, error) {
	return r.ApiService.AccountAccountsGetGroupsV2Execute(r)
}

/*
AccountAccountsGetGroupsV2 Returns the list of groups in an account.

Returns the list of groups in an account.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `group_read`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param accountId The account ID Guid
 @return ApiAccountAccountsGetGroupsV2Request
*/
func (a *ESignUserManagementAPIService) AccountAccountsGetGroupsV2(ctx context.Context, organizationId string, accountId string) ApiAccountAccountsGetGroupsV2Request {
	return ApiAccountAccountsGetGroupsV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return MemberGroupsResponse
func (a *ESignUserManagementAPIService) AccountAccountsGetGroupsV2Execute(r ApiAccountAccountsGetGroupsV2Request) (*MemberGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.AccountAccountsGetGroupsV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/accounts/{accountId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountAccountsGetPermissionProfilesV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	accountId string
}

func (r ApiAccountAccountsGetPermissionProfilesV2Request) Execute() (*PermissionsResponse, *http.Response, error) {
	return r.ApiService.AccountAccountsGetPermissionProfilesV2Execute(r)
}

/*
AccountAccountsGetPermissionProfilesV2 Returns the list of permission profiles in an account.

Returns the list of permission profiles in an account.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `permission_read`.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param accountId The account ID Guid
 @return ApiAccountAccountsGetPermissionProfilesV2Request
*/
func (a *ESignUserManagementAPIService) AccountAccountsGetPermissionProfilesV2(ctx context.Context, organizationId string, accountId string) ApiAccountAccountsGetPermissionProfilesV2Request {
	return ApiAccountAccountsGetPermissionProfilesV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return PermissionsResponse
func (a *ESignUserManagementAPIService) AccountAccountsGetPermissionProfilesV2Execute(r ApiAccountAccountsGetPermissionProfilesV2Request) (*PermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.AccountAccountsGetPermissionProfilesV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/accounts/{accountId}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserDeleteIdentitiesV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	userId string
	requestModel *DeleteUserIdentityRequest
}

func (r ApiOrganizationUserDeleteIdentitiesV2Request) RequestModel(requestModel DeleteUserIdentityRequest) ApiOrganizationUserDeleteIdentitiesV2Request {
	r.requestModel = &requestModel
	return r
}

func (r ApiOrganizationUserDeleteIdentitiesV2Request) Execute() (*DeleteResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserDeleteIdentitiesV2Execute(r)
}

/*
OrganizationUserDeleteIdentitiesV2 Deletes user identities.

Deletes user identities.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param userId The user ID Guid
 @return ApiOrganizationUserDeleteIdentitiesV2Request
*/
func (a *ESignUserManagementAPIService) OrganizationUserDeleteIdentitiesV2(ctx context.Context, organizationId string, userId string) ApiOrganizationUserDeleteIdentitiesV2Request {
	return ApiOrganizationUserDeleteIdentitiesV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		userId: userId,
	}
}

// Execute executes the request
//  @return DeleteResponse
func (a *ESignUserManagementAPIService) OrganizationUserDeleteIdentitiesV2Execute(r ApiOrganizationUserDeleteIdentitiesV2Request) (*DeleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.OrganizationUserDeleteIdentitiesV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users/{userId}/identities"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestModel == nil {
		return localVarReturnValue, nil, reportError("requestModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserOrganizationUsersGetProfileV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	email *string
}

// The email address associated with the users you want to retrieve.  **Note:** This property is required.
func (r ApiOrganizationUserOrganizationUsersGetProfileV2Request) Email(email string) ApiOrganizationUserOrganizationUsersGetProfileV2Request {
	r.email = &email
	return r
}

func (r ApiOrganizationUserOrganizationUsersGetProfileV2Request) Execute() (*UsersDrilldownResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserOrganizationUsersGetProfileV2Execute(r)
}

/*
OrganizationUserOrganizationUsersGetProfileV2 Returns historical information about users with a specific email address. 

Returns historical information about users with a specific email address.
**Note:** The `email` query parameter is _required_.


To get a list of users in an organization,
use [Users: getUsers](/docs/admin-api/reference/usermanagement/users/getusers/)
instead.

For example, the following request gets information about
accounts that use `max@example.net` as an email address:


```json
GET /Management/v2/organizations/96e994fa-xxxx-xxxx-xxxx-c5fe9d1ccd10/users/profile?email=max@example.net

{
  "users": [
    {
      "id": "6b67a1ee-xxxx-xxxx-xxxx-385763624163",
      "site_id": 1,
      "site_name": "Monadnock",
      "user_name": "Max Example",
      "first_name": "Max",
      "last_name": "Example",
      "user_status": "active",
      "default_account_id": "f636f297-xxxx-xxxx-xxxx-8e7a14715950",
      "default_account_name": "BizCo",
      "is_organization_admin": false,
      "created_on": "2019-04-01T22:11:56.457",
      "memberships": [
        {
          "email": "max@example.net",
          "account_id": "624e3e00-xxxx-xxxx-xxxx-43918c520dab",
          "external_account_id": "17xxxxx1",
          "account_name": "LoanCo",
          "is_external_account": false,
          "status": "active",
          "permission_profile": { },
          "created_on": "2019-04-01T22:11:56.457",
          "groups": [ ],
          "is_admin": false
        },
        {
          "email": "max@example.net",
          "account_id": "f636f297-xxxx-xxxx-xxxx-8e7a14715950",
          "external_account_id": "25xxxxx0",
          "account_name": "BizCo",
          "is_external_account": true,
          "status": "active",
          "permission_profile": { },
          "created_on": "2021-07-07T15:10:51.96",
          "groups": [ ],
          "is_admin": false
        },
        {
          "email": "max@example.net",
          "account_id": "6aed3a52-xxxx-xxxx-xxxx-e89988167cfd",
          "external_account_id": "11xxxxx1",
          "account_name": "SleepCo",
          "is_external_account": true,
          "status": "closed",
          "permission_profile": { },
          "created_on": "2021-07-11T12:40:44.26",
          "groups": [],
          "is_admin": true,
          "closed_on": "2021-07-13T08:40:51.8"
        }
      ],
      "identities": [],
      "device_verification_enabled": false
    }
  ]
}
```

The response includes up to the first 20 users modified in the last 10 days.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.






 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationUserOrganizationUsersGetProfileV2Request
*/
func (a *ESignUserManagementAPIService) OrganizationUserOrganizationUsersGetProfileV2(ctx context.Context, organizationId string) ApiOrganizationUserOrganizationUsersGetProfileV2Request {
	return ApiOrganizationUserOrganizationUsersGetProfileV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return UsersDrilldownResponse
func (a *ESignUserManagementAPIService) OrganizationUserOrganizationUsersGetProfileV2Execute(r ApiOrganizationUserOrganizationUsersGetProfileV2Request) (*UsersDrilldownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersDrilldownResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.OrganizationUserOrganizationUsersGetProfileV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users/profile"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	accountId string
	request *NewAccountUserRequest
}

func (r ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request) Request(request NewAccountUserRequest) ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request {
	r.request = &request
	return r
}

func (r ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request) Execute() (*NewUserResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserOrganizationUsersPostAccountUsersV2Execute(r)
}

/*
OrganizationUserOrganizationUsersPostAccountUsersV2 Adds users to an account.

Adds users to an account.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param accountId The account ID Guid
 @return ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request
*/
func (a *ESignUserManagementAPIService) OrganizationUserOrganizationUsersPostAccountUsersV2(ctx context.Context, organizationId string, accountId string) ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request {
	return ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return NewUserResponse
func (a *ESignUserManagementAPIService) OrganizationUserOrganizationUsersPostAccountUsersV2Execute(r ApiOrganizationUserOrganizationUsersPostAccountUsersV2Request) (*NewUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NewUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.OrganizationUserOrganizationUsersPostAccountUsersV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/accounts/{accountId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserUsersActivateMembershipV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	userId string
	membershipId string
	request *ForceActivateMembershipRequest
}

func (r ApiOrganizationUserUsersActivateMembershipV2Request) Request(request ForceActivateMembershipRequest) ApiOrganizationUserUsersActivateMembershipV2Request {
	r.request = &request
	return r
}

func (r ApiOrganizationUserUsersActivateMembershipV2Request) Execute() (*UpdateResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserUsersActivateMembershipV2Execute(r)
}

/*
OrganizationUserUsersActivateMembershipV2 Activates user memberships.

Activates user memberships.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param userId The user ID Guid
 @param membershipId The membership ID GUID.
 @return ApiOrganizationUserUsersActivateMembershipV2Request
*/
func (a *ESignUserManagementAPIService) OrganizationUserUsersActivateMembershipV2(ctx context.Context, organizationId string, userId string, membershipId string) ApiOrganizationUserUsersActivateMembershipV2Request {
	return ApiOrganizationUserUsersActivateMembershipV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		userId: userId,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return UpdateResponse
func (a *ESignUserManagementAPIService) OrganizationUserUsersActivateMembershipV2Execute(r ApiOrganizationUserUsersActivateMembershipV2Request) (*UpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.OrganizationUserUsersActivateMembershipV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users/{userId}/memberships/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserUsersAddV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	request *NewUserRequest
}

func (r ApiOrganizationUserUsersAddV2Request) Request(request NewUserRequest) ApiOrganizationUserUsersAddV2Request {
	r.request = &request
	return r
}

func (r ApiOrganizationUserUsersAddV2Request) Execute() (*NewUserResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserUsersAddV2Execute(r)
}

/*
OrganizationUserUsersAddV2 Creates a new user.

Creates a new user.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationUserUsersAddV2Request
*/
func (a *ESignUserManagementAPIService) OrganizationUserUsersAddV2(ctx context.Context, organizationId string) ApiOrganizationUserUsersAddV2Request {
	return ApiOrganizationUserUsersAddV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return NewUserResponse
func (a *ESignUserManagementAPIService) OrganizationUserUsersAddV2Execute(r ApiOrganizationUserUsersAddV2Request) (*NewUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NewUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.OrganizationUserUsersAddV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserUsersCloseMembershipsV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	userId string
	request *DeleteMembershipsRequest
}

func (r ApiUserUsersCloseMembershipsV2Request) Request(request DeleteMembershipsRequest) ApiUserUsersCloseMembershipsV2Request {
	r.request = &request
	return r
}

func (r ApiUserUsersCloseMembershipsV2Request) Execute() (*DeleteMembershipsResponse, *http.Response, error) {
	return r.ApiService.UserUsersCloseMembershipsV2Execute(r)
}

/*
UserUsersCloseMembershipsV2 Closes a user's memberships.

Closes a user's memberships.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

This method requires user authentication. It will fail with an [application access token](/docs/admin-api/admin101/application-auth/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param userId The user ID Guid
 @return ApiUserUsersCloseMembershipsV2Request
*/
func (a *ESignUserManagementAPIService) UserUsersCloseMembershipsV2(ctx context.Context, organizationId string, userId string) ApiUserUsersCloseMembershipsV2Request {
	return ApiUserUsersCloseMembershipsV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		userId: userId,
	}
}

// Execute executes the request
//  @return DeleteMembershipsResponse
func (a *ESignUserManagementAPIService) UserUsersCloseMembershipsV2Execute(r ApiUserUsersCloseMembershipsV2Request) (*DeleteMembershipsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteMembershipsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.UserUsersCloseMembershipsV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users/{userId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserUsersUpdateV2Request struct {
	ctx context.Context
	ApiService *ESignUserManagementAPIService
	organizationId string
	request *UpdateUsersRequest
}

func (r ApiUserUsersUpdateV2Request) Request(request UpdateUsersRequest) ApiUserUsersUpdateV2Request {
	r.request = &request
	return r
}

func (r ApiUserUsersUpdateV2Request) Execute() (*UsersUpdateResponse, *http.Response, error) {
	return r.ApiService.UserUsersUpdateV2Execute(r)
}

/*
UserUsersUpdateV2 Updates a user's information.

Updates a user's information.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiUserUsersUpdateV2Request
*/
func (a *ESignUserManagementAPIService) UserUsersUpdateV2(ctx context.Context, organizationId string) ApiUserUsersUpdateV2Request {
	return ApiUserUsersUpdateV2Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return UsersUpdateResponse
func (a *ESignUserManagementAPIService) UserUsersUpdateV2Execute(r ApiUserUsersUpdateV2Request) (*UsersUpdateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersUpdateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ESignUserManagementAPIService.UserUsersUpdateV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/users/profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
