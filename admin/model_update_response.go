/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateResponse{}

// UpdateResponse A response.
type UpdateResponse struct {
	// The status of the request. 
	Status *string `json:"status,omitempty"`
}

// NewUpdateResponse instantiates a new UpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResponse() *UpdateResponse {
	this := UpdateResponse{}
	return &this
}

// NewUpdateResponseWithDefaults instantiates a new UpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResponseWithDefaults() *UpdateResponse {
	this := UpdateResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UpdateResponse) SetStatus(v string) {
	o.Status = &v
}

func (o UpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableUpdateResponse struct {
	value *UpdateResponse
	isSet bool
}

func (v NullableUpdateResponse) Get() *UpdateResponse {
	return v.value
}

func (v *NullableUpdateResponse) Set(val *UpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResponse(val *UpdateResponse) *NullableUpdateResponse {
	return &NullableUpdateResponse{value: val, isSet: true}
}

func (v NullableUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


