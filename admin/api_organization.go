/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// OrganizationAPIService OrganizationAPI service
type OrganizationAPIService service

type ApiOrganizationOrganizationGetListV2Request struct {
	ctx context.Context
	ApiService *OrganizationAPIService
	mode *string
}

// Specifies how to select the organizations. Valid values:  - &#x60;org_admin&#x60;: Returns organizations for which the authenticated user is an admin. - &#x60;account_membership&#x60;: Returns organizations that contain an account of which the authenticated user is a member  Default value: &#x60;org_admin&#x60;
func (r ApiOrganizationOrganizationGetListV2Request) Mode(mode string) ApiOrganizationOrganizationGetListV2Request {
	r.mode = &mode
	return r
}

func (r ApiOrganizationOrganizationGetListV2Request) Execute() (*OrganizationsResponse, *http.Response, error) {
	return r.ApiService.OrganizationOrganizationGetListV2Execute(r)
}

/*
OrganizationOrganizationGetListV2 Returns a list of organizations that the authenticated user belongs to.

Returns a list of organizations that the authenticated user belongs to.

Note that the DocuSign Admin API only returns JSON, not XML.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `organization_read`.

This method requires user authentication. It will fail with an [application access token](/docs/admin-api/admin101/application-auth/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOrganizationOrganizationGetListV2Request
*/
func (a *OrganizationAPIService) OrganizationOrganizationGetListV2(ctx context.Context) ApiOrganizationOrganizationGetListV2Request {
	return ApiOrganizationOrganizationGetListV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrganizationsResponse
func (a *OrganizationAPIService) OrganizationOrganizationGetListV2Execute(r ApiOrganizationOrganizationGetListV2Request) (*OrganizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationAPIService.OrganizationOrganizationGetListV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
