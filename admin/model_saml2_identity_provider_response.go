/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Saml2IdentityProviderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Saml2IdentityProviderResponse{}

// Saml2IdentityProviderResponse Information about a SAML 2.0 identity provider.
type Saml2IdentityProviderResponse struct {
	// The name of the certificate issuer.
	Issuer *string `json:"issuer,omitempty"`
	// A list of settings.
	Settings []SettingResponse `json:"settings,omitempty"`
	// A list of certificates responses.
	Certificates []CertificateResponse `json:"certificates,omitempty"`
	// A list of attribute mappings.
	AttributeMappings []RequiredAttributeMappingResponse `json:"attribute_mappings,omitempty"`
}

// NewSaml2IdentityProviderResponse instantiates a new Saml2IdentityProviderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaml2IdentityProviderResponse() *Saml2IdentityProviderResponse {
	this := Saml2IdentityProviderResponse{}
	return &this
}

// NewSaml2IdentityProviderResponseWithDefaults instantiates a new Saml2IdentityProviderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaml2IdentityProviderResponseWithDefaults() *Saml2IdentityProviderResponse {
	this := Saml2IdentityProviderResponse{}
	return &this
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *Saml2IdentityProviderResponse) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Saml2IdentityProviderResponse) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *Saml2IdentityProviderResponse) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *Saml2IdentityProviderResponse) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *Saml2IdentityProviderResponse) GetSettings() []SettingResponse {
	if o == nil || IsNil(o.Settings) {
		var ret []SettingResponse
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Saml2IdentityProviderResponse) GetSettingsOk() ([]SettingResponse, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *Saml2IdentityProviderResponse) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []SettingResponse and assigns it to the Settings field.
func (o *Saml2IdentityProviderResponse) SetSettings(v []SettingResponse) {
	o.Settings = v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *Saml2IdentityProviderResponse) GetCertificates() []CertificateResponse {
	if o == nil || IsNil(o.Certificates) {
		var ret []CertificateResponse
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Saml2IdentityProviderResponse) GetCertificatesOk() ([]CertificateResponse, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *Saml2IdentityProviderResponse) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []CertificateResponse and assigns it to the Certificates field.
func (o *Saml2IdentityProviderResponse) SetCertificates(v []CertificateResponse) {
	o.Certificates = v
}

// GetAttributeMappings returns the AttributeMappings field value if set, zero value otherwise.
func (o *Saml2IdentityProviderResponse) GetAttributeMappings() []RequiredAttributeMappingResponse {
	if o == nil || IsNil(o.AttributeMappings) {
		var ret []RequiredAttributeMappingResponse
		return ret
	}
	return o.AttributeMappings
}

// GetAttributeMappingsOk returns a tuple with the AttributeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Saml2IdentityProviderResponse) GetAttributeMappingsOk() ([]RequiredAttributeMappingResponse, bool) {
	if o == nil || IsNil(o.AttributeMappings) {
		return nil, false
	}
	return o.AttributeMappings, true
}

// HasAttributeMappings returns a boolean if a field has been set.
func (o *Saml2IdentityProviderResponse) HasAttributeMappings() bool {
	if o != nil && !IsNil(o.AttributeMappings) {
		return true
	}

	return false
}

// SetAttributeMappings gets a reference to the given []RequiredAttributeMappingResponse and assigns it to the AttributeMappings field.
func (o *Saml2IdentityProviderResponse) SetAttributeMappings(v []RequiredAttributeMappingResponse) {
	o.AttributeMappings = v
}

func (o Saml2IdentityProviderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Saml2IdentityProviderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	if !IsNil(o.AttributeMappings) {
		toSerialize["attribute_mappings"] = o.AttributeMappings
	}
	return toSerialize, nil
}

type NullableSaml2IdentityProviderResponse struct {
	value *Saml2IdentityProviderResponse
	isSet bool
}

func (v NullableSaml2IdentityProviderResponse) Get() *Saml2IdentityProviderResponse {
	return v.value
}

func (v *NullableSaml2IdentityProviderResponse) Set(val *Saml2IdentityProviderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSaml2IdentityProviderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSaml2IdentityProviderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaml2IdentityProviderResponse(val *Saml2IdentityProviderResponse) *NullableSaml2IdentityProviderResponse {
	return &NullableSaml2IdentityProviderResponse{value: val, isSet: true}
}

func (v NullableSaml2IdentityProviderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaml2IdentityProviderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


