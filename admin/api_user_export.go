/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserExportAPIService UserExportAPI service
type UserExportAPIService service

type ApiOrganizationExportOrganizationExportDeleteByExportIdRequest struct {
	ctx context.Context
	ApiService *UserExportAPIService
	organizationId string
	exportId string
}

func (r ApiOrganizationExportOrganizationExportDeleteByExportIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportDeleteByExportIdExecute(r)
}

/*
OrganizationExportOrganizationExportDeleteByExportId Deletes a single user list export request.

Deletes a single user list export request.
Use this method to delete pending or completed user export requests.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param exportId The export ID GUID for the request.
 @return ApiOrganizationExportOrganizationExportDeleteByExportIdRequest
*/
func (a *UserExportAPIService) OrganizationExportOrganizationExportDeleteByExportId(ctx context.Context, organizationId string, exportId string) ApiOrganizationExportOrganizationExportDeleteByExportIdRequest {
	return ApiOrganizationExportOrganizationExportDeleteByExportIdRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		exportId: exportId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *UserExportAPIService) OrganizationExportOrganizationExportDeleteByExportIdExecute(r ApiOrganizationExportOrganizationExportDeleteByExportIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserExportAPIService.OrganizationExportOrganizationExportDeleteByExportId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/user_list/{exportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exportId"+"}", url.PathEscape(parameterValueToString(r.exportId, "exportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationExportOrganizationExportGetRequest struct {
	ctx context.Context
	ApiService *UserExportAPIService
	organizationId string
}

func (r ApiOrganizationExportOrganizationExportGetRequest) Execute() (*OrganizationExportsResponse, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportGetExecute(r)
}

/*
OrganizationExportOrganizationExportGet Returns a list of pending and completed export requests.

Returns a list of pending and completed export requests.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationExportOrganizationExportGetRequest
*/
func (a *UserExportAPIService) OrganizationExportOrganizationExportGet(ctx context.Context, organizationId string) ApiOrganizationExportOrganizationExportGetRequest {
	return ApiOrganizationExportOrganizationExportGetRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationExportsResponse
func (a *UserExportAPIService) OrganizationExportOrganizationExportGetExecute(r ApiOrganizationExportOrganizationExportGetRequest) (*OrganizationExportsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationExportsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserExportAPIService.OrganizationExportOrganizationExportGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/user_list"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationExportOrganizationExportGetByExportIdRequest struct {
	ctx context.Context
	ApiService *UserExportAPIService
	organizationId string
	exportId string
}

func (r ApiOrganizationExportOrganizationExportGetByExportIdRequest) Execute() (*OrganizationExportResponse, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportGetByExportIdExecute(r)
}

/*
OrganizationExportOrganizationExportGetByExportId Returns the results for single user list export request.

Returns the results for single user list export request.

Given an export ID, this method returns the results of a single user list export request.
To get a list of all the export requests, use `getUserListExports`.

Note that the `metadata_url` property of the response from `createUserListExport` is a read-to-use HTTP GET request to get the status.

The results are available through a URL that
you can access through the `results` property of the response.
For example, to get the URL of the first result you might use
`results[0].url`

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @param exportId The export ID GUID for the request.
 @return ApiOrganizationExportOrganizationExportGetByExportIdRequest
*/
func (a *UserExportAPIService) OrganizationExportOrganizationExportGetByExportId(ctx context.Context, organizationId string, exportId string) ApiOrganizationExportOrganizationExportGetByExportIdRequest {
	return ApiOrganizationExportOrganizationExportGetByExportIdRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		exportId: exportId,
	}
}

// Execute executes the request
//  @return OrganizationExportResponse
func (a *UserExportAPIService) OrganizationExportOrganizationExportGetByExportIdExecute(r ApiOrganizationExportOrganizationExportGetByExportIdRequest) (*OrganizationExportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserExportAPIService.OrganizationExportOrganizationExportGetByExportId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/user_list/{exportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exportId"+"}", url.PathEscape(parameterValueToString(r.exportId, "exportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationExportOrganizationExportInsertRequest struct {
	ctx context.Context
	ApiService *UserExportAPIService
	organizationId string
	request *OrganizationExportRequest
}

func (r ApiOrganizationExportOrganizationExportInsertRequest) Request(request OrganizationExportRequest) ApiOrganizationExportOrganizationExportInsertRequest {
	r.request = &request
	return r
}

func (r ApiOrganizationExportOrganizationExportInsertRequest) Execute() (*OrganizationExportResponse, *http.Response, error) {
	return r.ApiService.OrganizationExportOrganizationExportInsertExecute(r)
}

/*
OrganizationExportOrganizationExportInsert Creates a user list export request.

Create a user list export request.

This method initiates a user list export request. You specify the type of export request as JSON in the body of method, like this:

``` json
{
	"type": "organization_memberships_export"
}
```

The export request type is one of three values:

| Value                                      | Description                                                                                             |
| :----------------------------------------- | :------------------------------------------------------------------------------------------------------ |
| `organization_memberships_export`          | Every user in every account in the organization. Users in multiple accounts will appear more than once. |
| `organization_domain_users_export`         | All users of the reserved domains.                                                                      |
| `organization_external_memberships_export` | Users whose email address domain is *not* linked to the organization.                                   |

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization ID Guid
 @return ApiOrganizationExportOrganizationExportInsertRequest
*/
func (a *UserExportAPIService) OrganizationExportOrganizationExportInsert(ctx context.Context, organizationId string) ApiOrganizationExportOrganizationExportInsertRequest {
	return ApiOrganizationExportOrganizationExportInsertRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationExportResponse
func (a *UserExportAPIService) OrganizationExportOrganizationExportInsertExecute(r ApiOrganizationExportOrganizationExportInsertRequest) (*OrganizationExportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserExportAPIService.OrganizationExportOrganizationExportInsert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/organizations/{organizationId}/exports/user_list"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
