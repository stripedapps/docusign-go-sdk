/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RemoveDSGroupUsersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveDSGroupUsersResponse{}

// RemoveDSGroupUsersResponse 
type RemoveDSGroupUsersResponse struct {
	// 
	IsSuccess *bool `json:"is_success,omitempty"`
	// 
	FailedUsers []DSGroupUserResponse `json:"failed_users,omitempty"`
}

// NewRemoveDSGroupUsersResponse instantiates a new RemoveDSGroupUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveDSGroupUsersResponse() *RemoveDSGroupUsersResponse {
	this := RemoveDSGroupUsersResponse{}
	return &this
}

// NewRemoveDSGroupUsersResponseWithDefaults instantiates a new RemoveDSGroupUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveDSGroupUsersResponseWithDefaults() *RemoveDSGroupUsersResponse {
	this := RemoveDSGroupUsersResponse{}
	return &this
}

// GetIsSuccess returns the IsSuccess field value if set, zero value otherwise.
func (o *RemoveDSGroupUsersResponse) GetIsSuccess() bool {
	if o == nil || IsNil(o.IsSuccess) {
		var ret bool
		return ret
	}
	return *o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveDSGroupUsersResponse) GetIsSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuccess) {
		return nil, false
	}
	return o.IsSuccess, true
}

// HasIsSuccess returns a boolean if a field has been set.
func (o *RemoveDSGroupUsersResponse) HasIsSuccess() bool {
	if o != nil && !IsNil(o.IsSuccess) {
		return true
	}

	return false
}

// SetIsSuccess gets a reference to the given bool and assigns it to the IsSuccess field.
func (o *RemoveDSGroupUsersResponse) SetIsSuccess(v bool) {
	o.IsSuccess = &v
}

// GetFailedUsers returns the FailedUsers field value if set, zero value otherwise.
func (o *RemoveDSGroupUsersResponse) GetFailedUsers() []DSGroupUserResponse {
	if o == nil || IsNil(o.FailedUsers) {
		var ret []DSGroupUserResponse
		return ret
	}
	return o.FailedUsers
}

// GetFailedUsersOk returns a tuple with the FailedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveDSGroupUsersResponse) GetFailedUsersOk() ([]DSGroupUserResponse, bool) {
	if o == nil || IsNil(o.FailedUsers) {
		return nil, false
	}
	return o.FailedUsers, true
}

// HasFailedUsers returns a boolean if a field has been set.
func (o *RemoveDSGroupUsersResponse) HasFailedUsers() bool {
	if o != nil && !IsNil(o.FailedUsers) {
		return true
	}

	return false
}

// SetFailedUsers gets a reference to the given []DSGroupUserResponse and assigns it to the FailedUsers field.
func (o *RemoveDSGroupUsersResponse) SetFailedUsers(v []DSGroupUserResponse) {
	o.FailedUsers = v
}

func (o RemoveDSGroupUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveDSGroupUsersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSuccess) {
		toSerialize["is_success"] = o.IsSuccess
	}
	if !IsNil(o.FailedUsers) {
		toSerialize["failed_users"] = o.FailedUsers
	}
	return toSerialize, nil
}

type NullableRemoveDSGroupUsersResponse struct {
	value *RemoveDSGroupUsersResponse
	isSet bool
}

func (v NullableRemoveDSGroupUsersResponse) Get() *RemoveDSGroupUsersResponse {
	return v.value
}

func (v *NullableRemoveDSGroupUsersResponse) Set(val *RemoveDSGroupUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveDSGroupUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveDSGroupUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveDSGroupUsersResponse(val *RemoveDSGroupUsersResponse) *NullableRemoveDSGroupUsersResponse {
	return &NullableRemoveDSGroupUsersResponse{value: val, isSet: true}
}

func (v NullableRemoveDSGroupUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveDSGroupUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


