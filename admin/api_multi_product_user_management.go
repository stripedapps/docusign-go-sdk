/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MultiProductUserManagementAPIService MultiProductUserManagementAPI service
type MultiProductUserManagementAPIService service

type ApiDocuSignGroupsv21AddDSGroupUsersV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	dsGroupId string
	dSGroupUsersAddRequest *DSGroupUsersAddRequest
}

func (r ApiDocuSignGroupsv21AddDSGroupUsersV21Request) DSGroupUsersAddRequest(dSGroupUsersAddRequest DSGroupUsersAddRequest) ApiDocuSignGroupsv21AddDSGroupUsersV21Request {
	r.dSGroupUsersAddRequest = &dSGroupUsersAddRequest
	return r
}

func (r ApiDocuSignGroupsv21AddDSGroupUsersV21Request) Execute() (*AddDSGroupAndUsersResponse, *http.Response, error) {
	return r.ApiService.DocuSignGroupsv21AddDSGroupUsersV21Execute(r)
}

/*
DocuSignGroupsv21AddDSGroupUsersV21 Adds a list of users to a DSGroup.

Adds a list of users to a DSGroup.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param dsGroupId The DSGroup's GUID.
 @return ApiDocuSignGroupsv21AddDSGroupUsersV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21AddDSGroupUsersV21(ctx context.Context, organizationId string, accountId string, dsGroupId string) ApiDocuSignGroupsv21AddDSGroupUsersV21Request {
	return ApiDocuSignGroupsv21AddDSGroupUsersV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		dsGroupId: dsGroupId,
	}
}

// Execute executes the request
//  @return AddDSGroupAndUsersResponse
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21AddDSGroupUsersV21Execute(r ApiDocuSignGroupsv21AddDSGroupUsersV21Request) (*AddDSGroupAndUsersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddDSGroupAndUsersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21AddDSGroupUsersV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsGroupId"+"}", url.PathEscape(parameterValueToString(r.dsGroupId, "dsGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dSGroupUsersAddRequest == nil {
		return localVarReturnValue, nil, reportError("dSGroupUsersAddRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dSGroupUsersAddRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocuSignGroupsv21AddDSGroupV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	addRequest *DSGroupAddRequest
}

func (r ApiDocuSignGroupsv21AddDSGroupV21Request) AddRequest(addRequest DSGroupAddRequest) ApiDocuSignGroupsv21AddDSGroupV21Request {
	r.addRequest = &addRequest
	return r
}

func (r ApiDocuSignGroupsv21AddDSGroupV21Request) Execute() (*DSGroupResponse, *http.Response, error) {
	return r.ApiService.DocuSignGroupsv21AddDSGroupV21Execute(r)
}

/*
DocuSignGroupsv21AddDSGroupV21 Creates a new DSGroup.

Creates a new DSGroup.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiDocuSignGroupsv21AddDSGroupV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21AddDSGroupV21(ctx context.Context, organizationId string, accountId string) ApiDocuSignGroupsv21AddDSGroupV21Request {
	return ApiDocuSignGroupsv21AddDSGroupV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return DSGroupResponse
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21AddDSGroupV21Execute(r ApiDocuSignGroupsv21AddDSGroupV21Request) (*DSGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DSGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21AddDSGroupV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addRequest == nil {
		return localVarReturnValue, nil, reportError("addRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocuSignGroupsv21DeleteDSGroupV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	dsGroupId string
}

func (r ApiDocuSignGroupsv21DeleteDSGroupV21Request) Execute() (*http.Response, error) {
	return r.ApiService.DocuSignGroupsv21DeleteDSGroupV21Execute(r)
}

/*
DocuSignGroupsv21DeleteDSGroupV21 Deletes a DSGroup.

Deletes a DSGroup.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param dsGroupId The DSGroup's GUID.
 @return ApiDocuSignGroupsv21DeleteDSGroupV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21DeleteDSGroupV21(ctx context.Context, organizationId string, accountId string, dsGroupId string) ApiDocuSignGroupsv21DeleteDSGroupV21Request {
	return ApiDocuSignGroupsv21DeleteDSGroupV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		dsGroupId: dsGroupId,
	}
}

// Execute executes the request
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21DeleteDSGroupV21Execute(r ApiDocuSignGroupsv21DeleteDSGroupV21Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21DeleteDSGroupV21")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsGroupId"+"}", url.PathEscape(parameterValueToString(r.dsGroupId, "dsGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDocuSignGroupsv21GetDSGroupUsersV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	dsGroupId string
	page *int32
	pageSize *int32
}

// Start page of DSGroups. 
func (r ApiDocuSignGroupsv21GetDSGroupUsersV21Request) Page(page int32) ApiDocuSignGroupsv21GetDSGroupUsersV21Request {
	r.page = &page
	return r
}

// Page size of DSGroups.
func (r ApiDocuSignGroupsv21GetDSGroupUsersV21Request) PageSize(pageSize int32) ApiDocuSignGroupsv21GetDSGroupUsersV21Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiDocuSignGroupsv21GetDSGroupUsersV21Request) Execute() (*DSGroupAndUsersResponse, *http.Response, error) {
	return r.ApiService.DocuSignGroupsv21GetDSGroupUsersV21Execute(r)
}

/*
DocuSignGroupsv21GetDSGroupUsersV21 Gets a list of users in a DSGroup.

Gets a list of users in a DSGroup.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param dsGroupId The DSGroup's GUID.
 @return ApiDocuSignGroupsv21GetDSGroupUsersV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21GetDSGroupUsersV21(ctx context.Context, organizationId string, accountId string, dsGroupId string) ApiDocuSignGroupsv21GetDSGroupUsersV21Request {
	return ApiDocuSignGroupsv21GetDSGroupUsersV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		dsGroupId: dsGroupId,
	}
}

// Execute executes the request
//  @return DSGroupAndUsersResponse
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21GetDSGroupUsersV21Execute(r ApiDocuSignGroupsv21GetDSGroupUsersV21Request) (*DSGroupAndUsersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DSGroupAndUsersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21GetDSGroupUsersV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsGroupId"+"}", url.PathEscape(parameterValueToString(r.dsGroupId, "dsGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocuSignGroupsv21GetDSGroupV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	dsGroupId string
}

func (r ApiDocuSignGroupsv21GetDSGroupV21Request) Execute() (*DSGroupResponse, *http.Response, error) {
	return r.ApiService.DocuSignGroupsv21GetDSGroupV21Execute(r)
}

/*
DocuSignGroupsv21GetDSGroupV21 Returns details about a single DSGroup.

Returns details about a single DSGroup.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param dsGroupId The DSGroup's ID GUID
 @return ApiDocuSignGroupsv21GetDSGroupV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21GetDSGroupV21(ctx context.Context, organizationId string, accountId string, dsGroupId string) ApiDocuSignGroupsv21GetDSGroupV21Request {
	return ApiDocuSignGroupsv21GetDSGroupV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		dsGroupId: dsGroupId,
	}
}

// Execute executes the request
//  @return DSGroupResponse
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21GetDSGroupV21Execute(r ApiDocuSignGroupsv21GetDSGroupV21Request) (*DSGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DSGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21GetDSGroupV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsGroupId"+"}", url.PathEscape(parameterValueToString(r.dsGroupId, "dsGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocuSignGroupsv21GetDSGroupsV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	page *int32
	pageSize *int32
}

// Start page of DSGroups.
func (r ApiDocuSignGroupsv21GetDSGroupsV21Request) Page(page int32) ApiDocuSignGroupsv21GetDSGroupsV21Request {
	r.page = &page
	return r
}

// Page size of DSGroups.
func (r ApiDocuSignGroupsv21GetDSGroupsV21Request) PageSize(pageSize int32) ApiDocuSignGroupsv21GetDSGroupsV21Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiDocuSignGroupsv21GetDSGroupsV21Request) Execute() (*DSGroupListResponse, *http.Response, error) {
	return r.ApiService.DocuSignGroupsv21GetDSGroupsV21Execute(r)
}

/*
DocuSignGroupsv21GetDSGroupsV21 Returns a list of DSGroups.

Returns a list of DSGroups.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiDocuSignGroupsv21GetDSGroupsV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21GetDSGroupsV21(ctx context.Context, organizationId string, accountId string) ApiDocuSignGroupsv21GetDSGroupsV21Request {
	return ApiDocuSignGroupsv21GetDSGroupsV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return DSGroupListResponse
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21GetDSGroupsV21Execute(r ApiDocuSignGroupsv21GetDSGroupsV21Request) (*DSGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DSGroupListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21GetDSGroupsV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	dsGroupId string
	dSGroupUsersRemoveRequest *DSGroupUsersRemoveRequest
}

func (r ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request) DSGroupUsersRemoveRequest(dSGroupUsersRemoveRequest DSGroupUsersRemoveRequest) ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request {
	r.dSGroupUsersRemoveRequest = &dSGroupUsersRemoveRequest
	return r
}

func (r ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request) Execute() (*RemoveDSGroupUsersResponse, *http.Response, error) {
	return r.ApiService.DocuSignGroupsv21RemoveDSGroupUsersV21Execute(r)
}

/*
DocuSignGroupsv21RemoveDSGroupUsersV21 Removes a list of users from a DSGroup.

Removes a list of users from a DSGroup. In the request body, you can specify users by ID or email address. If both parameters are included, the email address parameter will be ignored.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param dsGroupId The DSGroup's GUID.
 @return ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request
*/
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21RemoveDSGroupUsersV21(ctx context.Context, organizationId string, accountId string, dsGroupId string) ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request {
	return ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		dsGroupId: dsGroupId,
	}
}

// Execute executes the request
//  @return RemoveDSGroupUsersResponse
func (a *MultiProductUserManagementAPIService) DocuSignGroupsv21RemoveDSGroupUsersV21Execute(r ApiDocuSignGroupsv21RemoveDSGroupUsersV21Request) (*RemoveDSGroupUsersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveDSGroupUsersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.DocuSignGroupsv21RemoveDSGroupUsersV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsGroupId"+"}", url.PathEscape(parameterValueToString(r.dsGroupId, "dsGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dSGroupUsersRemoveRequest == nil {
		return localVarReturnValue, nil, reportError("dSGroupUsersRemoveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dSGroupUsersRemoveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationProductPermissionProfileGetProductPermissionProfilesRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
}

func (r ApiOrganizationProductPermissionProfileGetProductPermissionProfilesRequest) Execute() (*ProductPermissionProfilesResponse, *http.Response, error) {
	return r.ApiService.OrganizationProductPermissionProfileGetProductPermissionProfilesExecute(r)
}

/*
OrganizationProductPermissionProfileGetProductPermissionProfiles Gets products associated with the account and the available permission profiles.

Gets products associated with the account and the available permission profiles.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiOrganizationProductPermissionProfileGetProductPermissionProfilesRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileGetProductPermissionProfiles(ctx context.Context, organizationId string, accountId string) ApiOrganizationProductPermissionProfileGetProductPermissionProfilesRequest {
	return ApiOrganizationProductPermissionProfileGetProductPermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ProductPermissionProfilesResponse
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileGetProductPermissionProfilesExecute(r ApiOrganizationProductPermissionProfileGetProductPermissionProfilesRequest) (*ProductPermissionProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductPermissionProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationProductPermissionProfileGetProductPermissionProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	userId string
}

func (r ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesRequest) Execute() (*ProductPermissionProfilesResponse, *http.Response, error) {
	return r.ApiService.OrganizationProductPermissionProfileGetUserProductPermissionProfilesExecute(r)
}

/*
OrganizationProductPermissionProfileGetUserProductPermissionProfiles Retrieves a user's product permission profiles by user ID.

Retrieves a list of a user's permission profiles for each account's product. The user is specified by the ID provided in the `userId` path parameter.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param userId The user ID GUID.
 @return ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileGetUserProductPermissionProfiles(ctx context.Context, organizationId string, accountId string, userId string) ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesRequest {
	return ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProductPermissionProfilesResponse
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileGetUserProductPermissionProfilesExecute(r ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesRequest) (*ProductPermissionProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductPermissionProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationProductPermissionProfileGetUserProductPermissionProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users/{userId}/permission_profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	email *string
}

// The email address of the user.  **Note:** This property is required.
func (r ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest) Email(email string) ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest {
	r.email = &email
	return r
}

func (r ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest) Execute() (*UserProductPermissionProfilesResponse, *http.Response, error) {
	return r.ApiService.OrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailExecute(r)
}

/*
OrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmail Retrieves a user's product permission profiles by email address.

Retrieves a list of a user's permission profiles for each account's product. The user is specified by the email address provided in the `email` query parameter.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmail(ctx context.Context, organizationId string, accountId string) ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest {
	return ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return UserProductPermissionProfilesResponse
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailExecute(r ApiOrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmailRequest) (*UserProductPermissionProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserProductPermissionProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationProductPermissionProfileGetUserProductPermissionProfilesByEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	userId string
	productPermissionProfilesRequest *ProductPermissionProfilesRequest
}

func (r ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest) ProductPermissionProfilesRequest(productPermissionProfilesRequest ProductPermissionProfilesRequest) ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest {
	r.productPermissionProfilesRequest = &productPermissionProfilesRequest
	return r
}

func (r ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest) Execute() (*UserProductPermissionProfilesResponse, *http.Response, error) {
	return r.ApiService.OrganizationProductPermissionProfilePostUserProductPermissionProfilesExecute(r)
}

/*
OrganizationProductPermissionProfilePostUserProductPermissionProfiles Assigns permission profiles for a user by user ID.

Sets permission profiles for one or more products for a given user. The user is specified by the `userId` path parameter.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @param userId The user ID GUID.
 @return ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfilePostUserProductPermissionProfiles(ctx context.Context, organizationId string, accountId string, userId string) ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest {
	return ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserProductPermissionProfilesResponse
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfilePostUserProductPermissionProfilesExecute(r ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesRequest) (*UserProductPermissionProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserProductPermissionProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationProductPermissionProfilePostUserProductPermissionProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users/{userId}/permission_profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productPermissionProfilesRequest == nil {
		return localVarReturnValue, nil, reportError("productPermissionProfilesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.productPermissionProfilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	userProductPermissionProfilesRequest *UserProductPermissionProfilesRequest
}

func (r ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest) UserProductPermissionProfilesRequest(userProductPermissionProfilesRequest UserProductPermissionProfilesRequest) ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest {
	r.userProductPermissionProfilesRequest = &userProductPermissionProfilesRequest
	return r
}

func (r ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest) Execute() (*UserProductPermissionProfilesResponse, *http.Response, error) {
	return r.ApiService.OrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailExecute(r)
}

/*
OrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmail Assigns permission profiles for a user by email address.

Sets permission profiles for one or more products for a given user. The user is specified by the `email` property in the request body.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmail(ctx context.Context, organizationId string, accountId string) ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest {
	return ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return UserProductPermissionProfilesResponse
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailExecute(r ApiOrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmailRequest) (*UserProductPermissionProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserProductPermissionProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationProductPermissionProfilePostUserProductPermissionProfilesByEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userProductPermissionProfilesRequest == nil {
		return localVarReturnValue, nil, reportError("userProductPermissionProfilesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userProductPermissionProfilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationProductPermissionProfileRemoveUserProductsRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	userProductPermissionProfilesRequest *UserProductProfileDeleteRequest
}

func (r ApiOrganizationProductPermissionProfileRemoveUserProductsRequest) UserProductPermissionProfilesRequest(userProductPermissionProfilesRequest UserProductProfileDeleteRequest) ApiOrganizationProductPermissionProfileRemoveUserProductsRequest {
	r.userProductPermissionProfilesRequest = &userProductPermissionProfilesRequest
	return r
}

func (r ApiOrganizationProductPermissionProfileRemoveUserProductsRequest) Execute() (*RemoveUserProductsResponse, *http.Response, error) {
	return r.ApiService.OrganizationProductPermissionProfileRemoveUserProductsExecute(r)
}

/*
OrganizationProductPermissionProfileRemoveUserProducts Revokes a user's access to one or more products.

Revokes a specified user's access to one or more products.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiOrganizationProductPermissionProfileRemoveUserProductsRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileRemoveUserProducts(ctx context.Context, organizationId string, accountId string) ApiOrganizationProductPermissionProfileRemoveUserProductsRequest {
	return ApiOrganizationProductPermissionProfileRemoveUserProductsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return RemoveUserProductsResponse
func (a *MultiProductUserManagementAPIService) OrganizationProductPermissionProfileRemoveUserProductsExecute(r ApiOrganizationProductPermissionProfileRemoveUserProductsRequest) (*RemoveUserProductsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveUserProductsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationProductPermissionProfileRemoveUserProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userProductPermissionProfilesRequest == nil {
		return localVarReturnValue, nil, reportError("userProductPermissionProfilesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userProductPermissionProfilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	userId string
	sort *bool
}

// When **true,** sorts the results in ascending order by account name.
func (r ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest) Sort(sort bool) ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest {
	r.sort = &sort
	return r
}

func (r ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest) Execute() (*UsersDrilldownResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserOrganizationUsersGetDSProfileByUserIdExecute(r)
}

/*
OrganizationUserOrganizationUsersGetDSProfileByUserId Retrieves the DS profile for a user specified by ID.

Gets information about a user specified by the `userId` query parameter.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param userId The user ID GUID.
 @return ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationUserOrganizationUsersGetDSProfileByUserId(ctx context.Context, organizationId string, userId string) ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest {
	return ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		userId: userId,
	}
}

// Execute executes the request
//  @return UsersDrilldownResponse
func (a *MultiProductUserManagementAPIService) OrganizationUserOrganizationUsersGetDSProfileByUserIdExecute(r ApiOrganizationUserOrganizationUsersGetDSProfileByUserIdRequest) (*UsersDrilldownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersDrilldownResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationUserOrganizationUsersGetDSProfileByUserId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/users/{userId}/dsprofile"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserOrganizationUsersGetDSProfilesRequest struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	email *string
	sort *bool
}

// The email address of the user.  **Note:** This property is required.
func (r ApiOrganizationUserOrganizationUsersGetDSProfilesRequest) Email(email string) ApiOrganizationUserOrganizationUsersGetDSProfilesRequest {
	r.email = &email
	return r
}

// When **true,** sorts the results in ascending order by account name.
func (r ApiOrganizationUserOrganizationUsersGetDSProfilesRequest) Sort(sort bool) ApiOrganizationUserOrganizationUsersGetDSProfilesRequest {
	r.sort = &sort
	return r
}

func (r ApiOrganizationUserOrganizationUsersGetDSProfilesRequest) Execute() (*UsersDrilldownResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserOrganizationUsersGetDSProfilesExecute(r)
}

/*
OrganizationUserOrganizationUsersGetDSProfiles Retrieves the DS profile for a user specified by email address.

Gets information about a user specified by the `email` query parameter.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @return ApiOrganizationUserOrganizationUsersGetDSProfilesRequest
*/
func (a *MultiProductUserManagementAPIService) OrganizationUserOrganizationUsersGetDSProfiles(ctx context.Context, organizationId string) ApiOrganizationUserOrganizationUsersGetDSProfilesRequest {
	return ApiOrganizationUserOrganizationUsersGetDSProfilesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return UsersDrilldownResponse
func (a *MultiProductUserManagementAPIService) OrganizationUserOrganizationUsersGetDSProfilesExecute(r ApiOrganizationUserOrganizationUsersGetDSProfilesRequest) (*UsersDrilldownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersDrilldownResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationUserOrganizationUsersGetDSProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/users/dsprofile"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request struct {
	ctx context.Context
	ApiService *MultiProductUserManagementAPIService
	organizationId string
	accountId string
	request *NewMultiProductUserAddRequest
}

func (r ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request) Request(request NewMultiProductUserAddRequest) ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request {
	r.request = &request
	return r
}

func (r ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request) Execute() (*AddUserResponse, *http.Response, error) {
	return r.ApiService.OrganizationUserOrganizationUsersPostAccountUsersV21Execute(r)
}

/*
OrganizationUserOrganizationUsersPostAccountUsersV21 Creates and updates a multi-product user.

Creates and updates a multi-product user.

[Required authentication scopes](/docs/admin-api/admin101/auth/): `user_write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organization's GUID. 
 @param accountId The account ID GUID.
 @return ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request
*/
func (a *MultiProductUserManagementAPIService) OrganizationUserOrganizationUsersPostAccountUsersV21(ctx context.Context, organizationId string, accountId string) ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request {
	return ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AddUserResponse
func (a *MultiProductUserManagementAPIService) OrganizationUserOrganizationUsersPostAccountUsersV21Execute(r ApiOrganizationUserOrganizationUsersPostAccountUsersV21Request) (*AddUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiProductUserManagementAPIService.OrganizationUserOrganizationUsersPostAccountUsersV21")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/organizations/{organizationId}/accounts/{accountId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
