/*
DocuSign Admin API

An API for an organization administrator to manage organizations, accounts and users

API version: v2.1
Contact: devcenter@docusign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrganizationExportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationExportRequest{}

// OrganizationExportRequest Enables you to specify the kind of export request.
type OrganizationExportRequest struct {
	// The type of export requested. One of:  - `organization_domain_users_export`: All users of the reserved domains. - `organization_external_memberships_export`: Users whose email address domain is *not* linked to the organization.  - `organization_memberships_export`: Every user in every account in the organization. Users in multiple accounts will appear more than once. - `organization_account_settings_export`: This value only applies to requests to export account settings.
	Type *string `json:"type,omitempty"`
	// 
	Accounts []OrganizationExportAccount `json:"accounts,omitempty"`
	// 
	Domains []OrganizationExportDomain `json:"domains,omitempty"`
}

// NewOrganizationExportRequest instantiates a new OrganizationExportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationExportRequest() *OrganizationExportRequest {
	this := OrganizationExportRequest{}
	return &this
}

// NewOrganizationExportRequestWithDefaults instantiates a new OrganizationExportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationExportRequestWithDefaults() *OrganizationExportRequest {
	this := OrganizationExportRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrganizationExportRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationExportRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrganizationExportRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OrganizationExportRequest) SetType(v string) {
	o.Type = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *OrganizationExportRequest) GetAccounts() []OrganizationExportAccount {
	if o == nil || IsNil(o.Accounts) {
		var ret []OrganizationExportAccount
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationExportRequest) GetAccountsOk() ([]OrganizationExportAccount, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *OrganizationExportRequest) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []OrganizationExportAccount and assigns it to the Accounts field.
func (o *OrganizationExportRequest) SetAccounts(v []OrganizationExportAccount) {
	o.Accounts = v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *OrganizationExportRequest) GetDomains() []OrganizationExportDomain {
	if o == nil || IsNil(o.Domains) {
		var ret []OrganizationExportDomain
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationExportRequest) GetDomainsOk() ([]OrganizationExportDomain, bool) {
	if o == nil || IsNil(o.Domains) {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *OrganizationExportRequest) HasDomains() bool {
	if o != nil && !IsNil(o.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []OrganizationExportDomain and assigns it to the Domains field.
func (o *OrganizationExportRequest) SetDomains(v []OrganizationExportDomain) {
	o.Domains = v
}

func (o OrganizationExportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationExportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	return toSerialize, nil
}

type NullableOrganizationExportRequest struct {
	value *OrganizationExportRequest
	isSet bool
}

func (v NullableOrganizationExportRequest) Get() *OrganizationExportRequest {
	return v.value
}

func (v *NullableOrganizationExportRequest) Set(val *OrganizationExportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationExportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationExportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationExportRequest(val *OrganizationExportRequest) *NullableOrganizationExportRequest {
	return &NullableOrganizationExportRequest{value: val, isSet: true}
}

func (v NullableOrganizationExportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationExportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


